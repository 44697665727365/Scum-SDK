#pragma once 
#include <ConZ_Structs.h>
 
 
 
class UAnimNotify_CharacterActionEnd
{
public:
	UAnimNotify_CharacterActionEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionManipulateTrapDescription
{
public:
	UPrisonerActionManipulateTrapDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AAchievementsManagerClient
{
public:
	AAchievementsManagerClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABombDefusalMinigame
{
public:
	ABombDefusalMinigame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABirdTargetPoint
{
public:
	ABirdTargetPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsOccupied() {
		return memory.read<bool>(m_addr + 544);
	}

private:
	std::uint64_t m_addr = 0;
};


class APracticeLockpickingItem
{
public:
	APracticeLockpickingItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct ULockData> Get_possibleLocks() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2328);
		return struct TArray<struct ULockData>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_DisablePrisonerBodyEffects
{
public:
	UAdminCommand_DisablePrisonerBodyEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdjustableSeparator
{
public:
	UAdjustableSeparator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USizeBox Get_slotSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct USizeBox(ptr_addr);
	}
	struct UNamedSlot Get_divider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UNamedSlot(ptr_addr);
	}
	float Get_slotMinHeight() {
		return memory.read<float>(m_addr + 624);
	}
	float Get_slotMaxHeight() {
		return memory.read<float>(m_addr + 628);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDropdownMenuWidget
{
public:
	UDropdownMenuWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScrollBox GetScrollPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UScrollBox(ptr_addr);
	}
	struct UNamedSlot Get_panelSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UNamedSlot(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingPanelWidget
{
public:
	UCookingPanelWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTabContainer Get_panelTabsContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTabContainer(ptr_addr);
	}
	struct UWidgetSwitcher Get_mainSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UCookingUtilitySlotsPanel Get_cookingUtilitySlotsPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UCookingUtilitySlotsPanel(ptr_addr);
	}
	struct UCookingRecipesPanel Get_cookingRecipesPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UCookingRecipesPanel(ptr_addr);
	}
	float Get_checkIngredientsValidityPeriod() {
		return memory.read<float>(m_addr + 648);
	}
	float Get_checkVicinityHeatSourceItemsPeriod() {
		return memory.read<float>(m_addr + 652);
	}
	float Get_updateProgressBarColorsPeriod() {
		return memory.read<float>(m_addr + 656);
	}

private:
	std::uint64_t m_addr = 0;
};


class URemoveMagazineInsertMagazine
{
public:
	URemoveMagazineInsertMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_DestroyVehicle
{
public:
	UAdminCommand_DestroyVehicle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEntityComponentSetup
{
public:
	UEntityComponentSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBoundsRadius() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_DestroyCorpsesWithinRadius
{
public:
	UAdminCommand_DestroyCorpsesWithinRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGrappleActionParameters
{
public:
	UGrappleActionParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsGrappleAttackInWater() {
		return memory.read<bool>(m_addr + 48);
	}
	struct UAnimMontage GetGrapplerInitialGrabMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAkAudioEvent GetStartGrappleAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopGrappleAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FName GetAttackerAttachSocketName() {
		return memory.read<struct FName>(m_addr + 80);
	}
	struct FName GetDefenderAttachBoneName() {
		return memory.read<struct FName>(m_addr + 88);
	}
	float GetDefenderReleaseOffset() {
		return memory.read<float>(m_addr + 96);
	}
	float GetDefensePercentageIncreasePerInput() {
		return memory.read<float>(m_addr + 100);
	}
	float GetDefensePercentageDecreasePerSecond() {
		return memory.read<float>(m_addr + 104);
	}
	float GetDefenseBarSweetSpotSizePercentage() {
		return memory.read<float>(m_addr + 108);
	}
	float GetReleaseBarPercentageIncreasePerSecond() {
		return memory.read<float>(m_addr + 112);
	}
	float GetReleaseBarPercentageDecreasePerSecond() {
		return memory.read<float>(m_addr + 116);
	}
	struct FTransform GetCameraSpringArmOffset() {
		return memory.read<struct FTransform>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInv2021_VirtualizedInventoryElement
{
public:
	UInv2021_VirtualizedInventoryElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABuilding
{
public:
	ABuilding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLadderMarker> Get_ladderMarkers() {
		return memory.read<struct TArray<struct FLadderMarker>>(m_addr + 560);
	}
	struct TArray<struct FWindowMarker> Get_windowMarkers() {
		return memory.read<struct TArray<struct FWindowMarker>>(m_addr + 592);
	}
	struct TArray<struct FWindowMarker> Get_windowMarkersDynamic() {
		return memory.read<struct TArray<struct FWindowMarker>>(m_addr + 608);
	}
	struct TArray<struct FWindowMarkerModifier> Get_windowMarkerModifiers() {
		return memory.read<struct TArray<struct FWindowMarkerModifier>>(m_addr + 624);
	}
	bool Get_isCleared() {
		return memory.read<bool>(m_addr + 640);
	}
	bool Get_isClaimable() {
		return memory.read<bool>(m_addr + 641);
	}
	struct TMap<struct FString, struct ADoor> Get_doors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct TMap<struct FString, struct ADoor>(ptr_addr);
	}
	struct TArray<struct UFortificationComponent> Get_fortifications() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct TArray<struct UFortificationComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemStatusWidget
{
public:
	UItemStatusWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UServerSettingsUIController
{
public:
	UServerSettingsUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AAchievementsManagerServer
{
public:
	AAchievementsManagerServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDrainVehicleFuelIntoItem
{
public:
	UPrisonerActionDrainVehicleFuelIntoItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_CompleteMission
{
public:
	UAdminCommand_CompleteMission(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_DoorDebug
{
public:
	UAdminCommand_DoorDebug(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UArchitecturalCategoriesDatabase
{
public:
	UArchitecturalCategoriesDatabase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UArchitecturalCategory> GetArchitecturalCategories() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct UArchitecturalCategory>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class APlaceableActorBase
{
public:
	APlaceableActorBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId Get_id() {
		return memory.read<struct FDbIntegerId>(m_addr + 552);
	}
	struct UBoxComponent Get_boxCollisionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UBoxComponent(ptr_addr);
	}
	struct UPlaceableCraftableItem Get_craftableItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UPlaceableCraftableItem(ptr_addr);
	}
	float Get_ingredientMultiplier() {
		return memory.read<float>(m_addr + 584);
	}
	struct USceneComponent Get_rootComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct USceneComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_staticMeshComponent_Main() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_staticMeshComponent_Outline() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_staticMeshComponent_Depth() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_queryStaticMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_directionIndicatorStaticMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_primaryMaterialAllowed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_primaryMaterialDisallowed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_outlineMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_depthMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	uint8_t  Get_statusFlags() {
		return memory.read<uint8_t >(m_addr + 872);
	}
	uint8_t  Get_placementState() {
		return memory.read<uint8_t >(m_addr + 904);
	}
	int32_t Get_numTracesX() {
		return memory.read<int32_t>(m_addr + 1028);
	}
	int32_t Get_numTracesY() {
		return memory.read<int32_t>(m_addr + 1032);
	}
	float Get_traceHeightFactor() {
		return memory.read<float>(m_addr + 1036);
	}
	float Get_maxPlacementAngle() {
		return memory.read<float>(m_addr + 1040);
	}
	struct TArray<struct FPlaceableIngredient> Get_ingredients() {
		return memory.read<struct TArray<struct FPlaceableIngredient>>(m_addr + 1048);
	}
	float Get_widgetHidingDistance() {
		return memory.read<float>(m_addr + 1064);
	}
	float Get_fullWidgetHidingDistance() {
		return memory.read<float>(m_addr + 1068);
	}
	float Get_widgetSwitchPeriod() {
		return memory.read<float>(m_addr + 1072);
	}
	float Get_minDistanceToShowWidget() {
		return memory.read<float>(m_addr + 1076);
	}
	float Get_syncPeriod() {
		return memory.read<float>(m_addr + 1080);
	}
	float Get_reachabilityMaxDifference() {
		return memory.read<float>(m_addr + 1084);
	}
	float Get_directionIndicatorOffset() {
		return memory.read<float>(m_addr + 1088);
	}
	struct FText Get_destroyInteractionText() {
		return memory.read<struct FText>(m_addr + 1096);
	}
	struct FVector Get_replicatedLocation() {
		return memory.read<struct FVector>(m_addr + 1120);
	}
	struct FVector Get_replicatedPlacedLocation() {
		return memory.read<struct FVector>(m_addr + 1132);
	}
	struct FRotator Get_replicatedRotation() {
		return memory.read<struct FRotator>(m_addr + 1144);
	}
	struct UMaterialInterface Get_placementAllowedMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1216);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface Get_placementDisallowedMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1224);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface Get_outlineMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1232);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface Get_depthMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1240);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UContainerItemDescriptor
{
public:
	UContainerItemDescriptor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject Get_itemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return UObject(ptr_addr);
	}
	struct FContainerItemDescriptorData Get_data() {
		return memory.read<struct FContainerItemDescriptorData>(m_addr + 128);
	}
	struct TScriptInterface<IInventoryContainer> Get_owningContainer() {
		return memory.read<struct TScriptInterface<IInventoryContainer>>(m_addr + 224);
	}
	struct TScriptInterface<IInventoryNode> Get_owningNode() {
		return memory.read<struct TScriptInterface<IInventoryNode>>(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInv2021_InventoryStatics
{
public:
	UInv2021_InventoryStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UActionProgressWidget
{
public:
	UActionProgressWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetActionProgressFinishedEvent() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 608);
	}
	struct FMulticastInlineDelegate GetActionProgressCancelledEvent() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 624);
	}
	bool GetCanCancel() {
		return memory.read<bool>(m_addr + 640);
	}
	float Get_currentTime() {
		return memory.read<float>(m_addr + 652);
	}
	float Get_duration() {
		return memory.read<float>(m_addr + 656);
	}
	bool Get_manualMode() {
		return memory.read<bool>(m_addr + 660);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAttributeMapInterface
{
public:
	UAttributeMapInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFoliageAssetData
{
public:
	UFoliageAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFoliageGeneralData GetGeneralData() {
		return memory.read<struct FFoliageGeneralData>(m_addr + 40);
	}
	struct FFoliageEffectsData GetEffectsData() {
		return memory.read<struct FFoliageEffectsData>(m_addr + 56);
	}
	struct FFoliageAIPerceptionData GetAIPerceptionData() {
		return memory.read<struct FFoliageAIPerceptionData>(m_addr + 80);
	}
	struct FFoliageCanopyData GetCanopyData() {
		return memory.read<struct FFoliageCanopyData>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListSquads
{
public:
	UAdminCommand_ListSquads(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAppearanceDataAsset
{
public:
	UPrisonerAppearanceDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetRequiresGameUpgrade() {
		return memory.read<bool>(m_addr + 48);
	}
	uint8_t  GetGameUpgradeRequired() {
		return memory.read<uint8_t >(m_addr + 49);
	}
	struct TArray<struct UCharacterMesh> GetCharacterMeshes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct UCharacterMesh>(ptr_addr);
	}
	struct TMap<struct FName, struct TSoftObjectPtr<UMaterialInstance>> GetSkinMaterials() {
		return memory.read<struct TMap<struct FName, struct TSoftObjectPtr<UMaterialInstance>>>(m_addr + 72);
	}
	struct FGameplayTag GetTypeTag() {
		return memory.read<struct FGameplayTag>(m_addr + 152);
	}
	struct FGameplayTag GetRaceTag() {
		return memory.read<struct FGameplayTag>(m_addr + 160);
	}
	struct FName GetCharacterAkSwitchValue() {
		return memory.read<struct FName>(m_addr + 168);
	}
	struct FName GetLeftEyeSocketName() {
		return memory.read<struct FName>(m_addr + 176);
	}
	struct FName GetRightEyeSocketName() {
		return memory.read<struct FName>(m_addr + 184);
	}
	int32_t GetDefaultHairStyleIndex() {
		return memory.read<int32_t>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCharacterSlot
{
public:
	UCharacterSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UConZStandardButton Get_profileButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UButton Get_deleteButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_EndTournamentMode
{
public:
	UAdminCommand_EndTournamentMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_SpawnDefecationEffects
{
public:
	UAnimNotify_SpawnDefecationEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBaseBuildingComponent
{
public:
	UBaseBuildingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Get_name() {
		return memory.read<struct FString>(m_addr + 1248);
	}
	uint8_t  Get_baseElementType() {
		return memory.read<uint8_t >(m_addr + 1264);
	}
	bool Get_forbidPlacementOfOtherElements() {
		return memory.read<bool>(m_addr + 1268);
	}
	bool Get_isClimbable() {
		return memory.read<bool>(m_addr + 1269);
	}
	bool Get_isBlockingItemPlacement() {
		return memory.read<bool>(m_addr + 1270);
	}
	struct TArray<struct UStaticMesh> Get_staticMeshVariations() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return struct TArray<struct UStaticMesh>(ptr_addr);
	}
	struct UChoppingRecipeDataAsset Get_choppingRecipeAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1288);
		return struct UChoppingRecipeDataAsset(ptr_addr);
	}
	float Get_healthPoints() {
		return memory.read<float>(m_addr + 1296);
	}
	bool Get_canBeDamaged() {
		return memory.read<bool>(m_addr + 1300);
	}
	float Get_hoursToDecay() {
		return memory.read<float>(m_addr + 1304);
	}
	float Get_hoursToDecayOutsideFlagArea() {
		return memory.read<float>(m_addr + 1308);
	}
	bool Get_isUsedForRespawn() {
		return memory.read<bool>(m_addr + 1312);
	}
	float Get_explosionResistance() {
		return memory.read<float>(m_addr + 1316);
	}
	struct UCurveFloat Get_collisionDamageModifierFromEnergy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1320);
		return struct UCurveFloat(ptr_addr);
	}
	struct UStaticMesh Get_weatherMaskMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1328);
		return struct UStaticMesh(ptr_addr);
	}
	bool Get_canBePlacedWithoutFlag() {
		return memory.read<bool>(m_addr + 1336);
	}
	bool Get_canBePlacedInBuilding() {
		return memory.read<bool>(m_addr + 1337);
	}
	bool Get_canBePlacedInRestrictedArea() {
		return memory.read<bool>(m_addr + 1338);
	}
	int32_t Get_maxInstancesPerFlagArea() {
		return memory.read<int32_t>(m_addr + 1340);
	}
	struct UPlaceableCraftableItem Get_upgradeRecipe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1344);
		return struct UPlaceableCraftableItem(ptr_addr);
	}
	bool Get_cascadeDestroySnappedElementsOnUpgrade() {
		return memory.read<bool>(m_addr + 1352);
	}
	bool Get_ignoreDisabledBaseBuildingFlag() {
		return memory.read<bool>(m_addr + 1353);
	}
	bool Get_isTileable() {
		return memory.read<bool>(m_addr + 1354);
	}
	bool Get_mustBePlacedOnFoundation() {
		return memory.read<bool>(m_addr + 1355);
	}
	bool Get_canEverBePlacedOnFoundation() {
		return memory.read<bool>(m_addr + 1356);
	}
	bool Get_canBePlacedOnOtherBaseElements() {
		return memory.read<bool>(m_addr + 1357);
	}
	bool Get_canBePlacedWithoutSnapping() {
		return memory.read<bool>(m_addr + 1358);
	}
	bool Get_shouldIgnoreSelfWhilePlacing() {
		return memory.read<bool>(m_addr + 1359);
	}
	bool Get_canBeGroundedOnOtherElements() {
		return memory.read<bool>(m_addr + 1360);
	}
	char Get_maxHeightLevel() {
		return memory.read<char>(m_addr + 1361);
	}
	float Get_maxHeightDifference() {
		return memory.read<float>(m_addr + 1364);
	}
	bool Get_addRandomRotation() {
		return memory.read<bool>(m_addr + 1368);
	}
	bool Get_mustGroundAllPoints() {
		return memory.read<bool>(m_addr + 1369);
	}
	bool Get_mustBePlacedUpright() {
		return memory.read<bool>(m_addr + 1370);
	}
	uint8_t  Get_placementHeightType() {
		return memory.read<uint8_t >(m_addr + 1371);
	}
	bool Get_useSimpleCollisionForOverlaps() {
		return memory.read<bool>(m_addr + 1372);
	}
	struct FRotator Get_maxRotationWhilePlacing() {
		return memory.read<struct FRotator>(m_addr + 1376);
	}
	bool Get_useEncapsulationTestWhenSnapping() {
		return memory.read<bool>(m_addr + 1388);
	}
	struct TArray<struct FElementSnapMarker> Get_elementSnapMarkers() {
		return memory.read<struct TArray<struct FElementSnapMarker>>(m_addr + 1392);
	}
	struct TArray<struct FBaseBuildingSizeVariation> Get_sizeVariations() {
		return memory.read<struct TArray<struct FBaseBuildingSizeVariation>>(m_addr + 1408);
	}
	float Get_sizeVariationsSpacing() {
		return memory.read<float>(m_addr + 1428);
	}
	float Get_repairTime() {
		return memory.read<float>(m_addr + 1432);
	}
	struct FRepairableParams Get_repairableParams() {
		return memory.read<struct FRepairableParams>(m_addr + 1440);
	}
	float Get_experienceAwardForBuilding() {
		return memory.read<float>(m_addr + 1496);
	}
	struct TArray<struct UParticleSystem> Get_destructionParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1504);
		return struct TArray<struct UParticleSystem>(ptr_addr);
	}
	struct TArray<struct FTransform> Get_destructionParticlesSpawnTransforms() {
		return memory.read<struct TArray<struct FTransform>>(m_addr + 1520);
	}
	struct UAkAudioEvent Get_destructionSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1536);
		return struct UAkAudioEvent(ptr_addr);
	}
	bool Get_isDoor() {
		return memory.read<bool>(m_addr + 1544);
	}
	ADoor Get_doorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1552);
		return ADoor(ptr_addr);
	}
	bool Get_hasLadder() {
		return memory.read<bool>(m_addr + 1560);
	}
	struct TArray<struct FLadderMarker> Get_ladderMarkers() {
		return memory.read<struct TArray<struct FLadderMarker>>(m_addr + 1568);
	}
	struct TArray<struct FBaseElementDamageZone> Get_damageZones() {
		return memory.read<struct TArray<struct FBaseElementDamageZone>>(m_addr + 1584);
	}
	bool Get_shouldDestroyElementsOnTopWhenDestroyed() {
		return memory.read<bool>(m_addr + 1600);
	}
	float Get_destructionTime() {
		return memory.read<float>(m_addr + 1604);
	}
	bool Get_shouldRemoveIntersectingElementsOnDestroy() {
		return memory.read<bool>(m_addr + 1608);
	}
	struct TArray<struct FBaseElementDestructionZone> Get_destructionZones() {
		return memory.read<struct TArray<struct FBaseElementDestructionZone>>(m_addr + 1616);
	}
	bool Get_useAsReplenishableResource() {
		return memory.read<bool>(m_addr + 1632);
	}
	struct FReplenishableResourceDescription Get_replenishableResourceDescription() {
		return memory.read<struct FReplenishableResourceDescription>(m_addr + 1640);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElementData_Timer
{
public:
	UModularTooltipElementData_Timer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AFoodItem
{
public:
	AFoodItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAccumulatedFatigueBonus() {
		return memory.read<float>(m_addr + 2320);
	}
	float GetThermalConductivityFactor() {
		return memory.read<float>(m_addr + 2324);
	}
	float GetFreezingTemperature() {
		return memory.read<float>(m_addr + 2328);
	}
	float GetRoomTemperature() {
		return memory.read<float>(m_addr + 2332);
	}
	bool GetSpoilable() {
		return memory.read<bool>(m_addr + 2336);
	}
	float GetShelfLife() {
		return memory.read<float>(m_addr + 2340);
	}
	float GetSpoilageRateFrozen() {
		return memory.read<float>(m_addr + 2344);
	}
	float GetSpoilageRateModifierWhileSealed() {
		return memory.read<float>(m_addr + 2348);
	}
	bool GetIsConsumable() {
		return memory.read<bool>(m_addr + 2352);
	}
	bool GetCanCheckTaste() {
		return memory.read<bool>(m_addr + 2353);
	}
	struct UParticleSystemComponent GetSteamComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2360);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystem GetSteamParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2368);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystemComponent GetSmokeComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2376);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystem GetSmokeParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2384);
		return struct UParticleSystem(ptr_addr);
	}
	struct UStaticMesh GetItemOpenedMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2392);
		return struct UStaticMesh(ptr_addr);
	}
	struct UStaticMesh GetItemEmptyMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2400);
		return struct UStaticMesh(ptr_addr);
	}
	struct UAkAudioEvent GetStartEatingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2408);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopEatingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2416);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStartCookingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2424);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopCookingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2432);
		return struct UAkAudioEvent(ptr_addr);
	}
	UGameResourceType Get_resourceTypeForConsumption() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2440);
		return UGameResourceType(ptr_addr);
	}
	float Get_caloriesBonus() {
		return memory.read<float>(m_addr + 2448);
	}
	float Get_catchSicknessModifier() {
		return memory.read<float>(m_addr + 2452);
	}
	bool Get_itemOpened() {
		return memory.read<bool>(m_addr + 2456);
	}
	float Get_temperature() {
		return memory.read<float>(m_addr + 2460);
	}

private:
	std::uint64_t m_addr = 0;
};


class UActorStatics
{
public:
	UActorStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolismSkillProgressionTab
{
public:
	UMetabolismSkillProgressionTab(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UUserWidget GetSkillProgressBarWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return UUserWidget(ptr_addr);
	}
	struct UWrapBox Get_skillsWrapBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWrapBox(ptr_addr);
	}
	uint8_t  Get_skillType() {
		return memory.read<uint8_t >(m_addr + 632);
	}
	struct FText Get_skillAttributeName() {
		return memory.read<struct FText>(m_addr + 640);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ChangeCurrencyBalanceToAllOnline
{
public:
	UAdminCommand_ChangeCurrencyBalanceToAllOnline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_AddPrisonerBodyEffect
{
public:
	UAdminCommand_AddPrisonerBodyEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodyEffect Get_bodyEffectClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return UPrisonerBodyEffect(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankCardOperationRequest
{
public:
	UBankCardOperationRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionActivateSlotDescription
{
public:
	UPrisonerActionActivateSlotDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHeatSourceEntityComponentSetup
{
public:
	UHeatSourceEntityComponentSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return UGameResourceType(ptr_addr);
	}
	float GetMaxTemperature() {
		return memory.read<float>(m_addr + 80);
	}
	float GetInnerRadius() {
		return memory.read<float>(m_addr + 84);
	}
	float GetOuterRadius() {
		return memory.read<float>(m_addr + 88);
	}
	bool GetAutoFindResourceSupplier() {
		return memory.read<bool>(m_addr + 92);
	}
	struct FName GetResourceSupplierName() {
		return memory.read<struct FName>(m_addr + 96);
	}
	struct FRuntimeFloatCurve GetResourceSupplierUsageRateVsHeatIntensity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 104);
	}
	struct FRuntimeFloatCurve GetMaxHeatIntensityVsSupplierResourceAmountRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentDataType_Numeric
{
public:
	UAdminCommandArgumentDataType_Numeric(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_defaultValue() {
		return memory.read<float>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateFiring
{
public:
	UWeaponStateFiring(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCraftingRecipeWidget
{
public:
	UCraftingRecipeWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemClassWidget GetItemWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UItemClassWidget(ptr_addr);
	}
	struct UImage Get_itemImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_additionalText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UCraftableItem Get_craftableItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UCraftableItem(ptr_addr);
	}
	struct UAkAudioEvent Get_clickSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UAkAudioEvent(ptr_addr);
	}
	UTooltipBase Get_tooltipClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return UTooltipBase(ptr_addr);
	}
	struct UMaterial Get_greyedOutMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UMaterial(ptr_addr);
	}
	struct UMaterial Get_nonGreyedOutMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UMaterial(ptr_addr);
	}
	struct UEmptySlot GetEmptySlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UEmptySlot(ptr_addr);
	}
	struct URetainerBox GetMainRetainerBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct URetainerBox(ptr_addr);
	}
	struct UImage GetBackgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UImage(ptr_addr);
	}
	struct UImage GetSelectionBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UImage(ptr_addr);
	}
	struct UTexture2D GetBoxNextLevel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetBoxRedNoComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetBoxYellowComponentsMissing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_GetUserID
{
public:
	UAdminCommand_GetUserID(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_DestroyZombiesWithinRadius
{
public:
	UAdminCommand_DestroyZombiesWithinRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayerManagementMap
{
public:
	UPlayerManagementMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionClearWeaponMalfunctionDescription
{
public:
	UPrisonerActionClearWeaponMalfunctionDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsMenu
{
public:
	UCustomZoneSettingsMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCustomZoneSettingsMap Get_map() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UCustomZoneSettingsMap(ptr_addr);
	}
	struct UCustomZoneSettingsConfigurationsList Get_configurationsList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UCustomZoneSettingsConfigurationsList(ptr_addr);
	}
	struct UCustomZoneSettingsRegionsList Get_regionsList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UCustomZoneSettingsRegionsList(ptr_addr);
	}
	struct UCustomZoneSettingsDetailsDisplay Get_detailsDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UCustomZoneSettingsDetailsDisplay(ptr_addr);
	}
	struct UCustomZoneSettingsApplyNotification Get_applyNotification() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UCustomZoneSettingsApplyNotification(ptr_addr);
	}
	struct UVerticalBox Get_messageBoxPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UVerticalBox(ptr_addr);
	}
	struct UButton Get_buttonBack() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_buttonApply() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_buttonReset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_AddOrRemoveWidget
{
public:
	UAdminCommand_AddOrRemoveWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FName, UUserWidget> Get_widgetClassesByName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct TMap<struct FName, UUserWidget>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetFamePointsToAll
{
public:
	UAdminCommand_SetFamePointsToAll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankATMPointingButton
{
public:
	UBankATMPointingButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText Get_titleText() {
		return memory.read<struct FText>(m_addr + 648);
	}
	bool Get_isPointingRight() {
		return memory.read<bool>(m_addr + 672);
	}
	struct UImage Get_backgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_titleLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTextBlock(ptr_addr);
	}
	struct FBankATMPointingButtonStateVisual Get_normalVisuals() {
		return memory.read<struct FBankATMPointingButtonStateVisual>(m_addr + 704);
	}
	struct FBankATMPointingButtonStateVisual Get_hoveredVisuals() {
		return memory.read<struct FBankATMPointingButtonStateVisual>(m_addr + 856);
	}
	struct FBankATMPointingButtonStateVisual Get_pressedVisuals() {
		return memory.read<struct FBankATMPointingButtonStateVisual>(m_addr + 1008);
	}
	struct FBankATMPointingButtonStateVisual Get_disabledVisuals() {
		return memory.read<struct FBankATMPointingButtonStateVisual>(m_addr + 1160);
	}
	struct UAkAudioEvent Get_soundOnClicked() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1312);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_DumpWetnessDebug
{
public:
	UAdminCommand_DumpWetnessDebug(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCombinationLockGetCombinationResponse
{
public:
	UCombinationLockGetCombinationResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URemoveMagazineRemoveCartridge
{
public:
	URemoveMagazineRemoveCartridge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand
{
public:
	UAdminCommand(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Get_verb() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct TArray<struct FAdminCommandArgumentDescription> Get_argumentDescriptions() {
		return memory.read<struct TArray<struct FAdminCommandArgumentDescription>>(m_addr + 56);
	}
	int32_t Get_numberOfRequiredArguments() {
		return memory.read<int32_t>(m_addr + 72);
	}
	int32_t Get_numberOfRepeatingArguments() {
		return memory.read<int32_t>(m_addr + 76);
	}
	bool Get_isEnabled() {
		return memory.read<bool>(m_addr + 80);
	}
	bool Get_isEnabledInShippingBuild() {
		return memory.read<bool>(m_addr + 81);
	}
	bool Get_isAdminStatusRequired() {
		return memory.read<bool>(m_addr + 82);
	}
	bool Get_isDeveloperStatusRequired() {
		return memory.read<bool>(m_addr + 83);
	}
	bool Get_shouldExecuteOnServer() {
		return memory.read<bool>(m_addr + 84);
	}
	bool Get_shouldExecuteOnClient() {
		return memory.read<bool>(m_addr + 85);
	}
	bool Get_shouldDisableSingleplayerAchievementsIfExecuted() {
		return memory.read<bool>(m_addr + 86);
	}
	struct FText Get_description() {
		return memory.read<struct FText>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListFlags
{
public:
	UAdminCommand_ListFlags(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFishSpawningPreset
{
public:
	UFishSpawningPreset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSpawningChance() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_AdminLight
{
public:
	UAdminCommand_AdminLight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UAdminLight Get_adminLightComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return UAdminLight(ptr_addr);
	}
	float Get_maxIntensityMultiplier() {
		return memory.read<float>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCheckAssetNamesCommandlet
{
public:
	UCheckAssetNamesCommandlet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_RemovePrisonerBodyEffect
{
public:
	UAdminCommand_RemovePrisonerBodyEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodyEffect Get_bodyEffectClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return UPrisonerBodyEffect(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AGameEventLocationMarker
{
public:
	AGameEventLocationMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetLocationName() {
		return memory.read<struct FText>(m_addr + 544);
	}
	struct UTexture2D GetLocationImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetLocationImageGrayscale() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UTexture2D(ptr_addr);
	}
	bool GetEligibleForRandomPick() {
		return memory.read<bool>(m_addr + 584);
	}
	AGameEventBase GetGameEventClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return AGameEventBase(ptr_addr);
	}
	struct FGameEventParameters GetGameEventParameters() {
		return memory.read<struct FGameEventParameters>(m_addr + 600);
	}
	AGameEventBorder GetBorderClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 992);
		return AGameEventBorder(ptr_addr);
	}
	struct FVector GetAreaCenterOffset() {
		return memory.read<struct FVector>(m_addr + 1000);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 1012);
	}
	struct TArray<struct FSpawnArea> GetSpawnAreas() {
		return memory.read<struct TArray<struct FSpawnArea>>(m_addr + 1016);
	}
	struct USphereComponent GetSphere() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1032);
		return struct USphereComponent(ptr_addr);
	}
	struct UBillboardComponent GetSprite() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1040);
		return struct UBillboardComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URadioCategory
{
public:
	URadioCategory(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct URadioTrack> GetTracks() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<struct URadioTrack>(ptr_addr);
	}
	int32_t Get_index() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionInteraction
{
public:
	UPrisonerBodyConditionInteraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText Get_name() {
		return memory.read<struct FText>(m_addr + 40);
	}
	float Get_actionDurationVsPhysicianSkillLevel[5]() {
		return memory.read<float>(m_addr + 64);
	}
	float Get_experiencePointsToGainVsPhysicianSkillLevel[5]() {
		return memory.read<float>(m_addr + 84);
	}
	uint8_t  Get_beginInteractionMontage() {
		return memory.read<uint8_t >(m_addr + 104);
	}
	uint8_t  Get_endInteractionMontage() {
		return memory.read<uint8_t >(m_addr + 105);
	}
	struct UAkAudioEvent Get_beginInteractionPatientAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_endInteractionPatientAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismTitleAndAPB
{
public:
	UMetabolismTitleAndAPB(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetTitle() {
		return memory.read<struct FText>(m_addr + 608);
	}
	struct UTextBlock Get_titleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_background() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UMetabolismAdvancedProgressBar Get_apb_ValueAndProgress() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	struct FDataTableRowHandle Get_backgroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 656);
	}
	struct FDataTableRowHandle Get_titleTextColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 672);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMMinigameConfiguration
{
public:
	UBankATMMinigameConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListSpawnedAnimals
{
public:
	UAdminCommand_ListSpawnedAnimals(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAviationSkill
{
public:
	UAviationSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVehicleHandlingExperienceAwards GetNoSkillExperienceAwards() {
		return memory.read<struct FVehicleHandlingExperienceAwards>(m_addr + 176);
	}
	struct FVehicleHandlingExperienceAwards GetBasicSkillExperienceAwards() {
		return memory.read<struct FVehicleHandlingExperienceAwards>(m_addr + 184);
	}
	struct FVehicleHandlingExperienceAwards GetMediumSkillExperienceAwards() {
		return memory.read<struct FVehicleHandlingExperienceAwards>(m_addr + 192);
	}
	struct FVehicleHandlingExperienceAwards GetAdvancedSkillExperienceAwards() {
		return memory.read<struct FVehicleHandlingExperienceAwards>(m_addr + 200);
	}
	struct FVehicleHandlingExperienceAwards GetAboveAdvancedSkillExperienceAwards() {
		return memory.read<struct FVehicleHandlingExperienceAwards>(m_addr + 208);
	}
	struct FAviationSkillParametersPerSkillLevel GetNoSkillParameters() {
		return memory.read<struct FAviationSkillParametersPerSkillLevel>(m_addr + 216);
	}
	struct FAviationSkillParametersPerSkillLevel GetBasicSkillParameters() {
		return memory.read<struct FAviationSkillParametersPerSkillLevel>(m_addr + 472);
	}
	struct FAviationSkillParametersPerSkillLevel GetMediumSkillParameters() {
		return memory.read<struct FAviationSkillParametersPerSkillLevel>(m_addr + 728);
	}
	struct FAviationSkillParametersPerSkillLevel GetAdvancedSkillParameters() {
		return memory.read<struct FAviationSkillParametersPerSkillLevel>(m_addr + 984);
	}
	struct FAviationSkillParametersPerSkillLevel GetAboveAdvancedSkillParameters() {
		return memory.read<struct FAviationSkillParametersPerSkillLevel>(m_addr + 1240);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_Announce
{
public:
	UAdminCommand_Announce(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankATMAccountSummary
{
public:
	UBankATMAccountSummary(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_accountBalance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UHorizontalBox Get_ATMOperationalTransactionLimitHorizontalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UTextBlock Get_ATMOperationalTransactionLimit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UHorizontalBox Get_cardOperationalTransactionLimitHorizontalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UTextBlock Get_cardOperationalTransactionLimit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UChatNotification
{
public:
	UChatNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABuildingManager
{
public:
	ABuildingManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct ABuilding, struct FBox2D> Get_buildings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct TMap<struct ABuilding, struct FBox2D>(ptr_addr);
	}
	struct TMap<struct FDbIntegerId, struct FBuildingsArray> Get_buildingsOwned() {
		return memory.read<struct TMap<struct FDbIntegerId, struct FBuildingsArray>>(m_addr + 696);
	}
	struct FBuildingsReplicationHelper Get_buildingsDataRepHelper() {
		return memory.read<struct FBuildingsReplicationHelper>(m_addr + 784);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEntitySystemObjectSetup
{
public:
	UEntitySystemObjectSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetTickEnabled() {
		return memory.read<bool>(m_addr + 48);
	}
	float GetTickInterval() {
		return memory.read<float>(m_addr + 52);
	}
	bool GetCanEverTickOnServer() {
		return memory.read<bool>(m_addr + 56);
	}
	bool GetCanEverTickOnClient() {
		return memory.read<bool>(m_addr + 57);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInteractionComponent
{
public:
	UInteractionComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetExamineActionDuration() {
		return memory.read<float>(m_addr + 184);
	}
	float GetExamineReplicationDelay() {
		return memory.read<float>(m_addr + 188);
	}
	float GetPickupItemActionDuration() {
		return memory.read<float>(m_addr + 192);
	}
	float GetPickupItemReplicationDelay() {
		return memory.read<float>(m_addr + 196);
	}
	float GetStoreItemActionDuration() {
		return memory.read<float>(m_addr + 200);
	}
	float GetTickFrequency() {
		return memory.read<float>(m_addr + 204);
	}
	float GetMinLandscapeInteractionDistanceSquared() {
		return memory.read<float>(m_addr + 208);
	}
	int32_t GetSavedGroundSearchLocationsCount() {
		return memory.read<int32_t>(m_addr + 212);
	}
	AActor GetGhostActorToSpawnAfterExamine() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return AActor(ptr_addr);
	}
	int32_t GetInitialMinNumEmptyContainersToSearchToSpawnGhostActor() {
		return memory.read<int32_t>(m_addr + 232);
	}
	int32_t GetInitialMaxNumEmptyContainersToSearchToSpawnGhostActor() {
		return memory.read<int32_t>(m_addr + 236);
	}
	int32_t GetMinNumEmptyContainersToSearchToSpawnGhostActor() {
		return memory.read<int32_t>(m_addr + 240);
	}
	int32_t GetMaxNumEmptyContainersToSearchToSpawnGhostActor() {
		return memory.read<int32_t>(m_addr + 244);
	}
	bool GetShouldSpawnGhostActorRelativeToExaminer() {
		return memory.read<bool>(m_addr + 248);
	}
	float GetGhostActorSpawnDistanceToExaminer() {
		return memory.read<float>(m_addr + 252);
	}
	int64_t GetExamineGhostSpawnEndTime() {
		return memory.read<int64_t>(m_addr + 256);
	}
	struct TArray<struct UInteractionAction> Get_actions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct TArray<struct UInteractionAction>(ptr_addr);
	}
	struct FSpawnedItems Get_replicatedExamineSpawnedItems() {
		return memory.read<struct FSpawnedItems>(m_addr + 528);
	}
	struct FSpawnedItems Get_replicatedPickupSpawnedItem() {
		return memory.read<struct FSpawnedItems>(m_addr + 552);
	}
	float Get_drinkAllowedThreshold() {
		return memory.read<float>(m_addr + 620);
	}
	float Get_reexamineFrequency() {
		return memory.read<float>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_BanPlayer
{
public:
	UAdminCommand_BanPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_CancelVote
{
public:
	UAdminCommand_CancelVote(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ChangeCurrencyBalance
{
public:
	UAdminCommand_ChangeCurrencyBalance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UExteriorCharacterSpawnerComponent
{
public:
	UExteriorCharacterSpawnerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetRange() {
		return memory.read<uint8_t >(m_addr + 560);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDoorUpgradeWidget
{
public:
	UDoorUpgradeWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVerticalBox Get_lockSlotsBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_protectionSlotsBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_sensorSlotsBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_bcuLockSlotBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UVerticalBox(ptr_addr);
	}
	struct ADoor Get_door() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct ADoor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ChangeCurrencyBalanceToAll
{
public:
	UAdminCommand_ChangeCurrencyBalanceToAll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_CharacterSpawner
{
public:
	UAdminCommand_CharacterSpawner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEntityDebuggerEntitySetup
{
public:
	UEntityDebuggerEntitySetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetDrawQuerySphere() {
		return memory.read<bool>(m_addr + 128);
	}
	bool GetDrawTopLevelEntitiesOnly() {
		return memory.read<bool>(m_addr + 129);
	}
	bool GetDrawEntityBounds() {
		return memory.read<bool>(m_addr + 130);
	}
	bool GetDrawEntityDebugStrings() {
		return memory.read<bool>(m_addr + 131);
	}
	bool GetDrawEntityComponentDebugStrings() {
		return memory.read<bool>(m_addr + 132);
	}
	int32_t GetDebugStringLineBreak() {
		return memory.read<int32_t>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UExpirableItemComponent
{
public:
	UExpirableItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t Get_expirationTimeSeconds() {
		return memory.read<int64_t>(m_addr + 200);
	}
	int64_t Get_itemCreatedTimestamp() {
		return memory.read<int64_t>(m_addr + 208);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVideoSettingsManager
{
public:
	UVideoSettingsManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAudibleButtonComponent
{
public:
	UAudibleButtonComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<uint8_t , struct UAkAudioEvent> Get_audioEvents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TMap<uint8_t , struct UAkAudioEvent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ClearFakeName
{
public:
	UAdminCommand_ClearFakeName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDroneTargetData
{
public:
	UDroneTargetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFireworksItemState
{
public:
	UFireworksItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsFiring() {
		return memory.read<bool>(m_addr + 256);
	}
	int32_t GetLaunchedShells() {
		return memory.read<int32_t>(m_addr + 260);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_CrashMajestically
{
public:
	UAdminCommand_CrashMajestically(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADropZoneSlot
{
public:
	ADropZoneSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UStaticMeshComponent(ptr_addr);
	}
	float GetActivationDuration() {
		return memory.read<float>(m_addr + 560);
	}
	struct UStaticMesh GetUnlockedMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UStaticMesh(ptr_addr);
	}
	struct UAkAudioEvent GetActivateSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct ADropZoneGameEvent Get_gameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct ADropZoneGameEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_CreateEntity
{
public:
	UAdminCommand_CreateEntity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListSpawnedVehicles
{
public:
	UAdminCommand_ListSpawnedVehicles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagContainer Get_vehicleSpawnGroupsByCategory[8]() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_WeaponShowAmmunitionMeshes
{
public:
	UAnimNotifyState_WeaponShowAmmunitionMeshes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetshowReversed() {
		return memory.read<bool>(m_addr + 48);
	}
	struct TArray<int32_t> GetammoIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_DebugWeapon
{
public:
	UAdminCommand_DebugWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInventoryContainerClothes
{
public:
	UInventoryContainerClothes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UInventoryContainerWidget2 Get_widget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UInventoryContainerWidget2(ptr_addr);
	}
	struct FInventoryContainerClothesData Get_data() {
		return memory.read<struct FInventoryContainerClothesData>(m_addr + 72);
	}
	struct FInventoryContainerClothesData Get_oldData() {
		return memory.read<struct FInventoryContainerClothesData>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACargoDropEvent
{
public:
	ACargoDropEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<ACargoDropContainer> GetCargoDropClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct TArray<ACargoDropContainer>(ptr_addr);
	}
	struct FSpawnCharacterAroundInfo Get_characterAroundInfo() {
		return memory.read<struct FSpawnCharacterAroundInfo>(m_addr + 704);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHeatSourceItemComponent
{
public:
	UHeatSourceItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UFueledHeatSource> GetHeatSources() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct UFueledHeatSource>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_DemolitionSkillDebug
{
public:
	UAdminCommand_DemolitionSkillDebug(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListPlayers
{
public:
	UAdminCommand_ListPlayers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_AcuteRadiationSyndrome
{
public:
	UPrisonerBodyConditionUIData_AcuteRadiationSyndrome(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_KnockoutPrisoner
{
public:
	UAdminCommand_KnockoutPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBuriableChestItemComponent
{
public:
	UBuriableChestItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t Get_decayInDaysWhenBuried() {
		return memory.read<int64_t>(m_addr + 400);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVicinityPanel3
{
public:
	UVicinityPanel3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_isTradingThingy() {
		return memory.read<bool>(m_addr + 608);
	}
	struct UWrapBox Get_searchedItemsBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWrapBox(ptr_addr);
	}
	struct UWrapBox Get_vicinityBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWrapBox(ptr_addr);
	}
	struct UHorizontalBox Get_vicinityContainersBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UHorizontalBox Get_tradingBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UOverlay Get_tradingBoxOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UOverlay(ptr_addr);
	}
	struct UBadAdjustableSeparator Get_adjustableSeparator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UBadAdjustableSeparator(ptr_addr);
	}
	struct TMap<struct UObject, struct UWidget*> Get_searchedItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct TMap<struct UObject, struct UWidget*>(ptr_addr);
	}
	struct TMap<struct UObject, struct UWidget*> Get_vicinityItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct TMap<struct UObject, struct UWidget*>(ptr_addr);
	}
	struct TMap<struct UObject, struct UWidget*> Get_vicinityContainers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct TMap<struct UObject, struct UWidget*>(ptr_addr);
	}
	struct TMap<struct UObject, struct UWidget*> Get_tradingItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct TMap<struct UObject, struct UWidget*>(ptr_addr);
	}
	struct TMap<struct UCheckBox, struct FClassesArray> Get_filterCheckboxes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1144);
		return struct TMap<struct UCheckBox, struct FClassesArray>(ptr_addr);
	}
	struct TMap<struct FName, struct FClassesArray> Get_filterCheckboxesNames() {
		return memory.read<struct TMap<struct FName, struct FClassesArray>>(m_addr + 1224);
	}
	struct FMargin Get_vicinityContainersPadding() {
		return memory.read<struct FMargin>(m_addr + 1304);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_DestroyAllItemsWithinRadius
{
public:
	UAdminCommand_DestroyAllItemsWithinRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolismCurrentStatLight
{
public:
	UMetabolismCurrentStatLight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetTitle() {
		return memory.read<struct FText>(m_addr + 608);
	}
	struct UImage Get_valueBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct URichTextBlock Get_value() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct URichTextBlock(ptr_addr);
	}
	struct FDataTableRowHandle Get_normalBackgroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 656);
	}
	struct FDataTableRowHandle Get_alertedBackgroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 672);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFollowsMouseActor
{
public:
	AFollowsMouseActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistanceFromCamera() {
		return memory.read<float>(m_addr + 544);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListPrisonerBodyEffects
{
public:
	UAdminCommand_ListPrisonerBodyEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodyEffect Get_bodyEffectClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return UPrisonerBodyEffect(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingCategoryButtonWidget
{
public:
	UCookingCategoryButtonWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_titleTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_buttonImageWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_overallBorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct FGameplayTag Get_cookingCategory() {
		return memory.read<struct FGameplayTag>(m_addr + 648);
	}
	struct FGameplayTag Get_navigationTag() {
		return memory.read<struct FGameplayTag>(m_addr + 656);
	}
	struct FText Get_titleText() {
		return memory.read<struct FText>(m_addr + 664);
	}
	struct TSoftObjectPtr<UTexture2D> Get_buttonImage() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 688);
	}
	struct FLinearColor Get_unHoveredBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 728);
	}
	struct FLinearColor Get_hoveredBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 744);
	}
	struct UAudibleButtonComponent Get_audibleButtonComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UAudibleButtonComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_DestroyAllVehicles
{
public:
	UAdminCommand_DestroyAllVehicles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABedroll
{
public:
	ABedroll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId Get_occupiedUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 2488);
	}
	bool Get_occupantOnline() {
		return memory.read<bool>(m_addr + 2496);
	}
	struct UStaticMesh Get_meshInHands() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2504);
		return struct UStaticMesh(ptr_addr);
	}
	struct UMaterialInterface Get_materialInHands() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2512);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UStaticMesh Get_meshOnGround() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2520);
		return struct UStaticMesh(ptr_addr);
	}
	struct UMaterialInterface Get_materialOnGround() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2528);
		return struct UMaterialInterface(ptr_addr);
	}
	float Get_maxRestHeight() {
		return memory.read<float>(m_addr + 2536);
	}
	float Get_damageOverTimeWhenOccupied() {
		return memory.read<float>(m_addr + 2540);
	}
	float Get_autoDestructTimeWhenOccupied() {
		return memory.read<float>(m_addr + 2544);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemGroup
{
public:
	UItemGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<AItem> GetItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_EnableOrDisableServer
{
public:
	UAdminCommand_EnableOrDisableServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_shouldEnableServer() {
		return memory.read<bool>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_DestroyEntity
{
public:
	UAdminCommand_DestroyEntity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_DistanceDebug
{
public:
	UAdminCommand_DistanceDebug(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABombDefusalMinigameBase
{
public:
	ABombDefusalMinigameBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent Get_timeBomb() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMesh Get_splineConnectorMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UStaticMesh(ptr_addr);
	}
	struct FVector Get_wireButtonsSize() {
		return memory.read<struct FVector>(m_addr + 784);
	}
	struct USkeletalMeshComponent Get_defusalTool() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	float Get_toolMovementSensitivity() {
		return memory.read<float>(m_addr + 808);
	}
	struct FVector Get_minDefusingToolOffsetFromCenter() {
		return memory.read<struct FVector>(m_addr + 812);
	}
	struct FVector Get_maxDefusingToolOffsetFromCenter() {
		return memory.read<struct FVector>(m_addr + 824);
	}
	struct UMaterialInterface Get_greenLedLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface Get_redLedLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface Get_yellowLedLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UMaterialInterface(ptr_addr);
	}
	struct TArray<struct UStaticMeshComponent> Get_ledLights() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}
	struct UStaticMesh Get_ledLightMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UStaticMesh(ptr_addr);
	}
	struct UStaticMesh Get_wireMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UStaticMesh(ptr_addr);
	}
	struct TArray<uint8_t > Get_wiresEndPositions() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 904);
	}
	struct TArray<struct FWireDescription> Get_wires() {
		return memory.read<struct TArray<struct FWireDescription>>(m_addr + 920);
	}
	struct TArray<struct FSplineDescription> Get_splines() {
		return memory.read<struct TArray<struct FSplineDescription>>(m_addr + 952);
	}
	int32_t Get_numberOfWires() {
		return memory.read<int32_t>(m_addr + 984);
	}
	int32_t Get_numberOfWirePoints() {
		return memory.read<int32_t>(m_addr + 988);
	}
	int32_t Get_wiresShuffleIntensity() {
		return memory.read<int32_t>(m_addr + 992);
	}
	int32_t Get_minWiresComplexity() {
		return memory.read<int32_t>(m_addr + 996);
	}
	uint8_t  Get_wiresForwardAxis() {
		return memory.read<uint8_t >(m_addr + 1000);
	}
	float Get_wiresStartSmoothness() {
		return memory.read<float>(m_addr + 1004);
	}
	float Get_wiresEndSmoothness() {
		return memory.read<float>(m_addr + 1008);
	}
	float Get_wiresMiddleSmoothness() {
		return memory.read<float>(m_addr + 1012);
	}
	float Get_wiresSharpCornerSmoothness() {
		return memory.read<float>(m_addr + 1016);
	}
	float Get_maxSegmentSize() {
		return memory.read<float>(m_addr + 1020);
	}
	float Get_wirePointsSpreadPositive() {
		return memory.read<float>(m_addr + 1024);
	}
	float Get_wirePointsSpreadNegative() {
		return memory.read<float>(m_addr + 1028);
	}
	float Get_wireHeight() {
		return memory.read<float>(m_addr + 1032);
	}
	float Get_wireVerticalSpacing() {
		return memory.read<float>(m_addr + 1036);
	}
	struct FVector Get_wirePointsOffset() {
		return memory.read<struct FVector>(m_addr + 1040);
	}
	float Get_wireEndOffset() {
		return memory.read<float>(m_addr + 1052);
	}
	struct FVector Get_additionalWireEndPointOffset() {
		return memory.read<struct FVector>(m_addr + 1056);
	}
	struct UStaticMeshComponent Get_cutWireSegment0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1072);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_cutWireSegment1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1080);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_cutWireSegment2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_cutWireSegment3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_cutWireSegment4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1104);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_cutWireSegment5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1112);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_uncutWireSegment0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1120);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_uncutWireSegment1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1128);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_uncutWireSegment2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1136);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_uncutWireSegment3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1144);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_uncutWireSegment4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1152);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_uncutWireSegment5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1160);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UBoxComponent Get_wireBox1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1168);
		return struct UBoxComponent(ptr_addr);
	}
	struct UBoxComponent Get_wireBox2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1176);
		return struct UBoxComponent(ptr_addr);
	}
	struct UBoxComponent Get_wireBox3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1184);
		return struct UBoxComponent(ptr_addr);
	}
	struct UBoxComponent Get_wireBox4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1192);
		return struct UBoxComponent(ptr_addr);
	}
	struct UBoxComponent Get_wireBox5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1200);
		return struct UBoxComponent(ptr_addr);
	}
	struct UBoxComponent Get_wireBox6() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1208);
		return struct UBoxComponent(ptr_addr);
	}
	struct UAkAudioEvent Get_bombDefusalTimerStartSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1216);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_bombDefusalTimerStopSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1224);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_cutWireSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1232);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_bombDefusedSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1240);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ABowAttachmentSilencer
{
public:
	ABowAttachmentSilencer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_noiseMultiplier() {
		return memory.read<float>(m_addr + 2352);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_DumpAllSquadsInfoList
{
public:
	UAdminCommand_DumpAllSquadsInfoList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleServiceRegistry
{
public:
	UVehicleServiceRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVehicleServiceData> Get_serviceData() {
		return memory.read<struct TArray<struct FVehicleServiceData>>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ScheduleWorldEvent
{
public:
	UAdminCommand_ScheduleWorldEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_EnableHuntingClueDebugArrow
{
public:
	UAdminCommand_EnableHuntingClueDebugArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_LogCharacterSpawner
{
public:
	UAdminCommand_LogCharacterSpawner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCookingUtilityOverview
{
public:
	UCookingUtilityOverview(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UInteractiveIngredientWidget Get_ingredientWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return UInteractiveIngredientWidget(ptr_addr);
	}
	UCookingIngredientTooltip Get_ingredientWidgetTooltipClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return UCookingIngredientTooltip(ptr_addr);
	}
	struct UTextBlock Get_utilityTitleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UTextBlock(ptr_addr);
	}
	struct URetainerBox Get_recipeTitleTextEffectBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct URetainerBox(ptr_addr);
	}
	struct UTextBlock Get_recipeTitleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_heatSourceWarningIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UImage(ptr_addr);
	}
	struct USizeBox Get_mainSwitcherSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct USizeBox(ptr_addr);
	}
	struct UWidgetSwitcher Get_mainSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UCookingAddRecipeButton Get_addRecipeButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UCookingAddRecipeButton(ptr_addr);
	}
	struct UIngredientsForRecipeWidget Get_ingredientsForRecipeWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UIngredientsForRecipeWidget(ptr_addr);
	}
	struct UCookingProgressWidget Get_cookingProgressWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UCookingProgressWidget(ptr_addr);
	}
	struct UCookingFinishedWidget Get_cookingFinishedWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UCookingFinishedWidget(ptr_addr);
	}
	struct UTextBlock Get_slotOrdinalNumber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UTextBlock(ptr_addr);
	}
	struct UCookingControlButton Get_cookAndTimerButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UCookingControlButton(ptr_addr);
	}
	struct UCookingControlButton Get_cancelButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UCookingControlButton(ptr_addr);
	}
	struct USizeBox Get_progressBarSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct USizeBox(ptr_addr);
	}
	struct FLinearColor Get_hasCookingTimeLeftColor() {
		return memory.read<struct FLinearColor>(m_addr + 848);
	}
	struct FLinearColor Get_cookingTimeOverflowedColor() {
		return memory.read<struct FLinearColor>(m_addr + 864);
	}
	struct FSlateBrush Get_heatSourceWarningIcon_MissingFuel() {
		return memory.read<struct FSlateBrush>(m_addr + 880);
	}
	struct FSlateBrush Get_heatSourceWarningIcon_NotTurnedOn() {
		return memory.read<struct FSlateBrush>(m_addr + 1016);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMYesNoConfirmationScreen
{
public:
	UBankATMYesNoConfirmationScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_textDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnCancel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnYes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UBankATMPointingButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCommonCraftingRecipe
{
public:
	UCommonCraftingRecipe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_EquipParachute
{
public:
	UAdminCommand_EquipParachute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AClothesItem Get_parachuteClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return AClothesItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetAirplaneMaxVelocity
{
public:
	UAdminCommand_SetAirplaneMaxVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInv2021_InventoryPosition2DObject
{
public:
	UInv2021_InventoryPosition2DObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetMountedVehicleProperty
{
public:
	UAdminCommand_SetMountedVehicleProperty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ExecuteConsoleCommand
{
public:
	UAdminCommand_ExecuteConsoleCommand(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UValueProviderInteger
{
public:
	UValueProviderInteger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ExecutePrisonerBodyConditionInteraction
{
public:
	UAdminCommand_ExecutePrisonerBodyConditionInteraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDestroyGardenDescription
{
public:
	UPrisonerActionDestroyGardenDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDecontaminateData
{
public:
	UDecontaminateData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	USkill GetSkillToIncrease() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return USkill(ptr_addr);
	}
	float GetSkillIncreaseAmount() {
		return memory.read<float>(m_addr + 56);
	}
	float GetSkillIncreaseModifier() {
		return memory.read<float>(m_addr + 60);
	}
	float GetRadiationDecontaminationAmountPerSoapUse() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_BleedingInjury
{
public:
	UPrisonerBodyCondition_BleedingInjury(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_selfStabilizationDurationVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 200);
	}
	struct FRuntimeFloatCurve Get_stabilizationDurationVsBloodLossRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 336);
	}
	struct FRuntimeFloatCurve Get_destabilizationActionDifficultyRatioVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 472);
	}
	UNotificationDescription Get_destabilizationNotification() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return UNotificationDescription(ptr_addr);
	}
	float Get_destabilizationNotificationCooldown() {
		return memory.read<float>(m_addr + 616);
	}
	struct FRuntimeFloatCurve Get_recoveryDurationVsBloodLossRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 624);
	}
	UPrisonerBodySymptom_Bleeding Get_bleedingSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return UPrisonerBodySymptom_Bleeding(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Bleeding Get_bleedingSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UPrisonerBodySymptomCause_Bleeding(ptr_addr);
	}
	UPrisonerBodySymptom_Pain Get_painSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return UPrisonerBodySymptom_Pain(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Pain Get_painSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UPrisonerBodySymptomCause_Pain(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_painIntensityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 792);
	}
	float Get_limpingIntensityPerLegsDamageRatio() {
		return memory.read<float>(m_addr + 928);
	}
	float Get_legsBleedingSeverityThresholdToLimp() {
		return memory.read<float>(m_addr + 932);
	}
	struct UPrisonerBodyMuscleGroupToInfectionClassMappings Get_infectionClassMappings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UPrisonerBodyMuscleGroupToInfectionClassMappings(ptr_addr);
	}
	struct UPrisonerBodyCondition_Infection Get_infection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct UPrisonerBodyCondition_Infection(ptr_addr);
	}
	float Get_contaminationIncreaseBaseRate() {
		return memory.read<float>(m_addr + 952);
	}
	struct FRuntimeFloatCurve Get_contaminationIncreaseRateMultiplierVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 960);
	}
	struct FRuntimeFloatCurve Get_contaminationIncreaseRateMultiplierVsAsepsis() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1096);
	}
	float Get_disinfectantContaminationDecreaseRate() {
		return memory.read<float>(m_addr + 1232);
	}
	float Get_disinfectantEvaporationRate() {
		return memory.read<float>(m_addr + 1236);
	}
	uint8_t  Get_muscleGroup() {
		return memory.read<uint8_t >(m_addr + 1240);
	}
	float Get_damage() {
		return memory.read<float>(m_addr + 1244);
	}
	float Get_damageAtRecoveryStart() {
		return memory.read<float>(m_addr + 1248);
	}
	float Get_bloodLoss() {
		return memory.read<float>(m_addr + 1252);
	}
	float Get_bloodLossAtRecoveryStart() {
		return memory.read<float>(m_addr + 1256);
	}
	float Get_bloodLossRate() {
		return memory.read<float>(m_addr + 1260);
	}
	float Get_bloodLossRateAtRecoveryStart() {
		return memory.read<float>(m_addr + 1264);
	}
	float Get_selfStabilizationBleedingSuppression() {
		return memory.read<float>(m_addr + 1268);
	}
	float Get_stabilizationDurationReductionFromPhysician() {
		return memory.read<float>(m_addr + 1272);
	}
	struct FBandages Get_bandages() {
		return memory.read<struct FBandages>(m_addr + 1280);
	}
	float Get_disinfectantAmount() {
		return memory.read<float>(m_addr + 1304);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 1308);
	}
	float Get_timerElapsedTime() {
		return memory.read<float>(m_addr + 1320);
	}
	float Get_timerDuration() {
		return memory.read<float>(m_addr + 1324);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_Location
{
public:
	UAdminCommand_Location(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionTuneBowDescription
{
public:
	UPrisonerActionTuneBowDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AMissionScheduler
{
public:
	AMissionScheduler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_missionSchedulerEnabled() {
		return memory.read<bool>(m_addr + 544);
	}
	struct TMap<AMission, struct FMissionData> Get_availableMainStoryMissions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct TMap<AMission, struct FMissionData>(ptr_addr);
	}
	struct TMap<AMission, struct FMissionData> Get_availableSideStoryMissions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct TMap<AMission, struct FMissionData>(ptr_addr);
	}
	struct TMap<AMission, struct FMissionData> Get_availableTutorialMissions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct TMap<AMission, struct FMissionData>(ptr_addr);
	}
	float Get_missionQueuingInterval() {
		return memory.read<float>(m_addr + 792);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponDamageStatics
{
public:
	UWeaponDamageStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListMutedPlayers
{
public:
	UAdminCommand_ListMutedPlayers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_KickPlayer
{
public:
	UAdminCommand_KickPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_Teleport
{
public:
	UAdminCommand_Teleport(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentDataType_Transform
{
public:
	UAdminCommandArgumentDataType_Transform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform Get_defaultValue() {
		return memory.read<struct FTransform>(m_addr + 272);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsConfigurationsList
{
public:
	UCustomZoneSettingsConfigurationsList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_configurationCountDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_buttonAddConfiguration() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UButton(ptr_addr);
	}
	struct UScrollBox Get_scrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UScrollBox(ptr_addr);
	}
	UCustomZoneSettingsConfiguration Get_configurationWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return UCustomZoneSettingsConfiguration(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleMarkersData
{
public:
	UVehicleMarkersData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMotorcycleSkill
{
public:
	UMotorcycleSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_FindSquadMember
{
public:
	UAdminCommand_FindSquadMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTabButton
{
public:
	UTabButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetPreviewSelectedState() {
		return memory.read<bool>(m_addr + 704);
	}
	struct UButton Get_button() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UButton(ptr_addr);
	}
	struct UTextBlock Get_text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UTextBlock(ptr_addr);
	}
	struct USizeBox Get_sizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct USizeBox(ptr_addr);
	}
	struct FText Get_initialTitle() {
		return memory.read<struct FText>(m_addr + 736);
	}
	struct FTabButtonStyle Get_selectedButtonStyle() {
		return memory.read<struct FTabButtonStyle>(m_addr + 760);
	}
	struct FTabButtonStyle Get_selectedUnfocusedButtonStyle() {
		return memory.read<struct FTabButtonStyle>(m_addr + 1408);
	}
	struct FTabButtonStyle Get_deselectedButtonStyle() {
		return memory.read<struct FTabButtonStyle>(m_addr + 2056);
	}
	struct FTabTextStyle Get_selectedTextStyle() {
		return memory.read<struct FTabTextStyle>(m_addr + 2704);
	}
	struct FTabTextStyle Get_selectedUnfocusedTextStyle() {
		return memory.read<struct FTabTextStyle>(m_addr + 2856);
	}
	struct FTabTextStyle Get_deselectedTextStyle() {
		return memory.read<struct FTabTextStyle>(m_addr + 3008);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_GetUserIDByRank
{
public:
	UAdminCommand_GetUserIDByRank(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SpawnItem
{
public:
	UAdminCommand_SpawnItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_LeaveCorpse
{
public:
	UAdminCommand_LeaveCorpse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADoubleSlidingDoorStatic
{
public:
	ADoubleSlidingDoorStatic(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetClosedPositionComponent0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return struct USceneComponent(ptr_addr);
	}
	struct USceneComponent GetClosedPositionComponent1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return struct USceneComponent(ptr_addr);
	}
	struct USceneComponent GetOpenPositionComponent0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1280);
		return struct USceneComponent(ptr_addr);
	}
	struct USceneComponent GetOpenPositionComponent1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1288);
		return struct USceneComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHandPanel3
{
public:
	UHandPanel3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UHandsHolstersWidget2 Get_handInventory() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UHandsHolstersWidget2(ptr_addr);
	}
	struct UHandsHolstersWidget2 Get_holsterInventory0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UHandsHolstersWidget2(ptr_addr);
	}
	struct UHandsHolstersWidget2 Get_holsterInventory1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UHandsHolstersWidget2(ptr_addr);
	}
	struct UQuickAccessItemSwitcher3 Get_quickAccessItemSwitcher0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UQuickAccessItemSwitcher3(ptr_addr);
	}
	struct UQuickAccessItemSwitcher3 Get_quickAccessItemSwitcher3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UQuickAccessItemSwitcher3(ptr_addr);
	}
	struct UQuickAccessItemSwitcher3 Get_quickAccessItemSwitcher4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UQuickAccessItemSwitcher3(ptr_addr);
	}
	struct UQuickAccessItemSwitcher3 Get_quickAccessItemSwitcher5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UQuickAccessItemSwitcher3(ptr_addr);
	}
	struct UQuickAccessItemSwitcher3 Get_quickAccessItemSwitcher6() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UQuickAccessItemSwitcher3(ptr_addr);
	}
	struct UQuickAccessItemSwitcher3 Get_quickAccessItemSwitcher7() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UQuickAccessItemSwitcher3(ptr_addr);
	}
	struct UQuickAccessItemSwitcher3 Get_quickAccessItemSwitcher8() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UQuickAccessItemSwitcher3(ptr_addr);
	}
	struct UQuickAccessItemSwitcher3 Get_quickAccessItemSwitcher9() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UQuickAccessItemSwitcher3(ptr_addr);
	}
	struct USizeBox Get_mainSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct USizeBox(ptr_addr);
	}
	float Get_mainPanelWidth() {
		return memory.read<float>(m_addr + 704);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDamageData
{
public:
	UDamageData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetDamageResponseTag() {
		return memory.read<struct FGameplayTag>(m_addr + 48);
	}
	struct FGameplayTag GetGameEventTag() {
		return memory.read<struct FGameplayTag>(m_addr + 56);
	}
	struct FGameplayTag GetIgnoreForStatsTag() {
		return memory.read<struct FGameplayTag>(m_addr + 64);
	}
	struct FGameplayTag GetCauseHeadExplosionTag() {
		return memory.read<struct FGameplayTag>(m_addr + 72);
	}
	struct FGameplayTag GetApplyBleedingOnlyTag() {
		return memory.read<struct FGameplayTag>(m_addr + 80);
	}
	struct UDataTable GetWeaponDescTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UDataTable(ptr_addr);
	}
	struct TArray<struct FDamageTargetTypeMapping> GetDamageTargetTypeMap() {
		return memory.read<struct TArray<struct FDamageTargetTypeMapping>>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularBaseBuildingSocketType
{
public:
	UModularBaseBuildingSocketType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListActiveHunts
{
public:
	UAdminCommand_ListActiveHunts(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChopBaseElementDescription
{
public:
	UPrisonerActionChopBaseElementDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRepairBaseElement
{
public:
	UPrisonerActionRepairBaseElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemEntitySetup
{
public:
	UItemEntitySetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMaxHealth() {
		return memory.read<float>(m_addr + 128);
	}
	float GetMaxHealthRatioAfterReachingBadQuality() {
		return memory.read<float>(m_addr + 132);
	}

private:
	std::uint64_t m_addr = 0;
};


class AAmmunitionBoxItem
{
public:
	AAmmunitionBoxItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AAmmunitionItem GetAmmunitionItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return AAmmunitionItem(ptr_addr);
	}
	AItem GetItemClassToSpawnWhenUnpacked() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2328);
		return AItem(ptr_addr);
	}
	int32_t GetMaxAmmoCount() {
		return memory.read<int32_t>(m_addr + 2336);
	}
	int32_t Get_ammoCount() {
		return memory.read<int32_t>(m_addr + 2340);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDialogueData
{
public:
	UDialogueData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<uint8_t , struct FDialogInfoContainer> GetDialogs() {
		return memory.read<struct TMap<uint8_t , struct FDialogInfoContainer>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListItemsSpawnLocations
{
public:
	UAdminCommand_ListItemsSpawnLocations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSearchItemSpawnerPresetArray Get_itemSpawnerPresets[2]() {
		return memory.read<struct FSearchItemSpawnerPresetArray>(m_addr + 136);
	}
	struct FSearchItemClassesArray Get_itemClasses[2]() {
		return memory.read<struct FSearchItemClassesArray>(m_addr + 168);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListPrisonerForeignSubstances
{
public:
	UAdminCommand_ListPrisonerForeignSubstances(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetDeluxeVersion
{
public:
	UAdminCommand_SetDeluxeVersion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInventorySizeData
{
public:
	UInventorySizeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerMovementSettings
{
public:
	UPrisonerMovementSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerMovementSettings_Ground GetGround() {
		return memory.read<struct FPrisonerMovementSettings_Ground>(m_addr + 48);
	}
	struct FPrisonerMovementSettings_Air GetAir() {
		return memory.read<struct FPrisonerMovementSettings_Air>(m_addr + 416);
	}
	struct FPrisonerMovementSettings_Water GetWater() {
		return memory.read<struct FPrisonerMovementSettings_Water>(m_addr + 736);
	}
	struct FFloatInterval GetRotationRateMultiplierVsPerformanceRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 820);
	}
	struct FFloatInterval GetClimbingSpeedMultiplierVsPerformanceRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 828);
	}
	struct FFloatInterval GetWindowClimbingSpeedMultiplierVsPerformanceRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 836);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWeaponRocketLauncher
{
public:
	AWeaponRocketLauncher(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWeaponState GetArmState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12120);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponState GetUnarmState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12128);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponState GetArmedState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12136);
		return struct UWeaponState(ptr_addr);
	}
	UWeaponActionRocketLauncherArmSequence Get_armActionSequenceClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12144);
		return UWeaponActionRocketLauncherArmSequence(ptr_addr);
	}
	UWeaponActionRocketLauncherUnarmSequence Get_unarmActionSequenceClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12152);
		return UWeaponActionRocketLauncherUnarmSequence(ptr_addr);
	}
	bool Get_needsToBeArmedToFire() {
		return memory.read<bool>(m_addr + 12160);
	}
	bool Get_spawnWithLoadedProjectile() {
		return memory.read<bool>(m_addr + 12161);
	}
	struct FName Get_backMuzzlerSocketName() {
		return memory.read<struct FName>(m_addr + 12164);
	}
	struct UParticleSystem Get_baskMuzzlePS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12176);
		return struct UParticleSystem(ptr_addr);
	}
	struct UWeaponActionRocketLauncherArmSequence Get_armActionSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12184);
		return struct UWeaponActionRocketLauncherArmSequence(ptr_addr);
	}
	struct UWeaponActionRocketLauncherUnarmSequence Get_unarmActionSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12192);
		return struct UWeaponActionRocketLauncherUnarmSequence(ptr_addr);
	}
	struct UWeaponState Get_unarmedState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12200);
		return struct UWeaponState(ptr_addr);
	}
	bool Get_isArmed() {
		return memory.read<bool>(m_addr + 12208);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListPrimaryAssets
{
public:
	UAdminCommand_ListPrimaryAssets(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetType Get_primaryAssetType() {
		return memory.read<struct FPrimaryAssetType>(m_addr + 136);
	}
	struct TSet<struct FPrimaryAssetId> Get_primaryAssetsToExclude() {
		return memory.read<struct TSet<struct FPrimaryAssetId>>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBluntMeleeWeaponItemTag
{
public:
	UBluntMeleeWeaponItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentCompletion
{
public:
	UAdminCommandArgumentCompletion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_canCompletionValuesBeCached() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerForeignSubstance_Antibiotics
{
public:
	UPrisonerForeignSubstance_Antibiotics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListPrisonerBodyConditionInteractions
{
public:
	UAdminCommand_ListPrisonerBodyConditionInteractions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTraderItemCategoryButton
{
public:
	UTraderItemCategoryButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton Get_button() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UButton(ptr_addr);
	}
	struct UImage Get_icon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UOverlay Get_insufficientFamePointsOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UOverlay(ptr_addr);
	}
	struct UTextBlock Get_requiredFamePointsText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct FText Get_titleValue() {
		return memory.read<struct FText>(m_addr + 672);
	}
	struct TSoftObjectPtr<UTexture> Get_iconTexture() {
		return memory.read<struct TSoftObjectPtr<UTexture>>(m_addr + 696);
	}
	struct UTexture2D Get_iconBlankTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UTexture2D(ptr_addr);
	}
	struct FVector2D Get_iconSize() {
		return memory.read<struct FVector2D>(m_addr + 744);
	}
	struct FGameplayTagContainer Get_tradeCategories() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 752);
	}
	struct UPanelWidget Get_panelToOpenOnClick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UPanelWidget(ptr_addr);
	}
	struct UAkAudioEvent Get_soundOnHover() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_soundOnClick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_Sepsis
{
public:
	UPrisonerBodyConditionUIData_Sepsis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_PlaySoundOnOwner
{
public:
	UAnimNotify_PlaySoundOnOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListSilencedPlayers
{
public:
	UAdminCommand_ListSilencedPlayers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMedicalItemTag
{
public:
	UMedicalItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UClothesModifierItemTag
{
public:
	UClothesModifierItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListWeatherControllerOverrides
{
public:
	UAdminCommand_ListWeatherControllerOverrides(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChangeStanceDescription
{
public:
	UPrisonerActionChangeStanceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ListSquadMembers
{
public:
	UAdminCommand_ListSquadMembers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankAccountRegistryResponse
{
public:
	UBankAccountRegistryResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBankAccountRegistryResponseDataObject Get_payload() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UBankAccountRegistryResponseDataObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsConfiguration
{
public:
	UCustomZoneSettingsConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBorder Get_border() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UBorder(ptr_addr);
	}
	struct UTextBlock Get_configurationName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_buttonRemove() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UButton(ptr_addr);
	}
	struct FLinearColor Get_unhighlightedColor() {
		return memory.read<struct FLinearColor>(m_addr + 680);
	}
	struct FLinearColor Get_highlightedColor() {
		return memory.read<struct FLinearColor>(m_addr + 696);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_Loot
{
public:
	UAdminCommand_Loot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_WeaponRevolverDrumRotationDirection
{
public:
	UAnimNotifyState_WeaponRevolverDrumRotationDirection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetRotationDirection() {
		return memory.read<uint8_t >(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankAccountRegistryStatics
{
public:
	UBankAccountRegistryStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetCurrencyBalanceToAllOnline
{
public:
	UAdminCommand_SetCurrencyBalanceToAllOnline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Unconsciousness
{
public:
	UPrisonerBodySymptomCause_Unconsciousness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_MutePlayer
{
public:
	UAdminCommand_MutePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_PlacementDebug
{
public:
	UAdminCommand_PlacementDebug(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_PrintEntities
{
public:
	UAdminCommand_PrintEntities(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AEffectOverTimeDealer
{
public:
	AEffectOverTimeDealer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FDamageOverTimeUpdateGroup> Get_updateGroups() {
		return memory.read<struct TArray<struct FDamageOverTimeUpdateGroup>>(m_addr + 544);
	}
	int32_t Get_actorLimitPerTick() {
		return memory.read<int32_t>(m_addr + 560);
	}
	float Get_timeDilation() {
		return memory.read<float>(m_addr + 568);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCircularMenuSegmentWidget
{
public:
	UCircularMenuSegmentWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGenericTooltip Get_genericTooltipClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return UGenericTooltip(ptr_addr);
	}
	float Get_nonSelectableAlpha() {
		return memory.read<float>(m_addr + 616);
	}
	struct FLinearColor Get_highlightedColour() {
		return memory.read<struct FLinearColor>(m_addr + 620);
	}
	struct FLinearColor Get_unHighlightedColour() {
		return memory.read<struct FLinearColor>(m_addr + 636);
	}
	struct UCircularMenuSegmentInfo Get_info() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UCircularMenuSegmentInfo(ptr_addr);
	}
	struct UCircularMenuSegmentWidget Get_parentSegmentWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UCircularMenuSegmentWidget(ptr_addr);
	}
	struct UImage Get_segment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UImage(ptr_addr);
	}
	struct UOverlay Get_iconsOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UOverlay(ptr_addr);
	}
	struct USizeBox Get_iconSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct USizeBox(ptr_addr);
	}
	struct UImage Get_icon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct USizeBox Get_overlayIconSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct USizeBox(ptr_addr);
	}
	struct UImage Get_overlayIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ShouldShowOtherPlayerInfo
{
public:
	UAdminCommand_ShouldShowOtherPlayerInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInventoryContainerWidget2
{
public:
	UInventoryContainerWidget2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_RandomizePriceDeltas
{
public:
	UAdminCommand_RandomizePriceDeltas(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ReloadCustomMapConfig
{
public:
	UAdminCommand_ReloadCustomMapConfig(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Bleeding
{
public:
	UPrisonerBodySymptomCause_Bleeding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_RenameVehicle
{
public:
	UAdminCommand_RenameVehicle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCheckThermalSensor
{
public:
	UPrisonerActionCheckThermalSensor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateRocketLauncherArm
{
public:
	UWeaponStateRocketLauncherArm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URunningSkill
{
public:
	URunningSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRunningSkillParametersPerSkillLevel GetNoSkillParameters() {
		return memory.read<struct FRunningSkillParametersPerSkillLevel>(m_addr + 200);
	}
	struct FRunningSkillParametersPerSkillLevel GetBasicSkillParameters() {
		return memory.read<struct FRunningSkillParametersPerSkillLevel>(m_addr + 216);
	}
	struct FRunningSkillParametersPerSkillLevel GetMediumSkillParameters() {
		return memory.read<struct FRunningSkillParametersPerSkillLevel>(m_addr + 232);
	}
	struct FRunningSkillParametersPerSkillLevel GetAdvancedSkillParameters() {
		return memory.read<struct FRunningSkillParametersPerSkillLevel>(m_addr + 248);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ResetAchievements
{
public:
	UAdminCommand_ResetAchievements(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_VisualizeZombieLocation
{
public:
	UAdminCommand_VisualizeZombieLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ResetEconomy
{
public:
	UAdminCommand_ResetEconomy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData
{
public:
	UPrisonerBodyConditionUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USoundReducingItemTag
{
public:
	USoundReducingItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SpawnRandomPrimaryActorAsset
{
public:
	UAdminCommand_SpawnRandomPrimaryActorAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPostItemsSpawnedActions_SetAmmoAmount
{
public:
	UPostItemsSpawnedActions_SetAmmoAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_useAbsoluteAmount() {
		return memory.read<bool>(m_addr + 40);
	}
	struct FInt32Interval Get_absoluteAmount() {
		return memory.read<struct FInt32Interval>(m_addr + 44);
	}
	bool Get_useAmountRatio() {
		return memory.read<bool>(m_addr + 52);
	}
	struct FFloatInterval Get_amountRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ResetMissionEnabled
{
public:
	UAdminCommand_ResetMissionEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ResetSquadInfo
{
public:
	UAdminCommand_ResetSquadInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayerRpcChannelServerRequest
{
public:
	UPlayerRpcChannelServerRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ALargeAquaticAnimal
{
public:
	ALargeAquaticAnimal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxHealth() {
		return memory.read<float>(m_addr + 1976);
	}
	float Get_health() {
		return memory.read<float>(m_addr + 1980);
	}
	float Get_maxTimeWithoutRelevantPrisoners() {
		return memory.read<float>(m_addr + 2000);
	}
	uint8_t  Get_behavior() {
		return memory.read<uint8_t >(m_addr + 2008);
	}
	struct UAnimMontage Get_deathAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2016);
		return struct UAnimMontage(ptr_addr);
	}
	float Get_deathSinkingSpeed() {
		return memory.read<float>(m_addr + 2024);
	}
	float Get_capsuleRadiusAndHalfHeightOnDeath() {
		return memory.read<float>(m_addr + 2028);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWindowFortificationsType
{
public:
	UWindowFortificationsType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<UObject, struct UStaticMesh*> GetMeshForFortification() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TMap<UObject, struct UStaticMesh*>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionApplyFlagElementsExpansionDescription
{
public:
	UPrisonerActionApplyFlagElementsExpansionDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AConZPlayerController
{
public:
	AConZPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UPrimitiveComponent> GetComponentsToHide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1408);
		return struct TArray<struct UPrimitiveComponent>(ptr_addr);
	}
	struct FMulticastInlineDelegate GetOnPrisonerSpawned() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 1424);
	}
	struct UInteractionContainerUserWidget GetCurrentInteractionContainerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1576);
		return struct UInteractionContainerUserWidget(ptr_addr);
	}
	bool GetIsTalkButtonPressed() {
		return memory.read<bool>(m_addr + 1584);
	}
	struct UPlayerRpcChannel Get_playerRpcChannel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1672);
		return struct UPlayerRpcChannel(ptr_addr);
	}
	struct UUserProfile Get_userProfile() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1744);
		return struct UUserProfile(ptr_addr);
	}
	struct FString Get_userFakeName() {
		return memory.read<struct FString>(m_addr + 1768);
	}
	int64_t Get_bankAccountNumber() {
		return memory.read<int64_t>(m_addr + 1784);
	}
	struct APawn Get_spawnedPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1792);
		return struct APawn(ptr_addr);
	}
	struct APawn Get_possessedPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1840);
		return struct APawn(ptr_addr);
	}
	APrisoner Get_prisonerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1848);
		return APrisoner(ptr_addr);
	}
	struct UPawnNoiseEmitterComponent Get_noiseEmitterComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1864);
		return struct UPawnNoiseEmitterComponent(ptr_addr);
	}
	float Get_teleportWorldStreamingLocationChangeDelay() {
		return memory.read<float>(m_addr + 1888);
	}
	float Get_teleportWorldStreamingTriggerLag() {
		return memory.read<float>(m_addr + 1892);
	}
	int32_t Get_repFamePoints() {
		return memory.read<int32_t>(m_addr + 2004);
	}
	int64_t Get_moneyBalanceRep() {
		return memory.read<int64_t>(m_addr + 2016);
	}
	int64_t Get_goldBalanceRep() {
		return memory.read<int64_t>(m_addr + 2024);
	}
	float Get_weatherHeightUpdatePeriod() {
		return memory.read<float>(m_addr + 2176);
	}
	struct AAchievementsManagerClient Get_achievementsManagerClient() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2184);
		return struct AAchievementsManagerClient(ptr_addr);
	}
	AAchievementsManagerClient Get_achievementsManagerClientClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2192);
		return AAchievementsManagerClient(ptr_addr);
	}
	AMissionManager Get_missionManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2200);
		return AMissionManager(ptr_addr);
	}
	struct AMissionManager Get_missionManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2208);
		return struct AMissionManager(ptr_addr);
	}
	AMissionDialogueManager Get_missionDialogueManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2216);
		return AMissionDialogueManager(ptr_addr);
	}
	float Get_isReadyForPlayDelay() {
		return memory.read<float>(m_addr + 2232);
	}
	float Get_reportPlayTimeInterval() {
		return memory.read<float>(m_addr + 2248);
	}
	struct FDateTime Get_replicatedServerUtcNow() {
		return memory.read<struct FDateTime>(m_addr + 2256);
	}
	struct UPathFollowingComponent Get_pathFollowingComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2360);
		return struct UPathFollowingComponent(ptr_addr);
	}
	bool Get_forceSpawnAsDrone() {
		return memory.read<bool>(m_addr + 2368);
	}
	bool Get_mpSpawnDroneAndPrisoner() {
		return memory.read<bool>(m_addr + 2369);
	}
	APhotoModePawn Get_photoModePawnClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2384);
		return APhotoModePawn(ptr_addr);
	}
	float Get_refreshTimeForPawnLocationOnMap() {
		return memory.read<float>(m_addr + 2412);
	}
	struct UMaterialParameterCollection Get_mainMPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2424);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	int32_t Get_numTrySpawnsForTimeout() {
		return memory.read<int32_t>(m_addr + 2460);
	}
	float Get_serverHeartbeatSendPeriod() {
		return memory.read<float>(m_addr + 2492);
	}
	float Get_heartbeatTimeout() {
		return memory.read<float>(m_addr + 2496);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SendNotification
{
public:
	UAdminCommand_SendNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemObstructionTestCapsuleComponent
{
public:
	UItemObstructionTestCapsuleComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHasLadderMarkersInterface
{
public:
	UHasLadderMarkersInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCookingCommonData
{
public:
	UCookingCommonData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetMassReductionByPeakTemperature_Fiber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Starch() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Sugars() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_OtherCarbohydrates() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_SaturatedFat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_OtherFats() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Protein() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_VitaminA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_VitaminC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_VitaminD() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_VitaminE() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_VitaminK() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_VitaminB1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_VitaminB2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_VitaminB3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_VitaminB6() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_VitaminB9() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_VitaminB12() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_VitaminB5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_VitaminB4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Calcium() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Iron() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Magnesium() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Phosphorus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Potassium() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Sodium() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Zinc() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Copper() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Manganese() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Selenium() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Alcohol() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 288);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMassReductionByPeakTemperature_Water() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_cookQualityVsCookAmount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_cookQualityVsCookTimeRelativeError_NoSkill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_cookQualityVsCookTimeRelativeError_Basic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_cookQualityVsCookTimeRelativeError_Medium() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 328);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_cookQualityVsCookTimeRelativeError_Advanced() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 336);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_cookQualityVsCookTimeRelativeError_AboveAdvanced() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 344);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_recipeMemorizationChancePerSkillLevel() {
		return memory.read<float>(m_addr + 352);
	}
	float Get_recipeMemorizationChancePerCookQuality() {
		return memory.read<float>(m_addr + 356);
	}
	float Get_baseExperienceGainPerRecipe() {
		return memory.read<float>(m_addr + 360);
	}
	float Get_experienceGainPerRecipeCookTimeInMinutes() {
		return memory.read<float>(m_addr + 364);
	}
	float Get_experienceGainPerRecipeCookTemperatureInDegrees() {
		return memory.read<float>(m_addr + 368);
	}
	float Get_experienceGainMultiplier_Ruined() {
		return memory.read<float>(m_addr + 372);
	}
	float Get_experienceGainMultiplier_Bad() {
		return memory.read<float>(m_addr + 376);
	}
	float Get_experienceGainMultiplier_Poor() {
		return memory.read<float>(m_addr + 380);
	}
	float Get_experienceGainMultiplier_Good() {
		return memory.read<float>(m_addr + 384);
	}
	float Get_experienceGainMultiplier_Excellent() {
		return memory.read<float>(m_addr + 388);
	}
	float Get_experienceGainMultiplier_Perfect() {
		return memory.read<float>(m_addr + 392);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetAchievementUnlocked
{
public:
	UAdminCommand_SetAchievementUnlocked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetDecayTimeDilation
{
public:
	UAdminCommand_SetDecayTimeDilation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetAllInventoryAccess
{
public:
	UAdminCommand_SetAllInventoryAccess(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCircularMenuSegmentGenericInfo
{
public:
	UCircularMenuSegmentGenericInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDelegate GetAction() {
		return memory.read<struct FDelegate>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetCraftingSearch
{
public:
	UAdminCommand_SetCraftingSearch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UChatSpamProtectionRules
{
public:
	UChatSpamProtectionRules(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetOffenceDuration() {
		return memory.read<float>(m_addr + 48);
	}
	int32_t GetMessageRepetitions() {
		return memory.read<int32_t>(m_addr + 52);
	}
	struct TMap<uint8_t , struct FSpamSeverityConditions> Get_conditions() {
		return memory.read<struct TMap<uint8_t , struct FSpamSeverityConditions>>(m_addr + 56);
	}
	struct TMap<uint8_t , struct FSpamConsequences> Get_consequences() {
		return memory.read<struct TMap<uint8_t , struct FSpamConsequences>>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};


class URemoteKeyItemState
{
public:
	URemoteKeyItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCharacterPainSoundsData
{
public:
	UCharacterPainSoundsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateBowDraw
{
public:
	UWeaponStateBowDraw(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetCurrencyBalance
{
public:
	UAdminCommand_SetCurrencyBalance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionWithCausesUIData
{
public:
	UPrisonerBodyConditionWithCausesUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UPrisonerBodyConditionCauseUIData> Get_causes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 416);
		return struct TArray<struct UPrisonerBodyConditionCauseUIData>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAmmunitionBoneListAssetData
{
public:
	UAmmunitionBoneListAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> GetCartridgeBoneNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetCurrencyBalanceToAll
{
public:
	UAdminCommand_SetCurrencyBalanceToAll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTraderManagingComponent
{
public:
	UTraderManagingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_pawnRelevancyRange() {
		return memory.read<float>(m_addr + 208);
	}
	float Get_tradeOutpostsUpdateTime() {
		return memory.read<float>(m_addr + 212);
	}
	float Get_outpostEconomyResetTimeHours() {
		return memory.read<float>(m_addr + 220);
	}
	float Get_outpostPriceDeltasRandomizationTimeHours() {
		return memory.read<float>(m_addr + 224);
	}
	float Get_tradeableRotationTimeIngameHoursMin() {
		return memory.read<float>(m_addr + 228);
	}
	float Get_tradeableRotationTimeIngameHoursMax() {
		return memory.read<float>(m_addr + 232);
	}
	float Get_tradeableRotationTimeOfDayMin() {
		return memory.read<float>(m_addr + 236);
	}
	float Get_tradeableRotationTimeOfDayMax() {
		return memory.read<float>(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEntitySystemSettingsProvider
{
public:
	UEntitySystemSettingsProvider(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetFacialHairLength
{
public:
	UAdminCommand_SetFacialHairLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Burping
{
public:
	UPrisonerBodySymptomCause_Burping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionTakeItemInHands
{
public:
	UPrisonerActionTakeItemInHands(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_WeaponHideMagazine
{
public:
	UAnimNotifyState_WeaponHideMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemActionSequence
{
public:
	UItemActionSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_canBeCanceled() {
		return memory.read<bool>(m_addr + 80);
	}
	struct FCharacterAndItemAnimation Get_animations() {
		return memory.read<struct FCharacterAndItemAnimation>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACuttingObjective
{
public:
	ACuttingObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TSoftClassPtr<UObject>> Get_targetMeshes() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 816);
	}
	bool Get_specificItem() {
		return memory.read<bool>(m_addr + 832);
	}
	AItem Get_itemToFound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return AItem(ptr_addr);
	}
	int32_t Get_itemAmount() {
		return memory.read<int32_t>(m_addr + 848);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetFakeName
{
public:
	UAdminCommand_SetFakeName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ARadioItem
{
public:
	ARadioItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URadioComponent Get_radioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct URadioComponent(ptr_addr);
	}
	struct UBasicGameResourceContainerComponent Get_resourceContainerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2328);
		return struct UBasicGameResourceContainerComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMedicationItem
{
public:
	AMedicationItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetUsage() {
		return memory.read<uint8_t >(m_addr + 2320);
	}
	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 2321);
	}
	float GetDailyDoses() {
		return memory.read<float>(m_addr + 2324);
	}
	float GetTimeToAbsorbSeconds() {
		return memory.read<float>(m_addr + 2328);
	}
	float GetEffectTimeMultiplier() {
		return memory.read<float>(m_addr + 2332);
	}
	float GetReuseEffectTimeIncrease() {
		return memory.read<float>(m_addr + 2336);
	}
	float GetMaxEffectTime() {
		return memory.read<float>(m_addr + 2340);
	}
	uint8_t  GetRepeatedAbuseReaction() {
		return memory.read<uint8_t >(m_addr + 2344);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffectUIData_GroundMovementSpeedModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffectUIData_GroundMovementSpeedModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetFamePoints
{
public:
	UAdminCommand_SetFamePoints(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_WeaponActionNotify
{
public:
	UAnimNotify_WeaponActionNotify(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetWeaponActionNotifyType() {
		return memory.read<uint8_t >(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryItemData2D
{
public:
	UInventoryItemData2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSizeX() {
		return memory.read<int32_t>(m_addr + 48);
	}
	int32_t GetSizeY() {
		return memory.read<int32_t>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAirplaneAnimInstance
{
public:
	UAirplaneAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsAnyoneMounted() {
		return memory.read<bool>(m_addr + 696);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 700);
	}
	float GetSpeedKph() {
		return memory.read<float>(m_addr + 704);
	}
	float GetPropellerRotationAngle() {
		return memory.read<float>(m_addr + 708);
	}
	float GetLeftAileronsAngle() {
		return memory.read<float>(m_addr + 712);
	}
	float GetRightAileronsAngle() {
		return memory.read<float>(m_addr + 716);
	}
	float GetElevatorsAngle() {
		return memory.read<float>(m_addr + 720);
	}
	float GetRudderAngle() {
		return memory.read<float>(m_addr + 724);
	}
	bool GetIsMounteeDriver() {
		return memory.read<bool>(m_addr + 728);
	}
	float GetclockMinuteRotation() {
		return memory.read<float>(m_addr + 732);
	}
	float GetclockHourRotation() {
		return memory.read<float>(m_addr + 736);
	}
	float GetaltimeterTensRotation() {
		return memory.read<float>(m_addr + 740);
	}
	float GetaltimeterHundredsRotation() {
		return memory.read<float>(m_addr + 744);
	}
	float GetaltimeterThousandsRotation() {
		return memory.read<float>(m_addr + 748);
	}
	float GetairSpeedRotation() {
		return memory.read<float>(m_addr + 752);
	}
	float GetrpmRotation() {
		return memory.read<float>(m_addr + 756);
	}
	float GetverticalSpeedRotation() {
		return memory.read<float>(m_addr + 760);
	}
	float GetthrottleLeverRotation() {
		return memory.read<float>(m_addr + 764);
	}
	float GetleftYawPedalRotation() {
		return memory.read<float>(m_addr + 768);
	}
	float GetrightYawPedalRotation() {
		return memory.read<float>(m_addr + 772);
	}
	struct FRotator GetstickRotator() {
		return memory.read<struct FRotator>(m_addr + 776);
	}
	struct FRotator GetheadingRotator() {
		return memory.read<struct FRotator>(m_addr + 788);
	}
	bool GetshouldHidePropellerBone() {
		return memory.read<bool>(m_addr + 800);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlayerRpcChannelServerResponse
{
public:
	UPlayerRpcChannelServerResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetFamePointsToAllOnline
{
public:
	UAdminCommand_SetFamePointsToAllOnline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ShowFlagInfo
{
public:
	UAdminCommand_ShowFlagInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AGameEventBase
{
public:
	AGameEventBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetEventName() {
		return memory.read<struct FText>(m_addr + 544);
	}
	UGameEventParticipantStats GetParticipantStatsClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return UGameEventParticipantStats(ptr_addr);
	}
	UGameEventRoundInfoWidget GetRoundInfoWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return UGameEventRoundInfoWidget(ptr_addr);
	}
	UGameEventTeamHeaderWidget GetTeamHeaderWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return UGameEventTeamHeaderWidget(ptr_addr);
	}
	UGameEventParticipantStatsWidget GetStatWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return UGameEventParticipantStatsWidget(ptr_addr);
	}
	UGameEventParticipantStatsWidget GetMiniStatWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return UGameEventParticipantStatsWidget(ptr_addr);
	}
	AGameEventTransport GetTransportClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return AGameEventTransport(ptr_addr);
	}
	struct UAkAudioEvent GetTimesUpAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetBlueTeamWonRoundAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRedTeamWonRoundAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRoundDrawAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetBlueTeamWonEventAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRedTeamWonEventAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetEventDrawAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetTime30sAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetTime15sAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetTime10sCountdownAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetTensionMusicStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetTensionMusicStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UAkAudioEvent(ptr_addr);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 712);
	}
	int32_t Get_activeParticipantCount() {
		return memory.read<int32_t>(m_addr + 716);
	}
	int32_t Get_numberOfTeams() {
		return memory.read<int32_t>(m_addr + 720);
	}
	struct TArray<int32_t> Get_teamMemberCount() {
		return memory.read<struct TArray<int32_t>>(m_addr + 728);
	}
	struct TArray<int32_t> Get_teamScores() {
		return memory.read<struct TArray<int32_t>>(m_addr + 744);
	}
	struct TArray<int32_t> Get_roundWinningTeam() {
		return memory.read<struct TArray<int32_t>>(m_addr + 760);
	}
	int32_t Get_round() {
		return memory.read<int32_t>(m_addr + 776);
	}
	float Get_roundTimeLeft() {
		return memory.read<float>(m_addr + 780);
	}
	float Get_cancelTimeLeft() {
		return memory.read<float>(m_addr + 784);
	}
	struct AGameEventLocationMarker Get_marker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct AGameEventLocationMarker(ptr_addr);
	}
	struct AGameEventBorder Get_border() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct AGameEventBorder(ptr_addr);
	}
	struct AGameEventManager Get_manager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct AGameEventManager(ptr_addr);
	}
	struct TArray<struct FGameEventParticipantInfo> Get_participantInfo() {
		return memory.read<struct TArray<struct FGameEventParticipantInfo>>(m_addr + 840);
	}
	struct FGameEventParameters Get_parameters() {
		return memory.read<struct FGameEventParameters>(m_addr + 856);
	}
	struct UGameEventCardWidget Get_cardWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1248);
		return struct UGameEventCardWidget(ptr_addr);
	}
	struct UGameEventScoreboardWidget Get_scoreboardWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct UGameEventScoreboardWidget(ptr_addr);
	}
	struct UGameEventScoreboardWidget Get_miniScoreboardWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return struct UGameEventScoreboardWidget(ptr_addr);
	}
	struct TArray<int32_t> Get_rankings() {
		return memory.read<struct TArray<int32_t>>(m_addr + 1272);
	}
	struct UAkComponent Get_lastAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1320);
		return struct UAkComponent(ptr_addr);
	}
	struct UAkComponent Get_lastCountdownAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1328);
		return struct UAkComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UZombieImpersonatingItemTag
{
public:
	UZombieImpersonatingItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_TeleportToMe
{
public:
	UAdminCommand_TeleportToMe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGrapplingWidget
{
public:
	UGrapplingWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_gameProgress() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_grapplingValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_instructionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemTooltipPanelElement
{
public:
	UItemTooltipPanelElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName Get_elementName() {
		return memory.read<struct FName>(m_addr + 608);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInsertMagazineInsertCartridge
{
public:
	UInsertMagazineInsertCartridge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetFarmingSimulationSpeed
{
public:
	UAdminCommand_SetFarmingSimulationSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetGodMode
{
public:
	UAdminCommand_SetGodMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySimulationUIController
{
public:
	UPrisonerBodySimulationUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Diarrhea
{
public:
	UPrisonerBodySymptomCause_Diarrhea(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABrokenArrow
{
public:
	ABrokenArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCharacterSpawnerSpawnee
{
public:
	UCharacterSpawnerSpawnee(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDropdownMenuTextureSelectionWidget
{
public:
	UDropdownMenuTextureSelectionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetHairLength
{
public:
	UAdminCommand_SetHairLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHaircutAndMakeupService
{
public:
	UHaircutAndMakeupService(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetHealthToItemInHands
{
public:
	UAdminCommand_SetHealthToItemInHands(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UArrayStatics
{
public:
	UArrayStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWeaponAttachmentAutoCrossbowMagazine
{
public:
	AWeaponAttachmentAutoCrossbowMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRemovePlant
{
public:
	UPrisonerActionRemovePlant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_Pain
{
public:
	UPrisonerBodySymptomUIData_Pain(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBreathingBarLungsWidget
{
public:
	UBreathingBarLungsWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_lungs() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_lungsCritical() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UWidgetAnimation Get_criticalStateAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UIgnitableExplosiveItemComponent
{
public:
	UIgnitableExplosiveItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_explosionDamage() {
		return memory.read<float>(m_addr + 416);
	}
	float Get_explosionOuterRadius() {
		return memory.read<float>(m_addr + 420);
	}
	float Get_explosionInnerRadius() {
		return memory.read<float>(m_addr + 424);
	}
	float Get_explosionFalloff() {
		return memory.read<float>(m_addr + 428);
	}
	float Get_explosionForce() {
		return memory.read<float>(m_addr + 432);
	}
	struct FTargetTypeDamageMultiplier Get_targetTypeMultiplier() {
		return memory.read<struct FTargetTypeDamageMultiplier>(m_addr + 440);
	}
	struct UParticleSystem Get_explosionParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 464);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent Get_explosionAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 472);
		return struct UAkAudioEvent(ptr_addr);
	}
	UMatineeCameraShake Get_explosionCameraShakeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 480);
		return UMatineeCameraShake(ptr_addr);
	}
	float Get_hearingDamageRadius() {
		return memory.read<float>(m_addr + 488);
	}
	float Get_activeNetCullDistanceSquaredMeters() {
		return memory.read<float>(m_addr + 492);
	}
	bool Get_canExplodeUnderwater() {
		return memory.read<bool>(m_addr + 496);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetInfiniteAmmo
{
public:
	UAdminCommand_SetInfiniteAmmo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehiclePowertrainComponent
{
public:
	UVehiclePowertrainComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInv2021_InventoryPositionClothesObject
{
public:
	UInv2021_InventoryPositionClothesObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AConZBaseElement
{
public:
	AConZBaseElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	USceneComponent Get_weatherMaskComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return USceneComponent(ptr_addr);
	}
	struct TMap<struct UStaticMesh, struct UIndexedHierarchicalInstancedStaticMeshComponent*> Get_elementClassMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct TMap<struct UStaticMesh, struct UIndexedHierarchicalInstancedStaticMeshComponent*>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UClearSearchButton
{
public:
	UClearSearchButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation Get_hoverAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation Get_clickAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_Weakness
{
public:
	UPrisonerBodySymptomUIData_Weakness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponDamageGroup
{
public:
	UWeaponDamageGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetHead() {
		return memory.read<float>(m_addr + 48);
	}
	float GetNeck() {
		return memory.read<float>(m_addr + 52);
	}
	float GetTorso() {
		return memory.read<float>(m_addr + 56);
	}
	float GetArmUpper() {
		return memory.read<float>(m_addr + 60);
	}
	float GetAbdomen() {
		return memory.read<float>(m_addr + 64);
	}
	float GetLegUpper() {
		return memory.read<float>(m_addr + 68);
	}
	float GetOtherLimbs() {
		return memory.read<float>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsHandlingMethodSelector
{
public:
	UCustomZoneSettingsHandlingMethodSelector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText Get_description() {
		return memory.read<struct FText>(m_addr + 632);
	}
	struct UTextBlock Get_nameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_buttonSkip() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_buttonAllow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_buttonBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UButton(ptr_addr);
	}
	struct UCustomZoneDataAsset Get_customZoneData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UCustomZoneDataAsset(ptr_addr);
	}
	bool Get_showSkipOption() {
		return memory.read<bool>(m_addr + 696);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWheeledVehicle2WAnimInstance
{
public:
	UWheeledVehicle2WAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_WeaponRevolverIgnoreDrumRotation
{
public:
	UAnimNotifyState_WeaponRevolverIgnoreDrumRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBedrollVirtualizedItemUserData
{
public:
	UBedrollVirtualizedItemUserData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetOccupant() {
		return memory.read<struct FDbIntegerId>(m_addr + 40);
	}
	struct FDateTime GetTimerStart() {
		return memory.read<struct FDateTime>(m_addr + 48);
	}
	struct FTimespan GetTimerDuration() {
		return memory.read<struct FTimespan>(m_addr + 56);
	}
	bool GetShouldLoad() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetItemDebugMode
{
public:
	UAdminCommand_SetItemDebugMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionTuneBow
{
public:
	UPrisonerActionTuneBow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent Get_tuneBowAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFishSchoolActor
{
public:
	AFishSchoolActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_currentState() {
		return memory.read<uint8_t >(m_addr + 544);
	}
	struct UCapsuleComponent Get_capsuleComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct UCapsuleComponent(ptr_addr);
	}
	struct UFishInstancedStaticMeshComponent Get_schoolInstancedStaticMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct UFishInstancedStaticMeshComponent(ptr_addr);
	}
	float Get_minDistanceToTarget() {
		return memory.read<float>(m_addr + 652);
	}
	float Get_boundsInflation() {
		return memory.read<float>(m_addr + 656);
	}
	float Get_findPathBypassMultiplier() {
		return memory.read<float>(m_addr + 660);
	}
	int32_t Get_maxTimesSameDestinationAllowed() {
		return memory.read<int32_t>(m_addr + 664);
	}
	float Get_maxTimePerDestinationMultiplier() {
		return memory.read<float>(m_addr + 668);
	}
	float Get_schoolMovementRecoveryTurningSpeed() {
		return memory.read<float>(m_addr + 676);
	}
	float Get_schoolMovementRecoveryAcceleration() {
		return memory.read<float>(m_addr + 680);
	}
	float Get_schoolMovementRecoveryDeceleration() {
		return memory.read<float>(m_addr + 684);
	}
	float Get_schoolCloseToSurfaceTurningSpeed() {
		return memory.read<float>(m_addr + 688);
	}
	float Get_schoolCloseToSurfaceAcceleration() {
		return memory.read<float>(m_addr + 692);
	}
	float Get_schoolCloseToSurfaceDeceleration() {
		return memory.read<float>(m_addr + 696);
	}
	float Get_surfaceOffset() {
		return memory.read<float>(m_addr + 700);
	}
	float Get_upperForbiddenZoneDepthPercentage() {
		return memory.read<float>(m_addr + 708);
	}
	float Get_swimmingDepthPercentage() {
		return memory.read<float>(m_addr + 712);
	}
	float Get_lowerForbiddenZoneDepthPercentage() {
		return memory.read<float>(m_addr + 716);
	}
	struct UParticleSystem Get_waterParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UParticleSystem(ptr_addr);
	}
	float Get_waterParticlesInterval() {
		return memory.read<float>(m_addr + 728);
	}
	struct UParticleSystemComponent Get_waterParticlesComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UParticleSystemComponent(ptr_addr);
	}
	int32_t Get_forcedNumberOfGroups() {
		return memory.read<int32_t>(m_addr + 748);
	}
	float Get_groupSpeed() {
		return memory.read<float>(m_addr + 752);
	}
	float Get_groupSeparationSpeed() {
		return memory.read<float>(m_addr + 756);
	}
	float Get_groupCatchUpSpeed() {
		return memory.read<float>(m_addr + 760);
	}
	float Get_groupSeparationDistance() {
		return memory.read<float>(m_addr + 764);
	}
	float Get_groupSeparationTime() {
		return memory.read<float>(m_addr + 772);
	}
	int32_t Get_minNumberOfFish() {
		return memory.read<int32_t>(m_addr + 776);
	}
	int32_t Get_maxNumberOfFish() {
		return memory.read<int32_t>(m_addr + 780);
	}
	float Get_maxFishDistance() {
		return memory.read<float>(m_addr + 788);
	}
	float Get_fishSeparationDistance() {
		return memory.read<float>(m_addr + 796);
	}
	float Get_fishSeparationTime() {
		return memory.read<float>(m_addr + 800);
	}
	float Get_fishTurnSpeedRangeModifier() {
		return memory.read<float>(m_addr + 808);
	}
	float Get_fishMinScale() {
		return memory.read<float>(m_addr + 812);
	}
	float Get_fishMaxScale() {
		return memory.read<float>(m_addr + 816);
	}
	float Get_fishNormalSpeed() {
		return memory.read<float>(m_addr + 820);
	}
	float Get_fishSeparationSpeed() {
		return memory.read<float>(m_addr + 824);
	}
	float Get_fishCatchUpSpeed() {
		return memory.read<float>(m_addr + 828);
	}
	float Get_fishMaxSpeed() {
		return memory.read<float>(m_addr + 832);
	}
	float Get_fishAcceleration() {
		return memory.read<float>(m_addr + 836);
	}
	float Get_fishDeceleration() {
		return memory.read<float>(m_addr + 840);
	}
	struct FVector Get_moveToLocationRep() {
		return memory.read<struct FVector>(m_addr + 920);
	}
	struct TMap<uint8_t , struct FFishStateParameters> Get_behaviorMap() {
		return memory.read<struct TMap<uint8_t , struct FFishStateParameters>>(m_addr + 944);
	}
	struct FVector Get_randomMovementExtent() {
		return memory.read<struct FVector>(m_addr + 1024);
	}
	float Get_fleeingDistanceFromEnemy() {
		return memory.read<float>(m_addr + 1036);
	}
	float Get_fleeingPathLength() {
		return memory.read<float>(m_addr + 1040);
	}
	float Get_returnToNormalBehaviorDistance() {
		return memory.read<float>(m_addr + 1044);
	}
	float Get_schoolInternalMovementRelevancyDistanceSquared() {
		return memory.read<float>(m_addr + 1048);
	}
	float Get_fadeInTime() {
		return memory.read<float>(m_addr + 1068);
	}
	float Get_fadeOutTime() {
		return memory.read<float>(m_addr + 1076);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetMalfunctionProbability
{
public:
	UAdminCommand_SetMalfunctionProbability(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetPrisonerAttributes
{
public:
	UAdminCommand_SetPrisonerAttributes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMissionResult
{
public:
	UMissionResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UOverlay Get_resultTitleOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UOverlay(ptr_addr);
	}
	struct UTextBlock Get_resultTitleDescription() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UOverlay Get_resultRewardContainerOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UOverlay(ptr_addr);
	}
	struct UVerticalBox Get_resultRewardContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UVerticalBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_Weakness
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_Weakness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodySymptom_Weakness Get_symptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodySymptom_Weakness(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Weakness Get_symptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPrisonerBodySymptomCause_Weakness(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_performanceScoreModifierVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 64);
	}
	float Get_strengthModifierPerPerformanceScoreModifier() {
		return memory.read<float>(m_addr + 200);
	}
	float Get_constitutionModifierPerPerformanceScoreModifier() {
		return memory.read<float>(m_addr + 204);
	}
	float Get_dexterityModifierPerPerformanceScoreModifier() {
		return memory.read<float>(m_addr + 208);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneRegistry
{
public:
	UCustomZoneRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface Get_mapMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FCustomZoneConfiguration Get_defaultGlobalConfiguration() {
		return memory.read<struct FCustomZoneConfiguration>(m_addr + 200);
	}
	struct FCustomZoneConfiguration Get_defaultConfiguration() {
		return memory.read<struct FCustomZoneConfiguration>(m_addr + 264);
	}
	struct TMap<struct FName, struct FCustomZoneRegion> Get_defaultRegions() {
		return memory.read<struct TMap<struct FName, struct FCustomZoneRegion>>(m_addr + 328);
	}
	struct UCanvasRenderTarget2D Get_mapTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 408);
		return struct UCanvasRenderTarget2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZButton
{
public:
	UConZButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_SetupCarJack
{
public:
	UPrisonerVehicleAction_SetupCarJack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionStartPlayingInstrument
{
public:
	UPrisonerActionStartPlayingInstrument(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionSearchGroundDescription
{
public:
	UPrisonerActionSearchGroundDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCombinationLockGetCombinationRequest
{
public:
	UCombinationLockGetCombinationRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AInstrumentItem
{
public:
	AInstrumentItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_numberOfOctaves() {
		return memory.read<int32_t>(m_addr + 2332);
	}
	struct UAnimMontage Get_playInstrumentStartMontageFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2336);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_playInstrumentStartMontageTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2344);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_playInstrumentStopMontageFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_playInstrumentStopMontageTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2360);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimSequenceBase Get_playInstrumentIdleAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2368);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_playInstrumentPlayingAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2376);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_playInstrumentIdleAnimationTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2384);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_playInstrumentPlayingAnimationTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2392);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float Get_playingPoseHoldTime() {
		return memory.read<float>(m_addr + 2400);
	}
	struct TArray<struct UAkAudioEvent> Get_noteCStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2408);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteCStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2424);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteDStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2440);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteDStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2456);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteDbStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2472);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteDbStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2488);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteEStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2504);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteEStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2520);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteEbStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2536);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteEbStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2552);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteFStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2568);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteFStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2584);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteGStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2600);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteGStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2616);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteGbStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2632);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteGbStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2648);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteAStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2664);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteAStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2680);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteAbStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2696);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteAbStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2712);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteBStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2728);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteBStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2744);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteBbStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2760);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteBbStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2776);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteC2Start() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2792);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_noteC2Stop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2808);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetPrisonerExhaustion
{
public:
	UAdminCommand_SetPrisonerExhaustion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTabModeTabsContainer
{
public:
	UTabModeTabsContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UHorizontalBox Get_mainHorizontalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UTabModeTab Get_inventoryTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTabModeTab(ptr_addr);
	}
	struct UTabModeTab Get_craftingTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTabModeTab(ptr_addr);
	}
	struct UTabModeTab Get_buildingTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTabModeTab(ptr_addr);
	}
	struct UTabModeTab Get_metabolismTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTabModeTab(ptr_addr);
	}
	struct UTabModeTab Get_journalTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTabModeTab(ptr_addr);
	}
	struct UTabModeTab Get_squadTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTabModeTab(ptr_addr);
	}
	struct UTabModeTab Get_eventsTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTabModeTab(ptr_addr);
	}
	struct UTabModeTab Get_cookingTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTabModeTab(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentDataType_Bool
{
public:
	UAdminCommandArgumentDataType_Bool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_defaultValue() {
		return memory.read<bool>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};


class URainCollectorComponent
{
public:
	URainCollectorComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId Get_collectorID() {
		return memory.read<struct FDbIntegerId>(m_addr + 200);
	}
	float Get_fillRate() {
		return memory.read<float>(m_addr + 212);
	}
	float Get_maxAmount() {
		return memory.read<float>(m_addr + 216);
	}
	struct UAkAudioEvent Get_collectingStartSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_collectingStopSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetPrisonerImmortality
{
public:
	UAdminCommand_SetPrisonerImmortality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetPrisonerInfiniteOxygen
{
public:
	UAdminCommand_SetPrisonerInfiniteOxygen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBasicItemDecayEntityComponentSetup
{
public:
	UBasicItemDecayEntityComponentSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetLifeTime() {
		return memory.read<float>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEventInsertCartridge
{
public:
	UEventInsertCartridge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionApplyFlagElementsExpansion
{
public:
	UPrisonerActionApplyFlagElementsExpansion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_ShowAmmunitionMeshes
{
public:
	UAnimNotifyState_ShowAmmunitionMeshes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetGenerateCustomMeshComponents() {
		return memory.read<bool>(m_addr + 48);
	}
	struct TArray<struct FName> GetCustomMeshComponentsBoneNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 56);
	}
	bool GetshowReversed() {
		return memory.read<bool>(m_addr + 72);
	}
	struct TArray<int32_t> GetammoIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBaseItemContainerWidget
{
public:
	UBaseItemContainerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetObjectAddedToContainer() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 608);
	}
	int32_t GetColumns() {
		return memory.read<int32_t>(m_addr + 628);
	}
	int32_t GetRows() {
		return memory.read<int32_t>(m_addr + 632);
	}
	struct UGridPanel GetGridPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UGridPanel(ptr_addr);
	}
	struct UUserWidget GetHighlightBorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetPrisonerInfiniteStamina
{
public:
	UAdminCommand_SetPrisonerInfiniteStamina(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UImageSlotWidget
{
public:
	UImageSlotWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_availabilityGrid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_backgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_displayedImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct FSlateBrush Get_defaultImageBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 704);
	}
	struct FLinearColor Get_regularColor() {
		return memory.read<struct FLinearColor>(m_addr + 848);
	}
	struct FLinearColor Get_dropUnavailableColor() {
		return memory.read<struct FLinearColor>(m_addr + 864);
	}
	struct FLinearColor Get_dropAvailableColor() {
		return memory.read<struct FLinearColor>(m_addr + 880);
	}
	float Get_defaultBackgroundOpacity() {
		return memory.read<float>(m_addr + 896);
	}
	float Get_slottedBackgroundOpacity() {
		return memory.read<float>(m_addr + 900);
	}
	struct FSlateColor Get_defaultIconTint() {
		return memory.read<struct FSlateColor>(m_addr + 904);
	}
	struct FSlateColor Get_slottedIconTint() {
		return memory.read<struct FSlateColor>(m_addr + 944);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionOperateBondage
{
public:
	UPrisonerActionOperateBondage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetPrisonerMetabolismSimulationSpeed
{
public:
	UAdminCommand_SetPrisonerMetabolismSimulationSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInventoryPositionDataSelection
{
public:
	UInventoryPositionDataSelection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Getposition() {
		return memory.read<int32_t>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimInstance
{
public:
	UPrisonerAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSlowPaceLoopAnimSpeeds[16]() {
		return memory.read<float>(m_addr + 696);
	}
	float GetMediumPaceLoopAnimSpeeds[16]() {
		return memory.read<float>(m_addr + 784);
	}
	float GetFastPaceLoopAnimSpeeds[16]() {
		return memory.read<float>(m_addr + 872);
	}
	float GetMeleeCombatWalkUsageRadius() {
		return memory.read<float>(m_addr + 960);
	}
	float GetMeleeExhaustionFactorInterpSpeed() {
		return memory.read<float>(m_addr + 964);
	}
	float GetUpperEyelidsLookLeftFactor() {
		return memory.read<float>(m_addr + 968);
	}
	float GetLowerEyelidsLookLeftFactor() {
		return memory.read<float>(m_addr + 972);
	}
	float GetUpperEyelidsLookRightFactor() {
		return memory.read<float>(m_addr + 976);
	}
	float GetLowerEyelidsLookRightFactor() {
		return memory.read<float>(m_addr + 980);
	}
	float GetUpperEyelidsLookUpFactor() {
		return memory.read<float>(m_addr + 984);
	}
	float GetLowerEyelidsLookUpFactor() {
		return memory.read<float>(m_addr + 988);
	}
	float GetUpperEyelidsLookDownFactor() {
		return memory.read<float>(m_addr + 992);
	}
	float GetLowerEyelidsLookDownFactor() {
		return memory.read<float>(m_addr + 996);
	}
	bool GetAutoBlinkEnabled() {
		return memory.read<bool>(m_addr + 1000);
	}
	bool Get_isPrisonerCompletelyInitialized() {
		return memory.read<bool>(m_addr + 1160);
	}
	bool Get_isOwnerLocallyControlled() {
		return memory.read<bool>(m_addr + 1161);
	}
	bool Get_isOwnerPlayerControlled() {
		return memory.read<bool>(m_addr + 1162);
	}
	bool Get_isFemale() {
		return memory.read<bool>(m_addr + 1163);
	}
	bool Get_isInFirstPersonView() {
		return memory.read<bool>(m_addr + 1164);
	}
	bool Get_shouldOverrideIsInFirstPersonView() {
		return memory.read<bool>(m_addr + 1165);
	}
	bool Get_isInFirstPersonViewOverride() {
		return memory.read<bool>(m_addr + 1166);
	}
	bool Get_isInFirstPersonViewAndIsFemale() {
		return memory.read<bool>(m_addr + 1167);
	}
	bool Get_isInThirdPersonViewAndIsFemale() {
		return memory.read<bool>(m_addr + 1168);
	}
	bool Get_isAimingWeapon() {
		return memory.read<bool>(m_addr + 1169);
	}
	bool Get_isAbleToFireWeapon() {
		return memory.read<bool>(m_addr + 1170);
	}
	uint8_t  Get_weaponAimingType() {
		return memory.read<uint8_t >(m_addr + 1171);
	}
	struct FVector Get_supportingHandIKLocation() {
		return memory.read<struct FVector>(m_addr + 1172);
	}
	float Get_weaponAimYaw() {
		return memory.read<float>(m_addr + 1184);
	}
	float Get_weaponAimPitch() {
		return memory.read<float>(m_addr + 1188);
	}
	struct UAnimSequenceBase Get_meleeSkill_PrimaryIdleAnimationTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1192);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_meleeSkill_PrimaryIdleAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1200);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_meleeSkill_TiredIdleAnimationTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1208);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_meleeSkill_TiredIdleAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1216);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_meleeSkill_WalkingIdleAnimationTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1224);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_meleeSkill_WalkingIdleAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1232);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_meleeSkill_BlockIdleAnimationTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1240);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_meleeSkill_BlockIdleAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1248);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace Get_meleeSkill_AimOffsetBlendSpaceTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace Get_meleeSkill_AimOffsetBlendSpaceFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return struct UBlendSpace(ptr_addr);
	}
	float Get_meleeSkill_IdleToBlockBlendDuration() {
		return memory.read<float>(m_addr + 1272);
	}
	float Get_meleeSkill_BlockToIdleBlendDuration() {
		return memory.read<float>(m_addr + 1276);
	}
	float Get_meleeSkill_ExhaustionFactor() {
		return memory.read<float>(m_addr + 1280);
	}
	bool Get_shouldUseUnarmedCombatWalk() {
		return memory.read<bool>(m_addr + 1284);
	}
	bool Get_isHoldingBlock() {
		return memory.read<bool>(m_addr + 1285);
	}
	float Get_stamina() {
		return memory.read<float>(m_addr + 1288);
	}
	float Get_bellyJiggleAmount() {
		return memory.read<float>(m_addr + 1292);
	}
	float Get_breastJiggleAmount() {
		return memory.read<float>(m_addr + 1296);
	}
	struct FRotator Get_eyesRotationDelta() {
		return memory.read<struct FRotator>(m_addr + 1300);
	}
	float Get_minEyesRotationPitch() {
		return memory.read<float>(m_addr + 1312);
	}
	float Get_maxEyesRotationPitch() {
		return memory.read<float>(m_addr + 1316);
	}
	bool Get_shouldUseWeaponAnimationPose() {
		return memory.read<bool>(m_addr + 1320);
	}
	bool Get_shouldIgnoreSupportingHandIK() {
		return memory.read<bool>(m_addr + 1552);
	}
	float Get_firstPersonAimPitch() {
		return memory.read<float>(m_addr + 1556);
	}
	float Get_firstPersonAimYawDelta() {
		return memory.read<float>(m_addr + 1560);
	}
	bool Get_shouldAimDownTheSights() {
		return memory.read<bool>(m_addr + 1564);
	}
	struct FVector Get_aimingDownTheSightsLocationOffset() {
		return memory.read<struct FVector>(m_addr + 1568);
	}
	struct FVector Get_scopeViewArmDislocationOffset() {
		return memory.read<struct FVector>(m_addr + 1580);
	}
	struct FRotator Get_armsLagRotation() {
		return memory.read<struct FRotator>(m_addr + 1592);
	}
	float Get_armsLagPitch() {
		return memory.read<float>(m_addr + 1604);
	}
	float Get_armsLagYaw() {
		return memory.read<float>(m_addr + 1608);
	}
	uint8_t  Get_stance() {
		return memory.read<uint8_t >(m_addr + 1612);
	}
	float Get_crouchStage() {
		return memory.read<float>(m_addr + 1616);
	}
	float Get_targetCrouchStage() {
		return memory.read<float>(m_addr + 1620);
	}
	bool Get_isFreeLookEnabled() {
		return memory.read<bool>(m_addr + 1624);
	}
	bool Get_shouldIgnoreHeadTurning() {
		return memory.read<bool>(m_addr + 1625);
	}
	struct FRotator Get_aimOffset() {
		return memory.read<struct FRotator>(m_addr + 1628);
	}
	float Get_leanAmount() {
		return memory.read<float>(m_addr + 1640);
	}
	bool Get_shouldLookAtMeleeTarget() {
		return memory.read<bool>(m_addr + 1644);
	}
	struct FRotator Get_lookAtMeleeTargetAimOffset() {
		return memory.read<struct FRotator>(m_addr + 1648);
	}
	uint8_t  Get_animationSet() {
		return memory.read<uint8_t >(m_addr + 1660);
	}
	bool Get_isInRagdoll() {
		return memory.read<bool>(m_addr + 1661);
	}
	bool Get_isMovingOnGround() {
		return memory.read<bool>(m_addr + 1662);
	}
	bool Get_isFalling() {
		return memory.read<bool>(m_addr + 1663);
	}
	bool Get_isSwimming() {
		return memory.read<bool>(m_addr + 1664);
	}
	struct FVector Get_acceleration() {
		return memory.read<struct FVector>(m_addr + 1668);
	}
	bool Get_wantsToMove() {
		return memory.read<bool>(m_addr + 1680);
	}
	bool Get_wantsToMoveHorizontallyOnly() {
		return memory.read<bool>(m_addr + 1681);
	}
	bool Get_wantsToMoveVerticallyOnly() {
		return memory.read<bool>(m_addr + 1682);
	}
	bool Get_wantsToWalk() {
		return memory.read<bool>(m_addr + 1683);
	}
	bool Get_wantsToJog() {
		return memory.read<bool>(m_addr + 1684);
	}
	bool Get_wantsToRun() {
		return memory.read<bool>(m_addr + 1685);
	}
	struct FVector Get_velocity() {
		return memory.read<struct FVector>(m_addr + 1688);
	}
	float Get_speed() {
		return memory.read<float>(m_addr + 1704);
	}
	float Get_speedXY() {
		return memory.read<float>(m_addr + 1708);
	}
	float Get_maxSpeed() {
		return memory.read<float>(m_addr + 1712);
	}
	float Get_stoppingDistance() {
		return memory.read<float>(m_addr + 1716);
	}
	float Get_leftHandIKAmount() {
		return memory.read<float>(m_addr + 1844);
	}
	float Get_desiredCourseAngle() {
		return memory.read<float>(m_addr + 1848);
	}
	float Get_desiredCoursePitchAngle() {
		return memory.read<float>(m_addr + 1852);
	}
	float Get_actualCourseAngle() {
		return memory.read<float>(m_addr + 1856);
	}
	uint8_t  Get_desiredMovementPace() {
		return memory.read<uint8_t >(m_addr + 1860);
	}
	uint8_t  Get_clampedDesiredMovementPace() {
		return memory.read<uint8_t >(m_addr + 1861);
	}
	uint8_t  Get_movementPaceBeforeGroundStart() {
		return memory.read<uint8_t >(m_addr + 1862);
	}
	float Get_groundStartAnimPlayRate() {
		return memory.read<float>(m_addr + 1864);
	}
	float Get_legsPoseBeforeGroundStop() {
		return memory.read<float>(m_addr + 1868);
	}
	uint8_t  Get_movementDirectionBeforeGroundStop() {
		return memory.read<uint8_t >(m_addr + 1872);
	}
	uint8_t  Get_movementPaceBeforeGroundStop() {
		return memory.read<uint8_t >(m_addr + 1873);
	}
	uint8_t  Get_animationSetBeforeGroundStop() {
		return memory.read<uint8_t >(m_addr + 1874);
	}
	bool Get_shouldUseLUGroundStopAnimation() {
		return memory.read<bool>(m_addr + 1875);
	}
	uint8_t  Get_hitReactState() {
		return memory.read<uint8_t >(m_addr + 1876);
	}
	float Get_weightLoadFactor() {
		return memory.read<float>(m_addr + 1880);
	}
	bool Get_shouldUseJogStartForRunStart() {
		return memory.read<bool>(m_addr + 1884);
	}
	bool Get_useLocomotionAdditiveAnimations() {
		return memory.read<bool>(m_addr + 1885);
	}
	float Get_disorientation() {
		return memory.read<float>(m_addr + 1888);
	}
	float Get_disorientationMultiplier() {
		return memory.read<float>(m_addr + 1892);
	}
	bool Get_isLimping() {
		return memory.read<bool>(m_addr + 1896);
	}
	bool Get_shouldRotateBonesWithFirstPersonAimPitch() {
		return memory.read<bool>(m_addr + 1897);
	}
	float Get_jumpApex() {
		return memory.read<float>(m_addr + 1904);
	}
	float Get_distanceToJumpApex() {
		return memory.read<float>(m_addr + 1908);
	}
	float Get_legsPoseBeforeJump() {
		return memory.read<float>(m_addr + 1912);
	}
	uint8_t  Get_movementPaceBeforeJump() {
		return memory.read<uint8_t >(m_addr + 1916);
	}
	uint8_t  Get_animationSetBeforeJump() {
		return memory.read<uint8_t >(m_addr + 1917);
	}
	bool Get_shouldJumpGoToFallingLoop() {
		return memory.read<bool>(m_addr + 1918);
	}
	float Get_waterImmersionDepth() {
		return memory.read<float>(m_addr + 1920);
	}
	struct FVector Get_meshOffsetWhenInWater() {
		return memory.read<struct FVector>(m_addr + 1924);
	}
	bool Get_wantsToDiveIn() {
		return memory.read<bool>(m_addr + 1936);
	}
	bool Get_isClimbing() {
		return memory.read<bool>(m_addr + 2148);
	}
	bool Get_isClimbingAnchoring() {
		return memory.read<bool>(m_addr + 2149);
	}
	struct UAnimSequenceBase Get_climbAnchoringAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2288);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float Get_climbAnchoringAnimationTime() {
		return memory.read<float>(m_addr + 2296);
	}
	bool Get_isClimbingLadder() {
		return memory.read<bool>(m_addr + 2300);
	}
	struct FVector Get_ladderClimbingRootBoneOffset() {
		return memory.read<struct FVector>(m_addr + 2480);
	}
	float Get_ladderClimbingLoopState() {
		return memory.read<float>(m_addr + 2492);
	}
	float Get_ladderClimbingLoopStateForPeeking() {
		return memory.read<float>(m_addr + 2496);
	}
	float Get_ladderClimbingPeekState() {
		return memory.read<float>(m_addr + 2500);
	}
	bool Get_isClimbingWindow() {
		return memory.read<bool>(m_addr + 2504);
	}
	bool Get_isClimbingWindowAnchoring() {
		return memory.read<bool>(m_addr + 2505);
	}
	struct UAnimSequenceBase Get_windowClimbingAnchoringAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2512);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float Get_windowClimbingAnchoringAnimationTime() {
		return memory.read<float>(m_addr + 2520);
	}
	uint8_t  Get_weaponType() {
		return memory.read<uint8_t >(m_addr + 2524);
	}
	bool Get_isDedicatedServer() {
		return memory.read<bool>(m_addr + 2525);
	}
	struct UAnimSequenceBase Get_itemFirstPersonUpperBodyStandIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3368);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace1D Get_itemFirstPersonUpperBodyStandWalk() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3376);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UBlendSpace1D Get_itemFirstPersonUpperBodyStandWalkLimping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3384);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UBlendSpace1D Get_itemFirstPersonUpperBodyStandJog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3392);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UBlendSpace1D Get_itemFirstPersonUpperBodyStandJogLimping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3400);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UAnimSequenceBase Get_itemFirstPersonUpperBodyStandRun() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3408);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_itemFirstPersonUpperBodyCrouchIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3416);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace1D Get_itemFirstPersonUpperBodyCrouchWalk() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3424);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UBlendSpace1D Get_itemFirstPersonUpperBodyCrouchWalkLimping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3432);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UAnimSequenceBase Get_itemFirstPersonUpperBodyProneIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3440);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_weaponAimingHipFirstPersonUpperBodyStandIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3448);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace1D Get_weaponAimingHipFirstPersonUpperBodyStandWalk() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3456);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UBlendSpace1D Get_weaponAimingHipFirstPersonUpperBodyStandWalkLimping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3464);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UBlendSpace1D Get_weaponAimingHipFirstPersonUpperBodyStandJog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3472);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UBlendSpace1D Get_weaponAimingHipFirstPersonUpperBodyStandJogLimping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3480);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UAnimSequenceBase Get_weaponAimingHipFirstPersonUpperBodyStandRun() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3488);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_weaponAimingHipFirstPersonUpperBodyCrouchIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3496);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace1D Get_weaponAimingHipFirstPersonUpperBodyCrouchWalk() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3504);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UBlendSpace1D Get_weaponAimingHipFirstPersonUpperBodyCrouchWalkLimping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3512);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UAnimSequenceBase Get_weaponAimingHipFirstPersonUpperBodyProneIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3520);
		return struct UAnimSequenceBase(ptr_addr);
	}
	bool Get_shouldUseItemFirstPersonAimOffsets() {
		return memory.read<bool>(m_addr + 3528);
	}
	struct UBlendSpace Get_itemFirstPersonAimOffsetStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3536);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace Get_itemFirstPersonAimOffsetCrouching() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3544);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace Get_itemFirstPersonAimOffsetProne() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3552);
		return struct UBlendSpace(ptr_addr);
	}
	struct UAnimSequenceBase Get_rightHandCorrectionPoseStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3560);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_rightHandCorrectionPoseCrouching() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3568);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_rightHandCorrectionPoseProne() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3576);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_rightFistCorrectionPoseStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3584);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_rightFistCorrectionPoseStandingInCombatMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3592);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_rightFistCorrectionPoseCrouching() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3600);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_rightFistCorrectionPoseProne() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3608);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float Get_rightHandToIdleBlendAlphaStanding() {
		return memory.read<float>(m_addr + 3616);
	}
	float Get_rightHandToIdleBlendAlphaCrouching() {
		return memory.read<float>(m_addr + 3620);
	}
	struct UAnimSequenceBase Get_leftHandCorrectionPoseStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3624);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_leftHandCorrectionPoseCrouching() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3632);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_leftHandCorrectionPoseProne() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3640);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_leftFistCorrectionPoseStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3648);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_leftFistCorrectionPoseStandingInCombatMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3656);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_leftFistCorrectionPoseCrouching() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3664);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_leftFistCorrectionPoseProne() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3672);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float Get_leftHandToIdleBlendAlphaStanding() {
		return memory.read<float>(m_addr + 3680);
	}
	float Get_leftHandToIdleBlendAlphaCrouching() {
		return memory.read<float>(m_addr + 3684);
	}
	bool Get_hasItemInHands() {
		return memory.read<bool>(m_addr + 3696);
	}
	struct FVector Get_itemInHandsLeftHandLocationInRightHandSpace() {
		return memory.read<struct FVector>(m_addr + 3700);
	}
	struct FRotator Get_itemInHandsLeftHandRotationInRightHandSpace() {
		return memory.read<struct FRotator>(m_addr + 3712);
	}
	float Get_itemInHandsObstructionDepth() {
		return memory.read<float>(m_addr + 3724);
	}
	float Get_itemInHandsObstructionDepthSmoothed() {
		return memory.read<float>(m_addr + 3728);
	}
	bool Get_isItemInHandsObstructed() {
		return memory.read<bool>(m_addr + 3732);
	}
	bool Get_isItemInHandsCompletelyObstructed() {
		return memory.read<bool>(m_addr + 3733);
	}
	float Get_itemInHandsObstructionSide() {
		return memory.read<float>(m_addr + 3736);
	}
	struct UAnimSequenceBase Get_itemInHandsLeftObstructedIdleFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3744);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_itemInHandsRightObstructedIdleFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3752);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_itemInHandsObstructedIdleTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3760);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_itemInHandsObstructedIdleProneTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3768);
		return struct UAnimSequenceBase(ptr_addr);
	}
	bool Get_isInCombatMode() {
		return memory.read<bool>(m_addr + 3776);
	}
	bool Get_shouldUseHandCorrections() {
		return memory.read<bool>(m_addr + 3777);
	}
	bool Get_shouldUseFistCorrections() {
		return memory.read<bool>(m_addr + 3778);
	}
	bool Get_overrideFingersOnlyInProne() {
		return memory.read<bool>(m_addr + 3779);
	}
	bool Get_ignoreAimOffsets() {
		return memory.read<bool>(m_addr + 3780);
	}
	uint8_t  Get_prisonerMontageBlendType() {
		return memory.read<uint8_t >(m_addr + 3781);
	}
	bool Get_isAimingBow() {
		return memory.read<bool>(m_addr + 3782);
	}
	float Get_bowArmsShakeValue() {
		return memory.read<float>(m_addr + 3784);
	}
	bool Get_isScoping() {
		return memory.read<bool>(m_addr + 3788);
	}
	struct TSet<UPrisonerResponseIdle> Get_responseIdleClassReferences() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3872);
		return struct TSet<UPrisonerResponseIdle>(ptr_addr);
	}
	bool Get_shouldUpperBodyBeUsedAsFullBodyInIdle() {
		return memory.read<bool>(m_addr + 4000);
	}
	bool Get_isPlayingInstrument() {
		return memory.read<bool>(m_addr + 4001);
	}
	struct UAnimSequenceBase Get_playingInstrumentIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4008);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_playingInstrumentPlayAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4016);
		return struct UAnimSequenceBase(ptr_addr);
	}
	uint8_t  Get_playingInstrumentState() {
		return memory.read<uint8_t >(m_addr + 4024);
	}
	bool Get_isCarryingItem() {
		return memory.read<bool>(m_addr + 4025);
	}
	struct UAnimSequenceBase Get_carryingItemIdleFPAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4032);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_carryingItemIdleTPAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4040);
		return struct UAnimSequenceBase(ptr_addr);
	}
	uint8_t  Get_carryingItemState() {
		return memory.read<uint8_t >(m_addr + 4048);
	}
	bool Get_isMounted() {
		return memory.read<bool>(m_addr + 4049);
	}
	struct UAnimSequenceBase Get_mountedAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4056);
		return struct UAnimSequenceBase(ptr_addr);
	}
	bool Get_isVehicleDriver() {
		return memory.read<bool>(m_addr + 4064);
	}
	struct UBlendSpace Get_vehicleDriverForwardIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4072);
		return struct UBlendSpace(ptr_addr);
	}
	struct UAnimSequenceBase Get_vehicleDriverForwardSteeringAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4080);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_vehicleDriverForwardSteeringAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4088);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace Get_vehicleDriverReverseIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4096);
		return struct UBlendSpace(ptr_addr);
	}
	struct UAnimSequenceBase Get_vehicleDriverReverseSteeringAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4104);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_vehicleDriverReverseSteeringAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4112);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace Get_vehiclePassengerIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4120);
		return struct UBlendSpace(ptr_addr);
	}
	float Get_vehicleSpeed() {
		return memory.read<float>(m_addr + 4128);
	}
	float Get_vehicleSpeedKph() {
		return memory.read<float>(m_addr + 4132);
	}
	float Get_vehicleBumpiness() {
		return memory.read<float>(m_addr + 4136);
	}
	float Get_vehicleDriverSteeringAnimationTime() {
		return memory.read<float>(m_addr + 4140);
	}
	float Get_vehicleDriverSteeringAnimationTimeInterpSpeed() {
		return memory.read<float>(m_addr + 4144);
	}
	float Get_vehicleThrottleAmount() {
		return memory.read<float>(m_addr + 4148);
	}
	float Get_vehicleBrakeAmount() {
		return memory.read<float>(m_addr + 4152);
	}
	float Get_vehicleHandbrakeAmount() {
		return memory.read<float>(m_addr + 4156);
	}
	float Get_vehicleSteerAmount() {
		return memory.read<float>(m_addr + 4160);
	}
	bool Get_isSledgeAcceleratingForward() {
		return memory.read<bool>(m_addr + 4164);
	}
	bool Get_isSledgeAcceleratingBackward() {
		return memory.read<bool>(m_addr + 4165);
	}
	float Get_sledgeSlidingThresholdSpeed() {
		return memory.read<float>(m_addr + 4168);
	}
	bool Get_isSledgeSliding() {
		return memory.read<bool>(m_addr + 4172);
	}
	struct UAnimSequenceBase Get_bowArmsShakeAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4176);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float Get_weaponBreathFactor() {
		return memory.read<float>(m_addr + 4184);
	}
	float Get_weaponAimDownTheSightsStillBlendFactor() {
		return memory.read<float>(m_addr + 4188);
	}
	bool Get_areHandsBound() {
		return memory.read<bool>(m_addr + 4192);
	}
	struct UAnimSequenceBase Get_handsBoundIdleFPAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4200);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_handsBoundIdleTPAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4208);
		return struct UAnimSequenceBase(ptr_addr);
	}
	bool Get_isResting() {
		return memory.read<bool>(m_addr + 4216);
	}
	struct UAnimSequenceBase Get_restingAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4224);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float Get_restingFeetOffset() {
		return memory.read<float>(m_addr + 4232);
	}
	float Get_cameraToActorRotationDeltaYaw() {
		return memory.read<float>(m_addr + 4236);
	}
	float Get_cameraToActorRotationDeltaPitch() {
		return memory.read<float>(m_addr + 4240);
	}
	uint8_t  Get_vehicleWeaponAimingStance() {
		return memory.read<uint8_t >(m_addr + 4244);
	}
	bool Get_useMountedFirstPersonWeaponAimingParameters() {
		return memory.read<bool>(m_addr + 4245);
	}
	struct FVector Get_vehicleWAPLocationOffsetDefaultStanceFP() {
		return memory.read<struct FVector>(m_addr + 4248);
	}
	struct FVector Get_vehicleWAPLocationOffsetLeaningStanceFP() {
		return memory.read<struct FVector>(m_addr + 4260);
	}
	bool Get_useMountedThirdPersonWeaponAimingParameters() {
		return memory.read<bool>(m_addr + 4272);
	}
	struct UBlendSpace Get_vehicleWAPAimOffsetTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4280);
		return struct UBlendSpace(ptr_addr);
	}
	bool Get_useVehicleWAPAimOffsetTP() {
		return memory.read<bool>(m_addr + 4288);
	}
	struct UBlendSpace Get_vehicleWAPAimOffsetDefaultStanceTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4296);
		return struct UBlendSpace(ptr_addr);
	}
	bool Get_useVehicleWAPAimOffsetDefaultStanceTP() {
		return memory.read<bool>(m_addr + 4304);
	}
	struct UBlendSpace Get_vehicleWAPAimOffsetLeaningStanceTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4312);
		return struct UBlendSpace(ptr_addr);
	}
	bool Get_useVehicleWAPAimOffsetLeaningStanceTP() {
		return memory.read<bool>(m_addr + 4320);
	}
	bool Get_useVehicleWAPUpperBodyIdleTP() {
		return memory.read<bool>(m_addr + 4321);
	}
	struct UAnimSequenceBase Get_vehicleWAPUpperBodyIdleRelaxedTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4328);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_vehicleWAPUpperBodyIdleAimingTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4336);
		return struct UAnimSequenceBase(ptr_addr);
	}
	bool Get_useVehicleWAPLowerBodyIdleTP() {
		return memory.read<bool>(m_addr + 4344);
	}
	struct UAnimSequenceBase Get_vehicleWAPLowerBodyIdleRelaxedTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4352);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_vehicleWAPLowerBodyIdleAimingTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4360);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_vehicleWAPLowerBodyIdleRelaxedDefaultTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4368);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_vehicleWAPLowerBodyIdleAimingDefaultTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4376);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_vehicleWAPLowerBodyIdleRelaxedLeaningTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4384);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_vehicleWAPLowerBodyIdleAimingLeaningTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4392);
		return struct UAnimSequenceBase(ptr_addr);
	}
	bool Get_isPlayingWAPStanceTransitionMontage() {
		return memory.read<bool>(m_addr + 4400);
	}
	bool Get_isActivelyFishing() {
		return memory.read<bool>(m_addr + 4401);
	}
	bool Get_isBaitingFish() {
		return memory.read<bool>(m_addr + 4402);
	}
	bool Get_isGrappled() {
		return memory.read<bool>(m_addr + 4403);
	}
	bool Get_useWeaponAimingDownTheSightsZeroRangeBlendSpace() {
		return memory.read<bool>(m_addr + 4404);
	}
	struct UBlendSpace1D Get_weaponAimingDownTheSightsZeroRangeBlendSpace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4408);
		return struct UBlendSpace1D(ptr_addr);
	}
	float Get_weaponZeroRange() {
		return memory.read<float>(m_addr + 4416);
	}
	bool Get_isInPhotoMode() {
		return memory.read<bool>(m_addr + 4420);
	}
	bool Get_hasHighHeels() {
		return memory.read<bool>(m_addr + 4421);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment
{
public:
	UVehicleAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParentSocket() {
		return memory.read<struct FName>(m_addr + 56);
	}
	struct FVehicleAttachmentMeshSetup GetMeshSetup() {
		return memory.read<struct FVehicleAttachmentMeshSetup>(m_addr + 64);
	}
	struct FVehicleAttachmentMeshSetup GetQueryMeshSetup() {
		return memory.read<struct FVehicleAttachmentMeshSetup>(m_addr + 224);
	}
	struct TArray<struct FVehicleAttachmentAdditionalSocket> GetAdditionalSockets() {
		return memory.read<struct TArray<struct FVehicleAttachmentAdditionalSocket>>(m_addr + 376);
	}
	float GetInstallDuration() {
		return memory.read<float>(m_addr + 392);
	}
	float GetRepairDuration() {
		return memory.read<float>(m_addr + 396);
	}
	float GetRemoveDuration() {
		return memory.read<float>(m_addr + 400);
	}
	struct UWidgetComponent GetHealthDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 408);
		return struct UWidgetComponent(ptr_addr);
	}
	struct FText Get_displayName() {
		return memory.read<struct FText>(m_addr + 416);
	}
	bool Get_canEverBeRemoved() {
		return memory.read<bool>(m_addr + 440);
	}
	struct TArray<struct FVehicleAttachmentSlot> Get_slots() {
		return memory.read<struct TArray<struct FVehicleAttachmentSlot>>(m_addr + 448);
	}
	bool Get_isIndestructible() {
		return memory.read<bool>(m_addr + 464);
	}
	bool Get_shouldBeRemovedFromVehicleWhenDestroyed() {
		return memory.read<bool>(m_addr + 465);
	}
	struct FGameplayTag Get_requiredServiceToolTag() {
		return memory.read<struct FGameplayTag>(m_addr + 468);
	}
	int32_t Get_parentId() {
		return memory.read<int32_t>(m_addr + 496);
	}
	int32_t Get_parentSlotIndex() {
		return memory.read<int32_t>(m_addr + 500);
	}
	struct UMaterialInstanceDynamic Get_serviceModeMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 504);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	double Get_mileage() {
		return memory.read<double>(m_addr + 512);
	}
	bool Get_isSupportedForNetworking() {
		return memory.read<bool>(m_addr + 521);
	}
	int32_t Get_id() {
		return memory.read<int32_t>(m_addr + 524);
	}
	struct TArray<struct UMaterialInterface> Get_cachedMeshMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 536);
		return struct TArray<struct UMaterialInterface>(ptr_addr);
	}
	float Get_maxHealth() {
		return memory.read<float>(m_addr + 552);
	}
	float Get_health() {
		return memory.read<float>(m_addr + 556);
	}
	float Get_hardness() {
		return memory.read<float>(m_addr + 560);
	}
	uint64_t Get_miscState() {
		return memory.read<uint64_t>(m_addr + 568);
	}
	float Get_energyLossMultiplier() {
		return memory.read<float>(m_addr + 576);
	}
	struct TMap<UVehicleAttachment, struct FDamageAdjacentAttachment> Get_damageAdjacentAttachments() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct TMap<UVehicleAttachment, struct FDamageAdjacentAttachment>(ptr_addr);
	}
	float Get_maximumCollisionDamageAccumulation() {
		return memory.read<float>(m_addr + 680);
	}
	struct TSoftClassPtr<UObject> GetAttachmentItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 688);
	}
	bool Get_isServiceRestrictedToAcceptableModes() {
		return memory.read<bool>(m_addr + 760);
	}
	struct TArray<struct FGameplayTag> Get_acceptableServiceModes() {
		return memory.read<struct TArray<struct FGameplayTag>>(m_addr + 768);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetPrisonerStamina
{
public:
	UAdminCommand_SetPrisonerStamina(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandsStatics
{
public:
	UAdminCommandsStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimStatics
{
public:
	UAnimStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDcxWheeledVehicleAnimInstance
{
public:
	UDcxWheeledVehicleAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetEngineState() {
		return memory.read<uint8_t >(m_addr + 2632);
	}
	bool GetIsEngineRunning() {
		return memory.read<bool>(m_addr + 2633);
	}
	float GetEngineRpm() {
		return memory.read<float>(m_addr + 2636);
	}
	float GetEngineRpmInterpSpeed() {
		return memory.read<float>(m_addr + 2640);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 2644);
	}
	float GetSpeedKph() {
		return memory.read<float>(m_addr + 2648);
	}
	float GetMaxSteeringWheelSteerAngle() {
		return memory.read<float>(m_addr + 2652);
	}
	float GetSteeringWheelSteerAngleInterpSpeed() {
		return memory.read<float>(m_addr + 2656);
	}
	float GetCurrentSteeringWheelSteerAngle() {
		return memory.read<float>(m_addr + 2660);
	}
	struct TArray<float> GetDoorOpenPercentage() {
		return memory.read<struct TArray<float>>(m_addr + 2664);
	}
	struct TArray<float> GetDoorWindowOpenPercentage() {
		return memory.read<struct TArray<float>>(m_addr + 2680);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameResourceContainer
{
public:
	UGameResourceContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetReplishableResourceAmount
{
public:
	UAdminCommand_SetReplishableResourceAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_defaultAreaOfEffect() {
		return memory.read<float>(m_addr + 136);
	}
	float Get_minAreaOfEffect() {
		return memory.read<float>(m_addr + 140);
	}
	float Get_maxAreaOfEffect() {
		return memory.read<float>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionResuscitate
{
public:
	UPrisonerActionResuscitate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCookingIngredientInfoWidget
{
public:
	UCookingIngredientInfoWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor Get_unselectedBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 624);
	}
	struct FLinearColor Get_selectedBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 640);
	}
	struct UCookingInfoButton Get_infoButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UCookingInfoButton(ptr_addr);
	}
	struct UTextBlock Get_amountText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_ingredientIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_titleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_border() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetSkillLevel
{
public:
	UAdminCommand_SetSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AMechanic
{
public:
	AMechanic(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMechanicCommonData Get_commonData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2344);
		return struct UMechanicCommonData(ptr_addr);
	}
	float Get_clientUpdatePeriod() {
		return memory.read<float>(m_addr + 2352);
	}
	int32_t Get_clientUpdateMaxSize() {
		return memory.read<int32_t>(m_addr + 2356);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetSuperJump
{
public:
	UAdminCommand_SetSuperJump(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetTime
{
public:
	UAdminCommand_SetTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHUDNotificationDescription
{
public:
	UHUDNotificationDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetMessage() {
		return memory.read<struct FText>(m_addr + 64);
	}
	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetTimeSpeed
{
public:
	UAdminCommand_SetTimeSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionTreatPatientDescription
{
public:
	UPrisonerActionTreatPatientDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerFishingComponent
{
public:
	UPrisonerFishingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_fishingState() {
		return memory.read<uint8_t >(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetWeather
{
public:
	UAdminCommand_SetWeather(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRemoveWeedDescription
{
public:
	UPrisonerActionRemoveWeedDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTrapItemState
{
public:
	UTrapItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsArmed() {
		return memory.read<bool>(m_addr + 256);
	}
	bool GetCanBeTriggered() {
		return memory.read<bool>(m_addr + 257);
	}
	uint8_t  GetCurrentTrigger() {
		return memory.read<uint8_t >(m_addr + 258);
	}
	struct FDbIntegerId GetLastTriggerOwner() {
		return memory.read<struct FDbIntegerId>(m_addr + 264);
	}
	struct FDbIntegerId GetLastArmerId() {
		return memory.read<struct FDbIntegerId>(m_addr + 272);
	}
	float GetQuality() {
		return memory.read<float>(m_addr + 280);
	}
	bool GetWasTriggered() {
		return memory.read<bool>(m_addr + 284);
	}
	int32_t GetNumRemainingDefuseAttempts() {
		return memory.read<int32_t>(m_addr + 288);
	}
	float GetOwnerlessElapsedTime() {
		return memory.read<float>(m_addr + 292);
	}
	bool GetPendingDestroy() {
		return memory.read<bool>(m_addr + 296);
	}
	struct UTriggerComponentState GetTrigger() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct UTriggerComponentState(ptr_addr);
	}
	struct TArray<char> GetTriggerData() {
		return memory.read<struct TArray<char>>(m_addr + 312);
	}

private:
	std::uint64_t m_addr = 0;
};


class APlaceableActorModularBaseBuildingFoundation
{
public:
	APlaceableActorModularBaseBuildingFoundation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLineTraceSocketPair> Get_lineTraceSockets() {
		return memory.read<struct TArray<struct FLineTraceSocketPair>>(m_addr + 1624);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFishingAttachmentWire
{
public:
	AFishingAttachmentWire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReelSocketName() {
		return memory.read<struct FName>(m_addr + 2352);
	}
	struct UFishingWireComponent Get_wireComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2360);
		return struct UFishingWireComponent(ptr_addr);
	}
	UFishingWireComponent Get_wireComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2368);
		return UFishingWireComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_rippleParticleSystemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2376);
		return struct UParticleSystemComponent(ptr_addr);
	}
	float Get_visibilityFactor() {
		return memory.read<float>(m_addr + 2384);
	}
	float Get_wireWeightThreshold() {
		return memory.read<float>(m_addr + 2388);
	}
	float Get_wireThickness() {
		return memory.read<float>(m_addr + 2392);
	}
	float Get_minWireLength() {
		return memory.read<float>(m_addr + 2396);
	}
	float Get_maxWireLength() {
		return memory.read<float>(m_addr + 2400);
	}
	float Get_reelInTensionThreshold() {
		return memory.read<float>(m_addr + 2404);
	}
	float Get_wireBreakThreshold() {
		return memory.read<float>(m_addr + 2408);
	}
	float Get_instantWireBreakThreshold() {
		return memory.read<float>(m_addr + 2412);
	}
	float Get_wireBreakTimerThreshold() {
		return memory.read<float>(m_addr + 2416);
	}
	float Get_wireStrength() {
		return memory.read<float>(m_addr + 2420);
	}
	bool Get_simulate() {
		return memory.read<bool>(m_addr + 2424);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetWeatherControllerOverrideActive
{
public:
	UAdminCommand_SetWeatherControllerOverrideActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AAmbientSounds
{
public:
	AAmbientSounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinCameraLocationDeltaForUpdate() {
		return memory.read<float>(m_addr + 544);
	}
	struct FGameplayTag GetForestMask() {
		return memory.read<struct FGameplayTag>(m_addr + 548);
	}
	float GetForestMaskSearchRadius() {
		return memory.read<float>(m_addr + 556);
	}
	struct UAkAudioEvent GetCoastalForestAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetContinentalForest1AudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetContinentalForest2AudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetContinentalForest3AudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetUndergroundAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FGameplayTag GetCityMask() {
		return memory.read<struct FGameplayTag>(m_addr + 600);
	}
	float GetCityMaskSearchRadius() {
		return memory.read<float>(m_addr + 608);
	}
	struct UAkAudioEvent GetCityAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetLargeVillageAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetSmallVillageAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetIndustrialAreaAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetWeatherControllerOverrideValue
{
public:
	UAdminCommand_SetWeatherControllerOverrideValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHandheldLightItemState
{
public:
	UHandheldLightItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCurrentLightAngleIndex() {
		return memory.read<int32_t>(m_addr + 256);
	}
	float GetCurrentLightIntensity() {
		return memory.read<float>(m_addr + 260);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADcxBicycle
{
public:
	ADcxBicycle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_baseStrengthChangeRate() {
		return memory.read<float>(m_addr + 3496);
	}
	struct UCurveFloat Get_strengthChangeRateFactorVsVehicleSpeedKmh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3504);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_strengthChangeRateFactorVsGroundSlope() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3512);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_baseConstitutionChangeRate() {
		return memory.read<float>(m_addr + 3520);
	}
	struct UCurveFloat Get_constitutionChangeRateFactorVsVehicleSpeedKmh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3528);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_constitutionChangeRateFactorVsGroundSlope() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3536);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_baseRunningSkillExperienceGainRate() {
		return memory.read<float>(m_addr + 3544);
	}
	struct UCurveFloat Get_runningSkillExperienceGainRateFactorVsVehicleSpeedKmh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3552);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_runningSkillExperienceGainRateFactorVsGroundSlope() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3560);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_baseEnduranceSkillExperienceGainRate() {
		return memory.read<float>(m_addr + 3568);
	}
	struct UCurveFloat Get_enduranceSkillExperienceGainRateFactorVsVehicleSpeedKmh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3576);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_enduranceSkillExperienceGainRateFactorVsGroundSlope() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3584);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_baseActionDifficulty() {
		return memory.read<float>(m_addr + 3592);
	}
	struct UCurveFloat Get_actionDifficultyFactorVsVehicleSpeedKmh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3600);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_actionDifficultyFactorVsGroundSlope() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3608);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_speedThresholdForAINoise() {
		return memory.read<float>(m_addr + 3616);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleHudWidget
{
public:
	UVehicleHudWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVehicleMountSlotIndicators Get_mountSlotIndicators() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UVehicleMountSlotIndicators(ptr_addr);
	}
	struct UTextBlock GetSpeed1s() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetSpeed10s() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetSpeed100s() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetGear() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UProgressBar GetHealthBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UProgressBar(ptr_addr);
	}
	struct UProgressBar GetFuelBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UProgressBar(ptr_addr);
	}
	struct UProgressBar GetBatteryBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UProgressBar(ptr_addr);
	}
	struct UImage GetEngineBrokenIndicator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UImage(ptr_addr);
	}
	struct UWidgetAnimation GetBlink() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UOverlay GetOverlay_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UOverlay(ptr_addr);
	}
	struct UTextBlock GetTextBlock_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTextBlock(ptr_addr);
	}
	struct USizeBox GetSizeBox_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct USizeBox(ptr_addr);
	}
	struct USizeBox GetSizeBox_4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct USizeBox(ptr_addr);
	}
	struct UImage GetImage_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Getkmh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ShouldChainTeleportToVehicles
{
public:
	UAdminCommand_ShouldChainTeleportToVehicles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBaseBuildingStatics
{
public:
	UBaseBuildingStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ShouldShowOtherPlayerLocations
{
public:
	UAdminCommand_ShouldShowOtherPlayerLocations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ShowBaseBuildingDebug
{
public:
	UAdminCommand_ShowBaseBuildingDebug(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AFishingAttachment
{
public:
	AFishingAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh Get_staticMeshWhenAttached() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct UStaticMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AAdvancedCraftingObjective
{
public:
	AAdvancedCraftingObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCraftableItem Get_craftableItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UCraftableItem(ptr_addr);
	}
	struct AMissionDialogueManager Get_dialogueManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct AMissionDialogueManager(ptr_addr);
	}
	struct UDialogueData Get_dialogueData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UDialogueData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ShowFlagLocations
{
public:
	UAdminCommand_ShowFlagLocations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_PerformanceScoreModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_PerformanceScoreModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGardenCraftableItem
{
public:
	UGardenCraftableItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetPlaceableItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 496);
		return UObject(ptr_addr);
	}
	struct UTexture2D GetIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 504);
		return struct UTexture2D(ptr_addr);
	}
	struct FText GetCaption() {
		return memory.read<struct FText>(m_addr + 512);
	}
	struct FText GetDescription() {
		return memory.read<struct FText>(m_addr + 536);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_ICU_SPO2_Stats
{
public:
	UMetabolism_ICU_SPO2_Stats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_spo2MinMax() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_spo2TextValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UProgressBar Get_spo2ProgBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UProgressBar(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ShowNameplates
{
public:
	UAdminCommand_ShowNameplates(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_PlaySoundBySurface
{
public:
	UAnimNotify_PlaySoundBySurface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAkAudioEvent(ptr_addr);
	}
	char ECollisionChannel GetTraceChannel() {
		return memory.read<char ECollisionChannel>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCleaningItemTag
{
public:
	UCleaningItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADropZoneEquipmentTable
{
public:
	ADropZoneEquipmentTable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AItem> Get_trackedItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct TArray<struct AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFireworksTrapItem
{
public:
	AFireworksTrapItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent Get_triggerSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2656);
		return struct UAkAudioEvent(ptr_addr);
	}
	int32_t Get_numShells() {
		return memory.read<int32_t>(m_addr + 2664);
	}
	float Get_shellLaunchPeriod() {
		return memory.read<float>(m_addr + 2668);
	}
	float Get_detonationDelay() {
		return memory.read<float>(m_addr + 2672);
	}
	bool Get_isFiring() {
		return memory.read<bool>(m_addr + 2689);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ShowRespawnTimes
{
public:
	UAdminCommand_ShowRespawnTimes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ShowVehicleDebug
{
public:
	UAdminCommand_ShowVehicleDebug(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCheckOccludedDetectablePlayersAction
{
public:
	UCheckOccludedDetectablePlayersAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UClearStovePipe
{
public:
	UClearStovePipe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWarningNotification
{
public:
	UWarningNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ShowVehicleInfo
{
public:
	UAdminCommand_ShowVehicleInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCentralBuildingPanel
{
public:
	UCentralBuildingPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPlacedPlaceableWidget Get_placedPlaceableWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UPlacedPlaceableWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AStartLocation
{
public:
	AStartLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetTypeFlags() {
		return memory.read<char>(m_addr + 592);
	}
	bool GetIsDisabled() {
		return memory.read<bool>(m_addr + 593);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_ClimbingFinished
{
public:
	UAnimNotify_ClimbingFinished(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UComboBoxStringWithIndexing
{
public:
	UComboBoxStringWithIndexing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ShowVehicleLocations
{
public:
	UAdminCommand_ShowVehicleLocations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemActionSequenceLoadMagazine_RPKDrum
{
public:
	UItemActionSequenceLoadMagazine_RPKDrum(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionSearchGardenSlot
{
public:
	UPrisonerActionSearchGardenSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTrashNamedCarouselWidget
{
public:
	UTrashNamedCarouselWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetValueChangedTemp_DONOTUSE() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 656);
	}
	struct USizeBox Get_nameBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct USizeBox(ptr_addr);
	}
	struct UTextBlock Get_name() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTextBlock(ptr_addr);
	}
	struct UTrashCarouselWidget Get_carousel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTrashCarouselWidget(ptr_addr);
	}
	struct USelectionOverlayWidget Get_focusBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct USelectionOverlayWidget(ptr_addr);
	}
	struct FString Get_label() {
		return memory.read<struct FString>(m_addr + 704);
	}
	struct FText Get_mainLabel() {
		return memory.read<struct FText>(m_addr + 720);
	}
	struct FSlateFontInfo Get_defaultFont() {
		return memory.read<struct FSlateFontInfo>(m_addr + 744);
	}
	struct TArray<struct FString> Get_possibleValues() {
		return memory.read<struct TArray<struct FString>>(m_addr + 920);
	}
	struct TArray<struct FText> Get_carouselValues() {
		return memory.read<struct TArray<struct FText>>(m_addr + 936);
	}

private:
	std::uint64_t m_addr = 0;
};


class UIngredientsForRecipeWidget
{
public:
	UIngredientsForRecipeWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWrapBox Get_ingredientsWrapBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWrapBox(ptr_addr);
	}
	UInteractiveIngredientWidget Get_interactiveIngredientWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return UInteractiveIngredientWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDrinkFromReplenishableResource
{
public:
	UPrisonerActionDrinkFromReplenishableResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFillVehicleFuelWithItem
{
public:
	UPrisonerActionFillVehicleFuelWithItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMotionTriggerComponent
{
public:
	UMotionTriggerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetTriggerForwardVector() {
		return memory.read<struct FVector>(m_addr + 1232);
	}
	float GetTriggerAngle() {
		return memory.read<float>(m_addr + 1244);
	}
	float GetMotionDetectionSensitivity() {
		return memory.read<float>(m_addr + 1248);
	}
	float GetMotionDetectionDepletionSpeed() {
		return memory.read<float>(m_addr + 1252);
	}
	float Get_motionDetector() {
		return memory.read<float>(m_addr + 1256);
	}
	struct UAkAudioEvent Get_motionDetectorStartSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_motionDetectorEndSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZAssetManager
{
public:
	UConZAssetManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FImageAssetToLoad> Get_imageAssetsToLoad() {
		return memory.read<struct TArray<struct FImageAssetToLoad>>(m_addr + 1144);
	}
	struct TMap<struct FName, struct ULWObjectSetup> Get_lwobjectSetupByPrimaryAssetName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1240);
		return struct TMap<struct FName, struct ULWObjectSetup>(ptr_addr);
	}
	struct TArray<struct UPrisonerResponseIdle> Get_prisonerResponseIdleCDOs() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1560);
		return struct TArray<struct UPrisonerResponseIdle>(ptr_addr);
	}
	struct TArray<struct UPrisonerBodyEffect> Get_autoAddablePrisonerBodyEffectCDOs() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1576);
		return struct TArray<struct UPrisonerBodyEffect>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ShowWeaponInfo
{
public:
	UAdminCommand_ShowWeaponInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ATradeOutpostBuilding
{
public:
	ATradeOutpostBuilding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_sedentaryNPCRelevancyDistance() {
		return memory.read<float>(m_addr + 856);
	}
	struct TArray<struct FSedentaryNPCMarker> Get_sedentaryNPCMarkers() {
		return memory.read<struct TArray<struct FSedentaryNPCMarker>>(m_addr + 864);
	}
	struct TArray<struct ASedentaryNPC> Get_spawnedSedentaryNPCs() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct TArray<struct ASedentaryNPC>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SpawnInventoryFullOf
{
public:
	UAdminCommand_SpawnInventoryFullOf(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AAmmunitionItem
{
public:
	AAmmunitionItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetAmmunitionTag() {
		return memory.read<struct FGameplayTag>(m_addr + 2320);
	}
	struct FString GetAmmunitionTypeString() {
		return memory.read<struct FString>(m_addr + 2328);
	}
	AProjectile GetprojectileClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2344);
		return AProjectile(ptr_addr);
	}
	struct UStaticMesh GetCartridgeMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct UStaticMesh(ptr_addr);
	}
	struct UStaticMesh GetCasingMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2360);
		return struct UStaticMesh(ptr_addr);
	}
	struct UStaticMesh GetUsedBadRoundMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2368);
		return struct UStaticMesh(ptr_addr);
	}
	float GetWeaponSpreadMultiplier() {
		return memory.read<float>(m_addr + 2376);
	}
	int32_t GetMaxAmmoCount() {
		return memory.read<int32_t>(m_addr + 2380);
	}
	int32_t Get_ammoCount() {
		return memory.read<int32_t>(m_addr + 2384);
	}
	int32_t Get_ammoCountOwnerHelper() {
		return memory.read<int32_t>(m_addr + 2388);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SilencePlayer
{
public:
	UAdminCommand_SilencePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AFogSphere
{
public:
	AFogSphere(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_shouldExistOnDedicatedServer() {
		return memory.read<bool>(m_addr + 544);
	}
	struct UCurveFloat Get_densityVersusTimeOfDay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryItemComponent
{
public:
	UInventoryItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_sizeX() {
		return memory.read<int32_t>(m_addr + 208);
	}
	int32_t Get_sizeY() {
		return memory.read<int32_t>(m_addr + 212);
	}
	int32_t Get_maxRowsPerPage() {
		return memory.read<int32_t>(m_addr + 216);
	}
	struct TArray<struct UInventoryItemComponentReplicatedPage> Get_replicatedPages() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct TArray<struct UInventoryItemComponentReplicatedPage>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_Sleep
{
public:
	UAdminCommand_Sleep(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SpawnAllItems
{
public:
	UAdminCommand_SpawnAllItems(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHeatSourceLinkUserData
{
public:
	UHeatSourceLinkUserData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_heatSourceIndex() {
		return memory.read<int32_t>(m_addr + 40);
	}
	int32_t Get_cookingSlotIndex() {
		return memory.read<int32_t>(m_addr + 44);
	}
	bool Get_sameHeatSourceCookingSlotIndex() {
		return memory.read<bool>(m_addr + 48);
	}
	bool Get_linkAllCookingSlotsToHeatSource() {
		return memory.read<bool>(m_addr + 49);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SpawnPrimaryActorAsset
{
public:
	UAdminCommand_SpawnPrimaryActorAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetType Get_primaryAssetType() {
		return memory.read<struct FPrimaryAssetType>(m_addr + 136);
	}
	struct TSet<struct FPrimaryAssetId> Get_primaryAssetsToExclude() {
		return memory.read<struct TSet<struct FPrimaryAssetId>>(m_addr + 144);
	}
	int32_t Get_countArgumentMinValue() {
		return memory.read<int32_t>(m_addr + 224);
	}
	int32_t Get_countArgumentMaxValue() {
		return memory.read<int32_t>(m_addr + 228);
	}
	struct FVector Get_spawnOffset() {
		return memory.read<struct FVector>(m_addr + 232);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemContainer
{
public:
	AItemContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent Get_rootComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct USceneComponent(ptr_addr);
	}
	bool Get_canBeForceUnlocked() {
		return memory.read<bool>(m_addr + 600);
	}
	float Get_forceUnlockTime() {
		return memory.read<float>(m_addr + 604);
	}
	float Get_forceUnlockMovementAcceptanceRadius() {
		return memory.read<float>(m_addr + 608);
	}
	struct FUnlockLocation Get_unlockPositionMarker() {
		return memory.read<struct FUnlockLocation>(m_addr + 624);
	}
	struct TArray<UObject> Get_upgradeItemsClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct TArray<UObject>(ptr_addr);
	}
	struct TArray<struct ULockData> Get_lockData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct TArray<struct ULockData>(ptr_addr);
	}
	struct TArray<UObject> Get_originalUpgradeItemClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct TArray<UObject>(ptr_addr);
	}
	struct TArray<struct ULockData> Get_originalLockData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct TArray<struct ULockData>(ptr_addr);
	}
	bool Get_ignoreServerSettings() {
		return memory.read<bool>(m_addr + 760);
	}
	bool Get_disableSerialization() {
		return memory.read<bool>(m_addr + 801);
	}
	bool Get_shouldBeResetOnNewSession() {
		return memory.read<bool>(m_addr + 802);
	}
	struct FGameplayTag Get_famePointAwardTag() {
		return memory.read<struct FGameplayTag>(m_addr + 804);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SpawnAnimal
{
public:
	UAdminCommand_SpawnAnimal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SpawnDebugAnimalTrack
{
public:
	UAdminCommand_SpawnDebugAnimalTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetType Get_primaryAssetType() {
		return memory.read<struct FPrimaryAssetType>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElement_Title
{
public:
	UModularTooltipElement_Title(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_titleTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Disorientation
{
public:
	UPrisonerBodySymptom_Disorientation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWaypointWidgetBase
{
public:
	UWaypointWidgetBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetIconTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetAccentTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTexture2D(ptr_addr);
	}
	struct FLinearColor GetAccentColor() {
		return memory.read<struct FLinearColor>(m_addr + 624);
	}
	float GetBarValue() {
		return memory.read<float>(m_addr + 640);
	}
	struct FLinearColor GetBarColor() {
		return memory.read<struct FLinearColor>(m_addr + 644);
	}
	float GetHeightOffset() {
		return memory.read<float>(m_addr + 660);
	}
	bool GetEmphasized() {
		return memory.read<bool>(m_addr + 664);
	}
	struct FLinearColor GetEmphasisColor() {
		return memory.read<struct FLinearColor>(m_addr + 668);
	}
	struct FString GetLabelText() {
		return memory.read<struct FString>(m_addr + 688);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SpawnRandomAnimal
{
public:
	UAdminCommand_SpawnRandomAnimal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SpawnReflectionSphere
{
public:
	UAdminCommand_SpawnReflectionSphere(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject Get_actorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Hallucinations
{
public:
	UPrisonerBodySymptom_Hallucinations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerHallucinationSymptomSeverityLevelParams> Get_severityLevelParams() {
		return memory.read<struct TArray<struct FPrisonerHallucinationSymptomSeverityLevelParams>>(m_addr + 184);
	}
	UPrisonerHallucinationEpisode Get_hallucinationEpisodeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return UPrisonerHallucinationEpisode(ptr_addr);
	}
	struct TArray<struct FPrisonerHallucinationIllusionInfo> Get_hallucinationIllusionInfosSP() {
		return memory.read<struct TArray<struct FPrisonerHallucinationIllusionInfo>>(m_addr + 208);
	}
	struct TArray<struct FPrisonerHallucinationIllusionInfo> Get_hallucinationIllusionInfosMP() {
		return memory.read<struct TArray<struct FPrisonerHallucinationIllusionInfo>>(m_addr + 224);
	}
	struct FRuntimeFloatCurve Get_effectsIntensityVsElapsedTimePeriod() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 256);
	}
	float Get_effectsBlendInDuration() {
		return memory.read<float>(m_addr + 392);
	}
	float Get_effectsFrequencyMultiplier() {
		return memory.read<float>(m_addr + 396);
	}
	struct FRuntimeFloatCurve Get_effectsIntensityScaleVsSeverityRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 400);
	}
	float Get_visualEffectsIntensityScale() {
		return memory.read<float>(m_addr + 536);
	}
	float Get_soundEffectsIntensityScale() {
		return memory.read<float>(m_addr + 540);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInteractionAction
{
public:
	UInteractionAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SpawnVehicle
{
public:
	UAdminCommand_SpawnVehicle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Farting
{
public:
	UPrisonerBodySymptomCause_Farting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_StartTournamentMode
{
public:
	UAdminCommand_StartTournamentMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBuryComponent
{
public:
	UPrisonerBuryComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_buryState() {
		return memory.read<uint8_t >(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};


class USoundNotificationDescription
{
public:
	USoundNotificationDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct AActor(ptr_addr);
	}
	bool GetstopWhenAttachedToDestroyed() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryItemDataIcon
{
public:
	UInventoryItemDataIcon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_TeleportTo
{
public:
	UAdminCommand_TeleportTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFishingRodAnimInstance
{
public:
	UFishingRodAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsInMinigame() {
		return memory.read<bool>(m_addr + 696);
	}
	struct FVector GetRodTipLocation() {
		return memory.read<struct FVector>(m_addr + 700);
	}
	struct FVector GetBentRodTipLocation() {
		return memory.read<struct FVector>(m_addr + 712);
	}
	struct FVector GetBendDirection() {
		return memory.read<struct FVector>(m_addr + 724);
	}
	float GetBendAmount() {
		return memory.read<float>(m_addr + 736);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBoxMotionTriggerComponent
{
public:
	UBoxMotionTriggerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBoxComponent GetBoxCollisionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1304);
		return struct UBoxComponent(ptr_addr);
	}
	struct FVector Get_triggerSize() {
		return memory.read<struct FVector>(m_addr + 1312);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionAlignTransformDescription
{
public:
	UPrisonerActionAlignTransformDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionGestureDescription
{
public:
	UPrisonerActionGestureDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USearchForItemsAssetData
{
public:
	USearchForItemsAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USearchItemDataAsset GetSearchAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct USearchItemDataAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_TeleportTo3pm
{
public:
	UAdminCommand_TeleportTo3pm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_TeleportToVehicle
{
public:
	UAdminCommand_TeleportToVehicle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UStrengthSkill
{
public:
	UStrengthSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChargeVehicleBatteryDescription
{
public:
	UPrisonerActionChargeVehicleBatteryDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCharacterSelectionWidget
{
public:
	UCharacterSelectionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCharacterSlot Get_characterSlotClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return UCharacterSlot(ptr_addr);
	}
	struct UScrollBox Get_mainScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UScrollBox(ptr_addr);
	}
	struct UConZStandardButton Get_buttonCreate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonLoad() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UOverlay Get_characterSlotsOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UOverlay(ptr_addr);
	}
	struct UVerticalBox Get_characterSlotsVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UVerticalBox(ptr_addr);
	}
	struct UConZStandardButton Get_buttonBack() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UOverlay Get_criminalRecordOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UOverlay(ptr_addr);
	}
	struct UCriminalRecord Get_criminalRecord() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UCriminalRecord(ptr_addr);
	}
	struct UYesNoDialog Get_deleteCharacterConfirmation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UYesNoDialog(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKillNotificationWidget
{
public:
	UKillNotificationWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_prefix() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_name() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_suffix() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFlashbangItem
{
public:
	AFlashbangItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AFlashbangItemEffects Get_flashbangEffectsClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2520);
		return AFlashbangItemEffects(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetTattooIndex
{
public:
	UAdminCommand_SetTattooIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USquadLeftPanel
{
public:
	USquadLeftPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetSquadName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetSquadMessage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetMemberCount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UTextBlock(ptr_addr);
	}
	struct USquadEmblemWidget GetSquadEmblem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct USquadEmblemWidget(ptr_addr);
	}
	struct UBorder GetEmblemBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UBorder(ptr_addr);
	}
	struct USizeBox GetMessageBoxPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct USizeBox(ptr_addr);
	}
	struct UVerticalBox GetMembersList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UVerticalBox(ptr_addr);
	}
	struct UButton GetEditButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UButton(ptr_addr);
	}
	struct UButton GetLeaveButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UButton(ptr_addr);
	}
	struct UButton GetCreateButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UButton(ptr_addr);
	}
	struct UScrollBox GetMemberListBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UScrollBox(ptr_addr);
	}
	UGenericTooltip Get_genericTooltipClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return UGenericTooltip(ptr_addr);
	}
	USquadMemberPanel Get_squadMemberPanelClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return USquadMemberPanel(ptr_addr);
	}
	struct USquadRightPanel Get_squadRightPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct USquadRightPanel(ptr_addr);
	}
	struct UTabMenuReborn Get_tabMenuReborn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UTabMenuReborn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACTFFlagStand
{
public:
	ACTFFlagStand(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UPointLightComponent GetLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UPointLightComponent(ptr_addr);
	}
	struct FLinearColor Get_lightColor() {
		return memory.read<struct FLinearColor>(m_addr + 560);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDecontaminateDescription
{
public:
	UPrisonerActionDecontaminateDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADropZoneDroppable
{
public:
	ADropZoneDroppable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UAkAudioEvent GetLandSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct ADropZoneGameEvent Get_gameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct ADropZoneGameEvent(ptr_addr);
	}
	struct UParticleSystemComponent Get_flareParticles0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_flareParticles1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_flareParticles2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct FVector Get_endLocation() {
		return memory.read<struct FVector>(m_addr + 608);
	}
	float Get_fallingSpeed() {
		return memory.read<float>(m_addr + 620);
	}
	bool Get_flareParticlesEnabled() {
		return memory.read<bool>(m_addr + 624);
	}
	int32_t Get_flareParticlesTeam() {
		return memory.read<int32_t>(m_addr + 628);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_SetPrivatePartsSize
{
public:
	UAdminCommand_SetPrivatePartsSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UListUnreferencedAssetsCommandlet
{
public:
	UListUnreferencedAssetsCommandlet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_ToggleFamePointsDebugVisualization
{
public:
	UAdminCommand_ToggleFamePointsDebugVisualization(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UFamePointDebugComponent Get_famePointDebugComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return UFamePointDebugComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_DrainStamina
{
public:
	UAnimNotifyState_DrainStamina(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetDrainType() {
		return memory.read<uint8_t >(m_addr + 48);
	}
	float GetAmountToDrain() {
		return memory.read<float>(m_addr + 52);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 56);
	}
	float GetRecoveryDelay() {
		return memory.read<float>(m_addr + 60);
	}
	float GetRatioToRecover() {
		return memory.read<float>(m_addr + 64);
	}
	float GetRecoveryTime() {
		return memory.read<float>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionSearchPrisoner
{
public:
	UPrisonerActionSearchPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_TrackShotsFired
{
public:
	UAdminCommand_TrackShotsFired(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_ICU_GraphWidget_SPO2
{
public:
	UMetabolism_ICU_GraphWidget_SPO2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetTimeStretchCurveCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 536);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingRecipeButtonWidget
{
public:
	UCookingRecipeButtonWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_titleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_buttonIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UImage(ptr_addr);
	}
	struct UCookingFavouriteButton Get_favouritesButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UCookingFavouriteButton(ptr_addr);
	}
	struct UCookingInfoButton Get_infoButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UCookingInfoButton(ptr_addr);
	}
	struct UImage Get_overallBorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UImage(ptr_addr);
	}
	struct FLinearColor Get_unHoveredBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 760);
	}
	struct FLinearColor Get_hoveredBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 776);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCircularMenuWidget
{
public:
	UCircularMenuWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCircularLayerData> Get_layerData() {
		return memory.read<struct TArray<struct FCircularLayerData>>(m_addr + 608);
	}
	float Get_centerSize() {
		return memory.read<float>(m_addr + 624);
	}
	bool Get_constrainMouseToWidget() {
		return memory.read<bool>(m_addr + 628);
	}
	bool Get_unboundOuterRadiusOnFirstInteractionLayer() {
		return memory.read<bool>(m_addr + 629);
	}
	struct TArray<struct FCircularSegmentContainer> Get_segmentsByLayer() {
		return memory.read<struct TArray<struct FCircularSegmentContainer>>(m_addr + 632);
	}
	struct UOverlay Get_mainOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UOverlay(ptr_addr);
	}
	struct UTextBlock Get_actionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class APlaceableActorItems
{
public:
	APlaceableActorItems(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTriggerComponent
{
public:
	UTriggerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FObjectConditionContainer Get_triggeringActorConditions() {
		return memory.read<struct FObjectConditionContainer>(m_addr + 1216);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerUIDataController
{
public:
	UPrisonerUIDataController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerBodySimulationUIController GetBodySimulationUIController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UPrisonerBodySimulationUIController(ptr_addr);
	}
	struct UPrisonerSkillComponentUIController GetSkillComponentUIController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UPrisonerSkillComponentUIController(ptr_addr);
	}
	struct UPrisonerTreatmentUIController GetTreatmentUIController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPrisonerTreatmentUIController(ptr_addr);
	}
	struct UPrisonerUIData Get_prisonerUIData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UPrisonerUIData(ptr_addr);
	}
	struct UPrisonerUITooltipCache Get_tooltipCache() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct UPrisonerUITooltipCache(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGraph2DWidget
{
public:
	UGraph2DWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateBrush GetBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 264);
	}
	struct FDelegate GetBrushDelegate() {
		return memory.read<struct FDelegate>(m_addr + 400);
	}
	struct FLinearColor GetColorAndOpacity() {
		return memory.read<struct FLinearColor>(m_addr + 416);
	}
	struct FDelegate GetColorAndOpacityDelegate() {
		return memory.read<struct FDelegate>(m_addr + 432);
	}
	float GetGraphLineThickness() {
		return memory.read<float>(m_addr + 448);
	}
	float GetGraphLineSpriteSpacing() {
		return memory.read<float>(m_addr + 452);
	}
	struct FVector2D GetGraphSize() {
		return memory.read<struct FVector2D>(m_addr + 456);
	}
	bool GetInitializeGraphWithDefaultValue() {
		return memory.read<bool>(m_addr + 464);
	}
	int32_t GetSampleMax() {
		return memory.read<int32_t>(m_addr + 468);
	}
	float GetDefaultSampleValue() {
		return memory.read<float>(m_addr + 472);
	}
	bool GetUseLineAntialiasing() {
		return memory.read<bool>(m_addr + 476);
	}

private:
	std::uint64_t m_addr = 0;
};


class ARackItem
{
public:
	ARackItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh Get_lockStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2592);
		return struct UStaticMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_TrapsDebug
{
public:
	UAdminCommand_TrapsDebug(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEnvironmentDescriptionComponent
{
public:
	UEnvironmentDescriptionComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetEnvironmentClass() {
		return memory.read<uint8_t >(m_addr + 1248);
	}
	bool GetIsUnderground() {
		return memory.read<bool>(m_addr + 1249);
	}
	bool GetShouldBlockWeatherEffects() {
		return memory.read<bool>(m_addr + 1250);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZSpectatorPawn
{
public:
	AConZSpectatorPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDefaultFOV() {
		return memory.read<float>(m_addr + 688);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Fatigue
{
public:
	UPrisonerBodySymptom_Fatigue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 184);
	}
	float Get_maxSeverityMaxStaminaModifier() {
		return memory.read<float>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandExecutor
{
public:
	UAdminCommandExecutor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankAccountRegistry
{
public:
	UBankAccountRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCarouselWithLabel
{
public:
	UCarouselWithLabel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_name() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 7688);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_focusBackgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 7696);
		return struct UImage(ptr_addr);
	}
	struct FText Get_label() {
		return memory.read<struct FText>(m_addr + 7704);
	}
	struct FCarouselWithLabelStyle Get_selectedAndFocusedCWLStyle() {
		return memory.read<struct FCarouselWithLabelStyle>(m_addr + 7728);
	}
	struct FCarouselWithLabelStyle Get_selectedAndUnfocusedCWLStyle() {
		return memory.read<struct FCarouselWithLabelStyle>(m_addr + 7992);
	}
	struct FCarouselWithLabelStyle Get_unselectedCWLStyle() {
		return memory.read<struct FCarouselWithLabelStyle>(m_addr + 8256);
	}
	struct FCarouselWithLabelStyle Get_highlightedCWLStyle() {
		return memory.read<struct FCarouselWithLabelStyle>(m_addr + 8520);
	}
	struct FCarouselWithLabelStyle Get_disabledCWLStyle() {
		return memory.read<struct FCarouselWithLabelStyle>(m_addr + 8784);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_UnbanPlayer
{
public:
	UAdminCommand_UnbanPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_UnmutePlayer
{
public:
	UAdminCommand_UnmutePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionSearchGardenSlotDescription
{
public:
	UPrisonerActionSearchGardenSlotDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_UnsilencePlayer
{
public:
	UAdminCommand_UnsilencePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_VisualizeBulletTrajectories
{
public:
	UAdminCommand_VisualizeBulletTrajectories(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_VisualizePlayerAiming
{
public:
	UAdminCommand_VisualizePlayerAiming(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRemoveItemFromHandsDescription
{
public:
	UPrisonerActionRemoveItemFromHandsDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_CharacterActionNotify
{
public:
	UAnimNotify_CharacterActionNotify(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetCharacterActionNotifyType() {
		return memory.read<uint8_t >(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_NutrientDeficiency
{
public:
	UPrisonerBodyCondition_NutrientDeficiency(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_nutrient() {
		return memory.read<uint8_t >(m_addr + 192);
	}
	struct FRuntimeFloatCurve Get_severityVsNutrientDeficiencyRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 200);
	}
	float Get_maxRatioOfAbsorbedNutrientCapacityToBeRecovered() {
		return memory.read<float>(m_addr + 336);
	}
	float Get_artificialAbsorbedNutrientAccumulationScale() {
		return memory.read<float>(m_addr + 340);
	}
	float Get_nutrientDeficiency() {
		return memory.read<float>(m_addr + 344);
	}
	float Get_nutrientDeficiencyToRecover() {
		return memory.read<float>(m_addr + 348);
	}
	float Get_artificialAbsorbedNutrient() {
		return memory.read<float>(m_addr + 352);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommand_Vote
{
public:
	UAdminCommand_Vote(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_WeaponEjectCasing
{
public:
	UAnimNotify_WeaponEjectCasing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetEmitterSocketName() {
		return memory.read<struct FName>(m_addr + 56);
	}
	bool GetAttachEmitter() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_ICU_GraphWidget_RR
{
public:
	UMetabolism_ICU_GraphWidget_RR(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMechanicCommonData
{
public:
	UMechanicCommonData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct TSoftClassPtr<UObject>, struct FVehicleAttachmentAssociatedTradeables> GetVehicleAttachmentAssociatedTradeablesMap() {
		return memory.read<struct TMap<struct TSoftClassPtr<UObject>, struct FVehicleAttachmentAssociatedTradeables>>(m_addr + 48);
	}
	struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>> GetVehicleAttachmentToTradeableInStockClassRedirectors() {
		return memory.read<struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>>>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentCompletion_Achievements
{
public:
	UAdminCommandArgumentCompletion_Achievements(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASmokeGrenadeItem
{
public:
	ASmokeGrenadeItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem Get_smokeParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2520);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent Get_smokeStartedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2528);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_smokeStoppedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2536);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_smokeSoundDuration() {
		return memory.read<float>(m_addr + 2544);
	}
	struct UAkComponent Get_smokeAudioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2552);
		return struct UAkComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCharacterSoundComponent
{
public:
	UCharacterSoundComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetAttachedSoundsAttachPointName() {
		return memory.read<struct FName>(m_addr + 176);
	}
	struct UCharacterImpactSoundsData GetImpactSounds() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UCharacterImpactSoundsData(ptr_addr);
	}
	struct UCharacterPainSoundsData GetPainSounds() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UCharacterPainSoundsData(ptr_addr);
	}
	float GetMinDurationBetweenPainSounds() {
		return memory.read<float>(m_addr + 200);
	}
	float GetMaxDurationBetweenPainSounds() {
		return memory.read<float>(m_addr + 204);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentCompletion_Constant
{
public:
	UAdminCommandArgumentCompletion_Constant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> Get_completionValues() {
		return memory.read<struct TArray<struct FString>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleMountSlot
{
public:
	UVehicleMountSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentCompletion_Enum
{
public:
	UAdminCommandArgumentCompletion_Enum(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName Get_enum() {
		return memory.read<struct FName>(m_addr + 56);
	}
	bool Get_excludeNoneEnumerator() {
		return memory.read<bool>(m_addr + 64);
	}
	bool Get_excludeCountEnumerator() {
		return memory.read<bool>(m_addr + 65);
	}
	bool Get_excludeAutoGeneratedEnumerator() {
		return memory.read<bool>(m_addr + 66);
	}
	struct TSet<struct FName> Get_additionalEnumeratorsToExclude() {
		return memory.read<struct TSet<struct FName>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACompanionCrow
{
public:
	ACompanionCrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent Get_mesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class APrisonerAIController
{
public:
	APrisonerAIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner Get_prisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct APrisoner(ptr_addr);
	}
	struct UPrisonerMovementComponent Get_prisonerMovementComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UPrisonerMovementComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentCompletion_Player
{
public:
	UAdminCommandArgumentCompletion_Player(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABird2AIController
{
public:
	ABird2AIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFlyDurationMin() {
		return memory.read<float>(m_addr + 808);
	}
	float GetFlyDurationMax() {
		return memory.read<float>(m_addr + 812);
	}
	float GetRemainOnGroundDurationMin() {
		return memory.read<float>(m_addr + 816);
	}
	float GetRemainOnGroundDurationMax() {
		return memory.read<float>(m_addr + 820);
	}
	float GetTurnSpeed() {
		return memory.read<float>(m_addr + 824);
	}
	float GetFlightSegmentDistance() {
		return memory.read<float>(m_addr + 828);
	}
	float GetLandingDistance() {
		return memory.read<float>(m_addr + 832);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentCompletion_PrimaryAsset
{
public:
	UAdminCommandArgumentCompletion_PrimaryAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetType Get_primaryAssetType() {
		return memory.read<struct FPrimaryAssetType>(m_addr + 56);
	}
	struct TSet<struct FPrimaryAssetId> Get_primaryAssetsToExclude() {
		return memory.read<struct TSet<struct FPrimaryAssetId>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAmmunitionItemState
{
public:
	UAmmunitionItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetAmmoCount() {
		return memory.read<int32_t>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMeleeSkillAnimationsPreset
{
public:
	UMeleeSkillAnimationsPreset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMeleeSkillAnimations GetNoSkillAnimations() {
		return memory.read<struct FMeleeSkillAnimations>(m_addr + 48);
	}
	struct FMeleeSkillAnimations GetBasicSkillAnimations() {
		return memory.read<struct FMeleeSkillAnimations>(m_addr + 200);
	}
	struct FMeleeSkillAnimations GetMediumSkillAnimations() {
		return memory.read<struct FMeleeSkillAnimations>(m_addr + 352);
	}
	struct FMeleeSkillAnimations GetAdvancedSkillAnimations() {
		return memory.read<struct FMeleeSkillAnimations>(m_addr + 504);
	}
	struct FMeleeSkillParametersPerSkillLevel GetNoSkillParameters() {
		return memory.read<struct FMeleeSkillParametersPerSkillLevel>(m_addr + 656);
	}
	struct FMeleeSkillParametersPerSkillLevel GetBasicSkillParameters() {
		return memory.read<struct FMeleeSkillParametersPerSkillLevel>(m_addr + 792);
	}
	struct FMeleeSkillParametersPerSkillLevel GetMediumSkillParameters() {
		return memory.read<struct FMeleeSkillParametersPerSkillLevel>(m_addr + 928);
	}
	struct FMeleeSkillParametersPerSkillLevel GetAdvancedSkillParameters() {
		return memory.read<struct FMeleeSkillParametersPerSkillLevel>(m_addr + 1064);
	}
	float GetNoSkillDamageMultiplier() {
		return memory.read<float>(m_addr + 1200);
	}
	float GetBasicSkillDamageMultiplier() {
		return memory.read<float>(m_addr + 1204);
	}
	float GetMediumSkillDamageMultiplier() {
		return memory.read<float>(m_addr + 1208);
	}
	float GetAdvancedSkillDamageMultiplier() {
		return memory.read<float>(m_addr + 1212);
	}
	float GetAboveAdvancedSkillDamageMultiplier() {
		return memory.read<float>(m_addr + 1216);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAudioDeviceDisplay
{
public:
	UAudioDeviceDisplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_deviceName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMugshotRoom
{
public:
	AMugshotRoom(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent Get_sceneRoot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USceneComponent(ptr_addr);
	}
	struct UChildActorComponent Get_previewPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UChildActorComponent(ptr_addr);
	}
	struct USceneCaptureComponent2D Get_mugshotCapture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct USceneCaptureComponent2D(ptr_addr);
	}
	struct UChildActorComponent Get_inmateShirt() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UChildActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentCompletion_Skill
{
public:
	UAdminCommandArgumentCompletion_Skill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCraftingAvailableItemWidget
{
public:
	UCraftingAvailableItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem Get_item() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct AItem(ptr_addr);
	}
	struct UAkAudioEvent Get_clickSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UAkAudioEvent(ptr_addr);
	}
	UTooltipBase Get_tooltipClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return UTooltipBase(ptr_addr);
	}
	struct UTexture2D Get_selectedTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_unselectedTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_componentAddTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_componentRemoveTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTexture2D(ptr_addr);
	}
	struct URetainerBox GetMainRetainerBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct URetainerBox(ptr_addr);
	}
	struct UImage Get_itemImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct UImage GetBackgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UImage(ptr_addr);
	}
	struct UImage GetAdditionalComponentImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetCountText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UChainsawAnimInstance
{
public:
	UChainsawAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_isTurnedOn() {
		return memory.read<bool>(m_addr + 720);
	}

private:
	std::uint64_t m_addr = 0;
};


class UObstuctsMouthItemTag
{
public:
	UObstuctsMouthItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentCompletion_Squad
{
public:
	UAdminCommandArgumentCompletion_Squad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCutObject
{
public:
	UPrisonerActionCutObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URangedResourceConsumerEntityComponentSetup
{
public:
	URangedResourceConsumerEntityComponentSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return UGameResourceType(ptr_addr);
	}
	float GetResourceAmount() {
		return memory.read<float>(m_addr + 80);
	}
	float GetRequiredResourceAmount() {
		return memory.read<float>(m_addr + 84);
	}
	bool GetAutoFindResourceSupplier() {
		return memory.read<bool>(m_addr + 88);
	}
	struct FName GetResourceSupplierName() {
		return memory.read<struct FName>(m_addr + 92);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentCompletion_Widget
{
public:
	UAdminCommandArgumentCompletion_Widget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UAdminCommand_AddOrRemoveWidget Get_commandClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return UAdminCommand_AddOrRemoveWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWheeledVehicleBase
{
public:
	AWheeledVehicleBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTireToSurfaceAudioData Get_tireToSurfaceAudioData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2856);
		return struct UTireToSurfaceAudioData(ptr_addr);
	}
	struct UVehicleGearedEnginePowertrainComponent Get_powertrainComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2880);
		return struct UVehicleGearedEnginePowertrainComponent(ptr_addr);
	}
	struct UVehicleDoorsComponent Get_doorsComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2888);
		return struct UVehicleDoorsComponent(ptr_addr);
	}
	float Get_brakeStrength() {
		return memory.read<float>(m_addr + 2936);
	}
	struct UCurveFloat Get_engineAccelerationCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2944);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_engineTorqueCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2952);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_maxPushForce() {
		return memory.read<float>(m_addr + 2960);
	}
	float Get_minPushForce() {
		return memory.read<float>(m_addr + 2968);
	}
	float Get_maxPushForcePerPusher() {
		return memory.read<float>(m_addr + 2972);
	}
	float Get_minPushStartForce() {
		return memory.read<float>(m_addr + 2976);
	}
	struct UCurveFloat Get_speedToPushForceCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2984);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_maxLinearVelocityWhenPushing() {
		return memory.read<float>(m_addr + 2992);
	}
	float Get_maxAllowedDistanceFromPushStartingPlayer() {
		return memory.read<float>(m_addr + 2996);
	}
	float Get_steeringResetSpeed() {
		return memory.read<float>(m_addr + 3000);
	}
	struct UCurveFloat Get_steeringSpeedCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3008);
		return struct UCurveFloat(ptr_addr);
	}
	struct UStaticMesh Get_steeringStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3016);
		return struct UStaticMesh(ptr_addr);
	}
	float Get_dragCoefficient() {
		return memory.read<float>(m_addr + 3024);
	}
	float Get_airDensity() {
		return memory.read<float>(m_addr + 3028);
	}
	float Get_additionalGravityFactor() {
		return memory.read<float>(m_addr + 3032);
	}
	float Get_antiDriftMultiplier() {
		return memory.read<float>(m_addr + 3036);
	}
	float Get_antiRollMultiplier() {
		return memory.read<float>(m_addr + 3040);
	}
	float Get_antiPitchMultiplier() {
		return memory.read<float>(m_addr + 3044);
	}
	int32_t Get_minimumNumberOfWheelsToBeDriven() {
		return memory.read<int32_t>(m_addr + 3068);
	}
	int32_t Get_minimumNumberOfWheelsToBePushed() {
		return memory.read<int32_t>(m_addr + 3072);
	}
	struct UAkAudioEvent Get_hornStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3080);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_hornStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3088);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_pusherActionDifficultyVsSpeed() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3104);
	}
	struct FRuntimeFloatCurve Get_pusherBaseStrengthChangeRateSpeedInfluenceVsSpeed() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3240);
	}
	struct FRuntimeFloatCurve Get_pusherBaseConstitutionChangeRateModifierVsSpeed() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3376);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInteractionUserWidget
{
public:
	UInteractionUserWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_actionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_actionButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UChatNotificationDescription
{
public:
	UChatNotificationDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 64);
	}
	uint8_t  GetChatType() {
		return memory.read<uint8_t >(m_addr + 80);
	}
	bool GetShouldCopyToClientClipboard() {
		return memory.read<bool>(m_addr + 81);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionPlaceItemOnRack
{
public:
	UPrisonerActionPlaceItemOnRack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFireFanningItemTag
{
public:
	UFireFanningItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetBlowAirIntoFireMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBlowAirIntoLowFireMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetItemSwingAnimOpen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAnimMontage(ptr_addr);
	}
	struct FName GetItemSwingAnimOpenSection() {
		return memory.read<struct FName>(m_addr + 72);
	}
	struct UAnimMontage GetItemSwingAnimClose() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAnimMontage(ptr_addr);
	}
	struct FName GetItemSwingAnimCloseSection() {
		return memory.read<struct FName>(m_addr + 88);
	}
	float GetAirAmountMultiplier() {
		return memory.read<float>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentDataTypeBase
{
public:
	UAdminCommandArgumentDataTypeBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetDataTypeName() {
		return memory.read<struct FText>(m_addr + 48);
	}
	UAdminCommandArgumentCompletion GetArgumentCompletion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return UAdminCommandArgumentCompletion(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInsertMagazine
{
public:
	UInsertMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMeshHitZones
{
public:
	UMeshHitZones(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface Get_deactivationMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USharkAnimInstance
{
public:
	USharkAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName Get_mouthTargetName() {
		return memory.read<struct FName>(m_addr + 712);
	}
	float Get_mouthMorphValueChangePerSecond() {
		return memory.read<float>(m_addr + 720);
	}
	struct FName Get_teethTargetName() {
		return memory.read<struct FName>(m_addr + 724);
	}
	float Get_teethMorphValueChangePerSecond() {
		return memory.read<float>(m_addr + 732);
	}
	struct FName Get_eyesTargetName() {
		return memory.read<struct FName>(m_addr + 736);
	}
	float Get_eyesMorphValueChangePerSecond() {
		return memory.read<float>(m_addr + 744);
	}
	struct FVector Get_velocity() {
		return memory.read<struct FVector>(m_addr + 748);
	}
	float Get_angularVelocityYaw() {
		return memory.read<float>(m_addr + 760);
	}
	float Get_angularVelocityPitch() {
		return memory.read<float>(m_addr + 764);
	}
	uint8_t  Get_behaviorMode() {
		return memory.read<uint8_t >(m_addr + 768);
	}
	bool Get_isAlive() {
		return memory.read<bool>(m_addr + 769);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentDataType_Location
{
public:
	UAdminCommandArgumentDataType_Location(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Get_defaultValue() {
		return memory.read<struct FVector>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};


class UChoppable
{
public:
	UChoppable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffectUIData_MaxMovementPace
{
public:
	UPrisonerBodyConditionOrSymptomSideEffectUIData_MaxMovementPace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCookingUtilitySlotButton
{
public:
	UCookingUtilitySlotButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_titleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_utilityIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_borderImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_ordinalNumberBorderImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_slotOrdinalNumber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_cookingInProgressIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UImage(ptr_addr);
	}
	bool Get_selected() {
		return memory.read<bool>(m_addr + 672);
	}
	struct FLinearColor Get_selectedBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 676);
	}
	struct FLinearColor Get_deselectedBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 692);
	}
	struct FLinearColor Get_selectedTextColor() {
		return memory.read<struct FLinearColor>(m_addr + 708);
	}
	struct FLinearColor Get_deselectedTextColor() {
		return memory.read<struct FLinearColor>(m_addr + 724);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentDataType_String
{
public:
	UAdminCommandArgumentDataType_String(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Get_defaultValue() {
		return memory.read<struct FString>(m_addr + 264);
	}
	bool Get_caseSensitive() {
		return memory.read<bool>(m_addr + 280);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMalfunctionWidget
{
public:
	UMalfunctionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_descriptionWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCraftingInfoWidget
{
public:
	UCraftingInfoWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UInspectedItemWidget GetItemWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UInspectedItemWidget(ptr_addr);
	}
	struct UGridPanel GetComponentsGridPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel GetCraftingGridPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UGridPanel(ptr_addr);
	}
	struct UUserWidget GetComponentsMinimizableWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetCraftingMinimizableWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UUserWidget(ptr_addr);
	}
	struct TArray<struct UPreviousNextSwitchWidget> Get_switchWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct TArray<struct UPreviousNextSwitchWidget>(ptr_addr);
	}
	struct TWeakObjectPtr<UPrisonerInventoryComponent> Get_inventoryComponent() {
		return memory.read<struct TWeakObjectPtr<UPrisonerInventoryComponent>>(m_addr + 752);
	}
	struct FCraftingRecipe Get_craftingRecipe() {
		return memory.read<struct FCraftingRecipe>(m_addr + 760);
	}
	struct UTextBlock GetTitleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetDescriptionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandArgumentDataType_TransformOrLocation
{
public:
	UAdminCommandArgumentDataType_TransformOrLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Get_defaultLocationValue() {
		return memory.read<struct FVector>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionInteractionQueryResults
{
public:
	UPrisonerBodyConditionInteractionQueryResults(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCircularMenuSegmentThrowingInfo
{
public:
	UCircularMenuSegmentThrowingInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDelegate GetAction() {
		return memory.read<struct FDelegate>(m_addr + 128);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryCentralPanel
{
public:
	UInventoryCentralPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVicinityPanel3 Get_vicinityPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UVicinityPanel3(ptr_addr);
	}
	struct UVicinityContainer3 Get_vicinityContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UVicinityContainer3(ptr_addr);
	}
	struct UScrollBox Get_vicinityContainerScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UScrollBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlaceableOnWallRackItemTag
{
public:
	UPlaceableOnWallRackItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandCompletionManager
{
public:
	UAdminCommandCompletionManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, UAdminCommand> Get_commands() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TMap<struct FString, UAdminCommand>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBuriableItemComponent
{
public:
	UBuriableItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_canEverShowMarker() {
		return memory.read<bool>(m_addr + 208);
	}
	bool Get_canBeBuried() {
		return memory.read<bool>(m_addr + 224);
	}
	struct FBurialInformation Get_repBurialInformation() {
		return memory.read<struct FBurialInformation>(m_addr + 232);
	}
	struct UStaticMesh Get_buriedMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UStaticMesh(ptr_addr);
	}
	struct FVector Get_buriedMeshScale() {
		return memory.read<struct FVector>(m_addr + 272);
	}
	struct FVector Get_buriedMeshRelativeLocation() {
		return memory.read<struct FVector>(m_addr + 284);
	}
	struct UMaterialBillboardComponent Get_spriteMarkerBillboard() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct UMaterialBillboardComponent(ptr_addr);
	}
	struct FMaterialSpriteElement Get_spriteMarkerData() {
		return memory.read<struct FMaterialSpriteElement>(m_addr + 320);
	}
	struct FVector Get_spriteMarkerRelativeLocation() {
		return memory.read<struct FVector>(m_addr + 360);
	}
	bool Get_applyBuryMaterial() {
		return memory.read<bool>(m_addr + 372);
	}
	float Get_startMeshFadeDistance() {
		return memory.read<float>(m_addr + 376);
	}
	float Get_endMeshFadeDistance() {
		return memory.read<float>(m_addr + 380);
	}
	USkill Get_skillToIncrease() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return USkill(ptr_addr);
	}
	float Get_skillIncreaseAmount() {
		return memory.read<float>(m_addr + 392);
	}
	float Get_skillIncreaseModifier() {
		return memory.read<float>(m_addr + 396);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminCommandRegistry
{
public:
	UAdminCommandRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UAdminCommand> Get_commands() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<UAdminCommand>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACargoDropShip
{
public:
	ACargoDropShip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAdminLight
{
public:
	UAdminLight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat Get_intensityVersusTimeOfDay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ARadioStation
{
public:
	ARadioStation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName Get_stationName() {
		return memory.read<struct FName>(m_addr + 592);
	}
	struct TArray<struct FRadioProgramData> Get_programsData() {
		return memory.read<struct TArray<struct FRadioProgramData>>(m_addr + 600);
	}
	int32_t Get_maxTracksToQueue() {
		return memory.read<int32_t>(m_addr + 616);
	}
	int32_t Get_currentIndex() {
		return memory.read<int32_t>(m_addr + 620);
	}
	struct TArray<struct URadioTrack> Get_playlist() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct TArray<struct URadioTrack>(ptr_addr);
	}
	float Get_elapsedTime() {
		return memory.read<float>(m_addr + 640);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCCGameUpgradeConditionDisplayWidget
{
public:
	UCCGameUpgradeConditionDisplayWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBorder Get_border() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UBorder(ptr_addr);
	}
	struct UTextBlock Get_text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct TMap<uint8_t , struct FText> Get_requirementTextPerGameUpgrade() {
		return memory.read<struct TMap<uint8_t , struct FText>>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBaseCraftingRecipe
{
public:
	UBaseCraftingRecipe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetRecipeName() {
		return memory.read<struct FString>(m_addr + 40);
	}
	uint8_t  GetRecipeCategory() {
		return memory.read<uint8_t >(m_addr + 56);
	}
	int32_t GetRecipeOrder() {
		return memory.read<int32_t>(m_addr + 60);
	}
	struct UAnimMontage GetCustomCraftingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAkAudioEvent GetCustomStartCraftingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetCustomStopCraftingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct TArray<struct UCraftingCondition> GetGlobalConditions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct TArray<struct UCraftingCondition>(ptr_addr);
	}
	struct TArray<struct FCraftingSlot> GetIngredientSlots() {
		return memory.read<struct TArray<struct FCraftingSlot>>(m_addr + 104);
	}
	struct TArray<struct FCraftingProductDescription> GetPossibleProducts() {
		return memory.read<struct TArray<struct FCraftingProductDescription>>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdminPlantPanel
{
public:
	UAdminPlantPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton Get_seedingButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_vegetatingButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_floweringButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_ripeningButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_killButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_addWeedButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_removeWeedButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_removePlantButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_addWaterButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_DoubleVision
{
public:
	UPrisonerBodySymptom_DoubleVision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsApplyNotification
{
public:
	UCustomZoneSettingsApplyNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AObjective
{
public:
	AObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FDialogueInfo> Get_objectivesIntroDialogues() {
		return memory.read<struct TArray<struct FDialogueInfo>>(m_addr + 688);
	}
	struct TArray<struct FDialogueInfo> Get_objectivesOutroSuccessDialogues() {
		return memory.read<struct TArray<struct FDialogueInfo>>(m_addr + 704);
	}
	struct TArray<struct FDialogueInfo> Get_objectivesOutroFailDialogues() {
		return memory.read<struct TArray<struct FDialogueInfo>>(m_addr + 720);
	}
	uint8_t  Get_objectiveState() {
		return memory.read<uint8_t >(m_addr + 736);
	}
	struct TWeakObjectPtr<AMission> Get_parentMission() {
		return memory.read<struct TWeakObjectPtr<AMission>>(m_addr + 740);
	}
	struct FText Get_description() {
		return memory.read<struct FText>(m_addr + 752);
	}
	bool Get_canInterruptDialogue() {
		return memory.read<bool>(m_addr + 793);
	}
	bool Get_playUISounds() {
		return memory.read<bool>(m_addr + 794);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDbStatics
{
public:
	UDbStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_StomachEmpty
{
public:
	UPrisonerBodyCondition_StomachEmpty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_stomachEmptinessToExist() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_energyRatioToExist() {
		return memory.read<float>(m_addr + 196);
	}
	UPrisonerBodySymptom_StomachGrowling Get_stomachGrowlingSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return UPrisonerBodySymptom_StomachGrowling(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_StomachGrowling Get_stomachGrowlingSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UPrisonerBodySymptomCause_StomachGrowling(ptr_addr);
	}
	float Get_stomachGrowlingSymptomSoundInterval() {
		return memory.read<float>(m_addr + 216);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_ChamberWeapon
{
public:
	UAnimNotifyState_ChamberWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASedentaryNPC
{
public:
	ASedentaryNPC(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Get_originalLocation() {
		return memory.read<struct FVector>(m_addr + 1960);
	}
	struct ATradeOutpostBuilding Get_tradeOutpostBuilding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1976);
		return struct ATradeOutpostBuilding(ptr_addr);
	}
	struct FVector Get_animationHeadScale() {
		return memory.read<struct FVector>(m_addr + 2008);
	}
	struct UAnimSequenceBase Get_faceIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2024);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct FFloatRange Get_headYawClampValues() {
		return memory.read<struct FFloatRange>(m_addr + 2032);
	}
	struct FFloatRange Get_headPitchClampValues() {
		return memory.read<struct FFloatRange>(m_addr + 2048);
	}
	float Get_headPitchClampCorrectionValueLower() {
		return memory.read<float>(m_addr + 2064);
	}
	float Get_headPitchClampCorrectionValueUpper() {
		return memory.read<float>(m_addr + 2068);
	}
	float Get_headRotationSpeedLerpFactor() {
		return memory.read<float>(m_addr + 2072);
	}
	struct FFloatRange Get_eyesYawAngleRange() {
		return memory.read<struct FFloatRange>(m_addr + 2076);
	}
	struct FFloatRange Get_eyesPitchAngleRange() {
		return memory.read<struct FFloatRange>(m_addr + 2092);
	}
	float Get_eyesPitchClampCorrectionValueLower() {
		return memory.read<float>(m_addr + 2108);
	}
	float Get_eyesPitchClampCorrectionValueUpper() {
		return memory.read<float>(m_addr + 2112);
	}
	float Get_eyesRotationSpeedLerpFactor() {
		return memory.read<float>(m_addr + 2116);
	}
	struct FFloatRange Get_blinkingPeriodRange() {
		return memory.read<struct FFloatRange>(m_addr + 2120);
	}
	float Get_timeToBlinkInSeconds() {
		return memory.read<float>(m_addr + 2136);
	}
	struct TArray<USedentaryNPCBackgroundInteraction> Get_backgroundInteractions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2144);
		return struct TArray<USedentaryNPCBackgroundInteraction>(ptr_addr);
	}
	struct USedentaryNPCBackgroundInteraction Get_activeBackgroundInteraction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2160);
		return struct USedentaryNPCBackgroundInteraction(ptr_addr);
	}
	float Get_interactionDistance() {
		return memory.read<float>(m_addr + 2168);
	}
	float Get_timeWithoutFocusPawnToClearBackgroundInteractions() {
		return memory.read<float>(m_addr + 2172);
	}
	float Get_backgroundInteractionCooldownTime() {
		return memory.read<float>(m_addr + 2264);
	}

private:
	std::uint64_t m_addr = 0;
};


class ARequirementObjective
{
public:
	ARequirementObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFireSourceItemTag
{
public:
	UFireSourceItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABlueprintableItemObjective
{
public:
	ABlueprintableItemObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_actionType() {
		return memory.read<uint8_t >(m_addr + 816);
	}
	AActor Get_targetBlueprintActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return AActor(ptr_addr);
	}
	struct TArray<AActor> Get_itemsToFill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct TArray<AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AAirplane
{
public:
	AAirplane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULiftComponent Get_physicsLiftComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2800);
		return struct ULiftComponent(ptr_addr);
	}
	struct TMap<uint8_t , struct FAerodynamicSurfaceControlData> Get_aerodynamicSurfaceMap() {
		return memory.read<struct TMap<uint8_t , struct FAerodynamicSurfaceControlData>>(m_addr + 2848);
	}
	float Get_airFlowParticlesSpeedKmhThreshold() {
		return memory.read<float>(m_addr + 2944);
	}
	float Get_reverseTaxiingForce() {
		return memory.read<float>(m_addr + 2948);
	}
	float Get_maxReverseTaxiingVelocity() {
		return memory.read<float>(m_addr + 2952);
	}
	float Get_airplaneHeightToStallInMeters() {
		return memory.read<float>(m_addr + 2956);
	}
	float Get_propellerForce() {
		return memory.read<float>(m_addr + 2960);
	}
	float Get_maxVelocity() {
		return memory.read<float>(m_addr + 2964);
	}
	struct FInt32Range Get_throttleLevelRange() {
		return memory.read<struct FInt32Range>(m_addr + 2972);
	}
	struct FRuntimeFloatCurve Get_throttlePerLevel() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 2992);
	}
	float Get_throttleLerpAmount() {
		return memory.read<float>(m_addr + 3132);
	}
	float Get_brakeLerpAmount() {
		return memory.read<float>(m_addr + 3144);
	}
	float Get_rollLerpAmount() {
		return memory.read<float>(m_addr + 3156);
	}
	float Get_yawLerpAmount() {
		return memory.read<float>(m_addr + 3168);
	}
	float Get_pitchLerpAmount() {
		return memory.read<float>(m_addr + 3180);
	}
	float Get_controlResetLerp() {
		return memory.read<float>(m_addr + 3192);
	}
	struct UStaticMeshComponent Get_propellerMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3240);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UMaterialInterface Get_propellerMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3248);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_propellerMaterialDynamic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3256);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRemovePlantDescription
{
public:
	UPrisonerActionRemovePlantDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponActionReloadSequence
{
public:
	UWeaponActionReloadSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBodyWeaponAnimation GetAnimationStandAndCrouch() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 40);
	}
	struct FBodyWeaponAnimation GetAnimationProne() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 56);
	}
	bool GetCanBeInterrupted() {
		return memory.read<bool>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class AAdvancedBlueprintableItemObjective
{
public:
	AAdvancedBlueprintableItemObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AMissionDialogueManager Get_dialogueManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct AMissionDialogueManager(ptr_addr);
	}
	struct UDialogueData Get_dialogueData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UDialogueData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMGoldTrading
{
public:
	UBankATMGoldTrading(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UConZCustomInteractionButton Get_btnEjectCard() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UConZCustomInteractionButton(ptr_addr);
	}
	struct UWidgetSwitcher Get_buttonSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnReturn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnSubmit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnNo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnYes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UWidgetSwitcher Get_subsectionSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock Get_goldBuyConversionLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UTextBlock(ptr_addr);
	}
	struct UBankATMVirtualEditbox Get_editBuyAmount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UBankATMVirtualEditbox(ptr_addr);
	}
	struct UTextBlock Get_creditsLostLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_goldSellConversionLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UTextBlock(ptr_addr);
	}
	struct UBankATMVirtualEditbox Get_editSellAmount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UBankATMVirtualEditbox(ptr_addr);
	}
	struct UTextBlock Get_creditsGainedLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_questionLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_errorLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UTextBlock(ptr_addr);
	}
	struct UBankATMGoldValueGraph Get_goldValueGraph() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UBankATMGoldValueGraph(ptr_addr);
	}
	struct UTextBlock Get_goldBalanceTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_fundsSourceWarning() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UTextBlock(ptr_addr);
	}
	struct UAkAudioEvent Get_soundSuccess() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_errorSuccess() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAdvancedBuoyancyComponent
{
public:
	UAdvancedBuoyancyComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_waterKinematicViscosity() {
		return memory.read<float>(m_addr + 1260);
	}
	float Get_cPD1() {
		return memory.read<float>(m_addr + 1264);
	}
	float Get_cPD2() {
		return memory.read<float>(m_addr + 1268);
	}
	float Get_fP() {
		return memory.read<float>(m_addr + 1272);
	}
	float Get_cSD1() {
		return memory.read<float>(m_addr + 1276);
	}
	float Get_cSD2() {
		return memory.read<float>(m_addr + 1280);
	}
	float Get_fS() {
		return memory.read<float>(m_addr + 1284);
	}
	float Get_maxAcceleration() {
		return memory.read<float>(m_addr + 1288);
	}
	float Get_p() {
		return memory.read<float>(m_addr + 1292);
	}
	float Get_maxHydrodynamicVelocity() {
		return memory.read<float>(m_addr + 1296);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACraftingObjective
{
public:
	ACraftingObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TSoftClassPtr<UObject>> Get_targetItems() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 816);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateRocketLauncherUnarm
{
public:
	UWeaponStateRocketLauncherUnarm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWashClothesData
{
public:
	UWashClothesData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<AItem, struct FWashItemData> GetWashClothes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TMap<AItem, struct FWashItemData>(ptr_addr);
	}
	USkill GetSkillToIncrease() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return USkill(ptr_addr);
	}
	float GetSkillIncreaseAmount() {
		return memory.read<float>(m_addr + 136);
	}
	float GetSkillIncreaseModifier() {
		return memory.read<float>(m_addr + 140);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDeathmatchParticipantStats
{
public:
	UDeathmatchParticipantStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetLongestHeadshot() {
		return memory.read<float>(m_addr + 72);
	}
	int32_t GetMeleeKills() {
		return memory.read<int32_t>(m_addr + 76);
	}
	float GetLongestLife() {
		return memory.read<float>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class AVehicleAttachmentItem
{
public:
	AVehicleAttachmentItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAudioSettingsManager
{
public:
	UAudioSettingsManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AAIDetectionTimerHandler
{
public:
	AAIDetectionTimerHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDecontaminateWithReplenishableResourceDescription
{
public:
	UPrisonerActionDecontaminateWithReplenishableResourceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameResourceContainerProxyForReplenishableResource GetProxyForReplenishableResource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UGameResourceContainerProxyForReplenishableResource(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_Hallucinations
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_Hallucinations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodySymptom_Hallucinations Get_symptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodySymptom_Hallucinations(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Hallucinations Get_symptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPrisonerBodySymptomCause_Hallucinations(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_hallucinationsSeverityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingRecipeRegistry
{
public:
	UCookingRecipeRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCookingRecipeRegistryEntry> Get_entries() {
		return memory.read<struct TArray<struct FCookingRecipeRegistryEntry>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class AVehicleBase
{
public:
	AVehicleBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVehicleMeshComponent Get_vehicleMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1048);
		return struct UVehicleMeshComponent(ptr_addr);
	}
	bool Get_shouldApplyWaterDrag() {
		return memory.read<bool>(m_addr + 1084);
	}
	float Get_waterDragForceCoefficient() {
		return memory.read<float>(m_addr + 1088);
	}
	struct FFloatInterval Get_submergedInWaterDamagePerSecond() {
		return memory.read<struct FFloatInterval>(m_addr + 1092);
	}
	struct AVehicleItemContainer Get_itemContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1184);
		return struct AVehicleItemContainer(ptr_addr);
	}
	struct TArray<struct UVehicleAttachment> Get_vehicleAttachments() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1192);
		return struct TArray<struct UVehicleAttachment>(ptr_addr);
	}
	struct TArray<struct UVehicleAttachment> Get_repVehicleAttachments() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1208);
		return struct TArray<struct UVehicleAttachment>(ptr_addr);
	}
	struct FVehicleAttachmentSlot Get_chassisSlot() {
		return memory.read<struct FVehicleAttachmentSlot>(m_addr + 1240);
	}
	struct FGameplayTagContainer Get_lockInfluencingAttachmentSlotTags() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 1320);
	}
	struct FGameplayTagContainer Get_lockingAttachmentSlotTags() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 1352);
	}
	struct FPackedEntitySetupAndId Get_repServerEntitySetupAndId() {
		return memory.read<struct FPackedEntitySetupAndId>(m_addr + 1408);
	}
	struct UVehicleForcePushComponent Get_forcePushComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1416);
		return struct UVehicleForcePushComponent(ptr_addr);
	}
	struct TMap<struct UVehicleAttachment, struct UWidgetComponent*> Get_attachmentHealthWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1424);
		return struct TMap<struct UVehicleAttachment, struct UWidgetComponent*>(ptr_addr);
	}
	UVehicleAttachmentHealthWidget Get_attachmentHealthWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1504);
		return UVehicleAttachmentHealthWidget(ptr_addr);
	}
	struct UNetworkPredictionComponent Get_networkPrediction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1512);
		return struct UNetworkPredictionComponent(ptr_addr);
	}
	struct FGameplayTag GetSpawnGroup() {
		return memory.read<struct FGameplayTag>(m_addr + 1520);
	}
	AVehicleItemContainer Get_itemContainerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1536);
		return AVehicleItemContainer(ptr_addr);
	}
	struct FRepairableParams Get_repairableParams() {
		return memory.read<struct FRepairableParams>(m_addr + 1544);
	}
	bool Get_repIsSimulatingPhysics() {
		return memory.read<bool>(m_addr + 1601);
	}
	struct FVector Get_repLocationWhenNotSimulatingPhysics() {
		return memory.read<struct FVector>(m_addr + 1604);
	}
	struct FRotator Get_repRotationWhenNotSimulatingPhysics() {
		return memory.read<struct FRotator>(m_addr + 1616);
	}
	float Get_physicsDormancyTimeout() {
		return memory.read<float>(m_addr + 1632);
	}
	struct UVehicleServiceComponent Get_serviceComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1664);
		return struct UVehicleServiceComponent(ptr_addr);
	}
	bool Get_isInQuickService() {
		return memory.read<bool>(m_addr + 1672);
	}
	struct UVehicleCameraStabilizerComponent Get_cameraStabilizer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1864);
		return struct UVehicleCameraStabilizerComponent(ptr_addr);
	}
	struct TMap<uint8_t , float> Get_collisionDamageMultipliers() {
		return memory.read<struct TMap<uint8_t , float>>(m_addr + 1872);
	}
	float Get_explosiveDamageMultiplier() {
		return memory.read<float>(m_addr + 1952);
	}
	struct UCurveFloat Get_collisionDamageToMultiplierCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1960);
		return struct UCurveFloat(ptr_addr);
	}
	uint32_t Get_previewMeshTimePerMesh() {
		return memory.read<uint32_t>(m_addr + 1972);
	}
	struct FText Get_healthBarCaption() {
		return memory.read<struct FText>(m_addr + 1984);
	}
	float Get_collisionDamageReplicationPeriodCooldownThreshold() {
		return memory.read<float>(m_addr + 2008);
	}
	float Get_collisionDamageReplicationPeriodTimeoutThreshold() {
		return memory.read<float>(m_addr + 2012);
	}
	struct FVehicleImpactEffects Get_impactEffects[5]() {
		return memory.read<struct FVehicleImpactEffects>(m_addr + 2040);
	}
	float Get_maxSpeedForInteraction() {
		return memory.read<float>(m_addr + 2416);
	}
	float Get_maxTiltAngleForMounting() {
		return memory.read<float>(m_addr + 2420);
	}
	float Get_maxSubmergedTime() {
		return memory.read<float>(m_addr + 2432);
	}
	float Get_maxSubmersionFactor() {
		return memory.read<float>(m_addr + 2436);
	}
	UUserWidget Get_mountSlotIndicatorsWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2448);
		return UUserWidget(ptr_addr);
	}
	float Get_inWaterDestructionTimeInSeconds() {
		return memory.read<float>(m_addr + 2464);
	}
	float Get_outOfWaterDestructionTimeInSeconds() {
		return memory.read<float>(m_addr + 2468);
	}
	uint8_t  Get_repLightsCategoryStates() {
		return memory.read<uint8_t >(m_addr + 2472);
	}
	UVehicleHandlingSkill Get_vehicleHandlingSkill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2496);
		return UVehicleHandlingSkill(ptr_addr);
	}
	float Get_timeUntilDestructionInSeconds() {
		return memory.read<float>(m_addr + 2504);
	}
	bool Get_isInWater() {
		return memory.read<bool>(m_addr + 2508);
	}
	float Get_navigationRelevancyVelocitySquared() {
		return memory.read<float>(m_addr + 2512);
	}
	struct UParticleSystem Get_smokeParticlesLow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2544);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem Get_smokeParticlesMedium() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2552);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem Get_smokeParticlesHigh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2560);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystemComponent Get_smokeParticleSystemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2576);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct FVector Get_smokeParticlesOffset() {
		return memory.read<struct FVector>(m_addr + 2584);
	}
	uint8_t  Get_physicsDominanceGroup() {
		return memory.read<uint8_t >(m_addr + 2596);
	}
	float Get_aiNoiseFrequencyPerHour() {
		return memory.read<float>(m_addr + 2600);
	}
	uint8_t  Get_aiNoiseLevel() {
		return memory.read<uint8_t >(m_addr + 2604);
	}
	struct FVector Get_aiNoiseOffset() {
		return memory.read<struct FVector>(m_addr + 2612);
	}
	struct TArray<struct FGameplayTag> Get_mountSlotsBySwitchSeatIndex() {
		return memory.read<struct TArray<struct FGameplayTag>>(m_addr + 2624);
	}
	struct FTransform Get_unlockTransform() {
		return memory.read<struct FTransform>(m_addr + 2640);
	}
	float Get_forceUnlockMovementAcceptanceRadius() {
		return memory.read<float>(m_addr + 2688);
	}
	float Get_absoluteSpeedLimitKmh() {
		return memory.read<float>(m_addr + 2692);
	}
	uint8_t  Get_aiTeam() {
		return memory.read<uint8_t >(m_addr + 2696);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCCSkillSliderWidget
{
public:
	UCCSkillSliderWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetOnSliderChanged() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 608);
	}
	struct FMulticastInlineDelegate GetOnSliderSelected() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 624);
	}
	struct FMulticastInlineDelegate GetOnSliderDeselected() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 640);
	}
	struct UTextBlock Get_skillName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UCCNonSelectableTextWidget Get_nonSelectableText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UCCNonSelectableTextWidget(ptr_addr);
	}
	struct UTrashSliderWidget Get_slider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTrashSliderWidget(ptr_addr);
	}
	bool Get_enabled() {
		return memory.read<bool>(m_addr + 680);
	}
	struct FSkillTemplate Get_skillTemplate() {
		return memory.read<struct FSkillTemplate>(m_addr + 688);
	}
	struct FLinearColor Get_enabledColor() {
		return memory.read<struct FLinearColor>(m_addr + 744);
	}
	struct FLinearColor Get_disabledColor() {
		return memory.read<struct FLinearColor>(m_addr + 760);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAIStatics
{
public:
	UAIStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADropZoneKey
{
public:
	ADropZoneKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USphereComponent GetSphereComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct USphereComponent(ptr_addr);
	}
	struct ADropZoneGameEvent Get_gameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2328);
		return struct ADropZoneGameEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicle
{
public:
	UVehicle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponAction
{
public:
	UWeaponAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URemoveCartridge
{
public:
	URemoveCartridge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleMountSlotsWidget
{
public:
	UVehicleMountSlotsWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCanvasPanel Get_mountSlotsCanvas() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UCanvasPanel(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionSearchObject
{
public:
	UPrisonerActionSearchObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABiome
{
public:
	ABiome(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent Get_root() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USceneComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_visualizationSphere() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UStaticMeshComponent(ptr_addr);
	}
	float Get_radius() {
		return memory.read<float>(m_addr + 560);
	}
	struct FHuntingBiomeParameters Get_parameters() {
		return memory.read<struct FHuntingBiomeParameters>(m_addr + 568);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAkComponentClientOnly
{
public:
	UAkComponentClientOnly(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UArchitecturalCategory
{
public:
	UArchitecturalCategory(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetCategoryName() {
		return memory.read<struct FText>(m_addr + 48);
	}
	struct TArray<struct UBaseBuildingBlockCraftableItem> GetBaseBuildingModules() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct UBaseBuildingBlockCraftableItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBasicNotificationDescription
{
public:
	UBasicNotificationDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetMessage() {
		return memory.read<struct FText>(m_addr + 64);
	}
	int32_t GetFontSize() {
		return memory.read<int32_t>(m_addr + 88);
	}
	struct UTexture2D GetIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UTexture2D(ptr_addr);
	}
	int32_t GetIconSize() {
		return memory.read<int32_t>(m_addr + 104);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 108);
	}
	bool Getping() {
		return memory.read<bool>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZWorldSettings
{
public:
	AConZWorldSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeatherController2 GetWeatherController2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct AWeatherController2(ptr_addr);
	}
	struct AWetnessManager GetWetnessManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct AWetnessManager(ptr_addr);
	}
	struct AGameEventManager GetGameEventManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct AGameEventManager(ptr_addr);
	}
	struct AWorldEventManager GetWorldEventManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct AWorldEventManager(ptr_addr);
	}
	struct ABuildingManager GetBuildingManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct ABuildingManager(ptr_addr);
	}
	struct AItemContainerManager GetItemContainerManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct AItemContainerManager(ptr_addr);
	}
	struct AConZEconomyManager GetEconomyManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 952);
		return struct AConZEconomyManager(ptr_addr);
	}
	struct AGardenManager GetFarmingGardenManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct AGardenManager(ptr_addr);
	}
	struct ARadiationManager GetRadiationManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct ARadiationManager(ptr_addr);
	}
	struct AHuntingManager GetHuntingManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 976);
		return struct AHuntingManager(ptr_addr);
	}
	struct ACookingManager GetCookingManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 984);
		return struct ACookingManager(ptr_addr);
	}
	struct AMugshotRoom GetMugshotRoom() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 992);
		return struct AMugshotRoom(ptr_addr);
	}
	struct TArray<struct ARadioStation> GetRadioStations() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct TArray<struct ARadioStation>(ptr_addr);
	}
	struct UAkAudioEvent GetRadioNoiseStartEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRadioNoiseStopEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1024);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRadioStopEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1032);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRadioStationChangeNoiseEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1040);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UEntitySystemSettings GetEntitySystemSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1048);
		return struct UEntitySystemSettings(ptr_addr);
	}
	struct FItemSpawningSettings GetItemSpawningSettings() {
		return memory.read<struct FItemSpawningSettings>(m_addr + 1056);
	}
	struct AVolume GetIslandBoundsVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1128);
		return struct AVolume(ptr_addr);
	}
	bool GetUseVirtualizationSystem() {
		return memory.read<bool>(m_addr + 1136);
	}
	struct FBox2D GetWorldBounds() {
		return memory.read<struct FBox2D>(m_addr + 1140);
	}
	struct FGameplayTag GetHeightMapGameplayTag() {
		return memory.read<struct FGameplayTag>(m_addr + 1160);
	}
	struct FGameplayTag GetMapPropertiesGameplayTag() {
		return memory.read<struct FGameplayTag>(m_addr + 1168);
	}
	struct FGameplayTag GetGerstnerWaveOcclusionPropertiesGameplayTag() {
		return memory.read<struct FGameplayTag>(m_addr + 1176);
	}
	struct FGameplayTag GetOceanOpacityGameplayTag() {
		return memory.read<struct FGameplayTag>(m_addr + 1184);
	}
	struct TArray<struct FConZPrisonerSpawnEquipmentProperties> GetPrisonerSpawnEquipment() {
		return memory.read<struct TArray<struct FConZPrisonerSpawnEquipmentProperties>>(m_addr + 1192);
	}
	bool GetSpawnInAir() {
		return memory.read<bool>(m_addr + 1208);
	}
	float GetFirstSpawnAltitude() {
		return memory.read<float>(m_addr + 1212);
	}
	float GetRespawnAltitude() {
		return memory.read<float>(m_addr + 1216);
	}
	struct FFloatInterval GetMapMinMaxElevation() {
		return memory.read<struct FFloatInterval>(m_addr + 1220);
	}
	struct UAvailabilityGrid GetAvailabilityGrid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1232);
		return struct UAvailabilityGrid(ptr_addr);
	}
	UAvailabilityGrid Get_availabilityGridClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1344);
		return UAvailabilityGrid(ptr_addr);
	}
	struct TArray<struct FVehicleSpawnPointData> Get_vehicleSpawnPoints() {
		return memory.read<struct TArray<struct FVehicleSpawnPointData>>(m_addr + 1352);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItem
{
public:
	AItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetDebugTextChanged() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 704);
	}
	struct FMulticastInlineDelegate GetPickedUpState() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 720);
	}
	struct FMulticastInlineDelegate GetOnStaticMeshChanged() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 736);
	}
	struct FMulticastInlineDelegate GetOnSkeletalMeshChanged() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 752);
	}
	struct UStaticMeshComponent GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UThrowingComponent GetThrowingComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1064);
		return struct UThrowingComponent(ptr_addr);
	}
	struct FText Get_caption() {
		return memory.read<struct FText>(m_addr + 1072);
	}
	struct FText Get_description() {
		return memory.read<struct FText>(m_addr + 1096);
	}
	int32_t Get_uses() {
		return memory.read<int32_t>(m_addr + 1120);
	}
	float Get_health() {
		return memory.read<float>(m_addr + 1124);
	}
	float Get_maxHealth() {
		return memory.read<float>(m_addr + 1128);
	}
	float Get_maxHealthPercentageAfterReachingBadQuality() {
		return memory.read<float>(m_addr + 1132);
	}
	float Get_weight() {
		return memory.read<float>(m_addr + 1136);
	}
	float Get_initialWeightUsed() {
		return memory.read<float>(m_addr + 1140);
	}
	float Get_maxWaterWeightAsRatioOfWeight() {
		return memory.read<float>(m_addr + 1144);
	}
	float Get_radiationDecreaseRate() {
		return memory.read<float>(m_addr + 1148);
	}
	float Get_maxRadiationAmountPerWeight() {
		return memory.read<float>(m_addr + 1152);
	}
	float Get_baseRadiationPropagationFactor() {
		return memory.read<float>(m_addr + 1156);
	}
	bool Get_canEverDecontaminate() {
		return memory.read<bool>(m_addr + 1160);
	}
	struct UChoppingRecipeDataAsset Get_choppingRecipeDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1168);
		return struct UChoppingRecipeDataAsset(ptr_addr);
	}
	bool Get_shouldBeMaintained() {
		return memory.read<bool>(m_addr + 1176);
	}
	bool Get_canBeDropped() {
		return memory.read<bool>(m_addr + 1177);
	}
	bool Get_canTakeInHands() {
		return memory.read<bool>(m_addr + 1178);
	}
	bool Get_canBeVisibleInVicinity() {
		return memory.read<bool>(m_addr + 1179);
	}
	bool Get_canPlaceItemsOn() {
		return memory.read<bool>(m_addr + 1180);
	}
	bool Get_canPlaceBlueprintsOn() {
		return memory.read<bool>(m_addr + 1181);
	}
	struct USkeletalMesh Get_overrideSkeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1184);
		return struct USkeletalMesh(ptr_addr);
	}
	struct FTransform Get_overrideSkeletalMeshRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 1200);
	}
	uint8_t  Get_ifExhausted() {
		return memory.read<uint8_t >(m_addr + 1248);
	}
	float Get_resourceAmountUsedPerWash() {
		return memory.read<float>(m_addr + 1252);
	}
	struct UTexture2D Get_inventoryIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_inventoryIconInHands() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_outsideInventoryIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return struct UTexture2D(ptr_addr);
	}
	uint32_t Get_sizeX() {
		return memory.read<uint32_t>(m_addr + 1280);
	}
	uint32_t Get_sizeY() {
		return memory.read<uint32_t>(m_addr + 1284);
	}
	struct TArray<struct UBaseItemTag> Get_inventoryWhiteList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1288);
		return struct TArray<struct UBaseItemTag>(ptr_addr);
	}
	struct TArray<struct UBaseItemTag> Get_inventoryBlackList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1304);
		return struct TArray<struct UBaseItemTag>(ptr_addr);
	}
	float Get_maxContainedWeight() {
		return memory.read<float>(m_addr + 1320);
	}
	bool Get_canContainNonEmptyItems() {
		return memory.read<bool>(m_addr + 1324);
	}
	bool Get_canBeContainedIfNonEmpty() {
		return memory.read<bool>(m_addr + 1325);
	}
	bool Get_isIgnoredBySpawners() {
		return memory.read<bool>(m_addr + 1326);
	}
	struct FFloatInterval Get_spawnTimeoutPerPlayer() {
		return memory.read<struct FFloatInterval>(m_addr + 1328);
	}
	struct FItemLocation Get_itemLocation() {
		return memory.read<struct FItemLocation>(m_addr + 1336);
	}
	uint8_t  Get_rarity() {
		return memory.read<uint8_t >(m_addr + 1351);
	}
	struct FGameplayTagContainer Get_itemSpawnTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 1352);
	}
	struct FGameplayTag Get_itemSpawnGroup() {
		return memory.read<struct FGameplayTag>(m_addr + 1384);
	}
	struct FVector Get_spawnLocationOffset() {
		return memory.read<struct FVector>(m_addr + 1392);
	}
	struct FRotator Get_spawnRotationOffset() {
		return memory.read<struct FRotator>(m_addr + 1404);
	}
	float Get_spawnRotationRandomization() {
		return memory.read<float>(m_addr + 1416);
	}
	float Get_placementCollisionUpOffset() {
		return memory.read<float>(m_addr + 1420);
	}
	bool Get_shouldOverrideUsageWhenSpawnedBySpawners() {
		return memory.read<bool>(m_addr + 1424);
	}
	float Get_initialUsageWhenSpawnedBySpawners() {
		return memory.read<float>(m_addr + 1428);
	}
	float Get_randomizeUsageWhenSpawnedBySpawners() {
		return memory.read<float>(m_addr + 1432);
	}
	struct TArray<struct UBaseItemTag> Get_itemTags() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1440);
		return struct TArray<struct UBaseItemTag>(ptr_addr);
	}
	struct TArray<struct UBaseItemTag> Get_ownedItemTags() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1456);
		return struct TArray<struct UBaseItemTag>(ptr_addr);
	}
	uint8_t  Get_noiseLevel() {
		return memory.read<uint8_t >(m_addr + 1472);
	}
	struct FItemMotionNoise Get_motionNoise() {
		return memory.read<struct FItemMotionNoise>(m_addr + 1480);
	}
	struct UAkAudioEvent Get_inventoryHandlingSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1488);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_destroyedSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1496);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct TArray<UCraftingIngredientType> Get_craftingIngredientTypes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1504);
		return struct TArray<UCraftingIngredientType>(ptr_addr);
	}
	uint8_t  Get_craftingInteraction() {
		return memory.read<uint8_t >(m_addr + 1520);
	}
	struct TArray<struct FCraftingPart> Get_defaultCraftingParts() {
		return memory.read<struct TArray<struct FCraftingPart>>(m_addr + 1528);
	}
	float Get_damageOnUse() {
		return memory.read<float>(m_addr + 1544);
	}
	float Get_damageOverTime() {
		return memory.read<float>(m_addr + 1548);
	}
	float Get_autoDestructTime() {
		return memory.read<float>(m_addr + 1552);
	}
	bool Get_allowContainedItemsDecay() {
		return memory.read<bool>(m_addr + 1556);
	}
	bool Get_shouldDestroyContainedItemsOnDestroyEvent() {
		return memory.read<bool>(m_addr + 1564);
	}
	float Get_minTemperatureForHeatDamage() {
		return memory.read<float>(m_addr + 1568);
	}
	float Get_containedDamageStartPercentage() {
		return memory.read<float>(m_addr + 1572);
	}
	float Get_damageResponseFactor() {
		return memory.read<float>(m_addr + 1576);
	}
	UAttachmentSocketMountType Get_attachmentSocketMountType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1584);
		return UAttachmentSocketMountType(ptr_addr);
	}
	struct TArray<struct FAttachmentSocket> Get_attachmentSockets() {
		return memory.read<struct TArray<struct FAttachmentSocket>>(m_addr + 1592);
	}
	UAttachmentSocketMountType Get_holsterAttachmentSocketMountType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1608);
		return UAttachmentSocketMountType(ptr_addr);
	}
	struct TMap<UAttachmentSocketMountType, struct FAttachmentSocketOffset> Get_attachmentSocketsOffset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1616);
		return struct TMap<UAttachmentSocketMountType, struct FAttachmentSocketOffset>(ptr_addr);
	}
	bool Get_enableGlowOnBeginPlay() {
		return memory.read<bool>(m_addr + 1696);
	}
	bool Get_enableAwarenessGlow() {
		return memory.read<bool>(m_addr + 1697);
	}
	bool Get_enableHoverGlow() {
		return memory.read<bool>(m_addr + 1698);
	}
	struct UStaticMesh Get_placementMeshOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1704);
		return struct UStaticMesh(ptr_addr);
	}
	struct UStaticMesh Get_staticMeshHolsterOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1712);
		return struct UStaticMesh(ptr_addr);
	}
	struct USkeletalMesh Get_skeletalMeshHolsterOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1720);
		return struct USkeletalMesh(ptr_addr);
	}
	bool Get_hasHighLoadPriorityInVirtualization() {
		return memory.read<bool>(m_addr + 1728);
	}
	float Get_virtualizationDistanceOffset() {
		return memory.read<float>(m_addr + 1732);
	}
	bool Get_canEverBeVirtualized() {
		return memory.read<bool>(m_addr + 1736);
	}
	bool Get_isSubjectToAllowMinesConfig() {
		return memory.read<bool>(m_addr + 1738);
	}
	float Get_resultHealthMultiplierWhenCraftingIngredient() {
		return memory.read<float>(m_addr + 1740);
	}
	float Get_preferredDamagePerUpdate() {
		return memory.read<float>(m_addr + 1744);
	}
	bool Get_useHandCorrections() {
		return memory.read<bool>(m_addr + 1748);
	}
	float Get_vicinityCheckDistance() {
		return memory.read<float>(m_addr + 1752);
	}
	float Get_reachabilityTestZOffset() {
		return memory.read<float>(m_addr + 1756);
	}
	struct TArray<UObject> Get_stackableClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1760);
		return struct TArray<UObject>(ptr_addr);
	}
	int32_t Get_maxNumOfStacks() {
		return memory.read<int32_t>(m_addr + 1776);
	}
	float Get_bloodDryingSpeed() {
		return memory.read<float>(m_addr + 1780);
	}
	struct FItemStackData Get_stackData() {
		return memory.read<struct FItemStackData>(m_addr + 1784);
	}
	struct TArray<struct UItemStateBase> Get_craftingPartsData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1808);
		return struct TArray<struct UItemStateBase>(ptr_addr);
	}
	struct USkeletalMeshComponent Get_skeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1832);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	float Get_weightUsed() {
		return memory.read<float>(m_addr + 1844);
	}
	struct FPackedEntitySetupAndId Get_repServerEntitySetupAndId() {
		return memory.read<struct FPackedEntitySetupAndId>(m_addr + 1872);
	}
	struct TArray<struct UItemComponent> Get_itemComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1880);
		return struct TArray<struct UItemComponent>(ptr_addr);
	}
	struct AActor Get_attachParentObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1896);
		return struct AActor(ptr_addr);
	}
	struct FVisibilityReplication Get_visibilityReplication() {
		return memory.read<struct FVisibilityReplication>(m_addr + 1904);
	}
	float Get_radiationAmount() {
		return memory.read<float>(m_addr + 1972);
	}
	float Get_uncraftTime() {
		return memory.read<float>(m_addr + 1976);
	}
	uint64_t Get_replicatedState() {
		return memory.read<uint64_t>(m_addr + 1984);
	}
	char Get_flagsReplicated() {
		return memory.read<char>(m_addr + 1993);
	}
	struct USceneComponent Get_tempSceneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2032);
		return struct USceneComponent(ptr_addr);
	}
	int64_t Get_expirationTime() {
		return memory.read<int64_t>(m_addr + 2048);
	}
	struct TArray<struct FInventoryStackData> Get_stacks() {
		return memory.read<struct TArray<struct FInventoryStackData>>(m_addr + 2056);
	}
	struct AItem Get_stackExhaustedSuccessorItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2072);
		return struct AItem(ptr_addr);
	}
	struct TScriptInterface<IInventoryContainer> Get_parentContainer() {
		return memory.read<struct TScriptInterface<IInventoryContainer>>(m_addr + 2080);
	}
	struct TScriptInterface<IInventoryNode> Get_parentInventoryNode() {
		return memory.read<struct TScriptInterface<IInventoryNode>>(m_addr + 2096);
	}
	struct TArray<struct FCraftingPart> Get_craftingParts() {
		return memory.read<struct TArray<struct FCraftingPart>>(m_addr + 2240);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElementData_Value
{
public:
	UModularTooltipElementData_Value(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVicinityContainer3
{
public:
	UVicinityContainer3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemInventoryWidget2 Get_container() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UItemInventoryWidget2(ptr_addr);
	}
	struct UScrollBox Get_containerScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UScrollBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDepotItemState
{
public:
	UDepotItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetOwnerUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 256);
	}
	struct FString GetTraderPersistentId() {
		return memory.read<struct FString>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTabButtonInterface
{
public:
	UTabButtonInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInventoryContainer2DLight
{
public:
	UInventoryContainer2DLight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AAmmunitionArrow
{
public:
	AAmmunitionArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetDestroyOnHit() {
		return memory.read<bool>(m_addr + 2400);
	}
	ABrokenArrow GetBrokenArrowClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2408);
		return ABrokenArrow(ptr_addr);
	}
	float Get_muzzleVelocityMultiplier() {
		return memory.read<float>(m_addr + 2416);
	}
	float Get_stiffnessFactor() {
		return memory.read<float>(m_addr + 2420);
	}
	float Get_flightRotationCorrectionSpeed() {
		return memory.read<float>(m_addr + 2424);
	}
	float Get_elasticityFactorSpread() {
		return memory.read<float>(m_addr + 2428);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACTFGameEvent
{
public:
	ACTFGameEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	ACTFFlag GetFlagClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1376);
		return ACTFFlag(ptr_addr);
	}
	ACTFBase GetCaptureBaseClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1384);
		return ACTFBase(ptr_addr);
	}
	ACTFFlagStand GetFlagStandClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1392);
		return ACTFFlagStand(ptr_addr);
	}
	struct UTexture2D GetFlagIconTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1400);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetFlagAccentTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1408);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetBaseIconTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1416);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetBaseAccentTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1424);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetEmptyBaseIconTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1432);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetEmptyBaseAccentTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1440);
		return struct UTexture2D(ptr_addr);
	}
	struct FLinearColor GetTeamColorA() {
		return memory.read<struct FLinearColor>(m_addr + 1448);
	}
	struct FLinearColor GetTeamColorB() {
		return memory.read<struct FLinearColor>(m_addr + 1464);
	}
	struct UAkAudioEvent GetBlueTeamPickedUpFlagAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1480);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetBlueTeamCapturedFlagAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1488);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetBlueTeamFlagDroppedAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1496);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetBlueTeamFlagReturnedAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1504);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRedTeamPickedUpFlagAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1512);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRedTeamCapturedFlagAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1520);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRedTeamFlagDroppedAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1528);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRedTeamFlagReturnedAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1536);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FCTFParameters Get_CTFParameters() {
		return memory.read<struct FCTFParameters>(m_addr + 1544);
	}
	struct ACTFFlag Get_flagA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1592);
		return struct ACTFFlag(ptr_addr);
	}
	struct ACTFFlag Get_flagB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1600);
		return struct ACTFFlag(ptr_addr);
	}
	struct ACTFBase Get_baseA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1608);
		return struct ACTFBase(ptr_addr);
	}
	struct ACTFBase Get_baseB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1616);
		return struct ACTFBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USmokableTag
{
public:
	USmokableTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRepairVehicle
{
public:
	UPrisonerActionRepairVehicle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemStateBase
{
public:
	UItemStateBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UObject(ptr_addr);
	}
	struct FEntityId GetID() {
		return memory.read<struct FEntityId>(m_addr + 48);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 64);
	}
	struct TArray<struct UItemComponentStateBase> GetComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct TArray<struct UItemComponentStateBase>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AComplexAnimalAIController
{
public:
	AComplexAnimalAIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetAgressivness() {
		return memory.read<uint8_t >(m_addr + 808);
	}
	float GetSightIntimidateRadius() {
		return memory.read<float>(m_addr + 812);
	}
	float GetSightAttackRadius() {
		return memory.read<float>(m_addr + 816);
	}
	float GetFoeChargeVelocity() {
		return memory.read<float>(m_addr + 820);
	}
	bool GetShouldForceChargeRotation() {
		return memory.read<bool>(m_addr + 824);
	}
	float GetAnimalVelocityThatMakesThisAnimalFlee() {
		return memory.read<float>(m_addr + 828);
	}
	float GetFleeDistance() {
		return memory.read<float>(m_addr + 832);
	}
	float GetFleeTime() {
		return memory.read<float>(m_addr + 836);
	}
	float GetTrotTime() {
		return memory.read<float>(m_addr + 840);
	}
	float GetTimeToAttackWhenAggro() {
		return memory.read<float>(m_addr + 844);
	}
	float GetTimeToQuitObserve() {
		return memory.read<float>(m_addr + 848);
	}
	float GetMinReactionTime() {
		return memory.read<float>(m_addr + 852);
	}
	float GetMaxReactionTime() {
		return memory.read<float>(m_addr + 856);
	}
	float GetMovingUpdateInterval() {
		return memory.read<float>(m_addr + 860);
	}
	float GetAttackingUpdateInetrval() {
		return memory.read<float>(m_addr + 864);
	}
	float GetPathSegmentLength_OBSOLETE() {
		return memory.read<float>(m_addr + 868);
	}
	float GetMinPaceDuration_OBSOLETE() {
		return memory.read<float>(m_addr + 872);
	}
	int32_t GetMaxNumWalks_OBSOLETE() {
		return memory.read<int32_t>(m_addr + 876);
	}
	int32_t GetMaxNumTrots_OBSOLETE() {
		return memory.read<int32_t>(m_addr + 880);
	}
	float GetPathDirectionCounterResetTime_OBOLETE() {
		return memory.read<float>(m_addr + 884);
	}
	float GetMoveSegmentLength() {
		return memory.read<float>(m_addr + 888);
	}
	float GetBackOffDistance() {
		return memory.read<float>(m_addr + 892);
	}
	float GetAttackTrackingDistance() {
		return memory.read<float>(m_addr + 896);
	}
	float GetPredictionFactor() {
		return memory.read<float>(m_addr + 900);
	}
	bool GetBackAndForthStuckCheck() {
		return memory.read<bool>(m_addr + 904);
	}
	char GetAttackAttempts() {
		return memory.read<char>(m_addr + 905);
	}
	float GetActionChangedDelay() {
		return memory.read<float>(m_addr + 908);
	}
	float GetCloseAttackRepeatDelay() {
		return memory.read<float>(m_addr + 912);
	}
	float GetAttackChainDelay() {
		return memory.read<float>(m_addr + 916);
	}
	int32_t GetBlockedPathRetryAttempts() {
		return memory.read<int32_t>(m_addr + 920);
	}
	float GetDirectionLockTime() {
		return memory.read<float>(m_addr + 924);
	}
	float GetMinWalkTimeDuringRoaming() {
		return memory.read<float>(m_addr + 928);
	}
	float GetMaxWalkTimeDuringRoaming() {
		return memory.read<float>(m_addr + 932);
	}
	float GetMinStandTimeDuringRoaming() {
		return memory.read<float>(m_addr + 936);
	}
	float GetMaxStandTimeDuringRoaming() {
		return memory.read<float>(m_addr + 940);
	}
	float GetIntimidateTime() {
		return memory.read<float>(m_addr + 944);
	}
	float GetIntimidateAnimationEndTime() {
		return memory.read<float>(m_addr + 948);
	}
	float GetAlertActionTime() {
		return memory.read<float>(m_addr + 952);
	}
	float GetAlertStartupTime() {
		return memory.read<float>(m_addr + 956);
	}
	float GetAlertAllowedAgainTime() {
		return memory.read<float>(m_addr + 960);
	}
	float GetDoNotDespawnTime() {
		return memory.read<float>(m_addr + 964);
	}
	struct UAISenseConfig_Sight GetNormalAISenseSight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct UAISenseConfig_Sight(ptr_addr);
	}
	struct UAISenseConfig_Hearing GetNormalAISenseHearing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 976);
		return struct UAISenseConfig_Hearing(ptr_addr);
	}
	struct UAISenseConfig_Hearing GetRelaxedAISenseHearing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 984);
		return struct UAISenseConfig_Hearing(ptr_addr);
	}
	struct UAISenseConfig_Hearing GetAlertedAISenseHearing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 992);
		return struct UAISenseConfig_Hearing(ptr_addr);
	}
	struct UAISenseConfig_Sight GetSleepAISenseSight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct UAISenseConfig_Sight(ptr_addr);
	}
	struct AComplexAnimal2 Get_animal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1008);
		return struct AComplexAnimal2(ptr_addr);
	}
	float Get_roamRadius() {
		return memory.read<float>(m_addr + 1136);
	}
	float Get_healthPercentageToFlee() {
		return memory.read<float>(m_addr + 1140);
	}
	float Get_damageMagnitudeHealthPercentageToFlee() {
		return memory.read<float>(m_addr + 1144);
	}
	float Get_distanceFromFoeToStartIgnoring() {
		return memory.read<float>(m_addr + 1148);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_ICU_GraphWidget
{
public:
	UMetabolism_ICU_GraphWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetBaseCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 496);
		return struct UCurveFloat(ptr_addr);
	}
	float GetCurvePeriodBaseDuration() {
		return memory.read<float>(m_addr + 504);
	}
	int32_t GetMinSamplesForSingleCurvePeriod() {
		return memory.read<int32_t>(m_addr + 508);
	}

private:
	std::uint64_t m_addr = 0;
};


class UClearRoundNotLoaded
{
public:
	UClearRoundNotLoaded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemState
{
public:
	UItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetnormalizedHealth() {
		return memory.read<float>(m_addr + 128);
	}
	float GetMaxHealth() {
		return memory.read<float>(m_addr + 132);
	}
	float GetWeight() {
		return memory.read<float>(m_addr + 136);
	}
	float GetWeightUsed() {
		return memory.read<float>(m_addr + 140);
	}
	float GetNormalizedRadiation() {
		return memory.read<float>(m_addr + 144);
	}
	bool GetIsCrafted() {
		return memory.read<bool>(m_addr + 148);
	}
	float GetUncraftTime() {
		return memory.read<float>(m_addr + 152);
	}
	int64_t GetLastAccessTime() {
		return memory.read<int64_t>(m_addr + 160);
	}
	bool GetIsPartOfEvent() {
		return memory.read<bool>(m_addr + 168);
	}
	float GetWaterWeight() {
		return memory.read<float>(m_addr + 172);
	}
	float GetUses() {
		return memory.read<float>(m_addr + 176);
	}
	bool GetIsInHands() {
		return memory.read<bool>(m_addr + 180);
	}
	uint8_t  GetHolsterSide() {
		return memory.read<uint8_t >(m_addr + 181);
	}
	int32_t GetQuickAccessBarIndex() {
		return memory.read<int32_t>(m_addr + 184);
	}
	struct TArray<struct UItemStateBase> GetCraftingParts() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct TArray<struct UItemStateBase>(ptr_addr);
	}
	struct TArray<struct UItemStateBase> GetStacks() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct TArray<struct UItemStateBase>(ptr_addr);
	}
	struct TArray<struct FEntityId> Get_craftingPartsIds() {
		return memory.read<struct TArray<struct FEntityId>>(m_addr + 224);
	}
	struct TArray<struct FEntityId> Get_stacksIds() {
		return memory.read<struct TArray<struct FEntityId>>(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlaceableActorGardenReplicatedState
{
public:
	UPlaceableActorGardenReplicatedState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponItemState
{
public:
	UWeaponItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USedentaryNPCAnimInstance
{
public:
	USedentaryNPCAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator Get_headTurningRotator() {
		return memory.read<struct FRotator>(m_addr + 704);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAmmunitionBoxItemState
{
public:
	UAmmunitionBoxItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetAmmoCount() {
		return memory.read<int32_t>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class AEquipItemObjective
{
public:
	AEquipItemObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UChamberCartridge
{
public:
	UChamberCartridge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AAmmunitionExplosiveArrow
{
public:
	AAmmunitionExplosiveArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent Get_startBeepingEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2432);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_stopBeepingEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2440);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_startOfBeepingBeforeDetonation() {
		return memory.read<float>(m_addr + 2448);
	}
	float Get_innerExplosionRadius() {
		return memory.read<float>(m_addr + 2452);
	}
	float Get_outerExplosionRadius() {
		return memory.read<float>(m_addr + 2456);
	}
	float Get_explosionBaseDamage() {
		return memory.read<float>(m_addr + 2460);
	}
	float Get_explosionMinDamage() {
		return memory.read<float>(m_addr + 2464);
	}
	float Get_explosionDistanceFalloff() {
		return memory.read<float>(m_addr + 2468);
	}
	float Get_explosionTimerTime() {
		return memory.read<float>(m_addr + 2472);
	}
	float Get_explosionForce() {
		return memory.read<float>(m_addr + 2476);
	}
	struct FTargetTypeDamageMultiplier Get_targetTypeMultiplier() {
		return memory.read<struct FTargetTypeDamageMultiplier>(m_addr + 2480);
	}
	struct FName Get_detonationPointSocketName() {
		return memory.read<struct FName>(m_addr + 2496);
	}
	AReplicatedExplosionEffectsActor Get_effectsActorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2504);
		return AReplicatedExplosionEffectsActor(ptr_addr);
	}
	bool Get_shouldStartCountdown() {
		return memory.read<bool>(m_addr + 2528);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShelterItemState
{
public:
	UShelterItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetShelterId() {
		return memory.read<struct FDbIntegerId>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRemoveWeaponAttachment
{
public:
	UPrisonerActionRemoveWeaponAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USentryFirstPersonViewComponent
{
public:
	USentryFirstPersonViewComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankTransactionAssetData
{
public:
	UBankTransactionAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	ABankATMMinigame GetBankATMMinigame() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return ABankATMMinigame(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZSettingsMenu
{
public:
	UConZSettingsMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTabGroup Get_categorySelector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTabGroup(ptr_addr);
	}
	struct UWidgetSwitcher Get_categorySwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UPanelWidget Get_controlButtonsPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UPanelWidget(ptr_addr);
	}
	UUserWidget Get_tabButtonClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return UUserWidget(ptr_addr);
	}
	UCarouselWithLabel Get_subcategoryCarouselClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return UCarouselWithLabel(ptr_addr);
	}
	UTextOnlyTooltip Get_tooltipClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return UTextOnlyTooltip(ptr_addr);
	}
	struct UMenuButton Get_apply() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct UMenuButton(ptr_addr);
	}
	struct UMenuButton Get_reset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct UMenuButton(ptr_addr);
	}
	struct UMenuButton Get_resetAll() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1104);
		return struct UMenuButton(ptr_addr);
	}
	struct UMenuButton Get_back() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1112);
		return struct UMenuButton(ptr_addr);
	}
	struct UVerticalBox Get_messageBoxPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1120);
		return struct UVerticalBox(ptr_addr);
	}
	float Get_maxDesiredSubcategoryHeight() {
		return memory.read<float>(m_addr + 1128);
	}
	float Get_tooltipDelayInSeconds() {
		return memory.read<float>(m_addr + 1392);
	}
	struct FSlateFontInfo Get_requiresServerRestartFont() {
		return memory.read<struct FSlateFontInfo>(m_addr + 1400);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPBCIQR_ApplyBandagesOrDisinfect_ApplyBandages
{
public:
	UPBCIQR_ApplyBandagesOrDisinfect_ApplyBandages(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ATargetObjective
{
public:
	ATargetObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct TSoftClassPtr<UObject>, struct FObjectiveItem> Get_targetClasses() {
		return memory.read<struct TMap<struct TSoftClassPtr<UObject>, struct FObjectiveItem>>(m_addr + 816);
	}
	bool Get_specificTarget() {
		return memory.read<bool>(m_addr + 896);
	}
	struct TMap<struct TSoftObjectPtr<AConZCharacter>, struct FObjectiveItem> Get_targetMeshes() {
		return memory.read<struct TMap<struct TSoftObjectPtr<AConZCharacter>, struct FObjectiveItem>>(m_addr + 904);
	}
	struct TArray<struct TSoftClassPtr<UObject>> Get_targetItems() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 984);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZCharacter
{
public:
	AConZCharacter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	ACorpse GetCorpseClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return ACorpse(ptr_addr);
	}
	struct UChoppingRecipeDataAsset GetChoppingRecipeDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1280);
		return struct UChoppingRecipeDataAsset(ptr_addr);
	}
	bool GetIterativeChopping() {
		return memory.read<bool>(m_addr + 1288);
	}
	AItem GetItemRepresentation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1296);
		return AItem(ptr_addr);
	}
	struct FName GetHeadBoneName() {
		return memory.read<struct FName>(m_addr + 1304);
	}
	struct TMap<struct FName, uint8_t > GetBodyPartByBoneName() {
		return memory.read<struct TMap<struct FName, uint8_t >>(m_addr + 1312);
	}
	float GetHeadHeight() {
		return memory.read<float>(m_addr + 1392);
	}
	float GetTorsoHeight() {
		return memory.read<float>(m_addr + 1396);
	}
	bool GetShouldAutoUpdateEnvironmentDescription() {
		return memory.read<bool>(m_addr + 1400);
	}
	float GetEnvironmentDescriptionAutoUpdateInterval() {
		return memory.read<float>(m_addr + 1404);
	}
	struct UAkAudioEvent GetEnteredIndoorEnvironmentAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1408);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetEnteredOutdoorEnvironmentAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1416);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetEnteredUndergroundAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1424);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetLeftUndergroundAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1432);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UVoiceChatComponent GetVoiceChatComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1464);
		return struct UVoiceChatComponent(ptr_addr);
	}
	float Get_kockoutChanceModifier() {
		return memory.read<float>(m_addr + 1480);
	}
	struct UCharacterSoundComponent GetSoundComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1488);
		return struct UCharacterSoundComponent(ptr_addr);
	}
	uint8_t  Get_gender() {
		return memory.read<uint8_t >(m_addr + 1520);
	}
	uint8_t  Get_physicsDominanceGroup() {
		return memory.read<uint8_t >(m_addr + 1552);
	}
	float Get_activeHitTimeToLive() {
		return memory.read<float>(m_addr + 1556);
	}
	struct UCurveFloat Get_hitDamageVsVehicleSpeedInKph() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1560);
		return struct UCurveFloat(ptr_addr);
	}
	struct FHitEffects Get_effectsOnVehicleHit[5]() {
		return memory.read<struct FHitEffects>(m_addr + 1568);
	}
	bool Get_allowMultipleDamageReportsFromProjectile() {
		return memory.read<bool>(m_addr + 1864);
	}
	struct UPhysicsAsset Get_physicsAssetOnServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1872);
		return struct UPhysicsAsset(ptr_addr);
	}
	uint8_t  Get_aiTeam() {
		return memory.read<uint8_t >(m_addr + 1880);
	}
	struct TArray<struct UCharacterAction> Get_actionsList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1888);
		return struct TArray<struct UCharacterAction>(ptr_addr);
	}
	float Get_characterActionPlayRateMultiplier() {
		return memory.read<float>(m_addr + 1936);
	}
	struct UGrappleActionComponent Get_grappleActionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1944);
		return struct UGrappleActionComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBondageComponent
{
public:
	UBondageComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem Get_bondageItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3784);
		return struct AItem(ptr_addr);
	}
	uint8_t  Get_boundBodyPart() {
		return memory.read<uint8_t >(m_addr + 3792);
	}
	float Get_tightness() {
		return memory.read<float>(m_addr + 3796);
	}

private:
	std::uint64_t m_addr = 0;
};


class ABasicLadder
{
public:
	ABasicLadder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent Get_mesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct TArray<struct FLadderMarker> Get_ladderMarkers() {
		return memory.read<struct TArray<struct FLadderMarker>>(m_addr + 552);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDcxBikePassengerMountSlot
{
public:
	UDcxBikePassengerMountSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AAnimal2
{
public:
	AAnimal2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetSpeciesName() {
		return memory.read<struct FText>(m_addr + 1984);
	}
	uint8_t  GetSpeciesType() {
		return memory.read<uint8_t >(m_addr + 2008);
	}
	uint8_t  GetActivityCycle() {
		return memory.read<uint8_t >(m_addr + 2009);
	}
	float GetMaxHealth() {
		return memory.read<float>(m_addr + 2012);
	}
	struct UHitReactComponent GetHitReactComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2016);
		return struct UHitReactComponent(ptr_addr);
	}
	struct FGameplayTag GetHitReactType() {
		return memory.read<struct FGameplayTag>(m_addr + 2024);
	}
	struct FName GetEyesViewPointSocketName() {
		return memory.read<struct FName>(m_addr + 2032);
	}
	ATrackingMarker2 GetTrackingMarker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2040);
		return ATrackingMarker2(ptr_addr);
	}
	ATrackingMarker2 GetBloodTrailMarker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2048);
		return ATrackingMarker2(ptr_addr);
	}
	float GetTrackingMarkerFrequency() {
		return memory.read<float>(m_addr + 2056);
	}
	float GetTrackingMarkerDistance() {
		return memory.read<float>(m_addr + 2060);
	}
	float GetTrackingMarkerRadius() {
		return memory.read<float>(m_addr + 2064);
	}
	float GetTrackingMarkerDuration() {
		return memory.read<float>(m_addr + 2068);
	}
	float GetBleedingSpeed() {
		return memory.read<float>(m_addr + 2072);
	}
	float GetLightWoundDamageAmount() {
		return memory.read<float>(m_addr + 2076);
	}
	float GetMeleeBleedingThreshold() {
		return memory.read<float>(m_addr + 2080);
	}
	float GetStuckCheckDuration() {
		return memory.read<float>(m_addr + 2084);
	}
	float GetStuckRadius() {
		return memory.read<float>(m_addr + 2088);
	}
	char GetUnstuckMode() {
		return memory.read<char>(m_addr + 2092);
	}
	struct FMulticastInlineDelegate GetOnDamageTaken() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 2096);
	}
	float GetHeadBoneRotationSendToServerInterval() {
		return memory.read<float>(m_addr + 2112);
	}
	float GetSightRange() {
		return memory.read<float>(m_addr + 2116);
	}
	bool GetTiltMeshOnSlopes() {
		return memory.read<bool>(m_addr + 2120);
	}
	bool GetAdjustMeshHeightOnSlopes() {
		return memory.read<bool>(m_addr + 2121);
	}
	float GetMeshPositionLerpSpeed() {
		return memory.read<float>(m_addr + 2124);
	}
	float GetBleedInterval() {
		return memory.read<float>(m_addr + 2128);
	}
	bool GetShouldGoToRagdolIfTakenDamage() {
		return memory.read<bool>(m_addr + 2132);
	}
	float GetRagdollDuration() {
		return memory.read<float>(m_addr + 2136);
	}
	float Get_health() {
		return memory.read<float>(m_addr + 2140);
	}
	float Get_woundDamage() {
		return memory.read<float>(m_addr + 2144);
	}
	int32_t Get_packSizeMin() {
		return memory.read<int32_t>(m_addr + 2156);
	}
	int32_t Get_packSizeMax() {
		return memory.read<int32_t>(m_addr + 2160);
	}
	uint8_t  Get_animalStance() {
		return memory.read<uint8_t >(m_addr + 2216);
	}
	bool Get_shouldUpdateMovementSpeedRTPCValue() {
		return memory.read<bool>(m_addr + 2224);
	}
	bool Get_doNotCrumble() {
		return memory.read<bool>(m_addr + 2312);
	}
	float Get_collisionDamageMultiplierPerBodyPart[c]() {
		return memory.read<float>(m_addr + 2316);
	}
	float Get_delayBetweenTakeDamageSounds() {
		return memory.read<float>(m_addr + 2368);
	}
	bool Get_canDrown() {
		return memory.read<bool>(m_addr + 2372);
	}
	float Get_drownDamageCycleLength() {
		return memory.read<float>(m_addr + 2376);
	}
	float Get_drownDamagePerCycle() {
		return memory.read<float>(m_addr + 2380);
	}
	float Get_baseEyeForwardDistance() {
		return memory.read<float>(m_addr + 2388);
	}
	bool Get_isSearched() {
		return memory.read<bool>(m_addr + 2392);
	}
	float Get_corpseSearchDuration() {
		return memory.read<float>(m_addr + 2396);
	}
	float Get_corpseMaxLifeTimeInMinutes() {
		return memory.read<float>(m_addr + 2400);
	}
	float Get_destroyCorpseTimerInterval() {
		return memory.read<float>(m_addr + 2404);
	}
	float Get_minDistanceToPlayerPawnOrSpectatorToDestroyCorpse() {
		return memory.read<float>(m_addr + 2408);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_BreathingObstructed
{
public:
	UPrisonerBodySymptom_BreathingObstructed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_DoubleVision
{
public:
	UPrisonerBodySymptomCause_DoubleVision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCauseUIData_Leukopenia
{
public:
	UPrisonerBodySymptomCauseUIData_Leukopenia(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateChamberBullet
{
public:
	UWeaponStateChamberBullet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UConZCharacterMovementComponent
{
public:
	UConZCharacterMovementComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char ECollisionResponse Get_navWalkingCollisionResponseToWorldStatic() {
		return memory.read<char ECollisionResponse>(m_addr + 2800);
	}
	char ECollisionResponse Get_navWalkingCollisionResponseToWorldDynamic() {
		return memory.read<char ECollisionResponse>(m_addr + 2801);
	}
	float Get_maxClimbHeight() {
		return memory.read<float>(m_addr + 2804);
	}
	bool Get_queryWaterSplinesEveryFrame() {
		return memory.read<bool>(m_addr + 2808);
	}
	float Get_angularVelocityFilteringInterpolationSpeed() {
		return memory.read<float>(m_addr + 3056);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimal2MovementComponent
{
public:
	UAnimal2MovementComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetGroundSlopeRotationSpeedDegrees() {
		return memory.read<float>(m_addr + 3080);
	}
	bool GetCorrectServerReceivedZ() {
		return memory.read<bool>(m_addr + 3084);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameEventRoundInfoWidget
{
public:
	UGameEventRoundInfoWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElementData_Title
{
public:
	UModularTooltipElementData_Title(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimal2SoundComponent
{
public:
	UAnimal2SoundComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetIdleAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetAngryAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetAttackAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetScaredAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetAlertedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetTakeDamageAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetKillAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetAnimalFootstep() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetFootstepSoundOverlap() {
		return memory.read<float>(m_addr + 280);
	}
	float GetFixedFootstepVolume() {
		return memory.read<float>(m_addr + 284);
	}
	float GetSpeedFootstepVolume() {
		return memory.read<float>(m_addr + 288);
	}
	float GetMinSilenceTimeout() {
		return memory.read<float>(m_addr + 292);
	}
	float GetMaxSilenceTimeout() {
		return memory.read<float>(m_addr + 296);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEnduranceSkill
{
public:
	UEnduranceSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FEnduranceSkillParametersPerSkillLevel GetNoSkillParameters() {
		return memory.read<struct FEnduranceSkillParametersPerSkillLevel>(m_addr + 200);
	}
	struct FEnduranceSkillParametersPerSkillLevel GetBasicSkillParameters() {
		return memory.read<struct FEnduranceSkillParametersPerSkillLevel>(m_addr + 224);
	}
	struct FEnduranceSkillParametersPerSkillLevel GetMediumSkillParameters() {
		return memory.read<struct FEnduranceSkillParametersPerSkillLevel>(m_addr + 248);
	}
	struct FEnduranceSkillParametersPerSkillLevel GetAdvancedSkillParameters() {
		return memory.read<struct FEnduranceSkillParametersPerSkillLevel>(m_addr + 272);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCollisionDamageType
{
public:
	UCollisionDamageType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimal2AnimInstance
{
public:
	UAnimal2AnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetInverseLocomotionBias() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UCurveFloat(ptr_addr);
	}
	float GetMaximumLeaningAngle() {
		return memory.read<float>(m_addr + 704);
	}
	int32_t GetIdleStanceIndex() {
		return memory.read<int32_t>(m_addr + 708);
	}
	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 712);
	}
	struct FRotator GetSlopeRootTiltRotation() {
		return memory.read<struct FRotator>(m_addr + 716);
	}
	float GetABPSpeed() {
		return memory.read<float>(m_addr + 728);
	}
	float GetABPTurn() {
		return memory.read<float>(m_addr + 732);
	}
	float GetMoveVelocity() {
		return memory.read<float>(m_addr + 736);
	}
	bool Get_isRagdolled() {
		return memory.read<bool>(m_addr + 748);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameEventCardWidget
{
public:
	UGameEventCardWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameEventBase Get_gameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct AGameEventBase(ptr_addr);
	}
	struct UButton GetJoinButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UButton(ptr_addr);
	}
	struct UButton GetJoinBlueButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UButton(ptr_addr);
	}
	struct UButton GetJoinRedButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UButton(ptr_addr);
	}
	struct UButton GetSwitchTeamButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UButton(ptr_addr);
	}
	struct UGameEventInfoWidget GetUI_GameEventInfoWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UGameEventInfoWidget(ptr_addr);
	}
	struct UOverlay GetScoreboardSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UOverlay(ptr_addr);
	}
	struct UTextBlock GetTextBlock_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_6() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_7() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetScreenshot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetLocationText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetEntryFeeTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UTextBlock(ptr_addr);
	}
	struct UOverlay GetButtons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UOverlay(ptr_addr);
	}
	struct UHorizontalBox GetHorizontalBox_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UButton GetLeaveButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UButton(ptr_addr);
	}
	struct UTextBlock GetTeamSwitchFee() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_471() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UTextBlock(ptr_addr);
	}
	struct UBorder GetJoinDisabledMsgBorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UBorder(ptr_addr);
	}
	struct UBorder GetCooldownThrobber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UBorder(ptr_addr);
	}
	struct FSlateBrush Get_defaultScreenshotBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 784);
	}
	struct UAkAudioEvent Get_menuButtonClick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AAnimalContinuousChargeAttackAIController
{
public:
	AAnimalContinuousChargeAttackAIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetLockAttackDirectionDistance() {
		return memory.read<float>(m_addr + 1256);
	}
	float GetContinueAttackDistance() {
		return memory.read<float>(m_addr + 1260);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_PhoenixTearsPresence
{
public:
	UPrisonerBodySymptom_PhoenixTearsPresence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInventoryCompletePanel
{
public:
	UInventoryCompletePanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USizeBox Get_inventoryPanelSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct USizeBox(ptr_addr);
	}
	struct UInventoryPanelThirdIteration Get_inventoryPanelThirdIteration() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UInventoryPanelThirdIteration(ptr_addr);
	}
	struct UInventoryCentralPanel Get_inventoryCentralPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UInventoryCentralPanel(ptr_addr);
	}
	struct UHandPanel3 Get_handPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UHandPanel3(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCraftingIngredient
{
public:
	UCraftingIngredient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBaseItemTag
{
public:
	UBaseItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolism
{
public:
	UMetabolism(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMetabolismConfiguration Get_configuration() {
		return memory.read<struct FMetabolismConfiguration>(m_addr + 3240);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKeyboardIllumination
{
public:
	UKeyboardIllumination(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimalHandlingItemTag
{
public:
	UAnimalHandlingItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMusicPlayerSegmentSubmenuInfo
{
public:
	UMusicPlayerSegmentSubmenuInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASwitch
{
public:
	ASwitch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct FText Get_interactionText() {
		return memory.read<struct FText>(m_addr + 592);
	}

private:
	std::uint64_t m_addr = 0;
};


class USkill
{
public:
	USkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetCaption() {
		return memory.read<struct FText>(m_addr + 48);
	}
	uint8_t  GetReplicationID() {
		return memory.read<uint8_t >(m_addr + 72);
	}
	float GetComboBonus() {
		return memory.read<float>(m_addr + 76);
	}
	float GetNoSkillBonus() {
		return memory.read<float>(m_addr + 80);
	}
	float GetBasicBonus() {
		return memory.read<float>(m_addr + 84);
	}
	float GetMediumBonus() {
		return memory.read<float>(m_addr + 88);
	}
	float GetAdvancedBonus() {
		return memory.read<float>(m_addr + 92);
	}
	float GetDisplayActionMessages() {
		return memory.read<float>(m_addr + 96);
	}
	bool GetIsAvailableInCharacterCreation() {
		return memory.read<bool>(m_addr + 100);
	}
	struct UTexture2D Get_skillIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UTexture2D(ptr_addr);
	}
	float Get_skillFamePointsMultiplier() {
		return memory.read<float>(m_addr + 164);
	}
	UPrisonerSkillUIData Get_uiDataClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return UPrisonerSkillUIData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHasWindowMarkersInterface
{
public:
	UHasWindowMarkersInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChopItemDescription
{
public:
	UPrisonerActionChopItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USentryAnimInstance2
{
public:
	USentryAnimInstance2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetShouldUseLUWalkStopAnimation() {
		return memory.read<bool>(m_addr + 696);
	}
	float GetstoppingDistance() {
		return memory.read<float>(m_addr + 700);
	}
	struct FInPlaceTurningData Get_turnInPlaceData() {
		return memory.read<struct FInPlaceTurningData>(m_addr + 720);
	}
	float Get_stoppingDistance() {
		return memory.read<float>(m_addr + 780);
	}
	float Get_upperBodyRotationLerpFactor() {
		return memory.read<float>(m_addr + 784);
	}
	float Get_grenadeLauncherUpperFlapMaxPitch() {
		return memory.read<float>(m_addr + 788);
	}
	float Get_grenadeLauncherLowerFlapMaxPitch() {
		return memory.read<float>(m_addr + 792);
	}
	float Get_grenadeLauncherFlapsTimeToOpenFlaps() {
		return memory.read<float>(m_addr + 796);
	}
	int32_t Get_glitchingVaritionsNum() {
		return memory.read<int32_t>(m_addr + 800);
	}
	float Get_glitchingUpdateTimeMin() {
		return memory.read<float>(m_addr + 804);
	}
	float Get_glitchingUpdateTimeMax() {
		return memory.read<float>(m_addr + 808);
	}
	float Get_chanceToGlitchPerHealthState[6]() {
		return memory.read<float>(m_addr + 812);
	}
	int32_t Get_miningunBonesNum() {
		return memory.read<int32_t>(m_addr + 836);
	}
	float Get_minigunRotationSpeed() {
		return memory.read<float>(m_addr + 840);
	}
	float Get_minigunRotationAcceleration() {
		return memory.read<float>(m_addr + 844);
	}
	float Get_minigunRotationDeceleration() {
		return memory.read<float>(m_addr + 848);
	}
	bool Get_isSentryCompletelyInitialized() {
		return memory.read<bool>(m_addr + 856);
	}
	bool Get_wantsToMove() {
		return memory.read<bool>(m_addr + 857);
	}
	bool Get_previousWantsToMove() {
		return memory.read<bool>(m_addr + 858);
	}
	uint8_t  Get_movementPace() {
		return memory.read<uint8_t >(m_addr + 859);
	}
	float Get_actualCourseAngle() {
		return memory.read<float>(m_addr + 860);
	}
	float Get_desiredCourseAngle() {
		return memory.read<float>(m_addr + 864);
	}
	float Get_desiredCoursePitchAngle() {
		return memory.read<float>(m_addr + 868);
	}
	float Get_angularVelocity() {
		return memory.read<float>(m_addr + 872);
	}
	struct FVector Get_velocity() {
		return memory.read<struct FVector>(m_addr + 876);
	}
	float Get_speed() {
		return memory.read<float>(m_addr + 888);
	}
	float Get_walkSpeedMultiplier() {
		return memory.read<float>(m_addr + 892);
	}
	struct FVector Get_forwardVector() {
		return memory.read<struct FVector>(m_addr + 896);
	}
	bool Get_isFalling() {
		return memory.read<bool>(m_addr + 908);
	}
	bool Get_isDead() {
		return memory.read<bool>(m_addr + 909);
	}
	uint8_t  Get_sentryStance() {
		return memory.read<uint8_t >(m_addr + 910);
	}
	uint8_t  Get_sentryHealthState() {
		return memory.read<uint8_t >(m_addr + 911);
	}
	uint8_t  Get_combatVariation() {
		return memory.read<uint8_t >(m_addr + 912);
	}
	bool Get_shouldAimLongRangeWeapon() {
		return memory.read<bool>(m_addr + 913);
	}
	struct FVector Get_longRangeGunLookAtLocation() {
		return memory.read<struct FVector>(m_addr + 916);
	}
	bool Get_shouldAimHighPrecisionWeapon() {
		return memory.read<bool>(m_addr + 928);
	}
	struct FVector Get_highPrecisionGunLookAtLocation() {
		return memory.read<struct FVector>(m_addr + 932);
	}
	bool Get_hasUpperBodyFocusLocation() {
		return memory.read<bool>(m_addr + 944);
	}
	float Get_upperBodyFocusRotationYaw() {
		return memory.read<float>(m_addr + 948);
	}
	float Get_grenadeLauncherUpperFlapCurrentPitch() {
		return memory.read<float>(m_addr + 952);
	}
	float Get_grenadeLauncherLowerFlapCurrentPitch() {
		return memory.read<float>(m_addr + 956);
	}
	bool Get_isFiring() {
		return memory.read<bool>(m_addr + 960);
	}
	struct TArray<struct FSentryGlitchingPartInfo> Get_partGlitchingInfo() {
		return memory.read<struct TArray<struct FSentryGlitchingPartInfo>>(m_addr + 968);
	}
	struct TArray<float> Get_minigunRotationAngles() {
		return memory.read<struct TArray<float>>(m_addr + 984);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPriceCategory
{
public:
	UPriceCategory(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPrice() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UIntelligenceSkill
{
public:
	UIntelligenceSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_MakeNoise
{
public:
	UAnimNotify_MakeNoise(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetnoiseLevel() {
		return memory.read<uint8_t >(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_NoScopingAllowed
{
public:
	UAnimNotifyState_NoScopingAllowed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USwingItemComponent
{
public:
	USwingItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_swingSpeedLevelVsInputSpeed() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 224);
	}
	struct FRuntimeFloatCurve Get_prisonerActionDifficultyVsSwingSpeedLevel() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 360);
	}
	uint8_t  Get_maxAllowedPrisonerMovementPaceWhenInHands() {
		return memory.read<uint8_t >(m_addr + 496);
	}
	bool Get_shouldCoolDownPrisonerWhileSwinging() {
		return memory.read<bool>(m_addr + 497);
	}
	struct FRuntimeFloatCurve Get_bodyTemperatureCoolingRatesVsSwingSpeedLevel() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 504);
	}
	struct UAnimMontage Get_itemSwingAnimMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_prisonerSwingAnimMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UAnimMontage(ptr_addr);
	}
	struct FName Get_prisonerSwingAnimMontageStartSectionName() {
		return memory.read<struct FName>(m_addr + 656);
	}
	struct FName Get_prisonerSwingAnimMontageLoopSectionName() {
		return memory.read<struct FName>(m_addr + 664);
	}
	struct FName Get_prisonerSwingAnimMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 672);
	}
	float Get_prisonerSwingAnimMontageInterpolationSpeed() {
		return memory.read<float>(m_addr + 680);
	}
	struct FRuntimeFloatCurve Get_animMontagePlayRateVsSwingSpeedLevel() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 688);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimalHandlingSkill
{
public:
	UAnimalHandlingSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_BoatRow
{
public:
	UAnimNotify_BoatRow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetFlags() {
		return memory.read<uint32_t>(m_addr + 56);
	}
	float Get_rowCycleLength() {
		return memory.read<float>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASlidingDoorStatic
{
public:
	ASlidingDoorStatic(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetClosedPositionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct USceneComponent(ptr_addr);
	}
	struct USceneComponent GetOpenPositionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return struct USceneComponent(ptr_addr);
	}
	bool Get_shouldAllowRotation() {
		return memory.read<bool>(m_addr + 1272);
	}
	bool Get_shouldAllowScaling() {
		return memory.read<bool>(m_addr + 1273);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZEconomyManager
{
public:
	AConZEconomyManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTraderManagingComponent Get_traderManagingComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UTraderManagingComponent(ptr_addr);
	}
	float Get_autoSaveInterval() {
		return memory.read<float>(m_addr + 748);
	}
	bool Get_shouldIgnoreDatabaseSerialization() {
		return memory.read<bool>(m_addr + 756);
	}
	struct FTradeOutpostProsperityLevelInfo Get_prosperityLevelInfoPerLevel[6]() {
		return memory.read<struct FTradeOutpostProsperityLevelInfo>(m_addr + 784);
	}
	struct TMap<float, int32_t> Get_expensiveTradeablesSpawnChanceMap() {
		return memory.read<struct TMap<float, int32_t>>(m_addr + 1032);
	}
	struct UCurveFloat Get_playerPurchasePriceDeltaVsChanceCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1112);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_betterPurchasePricesChance() {
		return memory.read<float>(m_addr + 1120);
	}
	float Get_maxOutpostBuyingCapability() {
		return memory.read<float>(m_addr + 1124);
	}
	int32_t Get_maxOutpostGoldBuyingCapability() {
		return memory.read<int32_t>(m_addr + 1128);
	}
	int32_t Get_goldBasePrice() {
		return memory.read<int32_t>(m_addr + 1132);
	}
	float Get_playerGoldSalePriceModifier() {
		return memory.read<float>(m_addr + 1136);
	}
	float Get_goldPriceChangePercentageStep() {
		return memory.read<float>(m_addr + 1140);
	}
	float Get_goldPriceChangePerStep() {
		return memory.read<float>(m_addr + 1144);
	}
	struct UDataTable Get_tradeableDescTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1280);
		return struct UDataTable(ptr_addr);
	}
	struct FString Get_economyOverrideJSONFileName() {
		return memory.read<struct FString>(m_addr + 2264);
	}
	struct FGameplayTag Get_vehicleSpawnGroupParentTag() {
		return memory.read<struct FGameplayTag>(m_addr + 2280);
	}
	int32_t Get_defaultMaxPerGroup() {
		return memory.read<int32_t>(m_addr + 2580);
	}
	float Get_maxSaleDistance() {
		return memory.read<float>(m_addr + 2584);
	}
	struct UCurveFloat Get_tradeableBuyPriceMultiplierVsNumberOfPlayersCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2608);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_tradeableSellPriceMultiplierVsNumberOfPlayersCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2616);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_priceMultiplierBasedOnNumberOfPlayersInterval() {
		return memory.read<float>(m_addr + 2636);
	}
	bool Get_tradersUnlimitedStock() {
		return memory.read<bool>(m_addr + 2648);
	}
	bool Get_isFamePointRequirementEnabled() {
		return memory.read<bool>(m_addr + 2651);
	}
	struct TArray<struct FPendingTraderPersonalityDataHelperStruct> Get_pendingTraderPersonalities() {
		return memory.read<struct TArray<struct FPendingTraderPersonalityDataHelperStruct>>(m_addr + 2656);
	}
	bool Get_shouldCommunicateWithMasterServer() {
		return memory.read<bool>(m_addr + 2688);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_CharacterActionMarker
{
public:
	UAnimNotify_CharacterActionMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_ConditionalPlayParticleEffectForItem
{
public:
	UAnimNotify_ConditionalPlayParticleEffectForItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem GetPSTemplate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UParticleSystem(ptr_addr);
	}
	struct FVector GetLocationOffset() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	struct FRotator GetRotationOffset() {
		return memory.read<struct FRotator>(m_addr + 76);
	}
	struct FVector GetScale() {
		return memory.read<struct FVector>(m_addr + 88);
	}
	char GetAttached() {
		return memory.read<char>(m_addr + 128);
	}
	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 132);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_FishingActionNotify
{
public:
	UAnimNotify_FishingActionNotify(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetFishingActionNotifyType() {
		return memory.read<uint8_t >(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_SpawnDiarrheaEffects
{
public:
	UAnimNotify_SpawnDiarrheaEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AComplexAnimal2
{
public:
	AComplexAnimal2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetEnergyDepletionRate() {
		return memory.read<float>(m_addr + 2424);
	}
	float GetHungerDepletionRate() {
		return memory.read<float>(m_addr + 2428);
	}
	float GetHungerDepletionRateWhenResting() {
		return memory.read<float>(m_addr + 2432);
	}
	float GetEnergyRefillRate() {
		return memory.read<float>(m_addr + 2436);
	}
	float GetHungerRefillRate() {
		return memory.read<float>(m_addr + 2440);
	}
	float GetHealthRegenerationRate() {
		return memory.read<float>(m_addr + 2444);
	}
	float GetHealthDepletionRate() {
		return memory.read<float>(m_addr + 2448);
	}
	struct FAnimalPaceSettings GetMovementPaceSettings() {
		return memory.read<struct FAnimalPaceSettings>(m_addr + 2452);
	}
	struct FAnimalStationaryRotationRateSettings GetRotationRateSettings() {
		return memory.read<struct FAnimalStationaryRotationRateSettings>(m_addr + 2468);
	}
	struct FMulticastInlineDelegate GetOnActionChanged() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 2528);
	}
	struct TArray<struct FChargeAttackData> GetChargeAttacks() {
		return memory.read<struct TArray<struct FChargeAttackData>>(m_addr + 2544);
	}
	struct TArray<struct FCloseRangeAttackData> GetCloseRangeAttacks() {
		return memory.read<struct TArray<struct FCloseRangeAttackData>>(m_addr + 2560);
	}
	struct FTurnMontages GetTurnMonatges() {
		return memory.read<struct FTurnMontages>(m_addr + 2576);
	}
	struct FAnimalActionMontageData GetAnimalActions() {
		return memory.read<struct FAnimalActionMontageData>(m_addr + 2592);
	}
	float GetAttackRotationRate() {
		return memory.read<float>(m_addr + 2616);
	}
	float GetMinActionTime() {
		return memory.read<float>(m_addr + 2620);
	}
	struct FGameplayTag GetHitReactTypeResting() {
		return memory.read<struct FGameplayTag>(m_addr + 2624);
	}
	struct FGameplayTag GetHitReactTypeIntimidate() {
		return memory.read<struct FGameplayTag>(m_addr + 2632);
	}
	uint16_t Get_hungerAndEnergyReplicated() {
		return memory.read<uint16_t>(m_addr + 2648);
	}
	struct FVector Get_lookAtPoint() {
		return memory.read<struct FVector>(m_addr + 2656);
	}
	float Get_maxLookUpAngle() {
		return memory.read<float>(m_addr + 2748);
	}
	float Get_maxLookRightAngle() {
		return memory.read<float>(m_addr + 2752);
	}
	float Get_headMovementLerpSpeed() {
		return memory.read<float>(m_addr + 2756);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_MagazineUpdateAmmunitionMeshes
{
public:
	UAnimNotify_MagazineUpdateAmmunitionMeshes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetshowReversed() {
		return memory.read<bool>(m_addr + 56);
	}
	struct TArray<int32_t> GetammoIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCharacterAction
{
public:
	UCharacterAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UCharacterActionDescription> GetPreActionsDescriptions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct TArray<struct UCharacterActionDescription>(ptr_addr);
	}
	struct TArray<struct UCharacterActionDescription> GetPostActionsDescriptions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct TArray<struct UCharacterActionDescription>(ptr_addr);
	}
	struct UCharacterAction GetParentAction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UCharacterAction(ptr_addr);
	}
	struct TArray<struct UCharacterAction> Get_preActions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct TArray<struct UCharacterAction>(ptr_addr);
	}
	struct TArray<struct UCharacterAction> Get_postActions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct TArray<struct UCharacterAction>(ptr_addr);
	}
	struct UActionProgressWidget Get_progressWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct UActionProgressWidget(ptr_addr);
	}
	struct UCharacterActionDescription Get_description() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UCharacterActionDescription(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_SmokableItemEquip
{
public:
	UAnimNotify_SmokableItemEquip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCompanionCrowAnimInstance
{
public:
	UCompanionCrowAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_isIdle() {
		return memory.read<bool>(m_addr + 696);
	}
	bool Get_isFlyingOff() {
		return memory.read<bool>(m_addr + 697);
	}
	bool Get_isCruising() {
		return memory.read<bool>(m_addr + 698);
	}
	bool Get_isLanding() {
		return memory.read<bool>(m_addr + 699);
	}
	float Get_landedRatio() {
		return memory.read<float>(m_addr + 700);
	}
	float Get_speed() {
		return memory.read<float>(m_addr + 704);
	}
	float Get_prisonerSpeed() {
		return memory.read<float>(m_addr + 708);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMeleeWeaponsSkill
{
public:
	UMeleeWeaponsSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_SmokableItemSwitchMeshParent
{
public:
	UAnimNotify_SmokableItemSwitchMeshParent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetDesiredParentSocket() {
		return memory.read<uint8_t >(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInteractionGroupUserWidget
{
public:
	UInteractionGroupUserWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_groupText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UBorder Get_groupBorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UBorder(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASharkAIController
{
public:
	ASharkAIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_sharkTurningSpeed() {
		return memory.read<float>(m_addr + 808);
	}
	float Get_minDistanceToMovementTarget() {
		return memory.read<float>(m_addr + 812);
	}
	float Get_boundsInflation() {
		return memory.read<float>(m_addr + 816);
	}
	struct FVector Get_randomMovementExtent() {
		return memory.read<struct FVector>(m_addr + 820);
	}
	float Get_findPathBypassMultiplier() {
		return memory.read<float>(m_addr + 832);
	}
	int32_t Get_maxMovementAttemptsAllowed() {
		return memory.read<int32_t>(m_addr + 836);
	}
	float Get_maxTimePerDestinationMultiplier() {
		return memory.read<float>(m_addr + 844);
	}
	float Get_minDistanceBetweenTargetGeneratedPath() {
		return memory.read<float>(m_addr + 856);
	}
	float Get_surfaceOffset() {
		return memory.read<float>(m_addr + 860);
	}
	float Get_movementRecoveryTurningSpeed() {
		return memory.read<float>(m_addr + 864);
	}
	float Get_movementRecoveryAcceleration() {
		return memory.read<float>(m_addr + 868);
	}
	float Get_movementRecoveryDeceleration() {
		return memory.read<float>(m_addr + 872);
	}
	float Get_aboveWaterRecoveryTurningSpeed() {
		return memory.read<float>(m_addr + 876);
	}
	float Get_moveToTargetUpdatePeriod() {
		return memory.read<float>(m_addr + 880);
	}
	float Get_minVictimDepth() {
		return memory.read<float>(m_addr + 888);
	}
	float Get_beginPursuitTimeMin() {
		return memory.read<float>(m_addr + 892);
	}
	float Get_beginPursuitTimeMax() {
		return memory.read<float>(m_addr + 896);
	}
	float Get_aggressiveBehaviorChance() {
		return memory.read<float>(m_addr + 904);
	}
	float Get_aggressiveBehaviorChanceWhenTargetBleeding() {
		return memory.read<float>(m_addr + 908);
	}
	float Get_distanceToAdjustAttackAngle() {
		return memory.read<float>(m_addr + 912);
	}
	float Get_desiredAttackAngleDegrees() {
		return memory.read<float>(m_addr + 916);
	}
	float Get_desiredAttackAngleTime() {
		return memory.read<float>(m_addr + 924);
	}
	float Get_returnToWanderingTime() {
		return memory.read<float>(m_addr + 928);
	}
	float Get_dealDamageTime() {
		return memory.read<float>(m_addr + 936);
	}
	float Get_damagePerInterval() {
		return memory.read<float>(m_addr + 944);
	}
	int32_t Get_numOfIntervals() {
		return memory.read<int32_t>(m_addr + 952);
	}
	float Get_startMovingAfterBiteTime() {
		return memory.read<float>(m_addr + 960);
	}
	float Get_changeDirectionChance() {
		return memory.read<float>(m_addr + 976);
	}
	float Get_circlingAngleDegrees() {
		return memory.read<float>(m_addr + 980);
	}
	float Get_circlingDistanceMin() {
		return memory.read<float>(m_addr + 984);
	}
	float Get_circlingDistanceMax() {
		return memory.read<float>(m_addr + 988);
	}
	float Get_circlingAggressionCheckInterval() {
		return memory.read<float>(m_addr + 992);
	}
	float Get_minDamageToReact() {
		return memory.read<float>(m_addr + 1000);
	}
	float Get_fleeingDuration() {
		return memory.read<float>(m_addr + 1004);
	}
	float Get_maxTimeAboveWater() {
		return memory.read<float>(m_addr + 1088);
	}
	float Get_minDistanceToNextPrimaryTarget() {
		return memory.read<float>(m_addr + 1096);
	}
	float Get_changePrimaryTargetTime() {
		return memory.read<float>(m_addr + 1100);
	}
	struct TMap<uint8_t , struct FFishStateParameters> Get_behaviorMap() {
		return memory.read<struct TMap<uint8_t , struct FFishStateParameters>>(m_addr + 1120);
	}
	struct UGrappleActionParameters Get_grappleActionParameter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct UGrappleActionParameters(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_SmokableItemUnequip
{
public:
	UAnimNotify_SmokableItemUnequip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInventoryPanelWidget2
{
public:
	UInventoryPanelWidget2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ACTFBase
{
public:
	ACTFBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USphereComponent GetSphereComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USphereComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct TArray<struct UMaterialInstance> GetTeamMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct TArray<struct UMaterialInstance>(ptr_addr);
	}
	struct ACTFGameEvent Get_gameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct ACTFGameEvent(ptr_addr);
	}
	int32_t Get_team() {
		return memory.read<int32_t>(m_addr + 584);
	}
	float Get_radius() {
		return memory.read<float>(m_addr + 588);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_HeavyInjuries
{
public:
	UPrisonerBodyCondition_HeavyInjuries(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatInterval Get_injuriesDamageRatioToExistVsConstitution() {
		return memory.read<struct FFloatInterval>(m_addr + 192);
	}
	float Get_painSymptomOverallIntensity() {
		return memory.read<float>(m_addr + 200);
	}
	float Get_painSymptomLimpingIntensity() {
		return memory.read<float>(m_addr + 204);
	}
	UPrisonerBodySymptom_Pain Get_painSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return UPrisonerBodySymptom_Pain(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Pain Get_painSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UPrisonerBodySymptomCause_Pain(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_VehicleDoorOpenOrClose
{
public:
	UAnimNotify_VehicleDoorOpenOrClose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_WaterPaddle
{
public:
	UAnimNotify_WaterPaddle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem GetParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 72);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 76);
	}
	bool GetIsUnderwater() {
		return memory.read<bool>(m_addr + 80);
	}
	bool GetIsAttached() {
		return memory.read<bool>(m_addr + 81);
	}
	struct FName GetAttachPointName() {
		return memory.read<struct FName>(m_addr + 84);
	}
	bool GetDebugMode() {
		return memory.read<bool>(m_addr + 92);
	}

private:
	std::uint64_t m_addr = 0;
};


class UJournalObjectiveContainer
{
public:
	UJournalObjectiveContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVerticalBox Get_objectiveContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UVerticalBox(ptr_addr);
	}
	struct UHorizontalBox Get_rewardContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UTextBlock Get_headerNameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_missionDescriptionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_missionBanner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_noDescriptionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_noRewardsText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_activateMissionButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_untrackMissionButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_resetMissionButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_restartMissionButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UButton(ptr_addr);
	}
	struct UOverlay Get_activateButtonOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay Get_untrackButtonOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay Get_resetButtonOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay Get_restartButtonOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UOverlay(ptr_addr);
	}
	float Get_objectiveItemBottomPadding() {
		return memory.read<float>(m_addr + 728);
	}
	float Get_objectiveItemFontSize() {
		return memory.read<float>(m_addr + 732);
	}
	struct TMap<struct FString, struct TWeakObjectPtr<UObjectiveItemWidget>> Get_objectiveItemWidgets() {
		return memory.read<struct TMap<struct FString, struct TWeakObjectPtr<UObjectiveItemWidget>>>(m_addr + 752);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_WeaponChamberBullet
{
public:
	UAnimNotify_WeaponChamberBullet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGameEventNotificationPanel
{
public:
	UGameEventNotificationPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBorder Get_nextEventBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UBorder(ptr_addr);
	}
	struct UTextBlock Get_nextEventText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_nextEventCountdown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UBorder Get_eventCancelBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UBorder(ptr_addr);
	}
	struct UTextBlock Get_eventCancelTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UBorder Get_eventTimeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UBorder(ptr_addr);
	}
	struct UTextBlock Get_eventTimeText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct FLinearColor Get_nonAlertedColor() {
		return memory.read<struct FLinearColor>(m_addr + 672);
	}
	struct FLinearColor Get_alertedColor() {
		return memory.read<struct FLinearColor>(m_addr + 688);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZGameMode
{
public:
	AConZGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDoorLockingRegistry Get_doorLockingRegistry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UDoorLockingRegistry(ptr_addr);
	}
	struct UVehicleServiceRegistry Get_vehicleServiceRegistry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UVehicleServiceRegistry(ptr_addr);
	}
	APrisoner Get_prisonerClassToSpawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return APrisoner(ptr_addr);
	}
	ADrone Get_droneClassToSpawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return ADrone(ptr_addr);
	}
	AItemSpawningManager Get_itemSpawningManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1168);
		return AItemSpawningManager(ptr_addr);
	}
	struct AItemSpawningManager Get_itemSpawningManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1176);
		return struct AItemSpawningManager(ptr_addr);
	}
	AItemVirtualizationManager Get_itemVirtualizationManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1184);
		return AItemVirtualizationManager(ptr_addr);
	}
	struct AItemVirtualizationManager Get_itemVirtualizationManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1192);
		return struct AItemVirtualizationManager(ptr_addr);
	}
	AVehicleSpawningManager2 Get_vehicleSpawningManagerClass2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1200);
		return AVehicleSpawningManager2(ptr_addr);
	}
	struct AVehicleSpawningManager2 Get_vehicleSpawningManager2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1208);
		return struct AVehicleSpawningManager2(ptr_addr);
	}
	AReportingManager Get_reportingManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1216);
		return AReportingManager(ptr_addr);
	}
	struct AReportingManager Get_reportingManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1224);
		return struct AReportingManager(ptr_addr);
	}
	ACharacterSpawningManager Get_characterSpawningManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1232);
		return ACharacterSpawningManager(ptr_addr);
	}
	struct ACharacterSpawningManager Get_characterSpawningManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1240);
		return struct ACharacterSpawningManager(ptr_addr);
	}
	AGlobalAquaticLifeManager Get_globalAquaticLifeManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1248);
		return AGlobalAquaticLifeManager(ptr_addr);
	}
	struct AGlobalAquaticLifeManager Get_globalAquaticLifeManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct AGlobalAquaticLifeManager(ptr_addr);
	}
	AGlobalGuardedZoneManager Get_globalGuardedZoneManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return AGlobalGuardedZoneManager(ptr_addr);
	}
	struct AGlobalGuardedZoneManager Get_globalGuardedZoneManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return struct AGlobalGuardedZoneManager(ptr_addr);
	}
	AAchievementsManagerServer Get_achievementsManagerServerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1280);
		return AAchievementsManagerServer(ptr_addr);
	}
	struct AAchievementsManagerServer Get_achievementsManagerServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1288);
		return struct AAchievementsManagerServer(ptr_addr);
	}
	AMissionLevelManager Get_missionLevelManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1296);
		return AMissionLevelManager(ptr_addr);
	}
	struct AMissionLevelManager Get_missionLevelManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1304);
		return struct AMissionLevelManager(ptr_addr);
	}
	AMissionScheduler Get_missionSchedulerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1312);
		return AMissionScheduler(ptr_addr);
	}
	struct AMissionScheduler Get_missionScheduler() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1320);
		return struct AMissionScheduler(ptr_addr);
	}
	ASurvivalStatsHandler Get_survivalStatsHandlerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1328);
		return ASurvivalStatsHandler(ptr_addr);
	}
	struct ASurvivalStatsHandler Get_survivalStatsHandler() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1336);
		return struct ASurvivalStatsHandler(ptr_addr);
	}
	AHeatSourceManager Get_heatSourceManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1344);
		return AHeatSourceManager(ptr_addr);
	}
	struct AHeatSourceManager Get_heatSourceManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1352);
		return struct AHeatSourceManager(ptr_addr);
	}
	AConZBaseManager Get_baseManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1360);
		return AConZBaseManager(ptr_addr);
	}
	struct AConZBaseManager Get_baseManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1368);
		return struct AConZBaseManager(ptr_addr);
	}
	struct URainCollectionManager Get_rainCollectionManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1376);
		return struct URainCollectionManager(ptr_addr);
	}
	ALadderMarkersReplicator Get_ladderMarkersReplicatorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1384);
		return ALadderMarkersReplicator(ptr_addr);
	}
	struct ALadderMarkersReplicator Get_ladderMarkersReplicator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1392);
		return struct ALadderMarkersReplicator(ptr_addr);
	}
	AEffectOverTimeDealer Get_effectOverTimeDealerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1400);
		return AEffectOverTimeDealer(ptr_addr);
	}
	struct AEffectOverTimeDealer Get_effectOverTimeDealer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1408);
		return struct AEffectOverTimeDealer(ptr_addr);
	}
	ANotificationsManager Get_notificationManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1416);
		return ANotificationsManager(ptr_addr);
	}
	struct ANotificationsManager Get_notificationManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1424);
		return struct ANotificationsManager(ptr_addr);
	}
	AVoteSystemManager Get_voteSystemManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1432);
		return AVoteSystemManager(ptr_addr);
	}
	struct AVoteSystemManager Get_voteSystemManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1440);
		return struct AVoteSystemManager(ptr_addr);
	}
	AServerAnalyticsManager Get_serverAnalyticsManagerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1448);
		return AServerAnalyticsManager(ptr_addr);
	}
	struct AServerAnalyticsManager Get_serverAnalyticsManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1456);
		return struct AServerAnalyticsManager(ptr_addr);
	}
	AAIDetectionTimerHandler Get_aiDetectionTimerHandlerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1464);
		return AAIDetectionTimerHandler(ptr_addr);
	}
	ABCULockRegistry Get_bcuLockRegistryClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1472);
		return ABCULockRegistry(ptr_addr);
	}
	struct ABCULockRegistry Get_bcuLockRegistry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1480);
		return struct ABCULockRegistry(ptr_addr);
	}
	struct UWorldDoorOwnershipManager Get_worldDoorOwnershipManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1488);
		return struct UWorldDoorOwnershipManager(ptr_addr);
	}
	struct AAIDetectionTimerHandler Get_aiDetectionTimerHandler() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1496);
		return struct AAIDetectionTimerHandler(ptr_addr);
	}
	struct UDedicatedServerResponse Get_serverResponse() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1504);
		return struct UDedicatedServerResponse(ptr_addr);
	}
	struct UChatSpamProtectionRules Get_chatSpamProtectionRules() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1512);
		return struct UChatSpamProtectionRules(ptr_addr);
	}
	struct TArray<struct UPrisonerSpawnEquipment> Get_spawnEquipment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1520);
		return struct TArray<struct UPrisonerSpawnEquipment>(ptr_addr);
	}
	struct FGameplayTag Get_spawnParameterTag_AerialSpawn() {
		return memory.read<struct FGameplayTag>(m_addr + 1536);
	}
	struct FGameplayTag Get_spawnParameterTag_ColdClimate() {
		return memory.read<struct FGameplayTag>(m_addr + 1544);
	}
	struct FGameplayTag Get_spawnParameterTag_SupporterPack1() {
		return memory.read<struct FGameplayTag>(m_addr + 1552);
	}
	struct FGameplayTag Get_spawnParameterTag_Tournament() {
		return memory.read<struct FGameplayTag>(m_addr + 1560);
	}
	float Get_maxSpawningAdjustmentDistance() {
		return memory.read<float>(m_addr + 1568);
	}
	int32_t Get_spawningAdjustmentRadialIterations() {
		return memory.read<int32_t>(m_addr + 1572);
	}
	int32_t Get_spawningAdjustmentVerticalIterations() {
		return memory.read<int32_t>(m_addr + 1576);
	}
	int32_t Get_spawningAdjustmentCheckingFrequency() {
		return memory.read<int32_t>(m_addr + 1580);
	}
	float Get_localChatDistance() {
		return memory.read<float>(m_addr + 1584);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryContainer
{
public:
	UInventoryContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEmptySlot
{
public:
	UEmptySlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetMainImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_WeaponChamberBulletInternal
{
public:
	UAnimNotify_WeaponChamberBulletInternal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UConZVehicleSpringArmComponent
{
public:
	UConZVehicleSpringArmComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_ownerAccelerationDirectionInterpSpeed() {
		return memory.read<float>(m_addr + 656);
	}
	struct FVector Get_maxCameraOffset() {
		return memory.read<struct FVector>(m_addr + 660);
	}
	struct FVector Get_cameraOffsetInterpSpeed() {
		return memory.read<struct FVector>(m_addr + 672);
	}
	float Get_maxCameraPitch() {
		return memory.read<float>(m_addr + 684);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffectUIData_PerformanceScoreModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffectUIData_PerformanceScoreModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_WeaponUpdateAmmunitionMeshes
{
public:
	UAnimNotify_WeaponUpdateAmmunitionMeshes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetshowReversed() {
		return memory.read<bool>(m_addr + 56);
	}
	struct TArray<int32_t> GetammoIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCharacterCreationMenu
{
public:
	UCharacterCreationMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCanvasPanel Get_canvasMain() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UCanvasPanel(ptr_addr);
	}
	struct UCanvasPanel Get_canvasContent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UCanvasPanel(ptr_addr);
	}
	struct UOverlay Get_overlayMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UOverlay(ptr_addr);
	}
	struct UWidgetSwitcher Get_widgetSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UEditableTextBox Get_editableTextNameCharacterPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UBorder Get_borderNameCharacterPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UBorder(ptr_addr);
	}
	struct UCCNonSelectableTextWidget Get_availableAttributePointsDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UCCNonSelectableTextWidget(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderStrength() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderConstitution() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderDexterity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderIntelligence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UTrashNamedCarouselWidget Get_carouselGender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTrashNamedCarouselWidget(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderHead() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UCCGameUpgradeConditionDisplayWidget Get_appearanceUpgradeConditionDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UCCGameUpgradeConditionDisplayWidget(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderAge() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UTrashNamedCarouselWidget Get_carouselTattoos() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UTrashNamedCarouselWidget(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderTattooStyle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UCCGameUpgradeConditionDisplayWidget Get_tattooUpgradeConditionDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UCCGameUpgradeConditionDisplayWidget(ptr_addr);
	}
	struct UTrashNamedCarouselWidget Get_carouselConcealedMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UTrashNamedCarouselWidget(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderPenisBreastSize() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UConZStandardButton Get_buttonRandomizeAttributes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonCancelToMainMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonNextToFace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UOverlay Get_overlayAttributeConfirmation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UOverlay(ptr_addr);
	}
	struct UConZStandardButton Get_buttonCancelCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonContinueCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UEditableTextBox Get_editableTextNameFacePanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UBorder Get_borderNameFacePanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UBorder(ptr_addr);
	}
	struct UConZStandardButton Get_buttonRandomizeFace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonBackToCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonNextToSkills() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderFaceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UPresetColorPicker Get_presetColorPickerSkinTone() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UPresetColorPicker(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderHairStyle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UCCGameUpgradeConditionDisplayWidget Get_hairStyleUpgradeConditionDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UCCGameUpgradeConditionDisplayWidget(ptr_addr);
	}
	struct UPresetColorPicker Get_presetColorPickerHairColor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UPresetColorPicker(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderFacialHairStyle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UCCGameUpgradeConditionDisplayWidget Get_facialHairStyleUpgradeConditionDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UCCGameUpgradeConditionDisplayWidget(ptr_addr);
	}
	struct UPresetColorPicker Get_presetColorPickerEyeColor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UPresetColorPicker(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderIrisType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UEditableTextBox Get_editableTextNameSkillsPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UBorder Get_borderNameSkillsPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct UBorder(ptr_addr);
	}
	struct UCCNonSelectableTextWidget Get_attributeDisplayConstitution() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 952);
		return struct UCCNonSelectableTextWidget(ptr_addr);
	}
	struct UCCNonSelectableTextWidget Get_attributeDisplayDexterity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct UCCNonSelectableTextWidget(ptr_addr);
	}
	struct UCCNonSelectableTextWidget Get_attributeDisplayIntelligence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct UCCNonSelectableTextWidget(ptr_addr);
	}
	struct UCCNonSelectableTextWidget Get_attributeDisplayStrength() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 976);
		return struct UCCNonSelectableTextWidget(ptr_addr);
	}
	struct UCCNonSelectableTextWidget Get_skillPointDisplayConstitution() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 984);
		return struct UCCNonSelectableTextWidget(ptr_addr);
	}
	struct UCCNonSelectableTextWidget Get_skillPointDisplayDexterity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 992);
		return struct UCCNonSelectableTextWidget(ptr_addr);
	}
	struct UCCNonSelectableTextWidget Get_skillPointDisplayIntelligence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct UCCNonSelectableTextWidget(ptr_addr);
	}
	struct UCCNonSelectableTextWidget Get_skillPointDisplayStrength() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1008);
		return struct UCCNonSelectableTextWidget(ptr_addr);
	}
	struct UVerticalBox Get_skillBoxStrength() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_skillBoxConstitution() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1024);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_skillBoxDexterity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1032);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_skillBoxIntelligence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1040);
		return struct UVerticalBox(ptr_addr);
	}
	struct UConZStandardButton Get_buttonRandomizeSkills() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1048);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UTextBlock Get_textNameAlreadyTaken() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1056);
		return struct UTextBlock(ptr_addr);
	}
	struct UConZStandardButton Get_buttonBackToFace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1064);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonSwitchToCriminalRecord() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1072);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UScrollBox Get_faceOptionsScrollbox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1080);
		return struct UScrollBox(ptr_addr);
	}
	struct UOverlay Get_overlaySkillConfirmation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct UOverlay(ptr_addr);
	}
	struct UConZStandardButton Get_buttonCancelSkills() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonContinueSkills() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1104);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UCriminalRecord Get_criminalRecord() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1112);
		return struct UCriminalRecord(ptr_addr);
	}
	struct UVerticalBox Get_errorDialogPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1120);
		return struct UVerticalBox(ptr_addr);
	}
	struct TArray<struct FCCNonImplementedSkill> Get_nonImplementedSkills() {
		return memory.read<struct TArray<struct FCCNonImplementedSkill>>(m_addr + 1128);
	}
	struct FLinearColor Get_pointDisplayAvailableColor() {
		return memory.read<struct FLinearColor>(m_addr + 1144);
	}
	struct FLinearColor Get_pointDisplayDepletedColor() {
		return memory.read<struct FLinearColor>(m_addr + 1160);
	}
	UCCSkillSliderWidget Get_skillSliderClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1176);
		return UCCSkillSliderWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFueledHeatSource
{
public:
	UFueledHeatSource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHeatSourceParameters Get_heatSourceParams() {
		return memory.read<struct FHeatSourceParameters>(m_addr + 48);
	}
	struct UStaticMeshComponent Get_interactionHitComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_fireParticlesComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UNiagaraComponent Get_niagaraFireParticlesComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UNiagaraComponent(ptr_addr);
	}
	struct TArray<struct FParameterInt32> Get_particleParametersInt32() {
		return memory.read<struct TArray<struct FParameterInt32>>(m_addr + 120);
	}
	struct TArray<struct FParameterFloat> Get_particleParametersFloat() {
		return memory.read<struct TArray<struct FParameterFloat>>(m_addr + 136);
	}
	struct TArray<struct FParameterVector> Get_particleParametersVector() {
		return memory.read<struct TArray<struct FParameterVector>>(m_addr + 152);
	}
	struct TArray<struct FParameterVector4> Get_particleParametersVector4() {
		return memory.read<struct TArray<struct FParameterVector4>>(m_addr + 168);
	}
	struct UPointLightComponent Get_fireLightComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UPointLightComponent(ptr_addr);
	}
	float Get_maxFireLightIntensity() {
		return memory.read<float>(m_addr + 192);
	}
	struct UAkAudioEvent Get_startBurningAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_stopBurningAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkComponent Get_fireAudioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UAkComponent(ptr_addr);
	}
	struct FTransform Get_fireTransform() {
		return memory.read<struct FTransform>(m_addr + 224);
	}
	struct UStaticMeshComponent Get_meshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct TArray<struct UStaticMesh> Get_swapMeshes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 288);
		return struct TArray<struct UStaticMesh>(ptr_addr);
	}
	int32_t Get_materialSwitchIndex() {
		return memory.read<int32_t>(m_addr + 304);
	}
	struct UMaterialInterface Get_litMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface Get_unlitMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FTransform Get_meshTransform() {
		return memory.read<struct FTransform>(m_addr + 336);
	}
	float Get_fireDamageProcessingPeriod() {
		return memory.read<float>(m_addr + 388);
	}
	float Get_fireBaseDamageToItemsPerSecond() {
		return memory.read<float>(m_addr + 396);
	}
	uint16_t Get_repTemperature() {
		return memory.read<uint16_t>(m_addr + 400);
	}
	char Get_isAvailableForCooking() {
		return memory.read<char>(m_addr + 408);
	}
	float Get_temperatureReplicationInterval() {
		return memory.read<float>(m_addr + 420);
	}
	float Get_temperatureReplicationRadius() {
		return memory.read<float>(m_addr + 428);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNameableItemComponent
{
public:
	UNameableItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Get_name() {
		return memory.read<struct FString>(m_addr + 232);
	}
	struct TWeakObjectPtr<UItemStatusWidget> Get_nameWidget() {
		return memory.read<struct TWeakObjectPtr<UItemStatusWidget>>(m_addr + 248);
	}
	struct TWeakObjectPtr<UChangeTextWidget> Get_editNameWidget() {
		return memory.read<struct TWeakObjectPtr<UChangeTextWidget>>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_Fade
{
public:
	UAnimNotifyState_Fade(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_fadeOutRatio() {
		return memory.read<float>(m_addr + 48);
	}
	float Get_fadeInRatio() {
		return memory.read<float>(m_addr + 52);
	}
	uint8_t  Get_forAction() {
		return memory.read<uint8_t >(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsRegion
{
public:
	UCustomZoneSettingsRegion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBorder Get_border() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UBorder(ptr_addr);
	}
	struct UTextBlock Get_regionName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_regionData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_buttonIncreasePriority() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_buttonDecreasePriority() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_buttonRemove() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UButton(ptr_addr);
	}
	struct FLinearColor Get_unhighlightedColor() {
		return memory.read<struct FLinearColor>(m_addr + 752);
	}
	struct FLinearColor Get_highlightedColor() {
		return memory.read<struct FLinearColor>(m_addr + 768);
	}
	struct FLinearColor Get_defaultZoneUnmodifiedUnhighlightedColor() {
		return memory.read<struct FLinearColor>(m_addr + 784);
	}
	struct FLinearColor Get_defaultZoneUnmodifiedHighlightedColor() {
		return memory.read<struct FLinearColor>(m_addr + 800);
	}
	struct FLinearColor Get_defaultZoneModifiedUnhighlightedColor() {
		return memory.read<struct FLinearColor>(m_addr + 816);
	}
	struct FLinearColor Get_defaultZoneModifiedHighlightedColor() {
		return memory.read<struct FLinearColor>(m_addr + 832);
	}
	struct FLinearColor Get_defaultZoneDeletedUnhighlightedColor() {
		return memory.read<struct FLinearColor>(m_addr + 848);
	}
	struct FLinearColor Get_defaultZoneDeletedHighlightedColor() {
		return memory.read<struct FLinearColor>(m_addr + 864);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFamePointDebugComponent
{
public:
	UFamePointDebugComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UFamePointDebugWidget Get_widgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return UFamePointDebugWidget(ptr_addr);
	}
	struct UFamePointDebugWidget Get_widget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UFamePointDebugWidget(ptr_addr);
	}
	float Get_famePoints() {
		return memory.read<float>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVoteTopic_SetWeather
{
public:
	UVoteTopic_SetWeather(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyEffectUIData_ExhaustionChange
{
public:
	UPrisonerBodyEffectUIData_ExhaustionChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText Get_name() {
		return memory.read<struct FText>(m_addr + 64);
	}
	struct FText Get_suffix() {
		return memory.read<struct FText>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_IgnoreUsingHandCorrections
{
public:
	UAnimNotifyState_IgnoreUsingHandCorrections(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AProjectileExplosiveArrow
{
public:
	AProjectileExplosiveArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_Melee
{
public:
	UAnimNotifyState_Melee(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag Get_attackCapsuleAttachment() {
		return memory.read<struct FGameplayTag>(m_addr + 48);
	}
	float Get_damageMultiplier() {
		return memory.read<float>(m_addr + 56);
	}
	uint8_t  Get_hitSeverity() {
		return memory.read<uint8_t >(m_addr + 60);
	}
	bool Get_stopOnHit() {
		return memory.read<bool>(m_addr + 61);
	}
	bool Get_ignoreLandscape() {
		return memory.read<bool>(m_addr + 62);
	}
	uint8_t  Get_attackType() {
		return memory.read<uint8_t >(m_addr + 63);
	}
	struct FName Get_hitDetectionMarkersRootBoneParentName() {
		return memory.read<struct FName>(m_addr + 64);
	}
	struct TArray<struct FMeleeHitDetectionMarker> Get_hitDetectionMarkers() {
		return memory.read<struct TArray<struct FMeleeHitDetectionMarker>>(m_addr + 72);
	}
	int32_t Get_hitDetectionSamplingRate() {
		return memory.read<int32_t>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGhostTrailComponent
{
public:
	UGhostTrailComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySimulationUIData
{
public:
	UPrisonerBodySimulationUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_PaniniOverride
{
public:
	UAnimNotifyState_PaniniOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_PhysicalAnimation
{
public:
	UAnimNotifyState_PhysicalAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetGotoRagdollOnEnd() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FName GetBodyProfileName() {
		return memory.read<struct FName>(m_addr + 52);
	}
	struct FName GetConstraintProfileName() {
		return memory.read<struct FName>(m_addr + 60);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 68);
	}
	struct FName GetStrengthBlendCurveName() {
		return memory.read<struct FName>(m_addr + 76);
	}
	struct FName GetPhysicsBlendCurveName() {
		return memory.read<struct FName>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionLoadAmmoIntoMagazine
{
public:
	UPrisonerActionLoadAmmoIntoMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemActionSequenceLoadMagazine Get_itemActionSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UItemActionSequenceLoadMagazine(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_PlaySoundOnOwnerRanged
{
public:
	UAnimNotifyState_PlaySoundOnOwnerRanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetBeginAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetEndAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRemoveWeaponAttachmentDescription
{
public:
	UPrisonerActionRemoveWeaponAttachmentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionIgniteItem
{
public:
	UPrisonerActionIgniteItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AAquaticLifeSpawningVolume
{
public:
	AAquaticLifeSpawningVolume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_waterZoneType() {
		return memory.read<uint8_t >(m_addr + 600);
	}
	struct UFishSpeciesPreset Get_fishSpeciesPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UFishSpeciesPreset(ptr_addr);
	}
	struct UFishSpawningPreset Get_fishSpawningPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UFishSpawningPreset(ptr_addr);
	}
	float Get_requiredDepthForSpawning() {
		return memory.read<float>(m_addr + 624);
	}
	float Get_fishSchoolManagerSpawningExtent() {
		return memory.read<float>(m_addr + 628);
	}
	int32_t Get_maxSchoolsPerFishSchoolManager() {
		return memory.read<int32_t>(m_addr + 632);
	}
	float Get_fishingZoneIndicatorMinSpawnTime() {
		return memory.read<float>(m_addr + 636);
	}
	float Get_fishingZoneIndicatorMaxSpawnTime() {
		return memory.read<float>(m_addr + 640);
	}
	float Get_fishingZoneIndicatorMinLifetime() {
		return memory.read<float>(m_addr + 644);
	}
	float Get_fishingZoneIndicatorMaxLifetime() {
		return memory.read<float>(m_addr + 648);
	}
	int32_t Get_maxFishingZoneIndicatorPerPlayer() {
		return memory.read<int32_t>(m_addr + 652);
	}
	float Get_fishingZoneIndicatorMinSpawningExtent() {
		return memory.read<float>(m_addr + 656);
	}
	float Get_fishingZoneIndicatorMaxSpawningExtent() {
		return memory.read<float>(m_addr + 660);
	}
	float Get_fishingZoneIndicatorMinRadius() {
		return memory.read<float>(m_addr + 664);
	}
	float Get_fishingZoneIndicatorMaxRadius() {
		return memory.read<float>(m_addr + 668);
	}
	float Get_requiredDepthForFishingIndicator() {
		return memory.read<float>(m_addr + 672);
	}

private:
	std::uint64_t m_addr = 0;
};


class ARecastNavMesh_SmallAnimals
{
public:
	ARecastNavMesh_SmallAnimals(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USphereMotionTriggerComponent
{
public:
	USphereMotionTriggerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USphereComponent GetSphereCollisionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1304);
		return struct USphereComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetVisualizationMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1312);
		return struct UStaticMeshComponent(ptr_addr);
	}
	float Get_triggerRadius() {
		return memory.read<float>(m_addr + 1320);
	}
	struct UStaticMesh Get_visualizationMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1328);
		return struct UStaticMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleBaseMountSlot
{
public:
	UVehicleBaseMountSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVehicleAttachment GetAttachmentOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UVehicleAttachment(ptr_addr);
	}
	struct FName GetMountSocketName() {
		return memory.read<struct FName>(m_addr + 56);
	}
	struct FName GetMountedCollisionShapeName() {
		return memory.read<struct FName>(m_addr + 64);
	}
	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 72);
	}
	struct UPhysicalMaterial GetInteractionMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UPhysicalMaterial(ptr_addr);
	}
	UAnimInstance GetMountedAnimInstanceClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return UAnimInstance(ptr_addr);
	}
	struct UAnimSequenceBase GetMountedAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace GetMountedBlendspace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UBlendSpace(ptr_addr);
	}
	struct FPrisonerRestingParameters GetDefaultPrisonerRestingParameters() {
		return memory.read<struct FPrisonerRestingParameters>(m_addr + 112);
	}
	struct FGameplayTag GetSlotId() {
		return memory.read<struct FGameplayTag>(m_addr + 208);
	}
	struct UObject Get_mountee() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UObject(ptr_addr);
	}
	struct UObject Get_reservee() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct UObject(ptr_addr);
	}
	UVehicleWeaponAimingParameters Get_weaponAimingParametersClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return UVehicleWeaponAimingParameters(ptr_addr);
	}
	float Get_forceUnmountAngle() {
		return memory.read<float>(m_addr + 248);
	}
	bool Get_isReachableFromSky() {
		return memory.read<bool>(m_addr + 252);
	}
	bool Get_shouldHideAttachedItems() {
		return memory.read<bool>(m_addr + 253);
	}
	struct FVector Get_prisonerViewpointOffset() {
		return memory.read<struct FVector>(m_addr + 256);
	}
	struct FVector Get_prisonerFeetOffset() {
		return memory.read<struct FVector>(m_addr + 268);
	}
	struct TArray<struct UExternalMountPath> Get_externalMountPaths() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct TArray<struct UExternalMountPath>(ptr_addr);
	}
	struct TArray<struct UInternalMountPath> Get_internalMountPaths() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return struct TArray<struct UInternalMountPath>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URangedWeaponsSkill
{
public:
	URangedWeaponsSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_clearMalfunctionBadRound() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_clearMalfunctionStovePipe() {
		return memory.read<float>(m_addr + 196);
	}
	float Get_clearMalfunctionRoundNotLoaded() {
		return memory.read<float>(m_addr + 200);
	}
	float Get_clearMalfunctionDoubleFeed() {
		return memory.read<float>(m_addr + 204);
	}
	float Get_clearMalfunctionStuckBullet() {
		return memory.read<float>(m_addr + 208);
	}
	float Get_clearMalfunctionClipPartiallyEjected() {
		return memory.read<float>(m_addr + 212);
	}
	struct FRangedWeaponSkillParametersPerSkillLevel GetNoSkillParameters() {
		return memory.read<struct FRangedWeaponSkillParametersPerSkillLevel>(m_addr + 216);
	}
	struct FRangedWeaponSkillParametersPerSkillLevel GetBasicSkillParameters() {
		return memory.read<struct FRangedWeaponSkillParametersPerSkillLevel>(m_addr + 220);
	}
	struct FRangedWeaponSkillParametersPerSkillLevel GetMediumSkillParameters() {
		return memory.read<struct FRangedWeaponSkillParametersPerSkillLevel>(m_addr + 224);
	}
	struct FRangedWeaponSkillParametersPerSkillLevel GetAdvancedSkillParameters() {
		return memory.read<struct FRangedWeaponSkillParametersPerSkillLevel>(m_addr + 228);
	}
	struct FRangedWeaponSkillParametersPerSkillLevel GetAboveAdvancedSkillParameters() {
		return memory.read<struct FRangedWeaponSkillParametersPerSkillLevel>(m_addr + 232);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDcxWheeledVehicleEffectsComponent
{
public:
	UDcxWheeledVehicleEffectsComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_soundCullDistance() {
		return memory.read<float>(m_addr + 176);
	}
	struct UAkAudioEvent Get_chassisStartedMovingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_chassisStoppedMovingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_speedOfSoundMultiplerForDoppler() {
		return memory.read<float>(m_addr + 200);
	}
	struct UTireToSurfaceAudioData Get_tireToSurfaceAudioData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UTireToSurfaceAudioData(ptr_addr);
	}
	int32_t Get_numAudioObjectsForTires() {
		return memory.read<int32_t>(m_addr + 216);
	}
	float Get_tireEffectUpdateRange() {
		return memory.read<float>(m_addr + 256);
	}
	struct TArray<struct FDcxWheeledVehicleTireEffectProperties> Get_tireEffectProperties() {
		return memory.read<struct TArray<struct FDcxWheeledVehicleTireEffectProperties>>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFoodItemEntitySetup
{
public:
	UFoodItemEntitySetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCharacterActionDescription
{
public:
	UCharacterActionDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimInstance_PrisonerCreation
{
public:
	UPrisonerAnimInstance_PrisonerCreation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_gender() {
		return memory.read<uint8_t >(m_addr + 696);
	}
	bool Get_isCameraFocusedOnFace() {
		return memory.read<bool>(m_addr + 697);
	}
	struct UAnimMontage Get_femaleCloseUpIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UArcherySkill
{
public:
	UArcherySkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_drawWeightNoSkillValue() {
		return memory.read<float>(m_addr + 240);
	}
	float Get_drawWeightBasicSkillValue() {
		return memory.read<float>(m_addr + 244);
	}
	float Get_drawWeightMediumSkillValue() {
		return memory.read<float>(m_addr + 248);
	}
	float Get_drawWeightAdvancedSkillValue() {
		return memory.read<float>(m_addr + 252);
	}
	float Get_drawWeightAboveAvancedSkillValue() {
		return memory.read<float>(m_addr + 256);
	}
	float Get_holdTimeInFullDrawNoSkillValue() {
		return memory.read<float>(m_addr + 260);
	}
	float Get_holdTimeInFullDrawBasicSkillValue() {
		return memory.read<float>(m_addr + 264);
	}
	float Get_holdTimeInFullDrawMediumSkillValue() {
		return memory.read<float>(m_addr + 268);
	}
	float Get_holdTimeInFullDrawAdvancedSkillValue() {
		return memory.read<float>(m_addr + 272);
	}
	float Get_holdTimeInFullDrawAboveAvancedSkillValue() {
		return memory.read<float>(m_addr + 276);
	}
	float Get_armsShakeMultiplierNoSkillValue() {
		return memory.read<float>(m_addr + 280);
	}
	float Get_armsShakeMultiplierBasicSkillValue() {
		return memory.read<float>(m_addr + 284);
	}
	float Get_armsShakeMultiplierMediumSkillValue() {
		return memory.read<float>(m_addr + 288);
	}
	float Get_armsShakeMultiplierAdvancedSkillValue() {
		return memory.read<float>(m_addr + 292);
	}
	float Get_armsShakeMultiplierAboveAvancedSkillValue() {
		return memory.read<float>(m_addr + 296);
	}
	float Get_tuneBowDurationNoSkillValue() {
		return memory.read<float>(m_addr + 300);
	}
	float Get_tuneBowDurationBasicSkillValue() {
		return memory.read<float>(m_addr + 304);
	}
	float Get_tuneBowDurationMediumSkillValue() {
		return memory.read<float>(m_addr + 308);
	}
	float Get_tuneBowDurationAdvancedSkillValue() {
		return memory.read<float>(m_addr + 312);
	}
	float Get_tuneBowDurationAboveAvancedSkillValue() {
		return memory.read<float>(m_addr + 316);
	}
	float Get_drawCenterDotExtraTimeLimitNoSkillValue() {
		return memory.read<float>(m_addr + 320);
	}
	float Get_drawCenterDotExtraTimeLimitBasicSkillValue() {
		return memory.read<float>(m_addr + 324);
	}
	float Get_drawCenterDotExtraTimeLimitMediumSkillValue() {
		return memory.read<float>(m_addr + 328);
	}
	float Get_drawCenterDotExtraTimeLimitAdvancedSkillValue() {
		return memory.read<float>(m_addr + 332);
	}
	float Get_drawCenterDotExtraTimeLimitAboveAvancedSkillValue() {
		return memory.read<float>(m_addr + 336);
	}

private:
	std::uint64_t m_addr = 0;
};


class UReplenishableResourceBaseComponent
{
public:
	UReplenishableResourceBaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FReplenishableResourceDescription Get_replenishableResourceDescription() {
		return memory.read<struct FReplenishableResourceDescription>(m_addr + 1424);
	}
	struct FName Get_replenishableResourceAmountMaterialParameterName() {
		return memory.read<struct FName>(m_addr + 1560);
	}

private:
	std::uint64_t m_addr = 0;
};


class UATMReplenishableResourceComponent
{
public:
	UATMReplenishableResourceComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFillVehicleFuelWithReplenishableResource
{
public:
	UPrisonerActionFillVehicleFuelWithReplenishableResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_EyePressure
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_EyePressure(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodySymptom_EyePressure Get_symptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodySymptom_EyePressure(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_EyePressure Get_symptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPrisonerBodySymptomCause_EyePressure(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_intensityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemComponent
{
public:
	UItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAttachableItemComponent
{
public:
	UAttachableItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform Get_attachRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 224);
	}
	float Get_damage() {
		return memory.read<float>(m_addr + 272);
	}
	struct FText Get_interactionText() {
		return memory.read<struct FText>(m_addr + 280);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAttachmentSocketMountType
{
public:
	UAttachmentSocketMountType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASurgeryRoom
{
public:
	ASurgeryRoom(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAttachmentSocketMountTypePrisonerHand
{
public:
	UAttachmentSocketMountTypePrisonerHand(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBuriableTrapItemComponent
{
public:
	UBuriableTrapItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_DcxWheel
{
public:
	UVehicleAttachment_DcxWheel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetWheelIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 864);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerCommonData
{
public:
	UPrisonerCommonData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UAnimInstance GetFemaleAnimationInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UAnimInstance(ptr_addr);
	}
	UAnimInstance GetMaleAnimationInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return UAnimInstance(ptr_addr);
	}
	struct FFloatInterval GetExhaustionRange() {
		return memory.read<struct FFloatInterval>(m_addr + 64);
	}
	float GetExhaustionDamageMultiplier() {
		return memory.read<float>(m_addr + 72);
	}
	float GetSkinHardness() {
		return memory.read<float>(m_addr + 76);
	}
	float GetLastDamageDealerResetTime() {
		return memory.read<float>(m_addr + 80);
	}
	struct FFloatInterval GetStrengthMeleeDamageMultiplierRange() {
		return memory.read<struct FFloatInterval>(m_addr + 84);
	}
	float GetExhaustionMeleeDamageMultiplier() {
		return memory.read<float>(m_addr + 92);
	}
	struct TMap<struct FGameplayTag, uint8_t > GetClothesPartUsedByMeleeAttackCapsuleAttachment() {
		return memory.read<struct TMap<struct FGameplayTag, uint8_t >>(m_addr + 96);
	}
	struct TMap<struct FGameplayTag, struct FName> GetAttackerBoneByMeleeAttackCapsuleAttachment() {
		return memory.read<struct TMap<struct FGameplayTag, struct FName>>(m_addr + 176);
	}
	float GetUnarmedAttackBaseEnergy() {
		return memory.read<float>(m_addr + 256);
	}
	struct FFloatInterval GetStrengthThrowingDamageMultiplierRange() {
		return memory.read<struct FFloatInterval>(m_addr + 260);
	}
	float GetExhaustionThrowingDamageMultiplier() {
		return memory.read<float>(m_addr + 268);
	}
	float GetNoSkillThrowingDamageMultiplier() {
		return memory.read<float>(m_addr + 272);
	}
	float GetBasicSkillThrowingDamageMultiplier() {
		return memory.read<float>(m_addr + 276);
	}
	float GetMediumSkillThrowingDamageMultiplier() {
		return memory.read<float>(m_addr + 280);
	}
	float GetAdvancedSkillThrowingDamageMultiplier() {
		return memory.read<float>(m_addr + 284);
	}
	float GetAboveAdvancedSkillThrowingDamageMultiplier() {
		return memory.read<float>(m_addr + 288);
	}
	struct FFloatInterval GetThrowEnergyRange() {
		return memory.read<struct FFloatInterval>(m_addr + 292);
	}
	float GetMaxActorEyesOffsetWhenLeaning() {
		return memory.read<float>(m_addr + 300);
	}
	struct FTransform GetDefaultMeshTransform() {
		return memory.read<struct FTransform>(m_addr + 304);
	}
	int32_t GetNumberOfCrouchStages() {
		return memory.read<int32_t>(m_addr + 352);
	}
	float GetCrouchStagesInterpSpeed() {
		return memory.read<float>(m_addr + 356);
	}
	struct UCurveFloat GetCrouchViewsAdditionalGlobalOffsetZVsCrouchStage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 360);
		return struct UCurveFloat(ptr_addr);
	}
	float GetProneEyeHeight() {
		return memory.read<float>(m_addr + 368);
	}
	float GetProneEyeForwardOffset() {
		return memory.read<float>(m_addr + 372);
	}
	float GetSittingOnGroundEyeHeight() {
		return memory.read<float>(m_addr + 376);
	}
	float GetLyingOnGroundEyeHeight() {
		return memory.read<float>(m_addr + 380);
	}
	float GetRestingOnGroundBackwardOffset() {
		return memory.read<float>(m_addr + 384);
	}
	uint8_t  GetDefaultPace() {
		return memory.read<uint8_t >(m_addr + 388);
	}
	struct UPrisonerMovementSettings GetMovementSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 392);
		return struct UPrisonerMovementSettings(ptr_addr);
	}
	float GetDefaultViewBlendDuration() {
		return memory.read<float>(m_addr + 400);
	}
	float GetMinEyesRotationYaw() {
		return memory.read<float>(m_addr + 404);
	}
	float GetMaxEyesRotationYaw() {
		return memory.read<float>(m_addr + 408);
	}
	float GetMinEyesRotationPitch() {
		return memory.read<float>(m_addr + 412);
	}
	float GetMaxEyesRotationPitch() {
		return memory.read<float>(m_addr + 416);
	}
	struct UCurveFloat GetMinEyesRotationPitchCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 424);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMaxEyesRotationPitchCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 432);
		return struct UCurveFloat(ptr_addr);
	}
	float GetEyesRotationSpeed() {
		return memory.read<float>(m_addr + 440);
	}
	bool GetDebugEyesRotation() {
		return memory.read<bool>(m_addr + 444);
	}
	struct UAkAudioEvent GetComaAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 448);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetComaScreamAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 456);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetDeathAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 464);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetDeathScreamAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 472);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UParticleSystem GetColdBreathParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 480);
		return struct UParticleSystem(ptr_addr);
	}
	struct FName GetColdBreathParticlesAttachPointName() {
		return memory.read<struct FName>(m_addr + 488);
	}
	struct UMaterialInstance GetStandardUndershirtMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 496);
		return struct UMaterialInstance(ptr_addr);
	}
	struct UMaterialInstance GetDeluxeUndershirtMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 504);
		return struct UMaterialInstance(ptr_addr);
	}
	struct UAkAudioEvent GetJumpAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 512);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetLandingImpactHorizontalSpeedWeight() {
		return memory.read<float>(m_addr + 520);
	}
	float GetLandingImpactVerticalSpeedWeight() {
		return memory.read<float>(m_addr + 524);
	}
	struct UCurveFloat GetLandingStaminaDrainCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 528);
		return struct UCurveFloat(ptr_addr);
	}
	struct ULandingEffects GetLandingEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 536);
		return struct ULandingEffects(ptr_addr);
	}
	struct UParticleSystem GetWaterParticlesWhenIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetWaterParticlesWhenIdleInOcean() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetWaterParticlesWhenMoving() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetWaterParticlesWhenMovingInOcean() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetWaterParticlesWhenDiving() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UParticleSystem(ptr_addr);
	}
	struct FName GetWaterParticlesWhenDivingAttachPointName() {
		return memory.read<struct FName>(m_addr + 584);
	}
	struct UParticleSystem GetWaterContactParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct UParticleSystem(ptr_addr);
	}
	struct FName GetWaterContactParticlesAttachPointName() {
		return memory.read<struct FName>(m_addr + 600);
	}
	float GetMinVelocityZToSpawnWaterContactParticles() {
		return memory.read<float>(m_addr + 608);
	}
	struct UCurveFloat GetBuoyancyMultiplierVsGearWeightLimitDeviation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UCurveFloat(ptr_addr);
	}
	struct UAkAudioEvent GetStartedDivingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStoppedDivingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetEndDivingOnPlayAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetMaxHeadWaterWeight() {
		return memory.read<float>(m_addr + 648);
	}
	float GetMaxUpperBodyWaterWeight() {
		return memory.read<float>(m_addr + 652);
	}
	float GetMaxLowerBodyWaterWeight() {
		return memory.read<float>(m_addr + 656);
	}
	float GetMaxFeetWaterWeight() {
		return memory.read<float>(m_addr + 660);
	}
	float GetOutwardsWaterPropagationFactor() {
		return memory.read<float>(m_addr + 664);
	}
	float GetInwardsWaterPropagationRate() {
		return memory.read<float>(m_addr + 668);
	}
	float GetOutwardsWaterPropagationRate() {
		return memory.read<float>(m_addr + 672);
	}
	struct UCurveFloat GetGettingDryRateVsSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UCurveFloat(ptr_addr);
	}
	struct UParticleSystem GetSmallBleedingEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetLargeBleedingEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetUrineParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UParticleSystem(ptr_addr);
	}
	struct FName GetUrineParticlesAttachPointName() {
		return memory.read<struct FName>(m_addr + 712);
	}
	struct FName GetUrineParticlesAttachPointSmallestName() {
		return memory.read<struct FName>(m_addr + 720);
	}
	struct FName GetUrineParticlesAttachPointBiggestName() {
		return memory.read<struct FName>(m_addr + 728);
	}
	struct FName GetUrineParticlesAttachPointFemaleName() {
		return memory.read<struct FName>(m_addr + 736);
	}
	struct FName GetUrineParticlesAttachPointMaleName() {
		return memory.read<struct FName>(m_addr + 744);
	}
	float GetDetectNearbyFoliageRadius() {
		return memory.read<float>(m_addr + 752);
	}
	float GetMinLocationDeltaToUpdateNearbyFoliage() {
		return memory.read<float>(m_addr + 756);
	}
	float GetMinSpeedToTriggerMovingThroughFoliageEffects() {
		return memory.read<float>(m_addr + 760);
	}
	float GetMinAngularSpeedToTriggerMovingThroughFoliageEffects() {
		return memory.read<float>(m_addr + 764);
	}
	float GetShouldAutomaticallyBeSeenInFoliageByAIDistance() {
		return memory.read<float>(m_addr + 768);
	}
	struct UAkAudioEvent GetOpenInventoryAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetCloseInventoryAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetOpenOceanAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetCharacterDetectionRadiusForIngameMusic() {
		return memory.read<float>(m_addr + 800);
	}
	float GetBulletFlybyDangerCooldown() {
		return memory.read<float>(m_addr + 804);
	}
	float GetHeadExplodeDamageThreshold() {
		return memory.read<float>(m_addr + 808);
	}
	float GetMeleeDangerCooldown() {
		return memory.read<float>(m_addr + 812);
	}
	float GetMeleeDangerRadius() {
		return memory.read<float>(m_addr + 816);
	}
	float GetMeleeDangerAngle() {
		return memory.read<float>(m_addr + 820);
	}
	float GetPostReviveStateDuration() {
		return memory.read<float>(m_addr + 824);
	}
	struct FGameplayTag GetHitReactTypeWhenStanding() {
		return memory.read<struct FGameplayTag>(m_addr + 828);
	}
	struct FGameplayTag GetHitReactTypeWhenStandingInCombatMode() {
		return memory.read<struct FGameplayTag>(m_addr + 836);
	}
	struct FGameplayTag GetHitReactTypeWhenStandingInCombatModeAndHoldingBlock() {
		return memory.read<struct FGameplayTag>(m_addr + 844);
	}
	struct FGameplayTag GetHitReactTypeWhenCrouching() {
		return memory.read<struct FGameplayTag>(m_addr + 852);
	}
	struct FGameplayTag GetHitReactTypeWhenProne() {
		return memory.read<struct FGameplayTag>(m_addr + 860);
	}
	struct FGameplayTag GetHitReactTypeWhenCaptured() {
		return memory.read<struct FGameplayTag>(m_addr + 868);
	}
	struct TMap<uint8_t , struct UHitReactLandingParams> GetHitReactLandingParamsMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct TMap<uint8_t , struct UHitReactLandingParams>(ptr_addr);
	}
	struct FGameplayTag GetMeleeAttackCapsulesAttachmentForItemInLHand() {
		return memory.read<struct FGameplayTag>(m_addr + 960);
	}
	struct FGameplayTag GetMeleeAttackCapsulesAttachmentForItemInRHand() {
		return memory.read<struct FGameplayTag>(m_addr + 968);
	}
	struct FPrisonerMeleeAttackTypes GetMeleeAttackTypes() {
		return memory.read<struct FPrisonerMeleeAttackTypes>(m_addr + 976);
	}
	float GetMeleeTargetMaxDistance() {
		return memory.read<float>(m_addr + 1112);
	}
	float GetMeleeTargetMaxHeightDifference() {
		return memory.read<float>(m_addr + 1116);
	}
	struct UCurveFloat GetMeleeTargetMaxConeHalfAngleVsDistanceToTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1120);
		return struct UCurveFloat(ptr_addr);
	}
	float GetTimeSpanAfterWhichMeleeAttacksBecomeInitial() {
		return memory.read<float>(m_addr + 1128);
	}
	struct TMap<uint8_t , float> GetMeleeHitRagdollImpulseByDamageMagnitudeType() {
		return memory.read<struct TMap<uint8_t , float>>(m_addr + 1136);
	}
	float GetDefaultMeleeHitRagdollImpulse() {
		return memory.read<float>(m_addr + 1216);
	}
	float GetThrowModeActivationDelay() {
		return memory.read<float>(m_addr + 1220);
	}
	struct FName GetThrowLaunchLocationSocketName() {
		return memory.read<struct FName>(m_addr + 1224);
	}
	struct UCurveFloat GetThrowingPathBrightnessFromTimeCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1232);
		return struct UCurveFloat(ptr_addr);
	}
	float GetIslandBoundsCheckInterval() {
		return memory.read<float>(m_addr + 1240);
	}
	struct UPhysicalSurfacesData GetPhysicalSurfacesData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1248);
		return struct UPhysicalSurfacesData(ptr_addr);
	}
	AWristwatch GetDeluxeWristwatchClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return AWristwatch(ptr_addr);
	}
	UWeaponScopeWidget GetScopeWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return UWeaponScopeWidget(ptr_addr);
	}
	APlaceableActorItems GetPlaceableActorItemsClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return APlaceableActorItems(ptr_addr);
	}
	APlaceableActorFortifications GetPlaceableActorFortificationsClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1280);
		return APlaceableActorFortifications(ptr_addr);
	}
	APlaceableActorBaseBuilding GetPlaceableActorBaseBuildingClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1288);
		return APlaceableActorBaseBuilding(ptr_addr);
	}
	APlaceableActorBaseUpgrade GetPlaceableActorBaseUpgradeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1296);
		return APlaceableActorBaseUpgrade(ptr_addr);
	}
	APlaceableActorGarden GetPlaceableActorGardenClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1304);
		return APlaceableActorGarden(ptr_addr);
	}
	APlaceableActorModularBaseBuilding GetPlaceableActorModularBaseBuildingClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1312);
		return APlaceableActorModularBaseBuilding(ptr_addr);
	}
	int32_t GetMaxPossiblePlacedBlueprints() {
		return memory.read<int32_t>(m_addr + 1320);
	}
	float GetOpenOceanRange() {
		return memory.read<float>(m_addr + 1324);
	}
	struct FGameplayTag GetFeetSlot() {
		return memory.read<struct FGameplayTag>(m_addr + 1328);
	}
	struct FGameplayTag GetHairSlot() {
		return memory.read<struct FGameplayTag>(m_addr + 1336);
	}
	struct FGameplayTag GetHeadSlot() {
		return memory.read<struct FGameplayTag>(m_addr + 1344);
	}
	struct FGameplayTag GetNeckSlot() {
		return memory.read<struct FGameplayTag>(m_addr + 1352);
	}
	struct FGameplayTag GetFacialHairSlot() {
		return memory.read<struct FGameplayTag>(m_addr + 1360);
	}
	struct FGameplayTag GetPenisSlot() {
		return memory.read<struct FGameplayTag>(m_addr + 1368);
	}
	struct FGameplayTag GetChipSlot() {
		return memory.read<struct FGameplayTag>(m_addr + 1376);
	}
	struct FGameplayTag GetLEyeSlot() {
		return memory.read<struct FGameplayTag>(m_addr + 1384);
	}
	struct FGameplayTag GetREyeSlot() {
		return memory.read<struct FGameplayTag>(m_addr + 1392);
	}
	struct FGameplayTag GetEyewearSlot() {
		return memory.read<struct FGameplayTag>(m_addr + 1400);
	}
	struct FGameplayTag GetHandsSlot() {
		return memory.read<struct FGameplayTag>(m_addr + 1408);
	}
	struct FGameplayTag GetMaskSlot() {
		return memory.read<struct FGameplayTag>(m_addr + 1416);
	}
	struct FGameplayTag GetCensorshipActiveTag() {
		return memory.read<struct FGameplayTag>(m_addr + 1424);
	}
	struct FGameplayTag GetPrisonerMountedTag() {
		return memory.read<struct FGameplayTag>(m_addr + 1432);
	}
	struct FGameplayTag GetHeadHiddenTag() {
		return memory.read<struct FGameplayTag>(m_addr + 1440);
	}
	struct FGameplayTag GetHeadExplodedTag() {
		return memory.read<struct FGameplayTag>(m_addr + 1448);
	}
	struct FGameplayTag GetShowGenitalsOverrideTag() {
		return memory.read<struct FGameplayTag>(m_addr + 1456);
	}
	UCharacterMesh GetBodyCharacterMeshClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1464);
		return UCharacterMesh(ptr_addr);
	}
	UCharacterMesh GetClothesCharacterMeshClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1472);
		return UCharacterMesh(ptr_addr);
	}
	UCharacterMesh GetCensorshipCharacterMeshClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1480);
		return UCharacterMesh(ptr_addr);
	}
	struct TArray<UCharacterMesh> GetShoesCharacterMeshClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1488);
		return struct TArray<UCharacterMesh>(ptr_addr);
	}
	struct TArray<UCharacterMesh> GetFaceCoveringCharacterMeshClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1504);
		return struct TArray<UCharacterMesh>(ptr_addr);
	}
	struct FGameplayTagContainer GetGearSlotsCausingUpperBodyNoise() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 1520);
	}
	struct TMap<uint8_t , float> GetLeavingTheIslandPenaltyTimes() {
		return memory.read<struct TMap<uint8_t , float>>(m_addr + 1552);
	}
	float GetGameEventOutOfBoundsDamage() {
		return memory.read<float>(m_addr + 1632);
	}
	struct UMaterialInstance GetItemPlacingMaterialAllowed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1640);
		return struct UMaterialInstance(ptr_addr);
	}
	struct UMaterialInstance GetItemPlacingMaterialDisallowed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1648);
		return struct UMaterialInstance(ptr_addr);
	}
	struct UMaterialInstance GetVehicleServiceMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1656);
		return struct UMaterialInstance(ptr_addr);
	}
	float GetIkInterpSpeed() {
		return memory.read<float>(m_addr + 1664);
	}
	struct UMaterialParameterCollection GetCommonParameterCollection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1672);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct FName GetWeaponSocketName() {
		return memory.read<struct FName>(m_addr + 1680);
	}
	struct FName GetWeaponHolsterSocketName() {
		return memory.read<struct FName>(m_addr + 1688);
	}
	struct UAnimMontage GetSwapWeapons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1696);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSwapItemsThrowingItemToWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1704);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSwapItemsWeaponToThrowingItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1712);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSwapItemsNotWeaponToNotWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1720);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSwapItemsWeaponToWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1728);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSwapItemsNotWeaponToWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1736);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSwapItemsWeaponToNotWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1744);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetEquipRifleStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1752);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetUnequipRifleStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1760);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetEquipHandgunStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1768);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetUnequipHadgunStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1776);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetUrinateMaleMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1784);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetUrinateFemaleMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1792);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetUrinateMaleForcedMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1800);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetUrinateFemaleForcedMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1808);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetDefecateMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1816);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetDefecateForcedMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1824);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetVomitMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1832);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetVomitForcedMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1840);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSearchObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1848);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSearchObjectWhileItemInHands() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1856);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSearchObjectWhileWeaponInHands() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1864);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSearchObjectWhenSwimming() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1872);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSearchPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1880);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPatchWoundsStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1888);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPatchWoundsCrouching() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1896);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPatchWoundsProne() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1904);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPatchWoundsStandingEnd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1912);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPatchWoundsCrouchingEnd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1920);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPatchWoundsProneEnd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1928);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetEatGeneric() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1936);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetEatCan() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1944);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetDrinkFromBottleStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1952);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetDrinkFromBottleCrouching() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1960);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetDrinkInteraction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1968);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetDefaultLongThrowMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1976);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetDefaultLongThrowLoopMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1984);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetDefaultShortThrowMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1992);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetDefaultThrowbackGrenadeMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2000);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetChopTreeStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2008);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetChopTreeStandingEnd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2016);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetChopLogStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2024);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetChopLogStandingEnd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2032);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBreakStone() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2040);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBreakStoneEnd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2048);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetCraftStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2056);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetCraftCrouching() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2064);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetCraftProne() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2072);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetUncraftStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2080);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetUncraftCrouching() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2088);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetUncraftProne() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2096);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetCheckTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2104);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetCheckTimeFemale() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2112);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetCheckTimeWhileItemInHands() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2120);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetCheckTimeWhileItemInHandsFemale() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2128);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetCheckTimeWhileWeaponInHands() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2136);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetCheckTimeWhileWeaponInHandsFemale() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2144);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetCheckTemperature() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2152);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetForceUnlockStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2160);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetForceUnlockStandingEnd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2168);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetForceUnlockStandingStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2176);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSpillMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2184);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetStompOutFireMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2192);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBlowAirIntoFireMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2200);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBlowAirIntoLowFireMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2208);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureShowFinger() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2216);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureStandSurrender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2224);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureWaveHi() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2232);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureYouAreDead() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2240);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureFY() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2248);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGesturePoint() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2256);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureHeart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2264);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureBallpalm() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2272);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureFacepalm() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2280);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureFingerGun() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2288);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureLaughing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2296);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureSmellWave() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2304);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureSquat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2312);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureCharge() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureChargeCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2328);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureFreeze() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2336);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureFreezeCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2344);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureGetDown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureGetDownCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2360);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureGetUp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2368);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureGetUpCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2376);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureHalt() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2384);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureHaltCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2392);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureHurryUp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2400);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureHurryUpCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2408);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGesturePointMe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2416);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGesturePointMeCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2424);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGesturePointYou() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2432);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGesturePointYouCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2440);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureRally() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2448);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureRallyCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2456);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureThumbsUp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2464);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureThumbsUpCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2472);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureThumbsDown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2480);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureThumbsDownCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2488);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureUnderstandNot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2496);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureUnderstandNotCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2504);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureUnderstandYes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2512);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetGestureUnderstandYesCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2520);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetCommitSuicideStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2528);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetCommitSuicideCrouching() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2536);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetCommitSuicideRareStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2544);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetLockpickRegular() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2552);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetWhistleMontageMale() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2560);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetWhistleMontageFemale() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2568);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetTuneBowMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2576);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetRepairVehicleMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2584);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetWashClothMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2592);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBuryStandingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2600);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBuryRestStandingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2608);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBuryResumeStandingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2616);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBuryCrouchingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2624);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBuryRestCrouchingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2632);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSitOnGroundStandingStartMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2640);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSitOnGroundStandingEndMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2648);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSitOnGroundCrouchingStartMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2656);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSitOnGroundCrouchingEndMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2664);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetLayOnGroundStandingStartMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2672);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetLayOnGroundStandingEndMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2680);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetLayOnGroundCrouchingStartMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2688);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetLayOnGroundCrouchingEndMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2696);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimSequenceBase GetSittingOnGroundAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2704);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetLyingOnGroundAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2712);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimMontage GetLightFlareMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2720);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetArmTrapMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2728);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFishingEnterMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2736);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFishingLeaveMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2744);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFishingCastMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2752);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFishingLongCastEndMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2760);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFishingShortCastEndMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2768);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFishingPullStartMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2776);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFishingPullEndMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2784);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFishingFishCaughtMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2792);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFishingKeepFishMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2800);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFishingDiscardFishMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2808);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFishingWireBreakMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2816);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBasicDance1Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2824);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBasicDance2Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2832);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBasicDance3Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2840);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBasicDance4Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2848);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBasicDance5Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2856);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetAdvanceDance1Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2864);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetAdvanceDance2Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2872);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetAdvanceDance3Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2880);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetAdvanceDance4Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2888);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetAdvanceDance5Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2896);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetAdvanceDance6Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2904);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetAdvanceDance7Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2912);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetInjectSelfMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2920);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetInjectOtherMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2928);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetHalloweenGesture1Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2936);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetHalloweenGesture2Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2944);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetHalloweenGesture3Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2952);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetHalloweenGesture4Montage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2960);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetRemoveWeedMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2968);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetRemoveWeedWithHoeMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2976);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetApplyPesticideMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2984);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetAddFertilizerMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2992);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPlantSeedMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3000);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetRemovePlantMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3008);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetDestroyGardenMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3016);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetWashEyesMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3024);
		return struct UAnimMontage(ptr_addr);
	}
	struct FPrisonerTurnMontageDescription GetTurnMontageDescription() {
		return memory.read<struct FPrisonerTurnMontageDescription>(m_addr + 3032);
	}
	float GetMinThrowItemSpeed() {
		return memory.read<float>(m_addr + 3080);
	}
	float GetMaxThrowItemSpeed() {
		return memory.read<float>(m_addr + 3084);
	}
	float GetMinScreenCenterDotOpacityDecreaseDelay() {
		return memory.read<float>(m_addr + 3088);
	}
	float GetMaxScreenCenterDotOpacityDecreaseDelay() {
		return memory.read<float>(m_addr + 3092);
	}
	float GetScreenCenterDotOpacityDecrease() {
		return memory.read<float>(m_addr + 3096);
	}
	float GetScreenCenterDotOpacityIncrease() {
		return memory.read<float>(m_addr + 3100);
	}
	float GetShortThrowReductionMultiplier() {
		return memory.read<float>(m_addr + 3104);
	}
	float GetThrowingObstacleCheckOffset() {
		return memory.read<float>(m_addr + 3108);
	}
	float GetThrowingObstacleOffset() {
		return memory.read<float>(m_addr + 3112);
	}
	struct TMap<uint8_t , struct FThrowingAnimationSet> GetThrowingAnimationSets() {
		return memory.read<struct TMap<uint8_t , struct FThrowingAnimationSet>>(m_addr + 3120);
	}
	float GetRespawnTime() {
		return memory.read<float>(m_addr + 3200);
	}
	struct UCurveFloat GetFocusModeZoomEffectCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3208);
		return struct UCurveFloat(ptr_addr);
	}
	float GetFocusModeZoomSpeed() {
		return memory.read<float>(m_addr + 3216);
	}
	struct TArray<struct UCircularMenuSegmentInfo> GetSelfInteractionSegmentInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3224);
		return struct TArray<struct UCircularMenuSegmentInfo>(ptr_addr);
	}
	struct UCircularMenuSegmentIcons GetSelfInteractionVoicelineIcons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3240);
		return struct UCircularMenuSegmentIcons(ptr_addr);
	}
	struct TArray<struct UCharacterVoiceline> GetCharacterVoicelines() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3248);
		return struct TArray<struct UCharacterVoiceline>(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetPrisonWalletComponentClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 3264);
	}
	UPrisonerMusicPlayerComponent GetMusicPlayerComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3304);
		return UPrisonerMusicPlayerComponent(ptr_addr);
	}
	float GetWetnessReachableFromSkyChecksInterval() {
		return memory.read<float>(m_addr + 3312);
	}
	float GetDedicatedServerHandleFootstepInterval() {
		return memory.read<float>(m_addr + 3316);
	}
	float GetPlayInstrumentEventNetworkDelay() {
		return memory.read<float>(m_addr + 3320);
	}
	float GetPlayInstrumentExitStateDuration() {
		return memory.read<float>(m_addr + 3324);
	}
	UPrisonerBodyCompositionMorphsComputer GetBodyCompositionMorphsComputer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3328);
		return UPrisonerBodyCompositionMorphsComputer(ptr_addr);
	}
	struct FVector GetPenisLocationLean() {
		return memory.read<struct FVector>(m_addr + 3336);
	}
	struct FVector GetPenisLocationFat() {
		return memory.read<struct FVector>(m_addr + 3348);
	}
	struct FVector GetPenisHandleLocationLean() {
		return memory.read<struct FVector>(m_addr + 3360);
	}
	struct FVector GetPenisHandleLocationFat() {
		return memory.read<struct FVector>(m_addr + 3372);
	}
	float GetPenisMinSizeHandleZ() {
		return memory.read<float>(m_addr + 3384);
	}
	float GetPenisMaxSizeHandleZ() {
		return memory.read<float>(m_addr + 3388);
	}
	float GetPenisGrowOverTimeThreshold() {
		return memory.read<float>(m_addr + 3392);
	}
	float GetUnmountSpeedThresholdForRagdoll() {
		return memory.read<float>(m_addr + 3396);
	}
	float GetMountTiltAngleForRagdoll() {
		return memory.read<float>(m_addr + 3400);
	}
	float GetRareSuicideAnimationChance() {
		return memory.read<float>(m_addr + 3404);
	}
	struct UCurveFloat GetFaceAgingIntensityCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3408);
		return struct UCurveFloat(ptr_addr);
	}
	float GetHairGrowthTotalTime() {
		return memory.read<float>(m_addr + 3416);
	}
	float GetFacialHairGrowthTotalTime() {
		return memory.read<float>(m_addr + 3420);
	}
	float GetHairUpdateRate() {
		return memory.read<float>(m_addr + 3424);
	}
	struct UCurveFloat GetShortHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3432);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMediumHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3440);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMediumHairPDOCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3448);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMediumHairTopOpacityCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3456);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetLongHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3464);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetLongHairPDOCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3472);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetLongHairTopOpacityCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3480);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetAfroHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3488);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetShortFacialHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3496);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMediumFacialHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3504);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMediumFacialHairPDOCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3512);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetMediumFacialHairTopOpacityCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3520);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetLongFacialHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3528);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetLongFacialHairPDOCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3536);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetLongFacialHairTopOpacityCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3544);
		return struct UCurveFloat(ptr_addr);
	}
	float GetMaxRestingAngle() {
		return memory.read<float>(m_addr + 3552);
	}
	float GetGenericAcceptanceRadius() {
		return memory.read<float>(m_addr + 3556);
	}
	float GetDistanceWhereRotationStarts() {
		return memory.read<float>(m_addr + 3560);
	}
	UNotificationDescription GetAutoTriggeredVomitingNotification() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3568);
		return UNotificationDescription(ptr_addr);
	}
	UNotificationDescription GetAutoTriggeredUrinationNotification() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3576);
		return UNotificationDescription(ptr_addr);
	}
	UNotificationDescription GetAutoTriggeredDefecationNotification() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3584);
		return UNotificationDescription(ptr_addr);
	}
	UPrisonerUIDataImpl GetUIDataClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3592);
		return UPrisonerUIDataImpl(ptr_addr);
	}
	struct UAkAudioEvent GetDefecateNakedForcedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3600);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetDefecateClothedForcedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3608);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetDefecateNakedForcedDiarrheaAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3616);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetDefecateClothedForcedDiarrheaAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3624);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetUrinateForcedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3632);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStartBlowingAirAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3640);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopBlowingAirAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3648);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetPhoenixTearsEffectSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3656);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UParticleSystem GetDiarrheaParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3664);
		return struct UParticleSystem(ptr_addr);
	}
	AActor GetFecesClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3672);
		return AActor(ptr_addr);
	}
	struct FName GetFecesSocketName() {
		return memory.read<struct FName>(m_addr + 3680);
	}
	struct FPrisonerCommonData_ResponseIdles GetResponseIdles() {
		return memory.read<struct FPrisonerCommonData_ResponseIdles>(m_addr + 3688);
	}
	struct FBasicNotificationDescriptionData GetParachutingMoveInputNotificationData() {
		return memory.read<struct FBasicNotificationDescriptionData>(m_addr + 3696);
	}
	struct FBasicNotificationDescriptionData GetParachutingChangePoseInputNotificationData() {
		return memory.read<struct FBasicNotificationDescriptionData>(m_addr + 3752);
	}
	struct FBasicNotificationDescriptionData GetParachutingOpenParachuteInputNotificationData() {
		return memory.read<struct FBasicNotificationDescriptionData>(m_addr + 3808);
	}
	struct UAkAudioEvent GetSkydivingStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3864);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetSkydivingStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3872);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetIntroCinematicScreamAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3880);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetMaxSpeedWhileMountedToBeRelevantForHunting() {
		return memory.read<float>(m_addr + 3888);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameResourceType_Money
{
public:
	UGameResourceType_Money(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDestroyGarden
{
public:
	UPrisonerActionDestroyGarden(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemActionDescriptionLoadMagazine
{
public:
	UItemActionDescriptionLoadMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetRequestedAmmoCount() {
		return memory.read<int32_t>(m_addr + 48);
	}
	struct AAmmunitionItem GetammoItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct AAmmunitionItem(ptr_addr);
	}
	float GetPlayRate() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCharacterVoiceline
{
public:
	UCharacterVoiceline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetName() {
		return memory.read<struct FText>(m_addr + 48);
	}
	struct FGameplayTag GetCharacterTypeTag() {
		return memory.read<struct FGameplayTag>(m_addr + 72);
	}
	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachmentTag
{
public:
	UVehicleAttachmentTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UVehicleAttachment GetAttachmentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UVehicleAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZWorldBoundsVolume
{
public:
	AConZWorldBoundsVolume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemAnimInstance
{
public:
	UItemAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_owningPrisonerStance() {
		return memory.read<uint8_t >(m_addr + 704);
	}
	bool Get_isOwningPrisonerInFirstPersonView() {
		return memory.read<bool>(m_addr + 705);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZCustomInteractionMultilineEditableText
{
public:
	UConZCustomInteractionMultilineEditableText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAudioStatics
{
public:
	UAudioStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemWithTextState
{
public:
	UItemWithTextState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetOwningUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 256);
	}
	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponAttachmentMagazineAnimInstance
{
public:
	UWeaponAttachmentMagazineAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_ammoCount() {
		return memory.read<int32_t>(m_addr + 720);
	}
	bool Get_hasAmmo() {
		return memory.read<bool>(m_addr + 724);
	}
	bool Get_isAttachedToWeapon() {
		return memory.read<bool>(m_addr + 725);
	}
	uint8_t  Get_ammoCountType() {
		return memory.read<uint8_t >(m_addr + 726);
	}
	bool GetShouldPlayIdleEmpty() {
		return memory.read<bool>(m_addr + 727);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMissionTabWidget
{
public:
	UMissionTabWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_tabNameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_backgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct USizeBox Get_sizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct USizeBox(ptr_addr);
	}
	struct FText Get_tabName() {
		return memory.read<struct FText>(m_addr + 656);
	}
	float Get_activeTabHeight() {
		return memory.read<float>(m_addr + 680);
	}
	float Get_inactiveTabHeight() {
		return memory.read<float>(m_addr + 684);
	}
	float Get_activeFontSize() {
		return memory.read<float>(m_addr + 688);
	}
	float Get_inactiveFontSize() {
		return memory.read<float>(m_addr + 692);
	}
	struct UTexture2D Get_activeBackgroundTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_inactiveBackgroundTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTexture2D(ptr_addr);
	}
	struct FLinearColor Get_activeFontColor() {
		return memory.read<struct FLinearColor>(m_addr + 712);
	}
	struct FLinearColor Get_inactiveFontColor() {
		return memory.read<struct FLinearColor>(m_addr + 728);
	}
	struct UAkAudioEvent Get_menuButtonClickAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDoorUnlockItemComponent
{
public:
	UDoorUnlockItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_unlockDataType() {
		return memory.read<uint8_t >(m_addr + 216);
	}
	UDoorUnlockData Get_doorUnlockData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return UDoorUnlockData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAutoCrossbowMagazineAnimInstance
{
public:
	UAutoCrossbowMagazineAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_followerBoneLocationOffset() {
		return memory.read<float>(m_addr + 736);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionApplyPesticideDescription
{
public:
	UPrisonerActionApplyPesticideDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVirtualizedItemUserData
{
public:
	UVirtualizedItemUserData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ATearGasGrenadeItem
{
public:
	ATearGasGrenadeItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_gasInfluenceMaxRadius() {
		return memory.read<float>(m_addr + 2568);
	}
	float Get_gasInfluenceFullRadiusTime() {
		return memory.read<float>(m_addr + 2572);
	}
	float Get_gasInfluenceDurationTime() {
		return memory.read<float>(m_addr + 2576);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomBorder
{
public:
	UCustomBorder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetLeft() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage GetRight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UImage GetTop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UImage GetBottom() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	float GetBorderThickness() {
		return memory.read<float>(m_addr + 640);
	}
	struct FLinearColor GetBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 644);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZNotification
{
public:
	UConZNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerShotsFiredTrackerComponent
{
public:
	UPrisonerShotsFiredTrackerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_repNumShotsFired() {
		return memory.read<int32_t>(m_addr + 180);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCraftingComponentWidget
{
public:
	UCraftingComponentWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemClassWidget GetItemWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UItemClassWidget(ptr_addr);
	}
	struct UTextBlock GetCountText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetOrderNumberText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetTypeImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UTexture2D GetComponent_Main() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetComponent_Tool() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetComponent_Bonus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTexture2D(ptr_addr);
	}
	UUserWidget Get_craftingComponentWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBombDefusalMinigameConfiguration
{
public:
	UBombDefusalMinigameConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemUserWidget
{
public:
	UItemUserWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetOnClicked() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 640);
	}
	struct UUserWidget Get_uiBorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UUserWidget(ptr_addr);
	}
	bool Get_isSelected() {
		return memory.read<bool>(m_addr + 664);
	}
	bool Get_isHovered() {
		return memory.read<bool>(m_addr + 665);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTraderService
{
public:
	UTraderService(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D Get_storeIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAvailabilityGrid
{
public:
	UAvailabilityGrid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag Get_waterImageAssetTag() {
		return memory.read<struct FGameplayTag>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDexteritySkill
{
public:
	UDexteritySkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AHalloweenSacrificePit
{
public:
	AHalloweenSacrificePit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t Get_deactivationTime() {
		return memory.read<int64_t>(m_addr + 544);
	}
	struct FVector Get_sacrificePitCenter() {
		return memory.read<struct FVector>(m_addr + 552);
	}
	float Get_sacrificePitRadius() {
		return memory.read<float>(m_addr + 564);
	}
	struct TArray<struct FHalloweenSacrificePitRequiredItemVariants> Get_requiredItemsInSacrificePit() {
		return memory.read<struct TArray<struct FHalloweenSacrificePitRequiredItemVariants>>(m_addr + 568);
	}
	float Get_giftSpawningTimeWindowDuration() {
		return memory.read<float>(m_addr + 584);
	}
	struct TSoftClassPtr<UObject> Get_giftItem() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 592);
	}
	struct FTransform Get_giftItemSpawnTransform() {
		return memory.read<struct FTransform>(m_addr + 640);
	}
	float Get_giftItemAlreadySpawnedCheckRadius() {
		return memory.read<float>(m_addr + 688);
	}
	struct TSoftObjectPtr<UAkAudioEvent> Get_giftSpawningPreludeAudioEvent() {
		return memory.read<struct TSoftObjectPtr<UAkAudioEvent>>(m_addr + 696);
	}
	struct TSoftObjectPtr<UParticleSystem> Get_giftSpawningPreludeParticleSystem() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 736);
	}
	struct FTransform Get_giftSpawningPreludeParticlesTransform() {
		return memory.read<struct FTransform>(m_addr + 784);
	}
	struct TSoftObjectPtr<UAkAudioEvent> Get_giftSpawningFinishedAudioEvent() {
		return memory.read<struct TSoftObjectPtr<UAkAudioEvent>>(m_addr + 832);
	}
	struct TSoftObjectPtr<UParticleSystem> Get_giftSpawningFinishedParticleSystem() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 872);
	}
	struct FTransform Get_giftSpawningFinishedParticlesTransform() {
		return memory.read<struct FTransform>(m_addr + 912);
	}
	struct ADecalActor Get_demonicSigilDecal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct ADecalActor(ptr_addr);
	}
	struct FName Get_demonicSigilDecalEmissiveColorParameterName() {
		return memory.read<struct FName>(m_addr + 968);
	}
	struct FRuntimeFloatCurve Get_demonicSigilDecalEmissiveColorMultiplierVsTime() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 976);
	}
	int32_t Get_numZombiesToSpawn() {
		return memory.read<int32_t>(m_addr + 1112);
	}
	struct TArray<struct TSoftClassPtr<UObject>> Get_possibleZombies() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 1120);
	}
	struct TArray<struct FTransform> Get_zombieSpawnTransforms() {
		return memory.read<struct TArray<struct FTransform>>(m_addr + 1136);
	}
	float Get_zombieSpawnAreaSlack() {
		return memory.read<float>(m_addr + 1152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerDebugUI_BodyConditionEntryWidget
{
public:
	UPrisonerDebugUI_BodyConditionEntryWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_nameTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleWithEngineBlock
{
public:
	UVehicleWithEngineBlock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTraderPersonalityDataAsset
{
public:
	UTraderPersonalityDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGuid GetTraderPersistentId() {
		return memory.read<struct FGuid>(m_addr + 48);
	}
	struct FString GetHumanReadableTraderName() {
		return memory.read<struct FString>(m_addr + 64);
	}
	uint8_t  GetTraderType() {
		return memory.read<uint8_t >(m_addr + 80);
	}
	struct TArray<struct FTraderMarkerTradeableOverrideStruct> GetPurchasableTradeablesClassesOverride() {
		return memory.read<struct TArray<struct FTraderMarkerTradeableOverrideStruct>>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBuildingCraftingPanelBase
{
public:
	UBuildingCraftingPanelBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCraftingRecipeDescriptionPanel Get_craftingRecipeDescriptionPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UCraftingRecipeDescriptionPanel(ptr_addr);
	}
	struct UButton Get_craftButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UButton(ptr_addr);
	}
	int32_t Get_craftingWidgetsPerRow() {
		return memory.read<int32_t>(m_addr + 648);
	}
	struct UAkAudioEvent Get_craftClickSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponActionClearMalfunctionSequence
{
public:
	UWeaponActionClearMalfunctionSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSortIndex() {
		return memory.read<int32_t>(m_addr + 40);
	}
	uint8_t  GetMalfunctionType() {
		return memory.read<uint8_t >(m_addr + 44);
	}
	struct FText GetDescription() {
		return memory.read<struct FText>(m_addr + 48);
	}
	struct UCircularMenuSegmentWeaponMalfunctionInfo GetCircularMenuSegmentInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UCircularMenuSegmentWeaponMalfunctionInfo(ptr_addr);
	}
	struct TMap<uint8_t , struct FClearMalfunctionData> GetMalfunctions() {
		return memory.read<struct TMap<uint8_t , struct FClearMalfunctionData>>(m_addr + 80);
	}
	bool GetCanBeInterrupted() {
		return memory.read<bool>(m_addr + 160);
	}
	bool GetAllowBeginFiringSequence() {
		return memory.read<bool>(m_addr + 161);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_BloodshotEyes
{
public:
	UPrisonerBodySymptomCause_BloodshotEyes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleHandlingSkill
{
public:
	UVehicleHandlingSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCraftingCondition
{
public:
	UCraftingCondition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAwarenessSkill
{
public:
	UAwarenessSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStaminaConsumption() {
		return memory.read<float>(m_addr + 192);
	}
	struct UAkAudioEvent GetEnterFocusModeAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetLeaveFocusModeAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_updateTime() {
		return memory.read<float>(m_addr + 216);
	}
	float Get_serverUpdateTime() {
		return memory.read<float>(m_addr + 220);
	}
	float Get_basicWatchingDetectionChance() {
		return memory.read<float>(m_addr + 224);
	}
	float Get_mediumWatchingDetectionChance() {
		return memory.read<float>(m_addr + 228);
	}
	float Get_advancedWatchingDetectionChance() {
		return memory.read<float>(m_addr + 232);
	}
	float Get_aboveAdvancedWatchingDetectionChance() {
		return memory.read<float>(m_addr + 236);
	}
	float Get_noSkillItemDetectionTime() {
		return memory.read<float>(m_addr + 240);
	}
	float Get_basicItemDetectionTime() {
		return memory.read<float>(m_addr + 244);
	}
	float Get_mediumItemDetectionTime() {
		return memory.read<float>(m_addr + 248);
	}
	float Get_advancedItemDetectionTime() {
		return memory.read<float>(m_addr + 252);
	}
	float Get_aboveAdvancedItemDetectionTime() {
		return memory.read<float>(m_addr + 256);
	}
	float Get_noSkillItemDetectionRadius() {
		return memory.read<float>(m_addr + 260);
	}
	float Get_basicItemDetectionRadius() {
		return memory.read<float>(m_addr + 264);
	}
	float Get_mediumItemDetectionRadius() {
		return memory.read<float>(m_addr + 268);
	}
	float Get_advancedItemDetectionRadius() {
		return memory.read<float>(m_addr + 272);
	}
	float Get_aboveAdvancedItemDetectionRadius() {
		return memory.read<float>(m_addr + 276);
	}
	float Get_noSkillItemDetectionChance() {
		return memory.read<float>(m_addr + 280);
	}
	float Get_basicItemDetectionChance() {
		return memory.read<float>(m_addr + 284);
	}
	float Get_mediumItemDetectionChance() {
		return memory.read<float>(m_addr + 288);
	}
	float Get_advancedItemDetectionChance() {
		return memory.read<float>(m_addr + 292);
	}
	float Get_aboveAdvancedItemDetectionChance() {
		return memory.read<float>(m_addr + 296);
	}
	float Get_noSkillItemHighlightByDayRadius() {
		return memory.read<float>(m_addr + 300);
	}
	float Get_basicItemHighlightByDayRadius() {
		return memory.read<float>(m_addr + 304);
	}
	float Get_mediumItemHighlightByDayRadius() {
		return memory.read<float>(m_addr + 308);
	}
	float Get_advancedItemHighlightByDayRadius() {
		return memory.read<float>(m_addr + 312);
	}
	float Get_aboveAdvancedItemHighlightByDayRadius() {
		return memory.read<float>(m_addr + 316);
	}
	float Get_noSkillItemHighlightByNightRadius() {
		return memory.read<float>(m_addr + 320);
	}
	float Get_basicItemHighlightByNightRadius() {
		return memory.read<float>(m_addr + 324);
	}
	float Get_mediumItemHighlightByNightRadius() {
		return memory.read<float>(m_addr + 328);
	}
	float Get_advancedItemHighlightByNightRadius() {
		return memory.read<float>(m_addr + 332);
	}
	float Get_aboveAdvancedItemHighlightByNightRadius() {
		return memory.read<float>(m_addr + 336);
	}
	float Get_noSkillWatchingDetectionRadius() {
		return memory.read<float>(m_addr + 340);
	}
	float Get_basicWatchingDetectionRadius() {
		return memory.read<float>(m_addr + 344);
	}
	float Get_mediumWatchingDetectionRadius() {
		return memory.read<float>(m_addr + 348);
	}
	float Get_advancedWatchingDetectionRadius() {
		return memory.read<float>(m_addr + 352);
	}
	float Get_aboveAdvancedWatchingDetectionRadius() {
		return memory.read<float>(m_addr + 356);
	}
	float Get_characterDetectionAngle() {
		return memory.read<float>(m_addr + 360);
	}
	float Get_characterDetectionTime() {
		return memory.read<float>(m_addr + 364);
	}
	float Get_characterDetectionRange() {
		return memory.read<float>(m_addr + 368);
	}
	float Get_characterDetectionPeriodicRangeIncrement() {
		return memory.read<float>(m_addr + 372);
	}
	float Get_noSkillHiddenCharacterDetectionRange() {
		return memory.read<float>(m_addr + 376);
	}
	float Get_basicHiddenCharacterDetectionRange() {
		return memory.read<float>(m_addr + 380);
	}
	float Get_mediumHiddenCharacterDetectionRange() {
		return memory.read<float>(m_addr + 384);
	}
	float Get_advancedHiddenCharacterDetectionRange() {
		return memory.read<float>(m_addr + 388);
	}
	float Get_aboveAdvancedHiddenCharacterDetectionRange() {
		return memory.read<float>(m_addr + 392);
	}
	float Get_noSkillHotSpotHiddenCharacterDetectionRange() {
		return memory.read<float>(m_addr + 396);
	}
	float Get_basicHotSpotHiddenCharacterDetectionRange() {
		return memory.read<float>(m_addr + 400);
	}
	float Get_mediumHotSpotHiddenCharacterDetectionRange() {
		return memory.read<float>(m_addr + 404);
	}
	float Get_advancedHotSpotHiddenCharacterDetectionRange() {
		return memory.read<float>(m_addr + 408);
	}
	float Get_aboveAdvancedHotSpotHiddenCharacterDetectionRange() {
		return memory.read<float>(m_addr + 412);
	}
	float Get_noSkillSoundDetectionRange() {
		return memory.read<float>(m_addr + 416);
	}
	float Get_basicSoundDetectionRange() {
		return memory.read<float>(m_addr + 420);
	}
	float Get_mediumSoundDetectionRange() {
		return memory.read<float>(m_addr + 424);
	}
	float Get_advancedSoundDetectionRange() {
		return memory.read<float>(m_addr + 428);
	}
	float Get_aboveAdvancedSoundDetectionRange() {
		return memory.read<float>(m_addr + 432);
	}
	float Get_notMovingFocusRangeMultiplier() {
		return memory.read<float>(m_addr + 436);
	}
	float Get_slowMovingFocusRangeMultiplier() {
		return memory.read<float>(m_addr + 440);
	}
	float Get_mediumMovingFocusRangeMultiplier() {
		return memory.read<float>(m_addr + 444);
	}
	float Get_fastMovingFocusRangeMultiplier() {
		return memory.read<float>(m_addr + 448);
	}
	float Get_noSkillFocusModeActivationTime() {
		return memory.read<float>(m_addr + 452);
	}
	float Get_basicFocusModeActivationTime() {
		return memory.read<float>(m_addr + 456);
	}
	float Get_mediumFocusModeActivationTime() {
		return memory.read<float>(m_addr + 460);
	}
	float Get_advancedFocusModeActivationTime() {
		return memory.read<float>(m_addr + 464);
	}
	float Get_aboveAdvancedFocusModeActivationTime() {
		return memory.read<float>(m_addr + 468);
	}
	float Get_trackDetectionRangePerSkillLevel[5]() {
		return memory.read<float>(m_addr + 472);
	}
	float Get_noSkillTrapDetectionRange() {
		return memory.read<float>(m_addr + 492);
	}
	float Get_basicTrapDetectionRange() {
		return memory.read<float>(m_addr + 496);
	}
	float Get_mediumTrapDetectionRange() {
		return memory.read<float>(m_addr + 500);
	}
	float Get_advancedTrapDetectionRange() {
		return memory.read<float>(m_addr + 504);
	}
	float Get_aboveAdvancedTrapDetectionRange() {
		return memory.read<float>(m_addr + 508);
	}
	float Get_noSkillFlashFadeOutDurationMultiplier() {
		return memory.read<float>(m_addr + 512);
	}
	float Get_basicFlashFadeOutDurationMultiplier() {
		return memory.read<float>(m_addr + 516);
	}
	float Get_mediumFlashFadeOutDurationMultiplier() {
		return memory.read<float>(m_addr + 520);
	}
	float Get_advancedFlashFadeOutDurationMultiplier() {
		return memory.read<float>(m_addr + 524);
	}
	float Get_aboveAdvancedFlashFadeOutDurationMultiplier() {
		return memory.read<float>(m_addr + 528);
	}
	float Get_noSkillContainerItemSpawnProbabilityModifier() {
		return memory.read<float>(m_addr + 532);
	}
	float Get_basicContainerItemSpawnProbabilityModifier() {
		return memory.read<float>(m_addr + 536);
	}
	float Get_mediumContainerItemSpawnProbabilityModifier() {
		return memory.read<float>(m_addr + 540);
	}
	float Get_advancedContainerItemSpawnProbabilityModifier() {
		return memory.read<float>(m_addr + 544);
	}
	float Get_aboveAdvancedContainerItemSpawnProbabilityModifier() {
		return memory.read<float>(m_addr + 548);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleEnginePowertrainComponent
{
public:
	UVehicleEnginePowertrainComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCriminalRecordText
{
public:
	UCriminalRecordText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBorder Get_mainBorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UBorder(ptr_addr);
	}
	struct UTextBlock Get_textTitle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_textValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	bool Get_hasLeftBorder() {
		return memory.read<bool>(m_addr + 632);
	}
	struct FSlateBrush Get_leftAndBottomBorder() {
		return memory.read<struct FSlateBrush>(m_addr + 640);
	}
	struct FSlateBrush Get_bottomBorder() {
		return memory.read<struct FSlateBrush>(m_addr + 776);
	}
	struct FText Get_title() {
		return memory.read<struct FText>(m_addr + 912);
	}
	int32_t Get_titleFontSize() {
		return memory.read<int32_t>(m_addr + 936);
	}
	struct FMargin Get_titlePadding() {
		return memory.read<struct FMargin>(m_addr + 940);
	}
	struct FText Get_value() {
		return memory.read<struct FText>(m_addr + 960);
	}
	int32_t Get_valueFontSize() {
		return memory.read<int32_t>(m_addr + 984);
	}
	struct FMargin Get_valuePadding() {
		return memory.read<struct FMargin>(m_addr + 988);
	}
	char EHorizontalAlignment Get_horizontalAlignment() {
		return memory.read<char EHorizontalAlignment>(m_addr + 1004);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFoliageInstancedTree
{
public:
	UFoliageInstancedTree(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABarberShop
{
public:
	ABarberShop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UCharacterMesh> Get_characterMeshesToAddOntoPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct TArray<struct UCharacterMesh>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBadAdjustableSeparator
{
public:
	UBadAdjustableSeparator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USizeBox GetUpperSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct USizeBox(ptr_addr);
	}
	float GetHeightOverride() {
		return memory.read<float>(m_addr + 616);
	}
	bool GetTradingRelated() {
		return memory.read<bool>(m_addr + 620);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCheckWeaponAmmoDescription
{
public:
	UPrisonerActionCheckWeaponAmmoDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankAccountRegistryRequest
{
public:
	UBankAccountRegistryRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UQuickAccessBarWidget
{
public:
	UQuickAccessBarWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UQuickAccessItemWidget> Get_quickAccessItemContainers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct TArray<struct UQuickAccessItemWidget>(ptr_addr);
	}
	struct UHorizontalBox Get_horizontalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UQuickAccessItemWidget GetUI_QuickAccessItemWidget_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UQuickAccessItemWidget(ptr_addr);
	}
	struct UQuickAccessItemWidget GetUI_QuickAccessItemWidget_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UQuickAccessItemWidget(ptr_addr);
	}
	struct UQuickAccessItemWidget GetUI_QuickAccessItemWidget_4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UQuickAccessItemWidget(ptr_addr);
	}
	struct UQuickAccessItemWidget GetUI_QuickAccessItemWidget_5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UQuickAccessItemWidget(ptr_addr);
	}
	struct UQuickAccessItemWidget GetUI_QuickAccessItemWidget_6() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UQuickAccessItemWidget(ptr_addr);
	}
	struct UQuickAccessItemWidget GetUI_QuickAccessItemWidget_7() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UQuickAccessItemWidget(ptr_addr);
	}
	struct UQuickAccessItemWidget GetUI_QuickAccessItemWidget_8() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UQuickAccessItemWidget(ptr_addr);
	}
	struct UQuickAccessItemWidget GetUI_QuickAccessItemWidget_9() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UQuickAccessItemWidget(ptr_addr);
	}
	struct UQuickAccessItemWidget GetUI_QuickAccessItemWidget_10() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UQuickAccessItemWidget(ptr_addr);
	}
	struct UQuickAccessItemWidget GetUI_QuickAccessItemWidget_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UQuickAccessItemWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankAccountRegistryResponseDataObject
{
public:
	UBankAccountRegistryResponseDataObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDataSingleton
{
public:
	UDataSingleton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FProjectileImpulseMultiplier> GetImpulseMultipliers() {
		return memory.read<struct TArray<struct FProjectileImpulseMultiplier>>(m_addr + 40);
	}
	struct FCanvasIcon GetCrosshairIconUp() {
		return memory.read<struct FCanvasIcon>(m_addr + 56);
	}
	struct FCanvasIcon GetCrosshairIconDown() {
		return memory.read<struct FCanvasIcon>(m_addr + 80);
	}
	struct FCanvasIcon GetCrosshairIconLeft() {
		return memory.read<struct FCanvasIcon>(m_addr + 104);
	}
	struct FCanvasIcon GetCrosshairIconRight() {
		return memory.read<struct FCanvasIcon>(m_addr + 128);
	}
	struct FCanvasIcon GetCrosshairIconCenter() {
		return memory.read<struct FCanvasIcon>(m_addr + 152);
	}
	struct FCanvasIcon GetCrosshairIconCenterThrowing() {
		return memory.read<struct FCanvasIcon>(m_addr + 176);
	}
	struct FCanvasIcon GetCrosshairBlockedIcon() {
		return memory.read<struct FCanvasIcon>(m_addr + 200);
	}
	struct FCanvasIcon GetBowSpreadCircle() {
		return memory.read<struct FCanvasIcon>(m_addr + 224);
	}
	struct UTexture2D GetSingleFireIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetAutoFireIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetBurstFireIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UTexture2D(ptr_addr);
	}
	float GetWeaponSpreadBase() {
		return memory.read<float>(m_addr + 272);
	}
	struct FWeaponSpreadData GetWeaponSpreadData[9]() {
		return memory.read<struct FWeaponSpreadData>(m_addr + 276);
	}
	float GetBowArrowDeviationDegreesAngleByStep() {
		return memory.read<float>(m_addr + 852);
	}
	struct FWeaponViewKickData GetWeaponViewKickData[9]() {
		return memory.read<struct FWeaponViewKickData>(m_addr + 856);
	}
	float GetWeaponAimingAutoCorrectAngle() {
		return memory.read<float>(m_addr + 1072);
	}
	struct FWeaponMalfunctionProbabilityCurves GetWeaponMalfunctionProbabilityCurves() {
		return memory.read<struct FWeaponMalfunctionProbabilityCurves>(m_addr + 1080);
	}
	float GetUpperBoundStaminaAmountToDrain() {
		return memory.read<float>(m_addr + 2032);
	}
	float GetLowerBoundWeaponWeightForStaminaDrain() {
		return memory.read<float>(m_addr + 2036);
	}
	float GetUpperBoundWeaponWeightForStaminaDrain() {
		return memory.read<float>(m_addr + 2040);
	}
	struct FFloatInterval GetFOVFirstPersonMultiplierRange() {
		return memory.read<struct FFloatInterval>(m_addr + 2044);
	}
	struct FFloatInterval GetFOVThirdPersonMultiplierRange() {
		return memory.read<struct FFloatInterval>(m_addr + 2052);
	}
	struct FFloatInterval GetFOVFirstPersonDrivingMultiplierRange() {
		return memory.read<struct FFloatInterval>(m_addr + 2060);
	}
	struct FFloatInterval GetFOVThirdPersonDrivingMultiplierRange() {
		return memory.read<struct FFloatInterval>(m_addr + 2068);
	}
	float GetWeaponFOVWhileScoping() {
		return memory.read<float>(m_addr + 2076);
	}
	struct UCurveFloat GetDownTheSightsModeLerpCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2080);
		return struct UCurveFloat(ptr_addr);
	}
	struct UMaterialParameterCollection GetWeaponFOVParameterCollection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2088);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct FFloatInterval GetLoadMagazineSpeedModifierSkillFactor() {
		return memory.read<struct FFloatInterval>(m_addr + 2096);
	}
	struct FFloatInterval GetLoadMagazineSpeedModifierDexterityFactor() {
		return memory.read<struct FFloatInterval>(m_addr + 2104);
	}
	struct FCanvasIcon GetInteractIcon() {
		return memory.read<struct FCanvasIcon>(m_addr + 2112);
	}
	struct FCanvasIcon GetBondageIcon() {
		return memory.read<struct FCanvasIcon>(m_addr + 2136);
	}
	struct UInputDataAsset GetDefaultInputData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2160);
		return struct UInputDataAsset(ptr_addr);
	}
	struct UDerivedWidgetsData GetWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2168);
		return struct UDerivedWidgetsData(ptr_addr);
	}
	struct UMaterialInterface GetPlaceablePrimaryMatValid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2176);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetPlaceablePrimaryMatInvalid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2184);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetPlaceablePrimaryMatFriendlyFlag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2192);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetPlaceableOutlineMat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2200);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetPlaceableDepthMat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2208);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetPlaceableMaterialRadiusSphere() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2216);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetItemPlacementMatValid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2224);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetItemPlacementMatInvalid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2232);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetWidgetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2240);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UBaseItemTag GetToolBoxItemTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2248);
		return struct UBaseItemTag(ptr_addr);
	}
	struct UBaseItemTag GetMushroomItemTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2256);
		return struct UBaseItemTag(ptr_addr);
	}
	struct UBaseItemTag GetAlcoholItemTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2264);
		return struct UBaseItemTag(ptr_addr);
	}
	struct UBaseItemTag GetSoapItemTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2272);
		return struct UBaseItemTag(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetAnimalSkinItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 2280);
	}
	struct UTrapData GetTrapData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct UTrapData(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetDogTagItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 2328);
	}
	struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>> GetClothesItemChoppingRecipeIngredientsClassesToReplaceWhenDirty() {
		return memory.read<struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>>>(m_addr + 2368);
	}
	struct UDataTable GetItemGeneralParametersDataTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2448);
		return struct UDataTable(ptr_addr);
	}
	struct TSoftObjectPtr<UDataTable> GetItemSpawningParametersTable() {
		return memory.read<struct TSoftObjectPtr<UDataTable>>(m_addr + 2456);
	}
	char ECollisionChannel GetItemObstructionCollisionChannel() {
		return memory.read<char ECollisionChannel>(m_addr + 2496);
	}
	bool GetShouldTraceComplexCollisionForItemObstruction() {
		return memory.read<bool>(m_addr + 2497);
	}
	struct TSet<struct FPrimaryAssetId> GetAssetsHiddenFromAdminCommands() {
		return memory.read<struct TSet<struct FPrimaryAssetId>>(m_addr + 2504);
	}
	struct UMissionDataGroup GetMissonDataGroup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2584);
		return struct UMissionDataGroup(ptr_addr);
	}
	struct UDialogueData GetDialogueData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2592);
		return struct UDialogueData(ptr_addr);
	}
	struct USoundClass GetVoiceSoundClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2600);
		return struct USoundClass(ptr_addr);
	}
	struct UNetworkDataIdAsset GetNetworkDataIdAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2608);
		return struct UNetworkDataIdAsset(ptr_addr);
	}
	struct UWashClothesData GetWashClothesData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2616);
		return struct UWashClothesData(ptr_addr);
	}
	struct UDecontaminateData GetDecontaminateData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2624);
		return struct UDecontaminateData(ptr_addr);
	}
	struct UBuryData GetBuryData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2632);
		return struct UBuryData(ptr_addr);
	}
	struct UEmblemData GetSquadEmblemData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2640);
		return struct UEmblemData(ptr_addr);
	}
	struct UMaterialInterface GetItemTetrisMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2648);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UPhysicalSurfacesEffectsData GetPhysicalSurfaceEffectsData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2656);
		return struct UPhysicalSurfacesEffectsData(ptr_addr);
	}
	struct UTexture2D GetChestLockedIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2664);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetChestUnlockedIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2672);
		return struct UTexture2D(ptr_addr);
	}
	struct UAkAudioEvent GetChestLockingSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2680);
		return struct UAkAudioEvent(ptr_addr);
	}
	UGlobalUIData GetUIData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2688);
		return UGlobalUIData(ptr_addr);
	}
	struct UParticleSystem GetWaterSplashParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2696);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent GetWaterSplashAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2704);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct USurfaceHardnessData GetSurfaceHardnessData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2712);
		return struct USurfaceHardnessData(ptr_addr);
	}
	struct UDamageData GetDamageData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2720);
		return struct UDamageData(ptr_addr);
	}
	UDamageCustomization GetDefaultDamageCustomizationClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2728);
		return UDamageCustomization(ptr_addr);
	}
	UDamageCustomization GetLandingDamageCustomizationClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2736);
		return UDamageCustomization(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetBackpackCharacterMeshClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 2744);
	}
	UGameResourceType GetRainWaterResourceClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2784);
		return UGameResourceType(ptr_addr);
	}
	struct TArray<struct FGameResourceMixingRule> GetGameResourceMixingRules() {
		return memory.read<struct TArray<struct FGameResourceMixingRule>>(m_addr + 2792);
	}
	char EPhysicalSurface GetWaterSurfaceType() {
		return memory.read<char EPhysicalSurface>(m_addr + 2808);
	}
	struct UAkAudioEvent GetTransactionCompleteSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2816);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FGameplayTag GetGenderEnumVsGenderTagMapping[3]() {
		return memory.read<struct FGameplayTag>(m_addr + 3056);
	}
	ASurgeryRoom GetSurgeryRoomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3080);
		return ASurgeryRoom(ptr_addr);
	}
	ABarberShop GetBarberShopClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3088);
		return ABarberShop(ptr_addr);
	}
	UPrisonerCommonData GetDefaultPrisonerCommonData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3096);
		return UPrisonerCommonData(ptr_addr);
	}
	struct UPrisonerAppearanceSetDataAsset GetPrisonerAppearanceSet() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3104);
		return struct UPrisonerAppearanceSetDataAsset(ptr_addr);
	}
	struct UCookingCommonData GetCookingCommonData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3112);
		return struct UCookingCommonData(ptr_addr);
	}
	struct UCookingRecipeRegistry GetCookingRecipeRegistry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3120);
		return struct UCookingRecipeRegistry(ptr_addr);
	}
	struct TSoftObjectPtr<UDataTable> GetCookingUtilityUIDataTable() {
		return memory.read<struct TSoftObjectPtr<UDataTable>>(m_addr + 3128);
	}
	struct UFamePointSettings GetFamePointSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3168);
		return struct UFamePointSettings(ptr_addr);
	}
	struct TArray<struct FPrimaryAssetId> GetAlwaysFunctioningVehicles() {
		return memory.read<struct TArray<struct FPrimaryAssetId>>(m_addr + 3176);
	}
	UEntitySystemSettings GetDefaultEntitySystemSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3192);
		return UEntitySystemSettings(ptr_addr);
	}
	struct UDataTable Get_cookingUtilityTagToUIDataTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3288);
		return struct UDataTable(ptr_addr);
	}
	float Get_noiseLevelValues[6]() {
		return memory.read<float>(m_addr + 3296);
	}
	struct FAITeamAttitudeData Get_teamAttitudes[7]() {
		return memory.read<struct FAITeamAttitudeData>(m_addr + 3320);
	}
	struct UDataTable Get_economyTradeablesDataTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3456);
		return struct UDataTable(ptr_addr);
	}
	struct UEconomySpecificData Get_economySpecificData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3464);
		return struct UEconomySpecificData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMPinSlot
{
public:
	UBankATMPinSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher Get_pinNumberTypeSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock Get_pinNumber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_animatedEntryBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UWidgetAnimation Get_enterNumber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation Get_enterNumberLast() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}
	float Get_caretBlinkSeconds() {
		return memory.read<float>(m_addr + 680);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFishingAttachmentReel
{
public:
	AFishingAttachmentReel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetSkeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct FName GetReelHandIK() {
		return memory.read<struct FName>(m_addr + 2360);
	}
	float Get_reelHandleAcceleration() {
		return memory.read<float>(m_addr + 2368);
	}
	float Get_fastReelHandleAcceleration() {
		return memory.read<float>(m_addr + 2372);
	}
	float Get_reelFriction() {
		return memory.read<float>(m_addr + 2376);
	}
	float Get_fastReelFriction() {
		return memory.read<float>(m_addr + 2380);
	}
	float Get_reelVelocityThreshold() {
		return memory.read<float>(m_addr + 2384);
	}
	float Get_reelVelocityLimit() {
		return memory.read<float>(m_addr + 2388);
	}
	float Get_reelAccelerationModifier() {
		return memory.read<float>(m_addr + 2392);
	}
	struct FTransform Get_leftHandOffset() {
		return memory.read<struct FTransform>(m_addr + 2400);
	}
	struct UAnimMontage Get_lockAfterLongCastAnimMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2448);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_lockAfterShortCastAnimMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2456);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_reelCastAnimMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2464);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimSequenceBase Get_reelingAnimSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2472);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAkAudioEvent Get_reelingStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2480);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_reelingEndAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2488);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FVector Get_leftHandIKLocationCache() {
		return memory.read<struct FVector>(m_addr + 2508);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerUITooltipCache
{
public:
	UPrisonerUITooltipCache(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGameResourceType_Solid
{
public:
	UGameResourceType_Solid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_Leukopenia
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_Leukopenia(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodySymptom_Leukopenia Get_symptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodySymptom_Leukopenia(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Leukopenia Get_symptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPrisonerBodySymptomCause_Leukopenia(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_immuneSystemEfficiencyModifierVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemSpawnerEvaluationResultEntityComponentSetup
{
public:
	UItemSpawnerEvaluationResultEntityComponentSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankATMAccountInfo
{
public:
	UBankATMAccountInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_accountNumber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_accountName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_cardType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_renewalAmount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UHorizontalBox Get_goldAmountHorizontalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UTextBlock Get_goldAmount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnReturn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct TMap<uint8_t , struct FSlateColor> Get_cardTypeFontColor() {
		return memory.read<struct TMap<uint8_t , struct FSlateColor>>(m_addr + 688);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMBoughtCard
{
public:
	UBankATMBoughtCard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_cardQualityType() {
		return memory.read<uint8_t >(m_addr + 632);
	}
	struct TMap<uint8_t , struct FSlateBrush> Get_cardBrushes() {
		return memory.read<struct TMap<uint8_t , struct FSlateBrush>>(m_addr + 640);
	}
	struct FBankATMBoughtCardStateVisual Get_normalVisuals() {
		return memory.read<struct FBankATMBoughtCardStateVisual>(m_addr + 720);
	}
	struct FBankATMBoughtCardStateVisual Get_hoveredVisuals() {
		return memory.read<struct FBankATMBoughtCardStateVisual>(m_addr + 784);
	}
	struct FBankATMBoughtCardStateVisual Get_pressedVisuals() {
		return memory.read<struct FBankATMBoughtCardStateVisual>(m_addr + 848);
	}
	struct UOverlay Get_visualOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UOverlay(ptr_addr);
	}
	struct UImage Get_imgCardBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_textCardType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_textCardNumber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher Get_optionsCircleSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct UWidgetSwitcher(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAppearanceSetDataAsset
{
public:
	UPrisonerAppearanceSetDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBreastSizeMin() {
		return memory.read<float>(m_addr + 48);
	}
	float GetBreastSizeMax() {
		return memory.read<float>(m_addr + 52);
	}
	float GetBreastSizeMaxInCharacterCreation() {
		return memory.read<float>(m_addr + 56);
	}
	float GetBreastSizeDeluxeModifier() {
		return memory.read<float>(m_addr + 60);
	}
	float GetPenisSizeMin() {
		return memory.read<float>(m_addr + 64);
	}
	float GetPenisSizeMax() {
		return memory.read<float>(m_addr + 68);
	}
	float GetPenisSizeMaxInCharacterCreation() {
		return memory.read<float>(m_addr + 72);
	}
	float GetPenisSizeDeluxeModifier() {
		return memory.read<float>(m_addr + 76);
	}
	struct TArray<struct UPrisonerAppearanceDataAsset> Get_femaleAppearanceData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct TArray<struct UPrisonerAppearanceDataAsset>(ptr_addr);
	}
	struct TArray<struct UPrisonerAppearanceDataAsset> Get_maleAppearanceData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct TArray<struct UPrisonerAppearanceDataAsset>(ptr_addr);
	}
	struct TArray<struct FPrisonerAppearance_HairStyle> Get_maleHairStyles() {
		return memory.read<struct TArray<struct FPrisonerAppearance_HairStyle>>(m_addr + 112);
	}
	struct TArray<struct FPrisonerAppearance_HairStyle> Get_maleFacialHairStyles() {
		return memory.read<struct TArray<struct FPrisonerAppearance_HairStyle>>(m_addr + 128);
	}
	struct TArray<struct FPrisonerAppearance_HairStyle> Get_femaleHairStyles() {
		return memory.read<struct TArray<struct FPrisonerAppearance_HairStyle>>(m_addr + 144);
	}
	struct TArray<struct FPrisonerAppearance_HairColorPreset> Get_dyedHairColors() {
		return memory.read<struct TArray<struct FPrisonerAppearance_HairColorPreset>>(m_addr + 160);
	}
	struct TMap<struct FGameplayTag, struct FPrisonerAppearance_TattooArray> Get_tattooArrays() {
		return memory.read<struct TMap<struct FGameplayTag, struct FPrisonerAppearance_TattooArray>>(m_addr + 176);
	}
	struct TMap<struct FGameplayTag, struct FPrisonerAppearance_SkinParams> Get_skinParams() {
		return memory.read<struct TMap<struct FGameplayTag, struct FPrisonerAppearance_SkinParams>>(m_addr + 256);
	}
	struct TArray<struct FPrisonerAppearance_IrisColor> Get_irisColors() {
		return memory.read<struct TArray<struct FPrisonerAppearance_IrisColor>>(m_addr + 336);
	}
	struct TArray<struct FPrisonerAppearance_IrisVariation> Get_irisVariations() {
		return memory.read<struct TArray<struct FPrisonerAppearance_IrisVariation>>(m_addr + 352);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_QuickRemoveAttachmentDescription
{
public:
	UPrisonerVehicleAction_QuickRemoveAttachmentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_Chassis
{
public:
	UVehicleAttachment_Chassis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UVehicleBaseMountSlot> Get_mountSlotClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct TArray<UVehicleBaseMountSlot>(ptr_addr);
	}
	struct TArray<struct FVehicleServiceItemSlot> Get_serviceItemSlots() {
		return memory.read<struct TArray<struct FVehicleServiceItemSlot>>(m_addr + 808);
	}
	struct TArray<struct UVehicleBaseMountSlot> Get_mountSlots() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct TArray<struct UVehicleBaseMountSlot>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMBuyableCard
{
public:
	UBankATMBuyableCard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_cardQualityType() {
		return memory.read<uint8_t >(m_addr + 632);
	}
	struct FBankATMBuyableCardStateVisual Get_normalVisuals() {
		return memory.read<struct FBankATMBuyableCardStateVisual>(m_addr + 636);
	}
	struct FBankATMBuyableCardStateVisual Get_hoveredAndPressedVisuals() {
		return memory.read<struct FBankATMBuyableCardStateVisual>(m_addr + 648);
	}
	struct FBankATMBuyableCardStateVisual Get_disabledVisuals() {
		return memory.read<struct FBankATMBuyableCardStateVisual>(m_addr + 660);
	}
	struct UWidgetSwitcher Get_visualStateSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UImage Get_toggleablePlusCircle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_textCardType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_textFreeRenewals() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_textDigitsOfPin() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_textOperationalTransactionLimit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_textGoldPurchaseAvailable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_textCardCost() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMCardManagementOptionsScreen
{
public:
	UBankATMCardManagementOptionsScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBankATMPointingButton Get_btnRenew() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnDelete() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnReturn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMErrorPopup Get_popupMessage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UBankATMErrorPopup(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMCarouselCard
{
public:
	UBankATMCarouselCard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher Get_typeSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock Get_numberLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_ownershipIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct UPanelWidget Get_expirationNotice() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UPanelWidget(ptr_addr);
	}
	struct FColor Get_stolenCardColor() {
		return memory.read<struct FColor>(m_addr + 664);
	}
	struct FBankATMCarouselCardStateVisual Get_normalVisuals() {
		return memory.read<struct FBankATMCarouselCardStateVisual>(m_addr + 676);
	}
	struct FBankATMCarouselCardStateVisual Get_hoveredVisuals() {
		return memory.read<struct FBankATMCarouselCardStateVisual>(m_addr + 692);
	}
	struct FBankATMCarouselCardStateVisual Get_pressedVisuals() {
		return memory.read<struct FBankATMCarouselCardStateVisual>(m_addr + 708);
	}
	struct FBankATMCarouselCardStateVisual Get_disabledVisuals() {
		return memory.read<struct FBankATMCarouselCardStateVisual>(m_addr + 724);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsEventDisplay
{
public:
	UCustomZoneSettingsEventDisplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_eventNameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_handlingMethodText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UCustomZoneDataAsset Get_customZoneData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UCustomZoneDataAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMChooseTransaction
{
public:
	UBankATMChooseTransaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBankATMPointingButton Get_btnWithdraw() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnDeposit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnTransfer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnEjectCard() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnAccountInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnBuyGold() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnSellGold() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UBankATMPointingButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMEnterPin
{
public:
	UBankATMEnterPin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher Get_pinEnteringSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock Get_enterPinTitleMessage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UPanelWidget Get_pinSlotsPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UPanelWidget(ptr_addr);
	}
	UBankATMPinSlot Get_pinSlotClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return UBankATMPinSlot(ptr_addr);
	}
	struct UPanelWidget Get_incorrectPinWarning() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UPanelWidget(ptr_addr);
	}
	struct UTextBlock Get_remainingAttemptsLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTextBlock(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnReturn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnSubmit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UBankATMPointingButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USliderWithLabelAndNumber
{
public:
	USliderWithLabelAndNumber(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_name() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3536);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_valueDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3544);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_focusBackgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3552);
		return struct UImage(ptr_addr);
	}
	struct FSliderWithLabelAndNumberStyle Get_selectedAndFocusedSWNANStyle() {
		return memory.read<struct FSliderWithLabelAndNumberStyle>(m_addr + 3560);
	}
	struct FSliderWithLabelAndNumberStyle Get_selectedAndUnfocusedSWNANStyle() {
		return memory.read<struct FSliderWithLabelAndNumberStyle>(m_addr + 3904);
	}
	struct FSliderWithLabelAndNumberStyle Get_unselectedSWNANStyle() {
		return memory.read<struct FSliderWithLabelAndNumberStyle>(m_addr + 4248);
	}
	struct FSliderWithLabelAndNumberStyle Get_highlightedSWNANStyle() {
		return memory.read<struct FSliderWithLabelAndNumberStyle>(m_addr + 4592);
	}
	struct FSliderWithLabelAndNumberStyle Get_disabledSWNANStyle() {
		return memory.read<struct FSliderWithLabelAndNumberStyle>(m_addr + 4936);
	}
	struct FText Get_label() {
		return memory.read<struct FText>(m_addr + 5280);
	}
	int32_t Get_decimalPlacesShown() {
		return memory.read<int32_t>(m_addr + 5304);
	}
	int32_t Get_decimalPlacesShifted() {
		return memory.read<int32_t>(m_addr + 5308);
	}
	bool Get_showAsPercentage() {
		return memory.read<bool>(m_addr + 5312);
	}

private:
	std::uint64_t m_addr = 0;
};


class UChoppingToolItemTag
{
public:
	UChoppingToolItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetChoppingTimeMultiplier() {
		return memory.read<float>(m_addr + 48);
	}
	int32_t GetIngredientsQuantityBonus() {
		return memory.read<int32_t>(m_addr + 52);
	}
	bool GetCanBeUsedForChoppingHair() {
		return memory.read<bool>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class AExplosiveTrapItem
{
public:
	AExplosiveTrapItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_detonationDelay() {
		return memory.read<float>(m_addr + 2656);
	}
	struct FVector Get_trapForwardVector() {
		return memory.read<struct FVector>(m_addr + 2660);
	}
	float Get_netCullDistanceSquaredMeters() {
		return memory.read<float>(m_addr + 2672);
	}
	struct UAkAudioEvent Get_triggerSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2680);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_detonationSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2688);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UParticleSystem Get_detonationParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2696);
		return struct UParticleSystem(ptr_addr);
	}
	struct FTransform Get_detonationParticlesTransform() {
		return memory.read<struct FTransform>(m_addr + 2704);
	}
	bool Get_hasPrimaryExplosion() {
		return memory.read<bool>(m_addr + 2752);
	}
	float Get_primaryBaseDamage() {
		return memory.read<float>(m_addr + 2756);
	}
	float Get_primaryMinimumDamage() {
		return memory.read<float>(m_addr + 2760);
	}
	float Get_primaryDamageInnerRadius() {
		return memory.read<float>(m_addr + 2764);
	}
	float Get_primaryDamageOuterRadius() {
		return memory.read<float>(m_addr + 2768);
	}
	float Get_primaryDamageMinAngleDeg() {
		return memory.read<float>(m_addr + 2772);
	}
	float Get_primaryDamageMaxAngleDeg() {
		return memory.read<float>(m_addr + 2776);
	}
	float Get_primaryDamageChanceMultiplier() {
		return memory.read<float>(m_addr + 2780);
	}
	float Get_primaryDamageMinChance() {
		return memory.read<float>(m_addr + 2784);
	}
	float Get_primaryDamageMaxChance() {
		return memory.read<float>(m_addr + 2788);
	}
	float Get_primaryDamageFalloff() {
		return memory.read<float>(m_addr + 2792);
	}
	float Get_primaryDamageAngleFalloff() {
		return memory.read<float>(m_addr + 2796);
	}
	struct FTargetTypeDamageMultiplier Get_primaryTargetTypeMultiplier() {
		return memory.read<struct FTargetTypeDamageMultiplier>(m_addr + 2800);
	}
	bool Get_hasSecondaryExplosion() {
		return memory.read<bool>(m_addr + 2816);
	}
	float Get_secondaryBaseDamage() {
		return memory.read<float>(m_addr + 2820);
	}
	float Get_secondaryMinimumDamage() {
		return memory.read<float>(m_addr + 2824);
	}
	float Get_secondaryDamageInnerRadius() {
		return memory.read<float>(m_addr + 2828);
	}
	float Get_secondaryDamageOuterRadius() {
		return memory.read<float>(m_addr + 2832);
	}
	float Get_secondaryDamageFalloff() {
		return memory.read<float>(m_addr + 2836);
	}
	struct FTargetTypeDamageMultiplier Get_secondaryTargetTypeMultiplier() {
		return memory.read<struct FTargetTypeDamageMultiplier>(m_addr + 2840);
	}
	bool Get_instantlyDestroysStructures() {
		return memory.read<bool>(m_addr + 2856);
	}
	float Get_structureDestructionRadius() {
		return memory.read<float>(m_addr + 2860);
	}
	float Get_minimalElementAreaCovered() {
		return memory.read<float>(m_addr + 2864);
	}
	float Get_structureDestructionMinAngleDeg() {
		return memory.read<float>(m_addr + 2868);
	}
	float Get_structureDestructionMaxAngleDeg() {
		return memory.read<float>(m_addr + 2872);
	}
	float Get_explosionDamagePositionOffset() {
		return memory.read<float>(m_addr + 2876);
	}
	float Get_explosionForce() {
		return memory.read<float>(m_addr + 2880);
	}

private:
	std::uint64_t m_addr = 0;
};


class URadioComponent
{
public:
	URadioComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_volume() {
		return memory.read<float>(m_addr + 992);
	}
	int32_t Get_currentStationIndex() {
		return memory.read<int32_t>(m_addr + 996);
	}
	bool Get_isHiFi() {
		return memory.read<bool>(m_addr + 1004);
	}
	bool Get_isReachableFromSkyWhenMounted() {
		return memory.read<bool>(m_addr + 1005);
	}
	float Get_attenuationScale() {
		return memory.read<float>(m_addr + 1008);
	}
	bool Get_turnedOn() {
		return memory.read<bool>(m_addr + 1012);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMErrorPopup
{
public:
	UBankATMErrorPopup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_popupMessage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	float Get_fadeInTime() {
		return memory.read<float>(m_addr + 620);
	}
	float Get_displayHoldTime() {
		return memory.read<float>(m_addr + 624);
	}
	float Get_fadeOutTime() {
		return memory.read<float>(m_addr + 628);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCheckAmmoMagazineAttached
{
public:
	UCheckAmmoMagazineAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponActionCheckAmmoSequence
{
public:
	UWeaponActionCheckAmmoSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBodyWeaponAnimation GetAnimations() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 40);
	}
	bool GetCanBeInterrupted() {
		return memory.read<bool>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryContainerSelection
{
public:
	UInventoryContainerSelection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_maxNumOfItems() {
		return memory.read<int32_t>(m_addr + 48);
	}
	struct TArray<struct UObject> Get_itemsRep() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct UObject>(ptr_addr);
	}
	struct UObject Get_parentRep() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UObject(ptr_addr);
	}
	struct FInventoryContainerSelectionRepData Get_data() {
		return memory.read<struct FInventoryContainerSelectionRepData>(m_addr + 112);
	}
	struct TArray<struct UInventoryContainerWidget2> Get_widgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct TArray<struct UInventoryContainerWidget2>(ptr_addr);
	}
	struct UInventoryContainerWidget2 Get_widget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return struct UInventoryContainerWidget2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDecontaminate
{
public:
	UPrisonerActionDecontaminate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankATMGoldValueGraph
{
public:
	UBankATMGoldValueGraph(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVerticalBox Get_yAxisVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UVerticalBox(ptr_addr);
	}
	struct UImage Get_graphShadedAreaImg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UHorizontalBox Get_xAxisHorizontalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UTextBlock Get_graphDescriptionTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionAttachItemDescription
{
public:
	UPrisonerActionAttachItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USkillClasses
{
public:
	USkillClasses(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankATMMainPanel
{
public:
	UBankATMMainPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDelegate GetOnMouseMoveEvent() {
		return memory.read<struct FDelegate>(m_addr + 608);
	}
	struct UWidget Get_virtualMouseCursorWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidget(ptr_addr);
	}
	struct UWidgetSwitcher Get_panelSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UBankATMWelcomeScreen Get_welcomeScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UBankATMWelcomeScreen(ptr_addr);
	}
	struct UBankATMEnterPin Get_enterPinScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UBankATMEnterPin(ptr_addr);
	}
	struct UBankATMChooseTransaction Get_chooseTransactionScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UBankATMChooseTransaction(ptr_addr);
	}
	struct UBankATMMoneyTransfer Get_moneyTransferScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UBankATMMoneyTransfer(ptr_addr);
	}
	struct UBankATMGoldTrading Get_goldTradingScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UBankATMGoldTrading(ptr_addr);
	}
	struct UBankATMManageCards Get_manageCardsScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UBankATMManageCards(ptr_addr);
	}
	struct UBankATMAccountInfo Get_accountInfoScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UBankATMAccountInfo(ptr_addr);
	}
	struct UBankATMAccountSummary Get_accountSummaryHeader() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UBankATMAccountSummary(ptr_addr);
	}
	struct UPanelWidget Get_loadingOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UPanelWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismTreatmentPanel
{
public:
	UMetabolismTreatmentPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVerticalBox Get_untreatedColumn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_stabilizationColumn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_recoveryColumn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UVerticalBox(ptr_addr);
	}
	struct UImage Get_untreatedBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_stabilizationBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_recoveryBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	UMetabolismBodyEffectProgressBar Get_progressBarClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return UMetabolismBodyEffectProgressBar(ptr_addr);
	}
	UTextOnlyTooltip Get_tooltipClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return UTextOnlyTooltip(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBoatMountSlot
{
public:
	UBoatMountSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_controlType() {
		return memory.read<uint8_t >(m_addr + 320);
	}
	struct UBlendSpace Get_paddlingLHandAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 328);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace Get_paddlingRHandAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 336);
		return struct UBlendSpace(ptr_addr);
	}
	struct UAnimSequence Get_paddlingLToRAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 344);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_paddlingRToLAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 352);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineStartAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 360);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 368);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineLongLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 376);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineEndAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return struct UAnimSequence(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCraftingAction
{
public:
	UCraftingAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWristwatch
{
public:
	AWristwatch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetSkeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UTextureRenderTarget2D GetTextRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	struct UFont GetTimeFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UFont(ptr_addr);
	}
	float GetTextScaleX() {
		return memory.read<float>(m_addr + 568);
	}
	float GetTextScaleY() {
		return memory.read<float>(m_addr + 572);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 576);
	}
	struct UAkAudioEvent GetAlarmSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct USkeletalMesh Get_maleWristwatchMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct USkeletalMesh(ptr_addr);
	}
	struct USkeletalMesh Get_femaleWristwatchMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct USkeletalMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UExplosionDamageType
{
public:
	UExplosionDamageType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankATMManageCards
{
public:
	UBankATMManageCards(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher Get_screenSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UHorizontalBox Get_boughtCardsHorizontalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UBankATMBoughtCard Get_boughtCardStarter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UBankATMBoughtCard(ptr_addr);
	}
	struct UBankATMBoughtCard Get_boughtCardGold() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UBankATMBoughtCard(ptr_addr);
	}
	struct UBankATMBoughtCard Get_boughtCardClassic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UBankATMBoughtCard(ptr_addr);
	}
	struct UTextBlock Get_textNoCards() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTextBlock(ptr_addr);
	}
	struct UHorizontalBox Get_buyableCardsHorizontalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UBankATMBuyableCard Get_buyableCardClassic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UBankATMBuyableCard(ptr_addr);
	}
	struct UBankATMBuyableCard Get_buyableCardGold() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UBankATMBuyableCard(ptr_addr);
	}
	struct UTextBlock Get_textInventoryBalance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_textAccountBalance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTextBlock(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnBack() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMCardManagementOptionsScreen Get_cardManagementOptionsScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UBankATMCardManagementOptionsScreen(ptr_addr);
	}
	struct UBankATMYesNoConfirmationScreen Get_purchaseConfirmationScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UBankATMYesNoConfirmationScreen(ptr_addr);
	}
	struct UBankATMYesNoConfirmationScreen Get_cancellationConfirmationScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UBankATMYesNoConfirmationScreen(ptr_addr);
	}
	struct UBankATMYesNoConfirmationScreen Get_renewalConfirmationScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UBankATMYesNoConfirmationScreen(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZBoatAnimInstance
{
public:
	UConZBoatAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsAnyoneMounted() {
		return memory.read<bool>(m_addr + 696);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 700);
	}
	float GetSpeedKph() {
		return memory.read<float>(m_addr + 704);
	}
	float GetMaxEngineSteerAngle() {
		return memory.read<float>(m_addr + 708);
	}
	float GetEngineSteerAngleInterpSpeed() {
		return memory.read<float>(m_addr + 712);
	}
	float GetCurrentEngineSteerAngle() {
		return memory.read<float>(m_addr + 716);
	}
	float GetPropellerRotationAngle() {
		return memory.read<float>(m_addr + 720);
	}
	float GetPropellerRotationSpeedScale() {
		return memory.read<float>(m_addr + 724);
	}
	float GetSailsRotationAngle() {
		return memory.read<float>(m_addr + 728);
	}
	bool GetIsMounteeDriver() {
		return memory.read<bool>(m_addr + 732);
	}
	bool GetIsMounteeRowing() {
		return memory.read<bool>(m_addr + 733);
	}
	struct FTransform Get_prisonerLHandTransform() {
		return memory.read<struct FTransform>(m_addr + 736);
	}
	struct FTransform Get_prisonerRHandTransform() {
		return memory.read<struct FTransform>(m_addr + 784);
	}
	struct FVector GetWindDirection() {
		return memory.read<struct FVector>(m_addr + 832);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMinigame
{
public:
	AMinigame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_testingMode() {
		return memory.read<int32_t>(m_addr + 592);
	}
	struct USceneComponent Get_rootComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct USceneComponent(ptr_addr);
	}
	struct USceneCaptureComponent2D Get_captureCam() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct USceneCaptureComponent2D(ptr_addr);
	}
	struct USceneCaptureComponent2D Get_captureMaskCam() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct USceneCaptureComponent2D(ptr_addr);
	}
	struct UMinigameWidget Get_minigameWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMinigameWidget(ptr_addr);
	}
	UMinigameWidget Get_minigameWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return UMinigameWidget(ptr_addr);
	}
	float Get_introDuration() {
		return memory.read<float>(m_addr + 688);
	}
	float Get_outroDurationOnFail() {
		return memory.read<float>(m_addr + 692);
	}
	float Get_outroDurationOnSuccess() {
		return memory.read<float>(m_addr + 696);
	}
	bool Get_canBeCanceled() {
		return memory.read<bool>(m_addr + 700);
	}
	uint8_t  Get_simulatedMontage() {
		return memory.read<uint8_t >(m_addr + 701);
	}
	struct UAkAudioEvent Get_simulatedAudioStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_simulatedAudioStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct TArray<UBaseItemTag> Get_takeInHandsItemTagClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct TArray<UBaseItemTag>(ptr_addr);
	}
	struct TArray<struct TWeakObjectPtr<AItem>> Get_currentlyUsedTools() {
		return memory.read<struct TArray<struct TWeakObjectPtr<AItem>>>(m_addr + 744);
	}

private:
	std::uint64_t m_addr = 0;
};


class APrisonerCorpse
{
public:
	APrisonerCorpse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCorpseStaticMeshRepData> GetStrippedStaticMeshData() {
		return memory.read<struct TArray<struct FCorpseStaticMeshRepData>>(m_addr + 952);
	}
	struct TArray<struct FCorpseSkeletalMeshRepData> GetStrippedSkeletalMeshData() {
		return memory.read<struct TArray<struct FCorpseSkeletalMeshRepData>>(m_addr + 968);
	}
	struct UChoppingRecipeDataAsset GetHeadlessChoppingRecipeDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 984);
		return struct UChoppingRecipeDataAsset(ptr_addr);
	}
	APrisoner GetLivingClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 992);
		return APrisoner(ptr_addr);
	}
	AGib GetGibClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return AGib(ptr_addr);
	}
	struct UParticleSystem GetHeadExplosionParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1008);
		return struct UParticleSystem(ptr_addr);
	}
	struct USkeletalMesh GetHeadExplodedMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct USkeletalMesh(ptr_addr);
	}
	struct TArray<struct UStaticMesh> GetHeadExplosionGibMeshes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1024);
		return struct TArray<struct UStaticMesh>(ptr_addr);
	}
	struct FCorpseSkeletalMeshRepData GetPenisMeshData() {
		return memory.read<struct FCorpseSkeletalMeshRepData>(m_addr + 1040);
	}
	struct FCorpseSkeletalMeshRepData GetStrippedPenisMeshData() {
		return memory.read<struct FCorpseSkeletalMeshRepData>(m_addr + 1152);
	}
	struct UStaticMesh GetCensorMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return struct UStaticMesh(ptr_addr);
	}
	struct UMaterialInstance GetCensorMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return struct UMaterialInstance(ptr_addr);
	}
	struct UStaticMeshComponent GetGenitalsCensorComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1280);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetLeftBreastCensorComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1288);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetRightBreastCensorComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1296);
		return struct UStaticMeshComponent(ptr_addr);
	}
	bool GetHeadless() {
		return memory.read<bool>(m_addr + 1304);
	}
	uint8_t  Get_gender() {
		return memory.read<uint8_t >(m_addr + 1305);
	}
	float Get_fatness() {
		return memory.read<float>(m_addr + 1308);
	}
	float Get_muscliness() {
		return memory.read<float>(m_addr + 1312);
	}
	float Get_skinniness() {
		return memory.read<float>(m_addr + 1316);
	}
	float Get_breastSize() {
		return memory.read<float>(m_addr + 1320);
	}
	float Get_penisSize() {
		return memory.read<float>(m_addr + 1324);
	}
	int32_t Get_appearanceIndex() {
		return memory.read<int32_t>(m_addr + 1328);
	}
	struct FVector Get_penisLocationSkinny() {
		return memory.read<struct FVector>(m_addr + 1332);
	}
	struct FVector Get_penisLocationFat() {
		return memory.read<struct FVector>(m_addr + 1344);
	}
	bool Get_penisShowing() {
		return memory.read<bool>(m_addr + 1356);
	}
	bool Get_breastsShowing() {
		return memory.read<bool>(m_addr + 1357);
	}
	float Get_hairLength() {
		return memory.read<float>(m_addr + 1360);
	}
	float Get_facialHairLength() {
		return memory.read<float>(m_addr + 1364);
	}
	struct FString Get_userProfileName() {
		return memory.read<struct FString>(m_addr + 1368);
	}
	struct FDbIntegerId Get_serverUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 1392);
	}
	struct FDbIntegerId Get_killerServerUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 1400);
	}
	float Get_killClaimFamePointsReward() {
		return memory.read<float>(m_addr + 1408);
	}
	bool Get_killClaimed() {
		return memory.read<bool>(m_addr + 1412);
	}
	struct UCurveFloat Get_shortHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1416);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_mediumHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1424);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_mediumHairCurvePDO() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1432);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_mediumHairCurveTopOpacity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1440);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_longHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1448);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_longHairCurvePDO() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1456);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_longHairCurveTopOpacity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1464);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_afroMediumHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1472);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_shortFacialHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1480);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_mediumFacialHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1488);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_mediumFacialHairCurvePDO() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1496);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_mediumFacialHairCurveTopOpacity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1504);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_longFacialHairCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1512);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_longFacialHairCurvePDO() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1520);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_longFacialHairCurveTopOpacity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1528);
		return struct UCurveFloat(ptr_addr);
	}
	UCharacterMesh Get_censorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1536);
		return UCharacterMesh(ptr_addr);
	}
	uint64_t Get_appearanceRepData1() {
		return memory.read<uint64_t>(m_addr + 1560);
	}
	uint64_t Get_appearanceRepData2() {
		return memory.read<uint64_t>(m_addr + 1568);
	}
	struct TSoftObjectPtr<UPrisonerCommonData> Get_prisonerCommonData() {
		return memory.read<struct TSoftObjectPtr<UPrisonerCommonData>>(m_addr + 1576);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFishSpeciesData
{
public:
	UFishSpeciesData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetFishSpecies() {
		return memory.read<uint8_t >(m_addr + 48);
	}
	struct UStaticMesh GetSingleFishStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UStaticMesh(ptr_addr);
	}
	struct USkeletalMesh GetSingleFishSkeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct USkeletalMesh(ptr_addr);
	}
	struct UMaterialInterface GetMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UAnimSequence GetCaughtFishAnimSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAnimSequence(ptr_addr);
	}
	AFishSchoolActor GetSchoolClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return AFishSchoolActor(ptr_addr);
	}
	AActor GetcaughtFishClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return AActor(ptr_addr);
	}
	bool GetPredator() {
		return memory.read<bool>(m_addr + 104);
	}
	float GetMinDepth() {
		return memory.read<float>(m_addr + 108);
	}
	float GetMaxDepth() {
		return memory.read<float>(m_addr + 112);
	}
	float GetMinMass() {
		return memory.read<float>(m_addr + 116);
	}
	float GetMaxMass() {
		return memory.read<float>(m_addr + 120);
	}
	float GetMaxLength() {
		return memory.read<float>(m_addr + 124);
	}
	struct UCurveFloat GetTimeOfDayPercentageCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingCategoryDropdown
{
public:
	UCookingCategoryDropdown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	USimpleTextDropdownEntry Get_textDropdownEntryClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return USimpleTextDropdownEntry(ptr_addr);
	}
	struct UTextBlock Get_chosenCategory() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UMenuAnchor Get_popup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMenuAnchor(ptr_addr);
	}
	UVerticalScrollBoxDropdownContent Get_categoryDropdownContentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return UVerticalScrollBoxDropdownContent(ptr_addr);
	}
	struct TArray<struct FCookingCategoryDropdownEntryData> Get_cookingCategoryDropdownEntries() {
		return memory.read<struct TArray<struct FCookingCategoryDropdownEntryData>>(m_addr + 672);
	}

private:
	std::uint64_t m_addr = 0;
};


class ABankATMMinigame
{
public:
	ABankATMMinigame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBankATMUIController Get_uiController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UBankATMUIController(ptr_addr);
	}
	struct UStaticMeshComponent Get_bankATMMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UWidgetComponent Get_bankATMWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UWidgetComponent(ptr_addr);
	}
	struct FVector Get_zoomStartLocation() {
		return memory.read<struct FVector>(m_addr + 784);
	}
	struct FVector Get_zoomEndLocation() {
		return memory.read<struct FVector>(m_addr + 796);
	}
	struct UCurveFloat Get_zoomCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_virtualMouseMinSensitivityModifier() {
		return memory.read<float>(m_addr + 816);
	}
	float Get_virtualMouseMaxSensitivityModifier() {
		return memory.read<float>(m_addr + 820);
	}
	struct UStaticMesh Get_atmMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UStaticMesh(ptr_addr);
	}
	struct UStaticMesh Get_tabletMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UStaticMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDedicatedServerResponse
{
public:
	UDedicatedServerResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDbConnection Get_dbConnection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UDbConnection(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMinigameConfiguration
{
public:
	UMinigameConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AMinigame GetminigameClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return AMinigame(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionClaimKill
{
public:
	UPrisonerActionClaimKill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankATMMoneyTransfer
{
public:
	UBankATMMoneyTransfer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton Get_btnEjectCard() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UButton(ptr_addr);
	}
	struct UWidgetSwitcher Get_buttonSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnReturn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnSubmit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnNo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UBankATMPointingButton Get_btnYes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UBankATMPointingButton(ptr_addr);
	}
	struct UWidgetSwitcher Get_subsectionSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UBankATMVirtualEditbox Get_editAccountNumber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UBankATMVirtualEditbox(ptr_addr);
	}
	struct UBankATMVirtualEditbox Get_editTransferAmount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UBankATMVirtualEditbox(ptr_addr);
	}
	struct UBankATMVirtualEditbox Get_editDepositAmount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UBankATMVirtualEditbox(ptr_addr);
	}
	struct UBankATMVirtualEditbox Get_editWithdrawAmount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UBankATMVirtualEditbox(ptr_addr);
	}
	struct UTextBlock Get_questionLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_errorLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_commissionPercentageTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_inventoryBalanceTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UTextBlock(ptr_addr);
	}
	struct UAkAudioEvent Get_soundSuccess() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_errorSuccess() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionPairRemoteKeyAndSensor
{
public:
	UPrisonerActionPairRemoteKeyAndSensor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ACharacterSpawningManager
{
public:
	ACharacterSpawningManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPawnCharacterInfo> Get_spawnableCharacters() {
		return memory.read<struct TArray<struct FPawnCharacterInfo>>(m_addr + 544);
	}
	float Get_managerProcessUpdateTime() {
		return memory.read<float>(m_addr + 560);
	}
	float Get_spawnUpdateTime() {
		return memory.read<float>(m_addr + 564);
	}
	float Get_spawnTriggerGroupUpdateTime() {
		return memory.read<float>(m_addr + 568);
	}
	float Get_spawnTriggerGroupRadius() {
		return memory.read<float>(m_addr + 572);
	}
	float Get_spawnTriggerGroupProximityQueryRadius() {
		return memory.read<float>(m_addr + 576);
	}
	float Get_interiorSearchDistanceThreshold() {
		return memory.read<float>(m_addr + 580);
	}
	float Get_exteriorSpawnerGroupsSpawnCooldownTime() {
		return memory.read<float>(m_addr + 584);
	}
	float Get_interiorSpawnerGroupsSpawnCooldownTime() {
		return memory.read<float>(m_addr + 588);
	}
	float Get_baseElementQueryDistance() {
		return memory.read<float>(m_addr + 592);
	}
	float Get_exteriorSpawnerGroupsProbability() {
		return memory.read<float>(m_addr + 596);
	}
	float Get_interiorSpawnerGroupsProbability() {
		return memory.read<float>(m_addr + 600);
	}
	bool Get_disableSerialization() {
		return memory.read<bool>(m_addr + 604);
	}
	bool Get_startSpawnerGroupCooldownAfterSpawning() {
		return memory.read<bool>(m_addr + 605);
	}
	bool Get_startSpawnerGroupCooldownAfterEnteringInterior() {
		return memory.read<bool>(m_addr + 606);
	}
	struct TSet<APawn> Get_referencedPawnClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct TSet<APawn>(ptr_addr);
	}
	struct TSet<APawn> Get_disabledPawnClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct TSet<APawn>(ptr_addr);
	}
	struct TSet<APawn> Get_suicidePuppetClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct TSet<APawn>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_BladderFull
{
public:
	UPrisonerBodyCondition_BladderFull(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_bladderFullnessToExist() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_bladderFullnessToForceUrinate() {
		return memory.read<float>(m_addr + 196);
	}
	UPrisonerBodySymptom_NeedToUrinate Get_needToUrinateSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return UPrisonerBodySymptom_NeedToUrinate(ptr_addr);
	}
	struct UPrisonerBodySymptomCause Get_needToUrinateSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UPrisonerBodySymptomCause(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URangedResourceProviderComponentContinousAmount
{
public:
	URangedResourceProviderComponentContinousAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDerivedWidgetsData
{
public:
	UDerivedWidgetsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UUserWidget GetCraftingPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCraftingInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCraftingSectionContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCraftableItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCraftingIngredient() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCraftingPossibleItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetStripedFiller() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetAvailableItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return UUserWidget(ptr_addr);
	}
	UWorldCraftingMarkerWidget GetWorldCraftingMarker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return UWorldCraftingMarkerWidget(ptr_addr);
	}
	ULoadingScreen GetLoadingScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return ULoadingScreen(ptr_addr);
	}
	UUserWidget GetInteractionWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetInteractionGroupWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetInteractionContainerWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetItemWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetInventoryWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetInventorySlotWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetWarningWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetHudWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetLoadingWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetLoadingIconWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetSpawnScreenWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetWaypointScreenWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetHoverPanelWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetActionProgressWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetItemSelectionWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetExamineWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetHandsInventoryWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetGenericItemInventoryWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetInventoryContainersWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCombinedInventoryWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetTeamInvitationWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 288);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCraftingInfoWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCraftingComponentWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCraftingRecipeWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetEmptySlotWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetPreviousNextSwitchWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 328);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetVicinityItemContainerWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 336);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetQuickAccessItemWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 344);
		return UUserWidget(ptr_addr);
	}
	UChangeTextWidget GetChangeTextWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 352);
		return UChangeTextWidget(ptr_addr);
	}
	UItemStatusWidget GetItemStatusWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 360);
		return UItemStatusWidget(ptr_addr);
	}
	UHealthWidget GetHealthWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 368);
		return UHealthWidget(ptr_addr);
	}
	UUserWidget GetGameEventCardWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 376);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetGameEventScoreboardWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetGameEventMiniScoreboardWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 392);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetTournamentScoreboardWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 400);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCircularMenuWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 408);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCircularMenuSegmentWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 416);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetLockpickingWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 424);
		return UUserWidget(ptr_addr);
	}
	UDoorUpgradeWidget GetDoorUpgradeWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 432);
		return UDoorUpgradeWidget(ptr_addr);
	}
	UUserWidget GetInventoryContainerWidget2Test() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 440);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetInventoryItemWidget2Test() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 448);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetItemInventoryWidget2Holsters() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 456);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetItemInventoryWidget2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 464);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetInventoryPanelSideLayerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 472);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetItemSplittingWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 480);
		return UUserWidget(ptr_addr);
	}
	struct TMap<uint8_t , UUserWidget> GetWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 488);
		return struct TMap<uint8_t , UUserWidget>(ptr_addr);
	}
	UUserWidget GetObjectivesWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetMissionPromptClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetMissionResultClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetMissionItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetObjectiveItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetMissionRewardClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetRewardItemWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetStatisticsListRow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return UUserWidget(ptr_addr);
	}
	struct TArray<struct FTooltipPanelData> GetItemTooltipPanels() {
		return memory.read<struct TArray<struct FTooltipPanelData>>(m_addr + 632);
	}
	UUserWidget GetMalfunctionsContainerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetWeaponAmmoCountContainerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetPlaceableElementWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMMyCardsButton
{
public:
	UBankATMMyCardsButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_background() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_cardIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_labelMy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_labelCards() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct FBankATMMyCardsButtonStateVisual Get_normalVisuals() {
		return memory.read<struct FBankATMMyCardsButtonStateVisual>(m_addr + 672);
	}
	struct FBankATMMyCardsButtonStateVisual Get_hoveredVisuals() {
		return memory.read<struct FBankATMMyCardsButtonStateVisual>(m_addr + 960);
	}
	struct FBankATMMyCardsButtonStateVisual Get_pressedVisuals() {
		return memory.read<struct FBankATMMyCardsButtonStateVisual>(m_addr + 1248);
	}
	struct FBankATMMyCardsButtonStateVisual Get_disabledVisuals() {
		return memory.read<struct FBankATMMyCardsButtonStateVisual>(m_addr + 1536);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCurrencyConversionResponse
{
public:
	UCurrencyConversionResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChargeVehicleBattery
{
public:
	UPrisonerActionChargeVehicleBattery(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankATMUIController
{
public:
	UBankATMUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionThrowItem
{
public:
	UPrisonerActionThrowItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerInventoryComponent
{
public:
	UPrisonerInventoryComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetItemEquipped() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 216);
	}
	struct FMulticastInlineDelegate GetItemUnequipped() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 232);
	}
	struct TArray<struct UCraftingInfoWidget> GetCraftingInfoWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct TArray<struct UCraftingInfoWidget>(ptr_addr);
	}
	float GetAddSelectionDuration() {
		return memory.read<float>(m_addr + 264);
	}
	float GetAddSelectionReplicationDelay() {
		return memory.read<float>(m_addr + 268);
	}
	float GetTickFrequency() {
		return memory.read<float>(m_addr + 272);
	}
	struct UStaticMesh Get_chipMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 288);
		return struct UStaticMesh(ptr_addr);
	}
	struct UQuickAccessManager Get_quickAccessManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct UQuickAccessManager(ptr_addr);
	}
	struct TMap<struct TWeakObjectPtr<AItem>, uint32_t> Get_vicinityItems() {
		return memory.read<struct TMap<struct TWeakObjectPtr<AItem>, uint32_t>>(m_addr + 352);
	}
	struct TMap<struct FGameplayTag, struct FClothesPartSet> Get_clothesPartsToDamageByMeleeAttackCapsuleAttachment() {
		return memory.read<struct TMap<struct FGameplayTag, struct FClothesPartSet>>(m_addr + 456);
	}
	struct TArray<struct TSoftClassPtr<UObject>> Get_characterMeshClassesSorted() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 536);
	}
	AClothesItem Get_parachuteClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return AClothesItem(ptr_addr);
	}
	struct UInventoryContainerClothes Get_inventoryClothes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UInventoryContainerClothes(ptr_addr);
	}
	struct UInventoryContainerHandsHolsters Get_inventoryHandsHolsters() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UInventoryContainerHandsHolsters(ptr_addr);
	}
	struct UInventoryContainerSelection Get_inventorySelection2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UInventoryContainerSelection(ptr_addr);
	}
	struct UInv2021_InventoryContainerClothes Get_inventoryContainerClothes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UInv2021_InventoryContainerClothes(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMVirtualEditbox
{
public:
	UBankATMVirtualEditbox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText Get_hintText() {
		return memory.read<struct FText>(m_addr + 632);
	}
	struct UImage Get_outline() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_hintLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_editboxLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct FBankATMVirtualEditboxStateVisual Get_inactiveVisuals() {
		return memory.read<struct FBankATMVirtualEditboxStateVisual>(m_addr + 684);
	}
	struct FBankATMVirtualEditboxStateVisual Get_activeVisuals() {
		return memory.read<struct FBankATMVirtualEditboxStateVisual>(m_addr + 700);
	}
	struct FBankATMVirtualEditboxStateVisual Get_disabledVisuals() {
		return memory.read<struct FBankATMVirtualEditboxStateVisual>(m_addr + 716);
	}

private:
	std::uint64_t m_addr = 0;
};


class UChatWidget
{
public:
	UChatWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton Get_muteButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UButton(ptr_addr);
	}
	struct UTextBlock Get_muteText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_backgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UScrollBox Get_chatScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UScrollBox(ptr_addr);
	}
	struct UScrollBox Get_suggestionsScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UScrollBox(ptr_addr);
	}
	struct UOverlay Get_suggestionsDropDown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UOverlay(ptr_addr);
	}
	struct UEditableTextBox Get_inputText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UEditableTextBox Get_suggestionTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UTextBlock Get_chatTypeIndicator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct FLinearColor Get_localChatColor() {
		return memory.read<struct FLinearColor>(m_addr + 680);
	}
	struct FLinearColor Get_globalChatColor() {
		return memory.read<struct FLinearColor>(m_addr + 696);
	}
	struct FLinearColor Get_squadChatColor() {
		return memory.read<struct FLinearColor>(m_addr + 712);
	}
	struct FLinearColor Get_serverChatColor() {
		return memory.read<struct FLinearColor>(m_addr + 728);
	}
	struct FLinearColor Get_errorChatColor() {
		return memory.read<struct FLinearColor>(m_addr + 744);
	}
	struct FLinearColor Get_defaultChatColor() {
		return memory.read<struct FLinearColor>(m_addr + 760);
	}
	struct FLinearColor Get_commandsOnlyChatColor() {
		return memory.read<struct FLinearColor>(m_addr + 776);
	}
	struct FLinearColor Get_suggestionsTextColor() {
		return memory.read<struct FLinearColor>(m_addr + 792);
	}
	struct FLinearColor Get_adminChatColor() {
		return memory.read<struct FLinearColor>(m_addr + 808);
	}
	UChatSuggestionWidget Get_chatSuggestionWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return UChatSuggestionWidget(ptr_addr);
	}
	struct UAdminCommandCompletionManager Get_adminCommandCompletionManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UAdminCommandCompletionManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDescription
{
public:
	UPrisonerActionDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChangeVehicleWeaponAimingStanceDescription
{
public:
	UPrisonerActionChangeVehicleWeaponAimingStanceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVoiceChatComponent
{
public:
	UVoiceChatComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMaxVoiceDistance() {
		return memory.read<float>(m_addr + 184);
	}
	bool GetActiveTalker() {
		return memory.read<bool>(m_addr + 188);
	}
	float GetStopTalkingTimeThreshold() {
		return memory.read<float>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankATMWelcomeScreen
{
public:
	UBankATMWelcomeScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton Get_btnCardsPrevious() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_btnCardsNext() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UButton(ptr_addr);
	}
	struct UPanelWidget Get_cardCarousel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UPanelWidget(ptr_addr);
	}
	struct UBankATMMyCardsButton Get_btnMyCards() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UBankATMMyCardsButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCharacterImpactSoundsData
{
public:
	UCharacterImpactSoundsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterHeadImpactSoundsData GetHead() {
		return memory.read<struct FCharacterHeadImpactSoundsData>(m_addr + 48);
	}
	struct FCharacterTorsoImpactSoundsData GetTorso() {
		return memory.read<struct FCharacterTorsoImpactSoundsData>(m_addr + 72);
	}
	struct FCharacterArmsImpactSoundsData GetArms() {
		return memory.read<struct FCharacterArmsImpactSoundsData>(m_addr + 96);
	}
	struct FCharacterLegsImpactSoundsData GetLegs() {
		return memory.read<struct FCharacterLegsImpactSoundsData>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismRadialAttributeProgressBar
{
public:
	UMetabolismRadialAttributeProgressBar(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMetabolismRadialAttributeProgressBarColor GetBackgroundColor() {
		return memory.read<struct FMetabolismRadialAttributeProgressBarColor>(m_addr + 608);
	}
	struct FMetabolismRadialAttributeProgressBarColor GetBarColor() {
		return memory.read<struct FMetabolismRadialAttributeProgressBarColor>(m_addr + 656);
	}
	struct FMetabolismRadialAttributeProgressBarColor GetBarGlowColor() {
		return memory.read<struct FMetabolismRadialAttributeProgressBarColor>(m_addr + 704);
	}
	struct FMetabolismRadialAttributeProgressBarColor GetInnerGlowColor() {
		return memory.read<struct FMetabolismRadialAttributeProgressBarColor>(m_addr + 752);
	}
	struct FMetabolismRadialAttributeProgressBarColor GetOuterGlowColor() {
		return memory.read<struct FMetabolismRadialAttributeProgressBarColor>(m_addr + 800);
	}
	struct FMetabolismRadialAttributeProgressBarColor GetFontColor() {
		return memory.read<struct FMetabolismRadialAttributeProgressBarColor>(m_addr + 848);
	}
	uint8_t  GetPreviewState() {
		return memory.read<uint8_t >(m_addr + 896);
	}
	struct UImage Get_coloredBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_radialProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UImage(ptr_addr);
	}
	struct URetainerBox Get_fontEffectPass1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct URetainerBox(ptr_addr);
	}
	struct URetainerBox Get_fontEffectPass2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct URetainerBox(ptr_addr);
	}
	struct UTextBlock Get_attributeValueTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULargeAquaticAnimalSpeciesData
{
public:
	ULargeAquaticAnimalSpeciesData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	ALargeAquaticAnimal GetAnimalClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return ALargeAquaticAnimal(ptr_addr);
	}
	float GetRequiredDepthForSpawning() {
		return memory.read<float>(m_addr + 56);
	}
	uint8_t  GetSpawningWaterType() {
		return memory.read<uint8_t >(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankCardItemComponent
{
public:
	UBankCardItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId Get_ownerUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 200);
	}
	int64_t Get_bankAccountNumber() {
		return memory.read<int64_t>(m_addr + 208);
	}
	uint8_t  Get_bankCardType() {
		return memory.read<uint8_t >(m_addr + 216);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADropZoneGameEvent
{
public:
	ADropZoneGameEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	ADropZoneEquipmentTable GetTableAClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1376);
		return ADropZoneEquipmentTable(ptr_addr);
	}
	ADropZoneEquipmentTable GetTableBClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1384);
		return ADropZoneEquipmentTable(ptr_addr);
	}
	ADropZoneCrate GetCrateClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1392);
		return ADropZoneCrate(ptr_addr);
	}
	ADropZoneCargo GetCargoClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1400);
		return ADropZoneCargo(ptr_addr);
	}
	struct UAkAudioEvent GetIntroAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1408);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetLocateTheKeyAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1416);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetBlueTeamFoundKeyAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1424);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetBlueTeamUnlockedAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1432);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetBlueTeamStolenAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1440);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRedTeamFoundKeyAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1448);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRedTeamUnlockedAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1456);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRedTeamStolenAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1464);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetCargoDropAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1472);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetCargoLandedAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1480);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UTexture2D GetKeyIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1488);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetCargoIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1496);
		return struct UTexture2D(ptr_addr);
	}
	struct FLinearColor GetFriendlyColor() {
		return memory.read<struct FLinearColor>(m_addr + 1504);
	}
	struct FLinearColor GetEnemyColor() {
		return memory.read<struct FLinearColor>(m_addr + 1520);
	}
	struct FDropZoneParameters Get_dropZoneParameters() {
		return memory.read<struct FDropZoneParameters>(m_addr + 1536);
	}
	uint8_t  Get_phase() {
		return memory.read<uint8_t >(m_addr + 1592);
	}
	int32_t Get_capturingTeam() {
		return memory.read<int32_t>(m_addr + 1596);
	}
	float Get_phaseTimeLeft() {
		return memory.read<float>(m_addr + 1600);
	}
	float Get_captureProgress() {
		return memory.read<float>(m_addr + 1604);
	}
	struct AGameEventBorder Get_barrierA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1616);
		return struct AGameEventBorder(ptr_addr);
	}
	struct AGameEventBorder Get_barrierB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1624);
		return struct AGameEventBorder(ptr_addr);
	}
	struct ADropZoneEquipmentTable Get_tableA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1632);
		return struct ADropZoneEquipmentTable(ptr_addr);
	}
	struct ADropZoneEquipmentTable Get_tableB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1640);
		return struct ADropZoneEquipmentTable(ptr_addr);
	}
	struct ADropZoneCrate Get_crateA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1648);
		return struct ADropZoneCrate(ptr_addr);
	}
	struct ADropZoneCrate Get_crateB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1656);
		return struct ADropZoneCrate(ptr_addr);
	}
	struct ADropZoneKey Get_key() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1664);
		return struct ADropZoneKey(ptr_addr);
	}
	struct APrisoner Get_keyCarrier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1672);
		return struct APrisoner(ptr_addr);
	}
	struct AActor Get_topmostKeyOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1680);
		return struct AActor(ptr_addr);
	}
	struct ADropZoneCargo Get_cargo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1688);
		return struct ADropZoneCargo(ptr_addr);
	}
	struct ADropZoneSlot Get_slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1696);
		return struct ADropZoneSlot(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankCardOperationResponse
{
public:
	UBankCardOperationResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankCardOwnershipRequest
{
public:
	UBankCardOwnershipRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDroneSoundComponent
{
public:
	UDroneSoundComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundCue GetIdleSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct USoundCue(ptr_addr);
	}
	struct UAkAudioEvent GetIdleAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct USoundCue GetAngrySound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct USoundCue(ptr_addr);
	}
	struct UAkAudioEvent GetAngryAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct USoundCue GetAttackSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct USoundCue(ptr_addr);
	}
	struct UAkAudioEvent GetAttackAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct USoundCue GetKillSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct USoundCue(ptr_addr);
	}
	struct UAkAudioEvent GetKillAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetMinSilenceTimeout() {
		return memory.read<float>(m_addr + 280);
	}
	float GetMaxSilenceTimeout() {
		return memory.read<float>(m_addr + 284);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACookedFoodItem
{
public:
	ACookedFoodItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSpoilageRateCooked() {
		return memory.read<float>(m_addr + 2480);
	}
	float GetTargetGramsPerUse() {
		return memory.read<float>(m_addr + 2484);
	}
	struct UTexture2D Get_inventoryIcon_Raw() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2488);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_inventoryIconInHands_Raw() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2496);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_outsideInventoryIcon_Raw() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2504);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_inventoryIcon_Burnt() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2512);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_inventoryIconInHands_Burnt() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2520);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_outsideInventoryIcon_Burnt() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2528);
		return struct UTexture2D(ptr_addr);
	}
	float Get_idealServingTemperatureMin() {
		return memory.read<float>(m_addr + 2536);
	}
	float Get_idealServingTemperatureMax() {
		return memory.read<float>(m_addr + 2540);
	}
	struct TArray<float> Get_exhaustionBonusDeltaPerCookQualityLevel() {
		return memory.read<struct TArray<float>>(m_addr + 2544);
	}
	struct UGameResourceType Get_cachedGameResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2560);
		return struct UGameResourceType(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AServerAnalyticsManager
{
public:
	AServerAnalyticsManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_Disorientation
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_Disorientation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodySymptom_Disorientation Get_symptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodySymptom_Disorientation(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Disorientation Get_symptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPrisonerBodySymptomCause_Disorientation(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_intensityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class ABird2
{
public:
	ABird2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsStaringPerched() {
		return memory.read<bool>(m_addr + 2424);
	}
	float GetMinFlightAltitude() {
		return memory.read<float>(m_addr + 2428);
	}
	float GetMaxFlightAltitude() {
		return memory.read<float>(m_addr + 2432);
	}
	bool Get_isLanding() {
		return memory.read<bool>(m_addr + 2436);
	}
	bool Get_isTakingOff() {
		return memory.read<bool>(m_addr + 2437);
	}
	bool Get_isPerched() {
		return memory.read<bool>(m_addr + 2438);
	}
	bool Get_isFlying() {
		return memory.read<bool>(m_addr + 2439);
	}
	struct TArray<bool> Get_states() {
		return memory.read<struct TArray<bool>>(m_addr + 2440);
	}
	char Get_repStates() {
		return memory.read<char>(m_addr + 2456);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_HeightenedSenses
{
public:
	UPrisonerBodySymptomCause_HeightenedSenses(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBankCardOwnershipResponse
{
public:
	UBankCardOwnershipResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABanker
{
public:
	ABanker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_bankTransactionCooldownTime() {
		return memory.read<float>(m_addr + 2296);
	}
	ABankATMMinigame Get_bankMinigameClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2304);
		return ABankATMMinigame(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBuriable
{
public:
	UBuriable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInteractionAssetData
{
public:
	UInteractionAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AConZBase
{
public:
	AConZBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<AConZBaseElement> Get_baseElementActor() {
		return memory.read<struct TWeakObjectPtr<AConZBaseElement>>(m_addr + 544);
	}
	struct TSet<UObject> Get_referencedBaseElementClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct TSet<UObject>(ptr_addr);
	}
	bool Get_overrideBlockStackingRules() {
		return memory.read<bool>(m_addr + 784);
	}
	float Get_debugRenderingDistance() {
		return memory.read<float>(m_addr + 788);
	}
	int32_t Get_decayProcessingNumberOfFrames() {
		return memory.read<int32_t>(m_addr + 792);
	}
	int32_t Get_decayProcessingMaxDestroyedElementsPerUpdate() {
		return memory.read<int32_t>(m_addr + 796);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankTransactionRequest
{
public:
	UBankTransactionRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USpawnScreen
{
public:
	USpawnScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton Get_mainMenuButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_respawnButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_scoreBoardButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UButton(ptr_addr);
	}
	struct UVerticalBox Get_messageBoxPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UVerticalBox(ptr_addr);
	}
	struct UOverlay Get_screen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay Get_scoreboard() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UOverlay(ptr_addr);
	}
	struct UGameEventLoadoutMenuWidget Get_gameEventLoadoutMenuWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UGameEventLoadoutMenuWidget(ptr_addr);
	}
	struct USpawnMenuWidget Get_spawnMenuWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct USpawnMenuWidget(ptr_addr);
	}
	struct UBorder Get_blackout() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UBorder(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryContainerHandsHolsters
{
public:
	UInventoryContainerHandsHolsters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UInventoryContainerWidget2 Get_handWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UInventoryContainerWidget2(ptr_addr);
	}
	struct UInventoryContainerWidget2 Get_shoulderLeftWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UInventoryContainerWidget2(ptr_addr);
	}
	struct UInventoryContainerWidget2 Get_shoulderRightWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UInventoryContainerWidget2(ptr_addr);
	}
	struct UInventoryContainerWidget2 Get_tradingHandWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UInventoryContainerWidget2(ptr_addr);
	}
	struct UInventoryContainerWidget2 Get_tradingShoulderLeftWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UInventoryContainerWidget2(ptr_addr);
	}
	struct UInventoryContainerWidget2 Get_tradingShoulderRightWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UInventoryContainerWidget2(ptr_addr);
	}
	struct FInventoryContainerHandsHolstersData Get_data() {
		return memory.read<struct FInventoryContainerHandsHolstersData>(m_addr + 112);
	}
	struct FInventoryContainerHandsHolstersData Get_oldData() {
		return memory.read<struct FInventoryContainerHandsHolstersData>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTireToSurfaceAudioData
{
public:
	UTireToSurfaceAudioData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSoundRange() {
		return memory.read<float>(m_addr + 48);
	}
	struct UAkAudioEvent Get_movementStarted() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_movementStopped() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_noSurface() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct TArray<struct FTireSurfaceAudioEntry> Get_soundGroups() {
		return memory.read<struct TArray<struct FTireSurfaceAudioEntry>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADrinkItem
{
public:
	ADrinkItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBasicGameResourceContainerComponent Get_gameResourceContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2480);
		return struct UBasicGameResourceContainerComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBankTransactionResponse
{
public:
	UBankTransactionResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBaseItemWidget
{
public:
	UBaseItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBaseItemContainerWidget GetParentInventory() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UBaseItemContainerWidget(ptr_addr);
	}
	int32_t GetWidth() {
		return memory.read<int32_t>(m_addr + 624);
	}
	int32_t GetHeight() {
		return memory.read<int32_t>(m_addr + 628);
	}
	struct UImage Get_imageWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_FeelingCold
{
public:
	UPrisonerBodySymptom_FeelingCold(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 184);
	}
	float Get_temperatureDeltaAtMaxSeverity() {
		return memory.read<float>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBaseMenu
{
public:
	UBaseMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionGesture
{
public:
	UPrisonerActionGesture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBarberShopMenuWidget
{
public:
	UBarberShopMenuWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UOverlay Get_overlayMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UOverlay(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderHairStyle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UCCGameUpgradeConditionDisplayWidget Get_hairStyleUpgradeConditionDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UCCGameUpgradeConditionDisplayWidget(ptr_addr);
	}
	struct UPresetColorPicker Get_presetColorPickerHairColor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UPresetColorPicker(ptr_addr);
	}
	struct UVerticalBox Get_facialHairVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UVerticalBox(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderFacialHairStyle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UCCGameUpgradeConditionDisplayWidget Get_facialHairStyleUpgradeConditionDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UCCGameUpgradeConditionDisplayWidget(ptr_addr);
	}
	struct UPresetColorPicker Get_presetColorPickerFacialHairColor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UPresetColorPicker(ptr_addr);
	}
	struct UCollapsableColorPicker Get_dropdownColorPickerEyeshadow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UCollapsableColorPicker(ptr_addr);
	}
	struct UCollapsableColorPicker Get_dropdownColorPickerEyeliner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UCollapsableColorPicker(ptr_addr);
	}
	struct UVerticalBox Get_makeupVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UVerticalBox(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderEyesMakeupMetalness() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderEyesMakeupIntensity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UCollapsableColorPicker Get_dropdownColorPickerLipstickColor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UCollapsableColorPicker(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderLipstickGlossiness() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderLipstickIntensity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UConZStandardButton Get_buttonRandomize() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonApply() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UOverlay Get_overlayConfirmation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UOverlay(ptr_addr);
	}
	struct UConZStandardButton Get_buttonCancelConfirmation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonContinueConfirmation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UScrollBox Get_faceOptionsScrollbox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UScrollBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBaseBuildingItemComponent
{
public:
	UBaseBuildingItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AItem Get_itemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1776);
		return AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElementData_Affects
{
public:
	UModularTooltipElementData_Affects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UModularTooltipElementData GetAffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UModularTooltipElementData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElementData_AffectedBy
{
public:
	UModularTooltipElementData_AffectedBy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UModularTooltipElementData GetAffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UModularTooltipElementData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularBaseBuildingComponent
{
public:
	UModularBaseBuildingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FRotator> Get_availableOrientations() {
		return memory.read<struct TArray<struct FRotator>>(m_addr + 1776);
	}
	float GetMinStabilityForPlacement() {
		return memory.read<float>(m_addr + 1792);
	}
	struct TArray<struct FElementQueryMarker> Get_elementStabilityMarkers() {
		return memory.read<struct TArray<struct FElementQueryMarker>>(m_addr + 1800);
	}
	struct TArray<struct FModularElementSnapMarker> Get_modularElementSnapMarkers() {
		return memory.read<struct TArray<struct FModularElementSnapMarker>>(m_addr + 1816);
	}
	struct TArray<struct FElementMorphQuery> Get_elementMorphQueries() {
		return memory.read<struct TArray<struct FElementMorphQuery>>(m_addr + 1832);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemActionSequenceLoadMagazine
{
public:
	UItemActionSequenceLoadMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_loadedAmmoCount() {
		return memory.read<int32_t>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDcxBicycleAnimInstance
{
public:
	UDcxBicycleAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UClaimableWhenKilled
{
public:
	UClaimableWhenKilled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCraftingResult
{
public:
	UCraftingResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionStopResting
{
public:
	UPrisonerActionStopResting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionInsertArrow
{
public:
	UPrisonerActionInsertArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBaseInteractionComponent
{
public:
	UBaseInteractionComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_capsuleRadius() {
		return memory.read<float>(m_addr + 520);
	}
	float Get_capsuleHalfHeight() {
		return memory.read<float>(m_addr + 524);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameResourceContainerEntityComponentSetup
{
public:
	UGameResourceContainerEntityComponentSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return UGameResourceType(ptr_addr);
	}
	float GetMaxResourceAmount() {
		return memory.read<float>(m_addr + 80);
	}
	float GetResourceAmount() {
		return memory.read<float>(m_addr + 84);
	}
	float GetResourceUsageRate() {
		return memory.read<float>(m_addr + 88);
	}
	float GetMinTickInterval() {
		return memory.read<float>(m_addr + 92);
	}
	float GetMinResourceAmountRatioChangeToTick() {
		return memory.read<float>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFillWaterAction
{
public:
	UFillWaterAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBasicGameResourceContainerComponent
{
public:
	UBasicGameResourceContainerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType Get_repResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return UGameResourceType(ptr_addr);
	}
	float Get_repResourceAmount() {
		return memory.read<float>(m_addr + 240);
	}
	UGameResourceType Get_acceptedResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return UGameResourceType(ptr_addr);
	}
	struct FGameplayTagContainer Get_resourceFillingInSocketTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 256);
	}
	struct FGameplayTagContainer Get_resourceFillingOutSocketTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 288);
	}
	struct TArray<struct UBaseItemTag> Get_requiredItemTagsForFilling() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct TArray<struct UBaseItemTag>(ptr_addr);
	}
	bool Get_shouldUpdateOwningItemUses() {
		return memory.read<bool>(m_addr + 336);
	}
	bool Get_canDrink() {
		return memory.read<bool>(m_addr + 337);
	}
	bool Get_canSpill() {
		return memory.read<bool>(m_addr + 338);
	}
	bool Get_canCheck() {
		return memory.read<bool>(m_addr + 339);
	}
	bool Get_showResourcePercentageOnCheck() {
		return memory.read<bool>(m_addr + 340);
	}
	bool Get_shouldUncraftWhenEmpty() {
		return memory.read<bool>(m_addr + 341);
	}
	bool Get_shouldSpillWhenPickedUp() {
		return memory.read<bool>(m_addr + 342);
	}
	bool Get_shouldSpillWhenAddedToContainer() {
		return memory.read<bool>(m_addr + 343);
	}
	bool Get_shouldTakeInHandsWhenDrinking() {
		return memory.read<bool>(m_addr + 344);
	}
	struct FText Get_interactionText() {
		return memory.read<struct FText>(m_addr + 352);
	}
	struct UAnimMontage Get_resourceFillingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 376);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAkAudioEvent Get_resourceStartFillingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_resourceStopFillingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 392);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_resourceFillingDurationPerAmountFilled() {
		return memory.read<float>(m_addr + 400);
	}
	float Get_resourceFillingExperiencePerAmount() {
		return memory.read<float>(m_addr + 404);
	}
	uint8_t  Get_targetStanceWhenFilling() {
		return memory.read<uint8_t >(m_addr + 408);
	}
	bool Get_shouldTakeInHandsWhenFilling() {
		return memory.read<bool>(m_addr + 409);
	}
	struct UAkAudioEvent Get_spillStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 416);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_spillStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 424);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAnimMontage Get_spillMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 432);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_spillMontageEnd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 440);
		return struct UAnimMontage(ptr_addr);
	}
	struct UParticleSystem Get_particles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 448);
		return struct UParticleSystem(ptr_addr);
	}
	float Get_minSpillTime() {
		return memory.read<float>(m_addr + 456);
	}
	float Get_maxSpillTime() {
		return memory.read<float>(m_addr + 460);
	}
	float Get_spillTimePerKg() {
		return memory.read<float>(m_addr + 464);
	}
	struct UAkAudioEvent Get_drinkStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 472);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_drinkStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 480);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismSegmentedProgressBar
{
public:
	UMetabolismSegmentedProgressBar(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FMetabolismSPBColorScheme> GetColorSchemes() {
		return memory.read<struct TArray<struct FMetabolismSPBColorScheme>>(m_addr + 608);
	}
	struct FSlateBrush GetBrushOverride() {
		return memory.read<struct FSlateBrush>(m_addr + 624);
	}
	struct UImage Get_progressBarImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDoorLockingRegistry
{
public:
	UDoorLockingRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<uint8_t , struct FDoorUnlockDataCollection> Get_doorUnlockDataByType() {
		return memory.read<struct TMap<uint8_t , struct FDoorUnlockDataCollection>>(m_addr + 176);
	}
	int32_t Get_countNormalizationThreshold() {
		return memory.read<int32_t>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULWObjectSetup
{
public:
	ULWObjectSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AConZGameState
{
public:
	AConZGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URespawnSettings GetRespawnSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct URespawnSettings(ptr_addr);
	}
	struct UCraftingDatabase Get_craftingDatabase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UCraftingDatabase(ptr_addr);
	}
	struct UArchitecturalCategoriesDatabase Get_architecturalCategoriesDatabase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UArchitecturalCategoriesDatabase(ptr_addr);
	}
	struct TArray<struct AConZCharacter> Get_registeredCharacters() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct TArray<struct AConZCharacter>(ptr_addr);
	}
	struct TArray<struct AConZSquad> Get_squads() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct TArray<struct AConZSquad>(ptr_addr);
	}
	struct TMap<struct TWeakObjectPtr<AConZCharacter>, int32_t> Get_currentDroneTargetDispatcherMap() {
		return memory.read<struct TMap<struct TWeakObjectPtr<AConZCharacter>, int32_t>>(m_addr + 1112);
	}
	struct TMap<struct TWeakObjectPtr<AConZCharacter>, int32_t> Get_droneTargetDispatcherHistoryMap() {
		return memory.read<struct TMap<struct TWeakObjectPtr<AConZCharacter>, int32_t>>(m_addr + 1192);
	}
	struct TMap<struct TWeakObjectPtr<AConZCharacter>, struct UDroneTargetData> Get_droneTargetVisits() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return struct TMap<struct TWeakObjectPtr<AConZCharacter>, struct UDroneTargetData>(ptr_addr);
	}
	ALadderMarkersRegistry Get_ladderMarkersRegistryClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1352);
		return ALadderMarkersRegistry(ptr_addr);
	}
	struct ALadderMarkersRegistry Get_ladderMarkersRegistry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1360);
		return struct ALadderMarkersRegistry(ptr_addr);
	}
	AConZWaterSplineRegistry Get_waterSplineRegistryClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1368);
		return AConZWaterSplineRegistry(ptr_addr);
	}
	struct AConZWaterSplineRegistry Get_waterSplineRegistry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1376);
		return struct AConZWaterSplineRegistry(ptr_addr);
	}
	struct URemoteSensorRegistry Get_remoteSensorRegistry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1392);
		return struct URemoteSensorRegistry(ptr_addr);
	}
	struct UReplenishableResourceManager Get_replenishableResourceManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1472);
		return struct UReplenishableResourceManager(ptr_addr);
	}
	struct URestorableMeshInstancesManager Get_restorableMeshInstancesManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1480);
		return struct URestorableMeshInstancesManager(ptr_addr);
	}
	struct UResourceLockingManager Get_resourceLockingManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1488);
		return struct UResourceLockingManager(ptr_addr);
	}
	struct UItemRegistry Get_itemRegistry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1496);
		return struct UItemRegistry(ptr_addr);
	}
	struct UCustomZoneRegistry Get_customZoneRegistry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1504);
		return struct UCustomZoneRegistry(ptr_addr);
	}
	struct UGameResourceContainerProxyRegistry Get_gameResourceContainerProxyRegistry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1512);
		return struct UGameResourceContainerProxyRegistry(ptr_addr);
	}
	struct UZoneRegistry Get_zoneRegistry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1520);
		return struct UZoneRegistry(ptr_addr);
	}
	struct UStaticDoorReplicator Get_staticDoorReplicator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1528);
		return struct UStaticDoorReplicator(ptr_addr);
	}
	struct UBankAccountRegistry Get_bankAccountRegistry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1536);
		return struct UBankAccountRegistry(ptr_addr);
	}
	struct TMap<struct FDbIntegerId, struct FDbIntegerId> Get_prisonerKillRegistry() {
		return memory.read<struct TMap<struct FDbIntegerId, struct FDbIntegerId>>(m_addr + 1752);
	}
	ACustomMapBorder Get_customMapBorderClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1832);
		return ACustomMapBorder(ptr_addr);
	}
	ATournament Get_tournamentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1840);
		return ATournament(ptr_addr);
	}
	struct ACustomMapBorder Get_customMapBorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1848);
		return struct ACustomMapBorder(ptr_addr);
	}
	struct ATournament Get_tournament() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1856);
		return struct ATournament(ptr_addr);
	}
	bool Get_areLockedLootContainersEnabled() {
		return memory.read<bool>(m_addr + 1865);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBasicNotification
{
public:
	UBasicNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTraderMainUIController
{
public:
	UTraderMainUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTraderBuyUIController GetTraderBuyUIController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UTraderBuyUIController(ptr_addr);
	}
	struct UTraderSellUIController GetTraderSellUIController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UTraderSellUIController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionLootPrisoner
{
public:
	UPrisonerActionLootPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTakeInHandsAssetData
{
public:
	UTakeInHandsAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UAttachmentSocketMountType GetAttachmentSocketMountType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UAttachmentSocketMountType(ptr_addr);
	}
	struct FName GetGripSocketName() {
		return memory.read<struct FName>(m_addr + 56);
	}
	struct FName GetSupportingHandIKSocketName() {
		return memory.read<struct FName>(m_addr + 64);
	}
	struct UAnimMontage GetTakeInHandsMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetRemoveFromHandsMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAnimMontage(ptr_addr);
	}
	struct UMeleeSkillAnimationsPreset GetMeleeSkillAnimationsPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UMeleeSkillAnimationsPreset(ptr_addr);
	}
	struct UHandsCorrectionsData GetHandsCorrectionssData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UHandsCorrectionsData(ptr_addr);
	}
	struct UItemFirstPersonAnimationsDataAsset GetFirstPersonAnimationsData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UItemFirstPersonAnimationsDataAsset(ptr_addr);
	}
	uint8_t  GetMaxPace() {
		return memory.read<uint8_t >(m_addr + 112);
	}
	float GetMovementSpeedModifier() {
		return memory.read<float>(m_addr + 116);
	}
	float GetSwimmingMovementSpeedModifier() {
		return memory.read<float>(m_addr + 120);
	}
	float GetDivingMovementSpeedModifier() {
		return memory.read<float>(m_addr + 124);
	}
	float GetBuoyancyMultiplier() {
		return memory.read<float>(m_addr + 128);
	}
	bool GetShouldDropWhenEnteringCombatMode() {
		return memory.read<bool>(m_addr + 132);
	}
	bool GetShouldActionConstrainStance() {
		return memory.read<bool>(m_addr + 133);
	}
	bool GetShouldActionConstrainMove() {
		return memory.read<bool>(m_addr + 134);
	}
	bool GetShouldActionConstrainTurn() {
		return memory.read<bool>(m_addr + 135);
	}
	bool GetShouldActionForceStance() {
		return memory.read<bool>(m_addr + 136);
	}
	uint8_t  GetActionStance() {
		return memory.read<uint8_t >(m_addr + 137);
	}
	uint8_t  GetActionStanceFlag() {
		return memory.read<uint8_t >(m_addr + 138);
	}
	bool GetIsCarried() {
		return memory.read<bool>(m_addr + 139);
	}
	uint8_t  GetStanceWhileCarrying() {
		return memory.read<uint8_t >(m_addr + 140);
	}
	uint8_t  GetCarryStanceFlag() {
		return memory.read<uint8_t >(m_addr + 141);
	}
	bool GetShouldDropWhenEnteringCombatModeWhileCarrying() {
		return memory.read<bool>(m_addr + 142);
	}
	uint8_t  GetMaxPaceWhileCarrying() {
		return memory.read<uint8_t >(m_addr + 143);
	}
	struct UAnimSequenceBase GetCarryItemIdleAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetCarryItemIdleAnimationTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimMontage GetPlayerLongThrowMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPlayerLongThrowLoopMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPlayerShortThrowMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPlayerThrowbackMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetThrowingItemToWeaponMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetWeaponToThrowingItemMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UAnimMontage(ptr_addr);
	}
	struct TMap<uint8_t , struct FThrowingAnimationSet> GetThrowingAnimationSets() {
		return memory.read<struct TMap<uint8_t , struct FThrowingAnimationSet>>(m_addr + 208);
	}
	float GetMaxObstructedDepenetrationDepth() {
		return memory.read<float>(m_addr + 288);
	}
	float GetMaxObstructedDepenetrationDepthProne() {
		return memory.read<float>(m_addr + 292);
	}
	struct UAnimSequenceBase GetLeftObstructedIdleAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetRightObstructedIdleAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetObstructedIdleAnimationTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetObstructedIdleAnimationProneTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACombinationLockItem
{
public:
	ACombinationLockItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_combination() {
		return memory.read<int32_t>(m_addr + 2320);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemInventoryDepotWidget2
{
public:
	UItemInventoryDepotWidget2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UInventoryContainer2D Get_container() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UInventoryContainer2D(ptr_addr);
	}
	struct UCanvasPanel Get_inventoryCanvas() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UCanvasPanel(ptr_addr);
	}
	struct TScriptInterface<IInventoryNode> Get_item() {
		return memory.read<struct TScriptInterface<IInventoryNode>>(m_addr + 632);
	}
	struct UGridPanel Get_inventoryGrid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UGridPanel(ptr_addr);
	}
	struct UWidget Get_loadingWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidget(ptr_addr);
	}
	struct UInventoryGridWidget Get_inventoryGridWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UInventoryGridWidget(ptr_addr);
	}
	struct UHorizontalBox Get_contentBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UHorizontalBox(ptr_addr);
	}
	struct TArray<struct UInventorySlotUserWidget> Get_slotsWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct TArray<struct UInventorySlotUserWidget>(ptr_addr);
	}
	struct UWidgetAnimation GetBlinkAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct URetainerBox GetRetainerBoxDeadCells() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct URetainerBox(ptr_addr);
	}
	bool Get_canMinimize() {
		return memory.read<bool>(m_addr + 712);
	}

private:
	std::uint64_t m_addr = 0;
};


class ARecastNavMesh_Sentries
{
public:
	ARecastNavMesh_Sentries(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADroneAIController
{
public:
	ADroneAIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_followingDuration() {
		return memory.read<float>(m_addr + 808);
	}
	float Get_followingTargetSpeedThreshold() {
		return memory.read<float>(m_addr + 812);
	}
	float Get_forcedSelfDestructTime() {
		return memory.read<float>(m_addr + 816);
	}
	float Get_followingHeight() {
		return memory.read<float>(m_addr + 820);
	}
	float Get_followingDistance() {
		return memory.read<float>(m_addr + 824);
	}
	float Get_resumeFollowingExtraDistance() {
		return memory.read<float>(m_addr + 828);
	}
	float Get_resumeFollowingSeconds() {
		return memory.read<float>(m_addr + 832);
	}
	float Get_resumeFollowingExtendedSeconds() {
		return memory.read<float>(m_addr + 836);
	}
	float Get_followingCirclingMinTime() {
		return memory.read<float>(m_addr + 844);
	}
	float Get_followingCirclingMaxTime() {
		return memory.read<float>(m_addr + 848);
	}
	float Get_followingCirclingNewDirectionMinTime() {
		return memory.read<float>(m_addr + 852);
	}
	float Get_followingCirclingNewDirectionMaxTime() {
		return memory.read<float>(m_addr + 856);
	}
	float Get_switchFollowingTargetsMaxDistance() {
		return memory.read<float>(m_addr + 860);
	}
	float Get_flybyHorizontalDistanceFromTarget() {
		return memory.read<float>(m_addr + 912);
	}
	float Get_flybyVerticalDistanceFromTarget() {
		return memory.read<float>(m_addr + 916);
	}
	float Get_flybyPathLength() {
		return memory.read<float>(m_addr + 920);
	}
	float Get_minFlybyAngleDeg() {
		return memory.read<float>(m_addr + 924);
	}
	float Get_maxFlybyAngleDeg() {
		return memory.read<float>(m_addr + 928);
	}
	float Get_crashingDistance() {
		return memory.read<float>(m_addr + 952);
	}
	float Get_leavingForwardDistance() {
		return memory.read<float>(m_addr + 960);
	}
	float Get_leavingVerticalDistance() {
		return memory.read<float>(m_addr + 964);
	}
	float Get_minimumNavigationProximityPerState[6]() {
		return memory.read<float>(m_addr + 968);
	}
	float Get_boundsInflation() {
		return memory.read<float>(m_addr + 992);
	}
	float Get_bypassAccelerationScale() {
		return memory.read<float>(m_addr + 996);
	}
	float Get_bypassTurningSpeed() {
		return memory.read<float>(m_addr + 1000);
	}
	float Get_findPathBypassMultiplier() {
		return memory.read<float>(m_addr + 1004);
	}
	float Get_maxTimePerDestinationMultiplier() {
		return memory.read<float>(m_addr + 1008);
	}
	float Get_droneTurningSpeed() {
		return memory.read<float>(m_addr + 1012);
	}
	float Get_maxPathSegment() {
		return memory.read<float>(m_addr + 1016);
	}
	float Get_flyUpwardsDistance() {
		return memory.read<float>(m_addr + 1020);
	}
	int32_t Get_maximumAttemptedHeightGains() {
		return memory.read<int32_t>(m_addr + 1024);
	}
	struct FVector Get_randomMovementExtent() {
		return memory.read<struct FVector>(m_addr + 1032);
	}
	float Get_repeatChooseLocationTime() {
		return memory.read<float>(m_addr + 1044);
	}
	float Get_highAccelerationScaleMultiplier() {
		return memory.read<float>(m_addr + 1048);
	}
	float Get_distanceForHighAcceleration() {
		return memory.read<float>(m_addr + 1052);
	}
	float Get_brakingDecelerationFlyingMovementRestore() {
		return memory.read<float>(m_addr + 1064);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerResponseIdle_StaminaInRange
{
public:
	UPrisonerResponseIdle_StaminaInRange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatRange GetStaminaRatioRange() {
		return memory.read<struct FFloatRange>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNotificationDescription
{
public:
	UNotificationDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetTarget() {
		return memory.read<uint8_t >(m_addr + 40);
	}
	struct FDbIntegerId GetTargetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 48);
	}
	bool GetShouldSendIfClientOffline() {
		return memory.read<bool>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameEventLoadoutMenuWidget
{
public:
	UGameEventLoadoutMenuWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UItemSelection> Get_mandatoryGear() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct TArray<struct UItemSelection>(ptr_addr);
	}
	struct UItemSelectionSlotWidget Get_primarySelection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UItemSelectionSlotWidget(ptr_addr);
	}
	struct UItemSelectionSlotWidget Get_secondarySelection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UItemSelectionSlotWidget(ptr_addr);
	}
	struct UItemSelectionSlotWidget Get_tertiarySelection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UItemSelectionSlotWidget(ptr_addr);
	}
	struct UItemSelectionSlotWidget Get_outfitSelection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UItemSelectionSlotWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_InhalationPoisoning
{
public:
	UPrisonerBodyConditionUIData_InhalationPoisoning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText Get_substanceName() {
		return memory.read<struct FText>(m_addr + 432);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBasicTextWidget
{
public:
	UBasicTextWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMaxTextRows() {
		return memory.read<int32_t>(m_addr + 608);
	}
	int32_t GetMaxCharactersPerTextRow() {
		return memory.read<int32_t>(m_addr + 612);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsRegionsList
{
public:
	UCustomZoneSettingsRegionsList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_regionCountDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_buttonAddRegion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UButton(ptr_addr);
	}
	struct UScrollBox Get_scrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UScrollBox(ptr_addr);
	}
	UCustomZoneSettingsRegion Get_regionWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return UCustomZoneSettingsRegion(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularBaseBuildingBlockCraftableItem
{
public:
	UModularBaseBuildingBlockCraftableItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDummyCollisionCapsule
{
public:
	UDummyCollisionCapsule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag Get_attachment() {
		return memory.read<struct FGameplayTag>(m_addr + 1136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionAddFertilizer
{
public:
	UPrisonerActionAddFertilizer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBatchFuelHeatSource
{
public:
	UBatchFuelHeatSource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_fuelMassCapacity() {
		return memory.read<float>(m_addr + 544);
	}
	struct FCombustibleItemParams Get_initialFuelCombustionParams() {
		return memory.read<struct FCombustibleItemParams>(m_addr + 548);
	}
	float Get_initialFuelMass() {
		return memory.read<float>(m_addr + 556);
	}
	float Get_temperatureMultiplierRain() {
		return memory.read<float>(m_addr + 560);
	}
	uint8_t  Get_heightForBlowAirAnimation() {
		return memory.read<uint8_t >(m_addr + 564);
	}
	float Get_distanceForBlowAirAnimation() {
		return memory.read<float>(m_addr + 568);
	}
	bool Get_isBurning() {
		return memory.read<bool>(m_addr + 572);
	}
	int32_t Get_burningStage() {
		return memory.read<int32_t>(m_addr + 576);
	}
	float Get_repFuelMass() {
		return memory.read<float>(m_addr + 580);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCombinationLockData
{
public:
	UCombinationLockData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCombination() {
		return memory.read<int32_t>(m_addr + 152);
	}
	int32_t GetLockIndex() {
		return memory.read<int32_t>(m_addr + 156);
	}
	AMinigame GetSetCombinationMinigameClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return AMinigame(ptr_addr);
	}
	UMinigameConfiguration GetSetCombinationMinigameConfigurationClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return UMinigameConfiguration(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElementData
{
public:
	UModularTooltipElementData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGrenadeAnimInstance
{
public:
	UGrenadeAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_owningPrisonerStance() {
		return memory.read<uint8_t >(m_addr + 704);
	}
	bool Get_isOwningPrisonerInFirstPersonView() {
		return memory.read<bool>(m_addr + 705);
	}
	bool Get_isPinPulled() {
		return memory.read<bool>(m_addr + 706);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVoicelineSegmentInfo
{
public:
	UVoicelineSegmentInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCharacterVoiceline GetVoiceline() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UCharacterVoiceline(ptr_addr);
	}
	struct APrisoner Get_prisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMiniatureZombie
{
public:
	AMiniatureZombie(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBCULockable
{
public:
	UBCULockable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UClockFaceWidget
{
public:
	UClockFaceWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCraftingFamePointsItemTag
{
public:
	UCraftingFamePointsItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_fameAmount() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UClearClipPartiallyEjected
{
public:
	UClearClipPartiallyEjected(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCraftingSlotType
{
public:
	UCraftingSlotType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UCraftingIngredientType> GetIngredientTypes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<UCraftingIngredientType>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTraderDropdownMenu
{
public:
	UTraderDropdownMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetPreviewSelectedState() {
		return memory.read<bool>(m_addr + 608);
	}
	struct UWidgetSwitcher Get_backgroundSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UComboBoxStringWithIndexing Get_comboBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UComboBoxStringWithIndexing(ptr_addr);
	}
	struct UImage Get_dropdownIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UImage(ptr_addr);
	}
	struct TArray<struct FTraderDropdownMenuEntry> Get_comboBoxEntries() {
		return memory.read<struct TArray<struct FTraderDropdownMenuEntry>>(m_addr + 688);
	}

private:
	std::uint64_t m_addr = 0;
};


class ABCULockItem
{
public:
	ABCULockItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBasicGameResourceContainerComponent Get_resourceContainerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct UBasicGameResourceContainerComponent(ptr_addr);
	}
	struct FDbIntegerId Get_connectedServerUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 2328);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryItemComponentReplicatedPage
{
public:
	UInventoryItemComponentReplicatedPage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInventoryItemComponentReplicatedPageData GetData() {
		return memory.read<struct FInventoryItemComponentReplicatedPageData>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class ABCULockRegistry
{
public:
	ABCULockRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayEffectsWhenParticleCollides
{
public:
	UPlayEffectsWhenParticleCollides(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UProjectileImpactEffects GetImpactEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UProjectileImpactEffects(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AClothesItem
{
public:
	AClothesItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UInventoryItemComponent Get_inventoryComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct UInventoryItemComponent(ptr_addr);
	}
	struct UCharacterMesh Get_characterMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2328);
		return struct UCharacterMesh(ptr_addr);
	}
	uint32_t Get_warmth() {
		return memory.read<uint32_t>(m_addr + 2336);
	}
	uint32_t Get_waterResistance() {
		return memory.read<uint32_t>(m_addr + 2340);
	}
	float Get_inwardsWaterPropagationFactor() {
		return memory.read<float>(m_addr + 2344);
	}
	float Get_outwardsWaterPropagationFactor() {
		return memory.read<float>(m_addr + 2348);
	}
	float Get_camouflageBonus() {
		return memory.read<float>(m_addr + 2352);
	}
	float Get_damageWhenEquipped() {
		return memory.read<float>(m_addr + 2356);
	}
	float Get_dirtinessWhenEquipped() {
		return memory.read<float>(m_addr + 2360);
	}
	float Get_thermalConductivityFactor() {
		return memory.read<float>(m_addr + 2364);
	}
	bool Get_canBeEquipped() {
		return memory.read<bool>(m_addr + 2368);
	}
	uint8_t  Get_maxPaceWhenEquipped() {
		return memory.read<uint8_t >(m_addr + 2369);
	}
	float Get_dirtiness() {
		return memory.read<float>(m_addr + 2372);
	}
	float Get_baseBodyPartMultiplier() {
		return memory.read<float>(m_addr + 2376);
	}
	float Get_baseBodyPartMultiplierWhileProne() {
		return memory.read<float>(m_addr + 2380);
	}
	float Get_smallMaterialDamageLimit() {
		return memory.read<float>(m_addr + 2384);
	}
	float Get_bigMaterialDamageLimit() {
		return memory.read<float>(m_addr + 2388);
	}
	float Get_maxFemaleHairLength() {
		return memory.read<float>(m_addr + 2392);
	}
	float Get_maxMaleHairLength() {
		return memory.read<float>(m_addr + 2396);
	}
	float Get_maxFacialHairLength() {
		return memory.read<float>(m_addr + 2400);
	}
	float Get_bellyJiggleMultiplier() {
		return memory.read<float>(m_addr + 2404);
	}
	float Get_breastJiggleMultiplier() {
		return memory.read<float>(m_addr + 2408);
	}
	uint32_t Get_armor() {
		return memory.read<uint32_t>(m_addr + 2412);
	}
	float Get_hardness() {
		return memory.read<float>(m_addr + 2416);
	}
	float Get_projectileHitEnergyAbsorption() {
		return memory.read<float>(m_addr + 2420);
	}
	float Get_projectileHitEnergyDamagedAbsorption() {
		return memory.read<float>(m_addr + 2424);
	}
	float Get_energyThroughputRatio() {
		return memory.read<float>(m_addr + 2428);
	}
	float Get_totalEnergyAbsorption() {
		return memory.read<float>(m_addr + 2432);
	}
	float Get_sharpMeleeDamageReduction() {
		return memory.read<float>(m_addr + 2436);
	}
	float Get_bluntMeleeDamageReduction() {
		return memory.read<float>(m_addr + 2440);
	}
	uint32_t Get_capacityX() {
		return memory.read<uint32_t>(m_addr + 2444);
	}
	uint32_t Get_capacityY() {
		return memory.read<uint32_t>(m_addr + 2448);
	}
	char Get_materialParametersReplicated() {
		return memory.read<char>(m_addr + 2453);
	}
	struct UInventoryContainer2D Get_inventoryContainer2D() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2472);
		return struct UInventoryContainer2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBioChemSkill
{
public:
	UBioChemSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_ICU_RR_Stats
{
public:
	UMetabolism_ICU_RR_Stats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_rrMinMax() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_rrTextValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBiomeData
{
public:
	UBiomeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInstance GetVisualizationMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UMaterialInstance(ptr_addr);
	}
	struct TMap<struct TSoftClassPtr<UObject>, struct FAnimalSpawnData> GetAnimalSpawnData() {
		return memory.read<struct TMap<struct TSoftClassPtr<UObject>, struct FAnimalSpawnData>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause
{
public:
	UPrisonerBodySymptomCause(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBird2AnimInstance
{
public:
	UBird2AnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetABPSpeed() {
		return memory.read<float>(m_addr + 696);
	}
	bool GetIsLanding() {
		return memory.read<bool>(m_addr + 700);
	}
	bool GetIsTakingOff() {
		return memory.read<bool>(m_addr + 701);
	}
	bool GetIsPerched() {
		return memory.read<bool>(m_addr + 702);
	}
	bool GetIsFlying() {
		return memory.read<bool>(m_addr + 703);
	}
	bool GetIsStaringPerched() {
		return memory.read<bool>(m_addr + 704);
	}
	struct FRotator GetSlopeRootTiltRotation() {
		return memory.read<struct FRotator>(m_addr + 708);
	}

private:
	std::uint64_t m_addr = 0;
};


class ABoat
{
public:
	ABoat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAdvancedBuoyancyComponent Get_advancedBuoyancyComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2792);
		return struct UAdvancedBuoyancyComponent(ptr_addr);
	}
	struct UConZBuoyancyComponent Get_buoyancyComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2800);
		return struct UConZBuoyancyComponent(ptr_addr);
	}
	struct UParticleSystem Get_waterSplashParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2824);
		return struct UParticleSystem(ptr_addr);
	}
	struct TArray<struct FVector> Get_particleLocations() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 2832);
	}
	float Get_throttleForceMagnitude() {
		return memory.read<float>(m_addr + 2860);
	}
	struct FVector Get_forcePosition() {
		return memory.read<struct FVector>(m_addr + 2864);
	}
	float Get_yawImpulse() {
		return memory.read<float>(m_addr + 2876);
	}
	float Get_rollImpulse() {
		return memory.read<float>(m_addr + 2880);
	}
	float Get_pitchImpulse() {
		return memory.read<float>(m_addr + 2884);
	}
	bool Get_isAnchored() {
		return memory.read<bool>(m_addr + 2888);
	}
	struct FRuntimeFloatCurve Get_driverActionDifficultyVsSpeed() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 2896);
	}
	struct FRuntimeFloatCurve Get_driverConstitutionChangeRateModifierVsSpeed() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3032);
	}
	struct FRuntimeFloatCurve Get_driverStrengthChangeRateModifierVsSpeed() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3168);
	}
	struct FBoatParametersPerMovementPace Get_parametersPerMovementPace[4]() {
		return memory.read<struct FBoatParametersPerMovementPace>(m_addr + 3304);
	}
	struct FFloatInterval Get_maxSpeedModifierInterpedWithDriverDexterity() {
		return memory.read<struct FFloatInterval>(m_addr + 3400);
	}
	float Get_throttleInterpSpeed() {
		return memory.read<float>(m_addr + 3408);
	}
	float Get_brakeInterpSpeed() {
		return memory.read<float>(m_addr + 3416);
	}
	float Get_steerInterpSpeed() {
		return memory.read<float>(m_addr + 3424);
	}
	float Get_maxSteeringAngle() {
		return memory.read<float>(m_addr + 3432);
	}
	float Get_motorSteeringForce() {
		return memory.read<float>(m_addr + 3436);
	}
	float Get_motorSteerTurnMultiplier() {
		return memory.read<float>(m_addr + 3440);
	}
	float Get_maxSpeedForBase() {
		return memory.read<float>(m_addr + 3444);
	}
	struct FRuntimeFloatCurve Get_sidewaysVelocityFalloff() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3448);
	}
	struct FRuntimeFloatCurve Get_speedKmhVsDensityMultiplier() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3584);
	}
	float Get_maxMotorSpeed() {
		return memory.read<float>(m_addr + 3720);
	}
	float Get_throttleToRpmMultiplier() {
		return memory.read<float>(m_addr + 3724);
	}
	bool Get_isPaddleInLeftHand() {
		return memory.read<bool>(m_addr + 3744);
	}
	float Get_maxRowingSpeed() {
		return memory.read<float>(m_addr + 3748);
	}
	AItem GetitemNeededClassToStartRowing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3752);
		return AItem(ptr_addr);
	}
	float Get_rowingForce() {
		return memory.read<float>(m_addr + 3760);
	}
	struct FRuntimeFloatCurve Get_rowForceMultiplierPerKph() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3768);
	}
	float Get_rowTurnMultiplier() {
		return memory.read<float>(m_addr + 3904);
	}
	struct FRuntimeFloatCurve Get_rowTurnMultiplierPerKph() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3912);
	}
	struct UAkAudioEvent Get_rowingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4048);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_desiredDriftMultiplier() {
		return memory.read<float>(m_addr + 4056);
	}
	float Get_paddleDriftSteerMultiplier() {
		return memory.read<float>(m_addr + 4060);
	}
	uint32_t Get_numPaddleSwingsInOneHand() {
		return memory.read<uint32_t>(m_addr + 4064);
	}
	bool Get_hasSails() {
		return memory.read<bool>(m_addr + 4068);
	}
	float Get_sailingForceMultiplier() {
		return memory.read<float>(m_addr + 4072);
	}
	struct FRuntimeFloatCurve Get_sailingForceMultiplierPerKph() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 4080);
	}
	float Get_sailingTurnMultiplier() {
		return memory.read<float>(m_addr + 4216);
	}
	struct FRuntimeFloatCurve Get_sailingTurnMultiplierPerKph() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 4224);
	}
	struct UAkAudioEvent Get_sailingRudderStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4360);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_sailingRudderEndAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4368);
		return struct UAkAudioEvent(ptr_addr);
	}
	int32_t Get_sailsDeploySteps() {
		return memory.read<int32_t>(m_addr + 4376);
	}
	float Get_sailsDeploySpeedMultiplier() {
		return memory.read<float>(m_addr + 4380);
	}
	uint32_t Get_sailsTurnSteps() {
		return memory.read<uint32_t>(m_addr + 4384);
	}
	float Get_sailsTurnSpeedMultiplier() {
		return memory.read<float>(m_addr + 4388);
	}
	float Get_sailsMaxTurnAngle() {
		return memory.read<float>(m_addr + 4392);
	}
	float Get_maxSailingSpeed() {
		return memory.read<float>(m_addr + 4396);
	}
	struct FRuntimeFloatCurve Get_sailsDeploymentRatioVsForceMultiplier() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 4400);
	}
	float Get_sailingSteerSoundMultiplier() {
		return memory.read<float>(m_addr + 4536);
	}
	uint8_t  Get_sdfType() {
		return memory.read<uint8_t >(m_addr + 4572);
	}
	struct UParticleSystemComponent Get_LOarWaterParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4576);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_ROarWaterParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4584);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_FoodDisgust
{
public:
	UPrisonerBodyCondition_FoodDisgust(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatInterval Get_disgustAmountMultiplierVsConstitution() {
		return memory.read<struct FFloatInterval>(m_addr + 192);
	}
	float Get_disgustAmountTolerated() {
		return memory.read<float>(m_addr + 200);
	}
	float Get_disgustAmountToIssueFirstWarning() {
		return memory.read<float>(m_addr + 204);
	}
	UNotificationDescription Get_firstDisgustWarning() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return UNotificationDescription(ptr_addr);
	}
	float Get_disgustAmountToIssueSecondWarning() {
		return memory.read<float>(m_addr + 216);
	}
	UNotificationDescription Get_secondDisgustWarning() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return UNotificationDescription(ptr_addr);
	}
	float Get_disgustWarningCooldown() {
		return memory.read<float>(m_addr + 232);
	}
	float Get_disgustAmountToBeAbleToVomit() {
		return memory.read<float>(m_addr + 244);
	}
	float Get_disgustAmountToVomit() {
		return memory.read<float>(m_addr + 248);
	}
	float Get_disgustAmountDecreaseMultiplier() {
		return memory.read<float>(m_addr + 252);
	}
	float Get_disgustAmount() {
		return memory.read<float>(m_addr + 256);
	}
	float Get_disgustAmountAtStabilizationStart() {
		return memory.read<float>(m_addr + 288);
	}
	float Get_disgustAmountAtRecoveryStart() {
		return memory.read<float>(m_addr + 292);
	}
	UPrisonerBodySymptom_Nausea Get_nauseaSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return UPrisonerBodySymptom_Nausea(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMinigameWidget
{
public:
	UMinigameWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBombDefusalWidget
{
public:
	UBombDefusalWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_remainingTimeMinutes1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_remainingTimeMinutes2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_remainingTimeSeconds1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_remainingTimeSeconds2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMessageBox
{
public:
	UMessageBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_message() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UHorizontalBox Get_buttonRow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UHorizontalBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBondageItemTag
{
public:
	UBondageItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMesh GetBondageMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct USkeletalMesh(ptr_addr);
	}
	float GetBaseStruggleDuration() {
		return memory.read<float>(m_addr + 56);
	}
	float GetStruggleStrengthModifier() {
		return memory.read<float>(m_addr + 60);
	}
	float GetStruggleDexterityModifier() {
		return memory.read<float>(m_addr + 64);
	}
	float GetGroundMovementSpeedMultiplier() {
		return memory.read<float>(m_addr + 68);
	}
	float GetWaterMovementSpeedMultiplier() {
		return memory.read<float>(m_addr + 72);
	}
	struct UAnimSequenceBase GetHandsBoundIdleFPAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetHandsBoundIdleTPAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimMontage GetHandsBoundMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetHandsAdjustMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetHandsBoundStruggleMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetHandsFreedMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetBindingHandsMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetAdjustingHandsMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetHandsBoundSuicideMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameEventParticipantInfoCardWidget
{
public:
	UGameEventParticipantInfoCardWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UConZCustomInteractionWidget
{
public:
	UConZCustomInteractionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWeaponAttachment
{
public:
	AWeaponAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh Get_staticMeshWhenAttached() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2328);
		return struct UStaticMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFamePointStatics
{
public:
	UFamePointStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerUIDataResponse
{
public:
	UPrisonerUIDataResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerUIData Get_payload() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UPrisonerUIData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ABowAttachmentStabilizer
{
public:
	ABowAttachmentStabilizer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_shakinessModifier() {
		return memory.read<float>(m_addr + 2360);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionEatItem
{
public:
	UPrisonerActionEatItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent Get_startEatingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_stopEatingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UAkAudioEvent(ptr_addr);
	}
	AFoodItem Get_itemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return AFoodItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWeatherController2
{
public:
	AWeatherController2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxHeightAboveSeaLevel() {
		return memory.read<float>(m_addr + 616);
	}
	struct UDirectionalLightComponent Get_sun() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UDirectionalLightComponent(ptr_addr);
	}
	float Get_timeOfDay() {
		return memory.read<float>(m_addr + 632);
	}
	bool Get_canStartTimeOfDayBeOverridenByConfig() {
		return memory.read<bool>(m_addr + 636);
	}
	float Get_timeOfDaySpeed() {
		return memory.read<float>(m_addr + 640);
	}
	bool Get_canTimeOfDaySpeedBeOverridenByConfig() {
		return memory.read<bool>(m_addr + 644);
	}
	float Get_sunIntensity() {
		return memory.read<float>(m_addr + 648);
	}
	float Get_sunFullEclipseMult() {
		return memory.read<float>(m_addr + 652);
	}
	float Get_sunAzimuthDegrees() {
		return memory.read<float>(m_addr + 656);
	}
	float Get_sunriseTime() {
		return memory.read<float>(m_addr + 660);
	}
	bool Get_canSunriseTimeBeOverridenByConfig() {
		return memory.read<bool>(m_addr + 664);
	}
	float Get_sunsetTime() {
		return memory.read<float>(m_addr + 668);
	}
	bool Get_canSunsetTimeBeOverridenByConfig() {
		return memory.read<bool>(m_addr + 672);
	}
	float Get_dawnDuskTresholdAngle() {
		return memory.read<float>(m_addr + 676);
	}
	float Get_maxSolarIrradiance() {
		return memory.read<float>(m_addr + 684);
	}
	struct UDirectionalLightComponent Get_moon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UDirectionalLightComponent(ptr_addr);
	}
	float Get_moonRotation() {
		return memory.read<float>(m_addr + 696);
	}
	float Get_moonIntensityMult() {
		return memory.read<float>(m_addr + 700);
	}
	struct FLinearColor Get_moonLightTint() {
		return memory.read<struct FLinearColor>(m_addr + 704);
	}
	struct UMaterialInterface Get_moonStarsMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_moonStarsMaterialDynamic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UStaticMeshComponent Get_starsSphere() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UStaticMeshComponent(ptr_addr);
	}
	float Get_starsSphereDistance() {
		return memory.read<float>(m_addr + 744);
	}
	struct FRotator Get_starsSphereRotation() {
		return memory.read<struct FRotator>(m_addr + 748);
	}
	struct UDirectionalLightComponent Get_nightLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UDirectionalLightComponent(ptr_addr);
	}
	float Get_nightLightIntensity() {
		return memory.read<float>(m_addr + 768);
	}
	struct FFloatInterval Get_nightLightIntensityRange() {
		return memory.read<struct FFloatInterval>(m_addr + 772);
	}
	struct FLinearColor Get_nightLightColor() {
		return memory.read<struct FLinearColor>(m_addr + 780);
	}
	struct USkyLightComponent Get_skyAmbientReflEnv() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct USkyLightComponent(ptr_addr);
	}
	struct USkyAtmosphereComponent Get_skyAtmosphere() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct USkyAtmosphereComponent(ptr_addr);
	}
	float Get_skyAmbientIntensity() {
		return memory.read<float>(m_addr + 816);
	}
	struct FRuntimeFloatCurve Get_skyAmbientOcclusionTint() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 824);
	}
	struct UVolumetricCloudComponent Get_volumetricClouds() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct UVolumetricCloudComponent(ptr_addr);
	}
	struct UMaterialInterface Get_volumetricCloudsMaterialLQ() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface Get_volumetricCloudsMaterialHQ() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 976);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_volumetricCloudsMaterialDynamic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 984);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	float Get_cirrostratusCoverage() {
		return memory.read<float>(m_addr + 992);
	}
	float Get_cirrostratusSunlightThroughput() {
		return memory.read<float>(m_addr + 996);
	}
	struct FRuntimeFloatCurve Get_cirrostratusCoverageMaterialParamRemap() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1000);
	}
	float Get_cumulonimbusCoverage() {
		return memory.read<float>(m_addr + 1136);
	}
	float Get_cumulonimbusSunlightThroughput() {
		return memory.read<float>(m_addr + 1140);
	}
	struct FRuntimeFloatCurve Get_cumulonimbusCoverageMaterialParamRemap() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1144);
	}
	float Get_nimbostratusCoverage() {
		return memory.read<float>(m_addr + 1280);
	}
	float Get_nimbostratusSunlightThroughput() {
		return memory.read<float>(m_addr + 1284);
	}
	struct FRuntimeFloatCurve Get_nimbostratusCoverageMaterialParamRemap() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1288);
	}
	float Get_cloudsBaseSpeed() {
		return memory.read<float>(m_addr + 1424);
	}
	float Get_cloudsWindSpeed() {
		return memory.read<float>(m_addr + 1428);
	}
	struct UParticleSystem Get_lightningParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1440);
		return struct UParticleSystem(ptr_addr);
	}
	struct FFloatInterval Get_lightningParticleLifetime() {
		return memory.read<struct FFloatInterval>(m_addr + 1448);
	}
	struct UAkAudioEvent Get_thunderSoundEmitter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1456);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FFloatInterval Get_thunderSoundDuration() {
		return memory.read<struct FFloatInterval>(m_addr + 1464);
	}
	float Get_lightningRate() {
		return memory.read<float>(m_addr + 1472);
	}
	float Get_lightningMaxDistance() {
		return memory.read<float>(m_addr + 1476);
	}
	float Get_lightningAltitudeOffsetFromPlayer() {
		return memory.read<float>(m_addr + 1480);
	}
	float Get_lightningAltitudeBandThickness() {
		return memory.read<float>(m_addr + 1484);
	}
	struct USceneComponent Get_precipitationEmittersRoot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1520);
		return struct USceneComponent(ptr_addr);
	}
	struct UChildActorComponent Get_precipitationMaskCapture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1528);
		return struct UChildActorComponent(ptr_addr);
	}
	float Get_precipitationMaskUpdateInterval() {
		return memory.read<float>(m_addr + 1536);
	}
	float Get_precipitationEmittersUpOffset() {
		return memory.read<float>(m_addr + 1544);
	}
	float Get_precipitationEmittersForwardOffset() {
		return memory.read<float>(m_addr + 1548);
	}
	float Get_precipitationEmittersVelocityOffset() {
		return memory.read<float>(m_addr + 1552);
	}
	struct TArray<struct UParticleSystem> Get_rainParticleSystems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1560);
		return struct TArray<struct UParticleSystem>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> Get_rainEmitters() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1576);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	float Get_rainIntensity() {
		return memory.read<float>(m_addr + 1592);
	}
	float Get_maxRainMilimeterPerHour() {
		return memory.read<float>(m_addr + 1596);
	}
	struct TArray<struct UParticleSystem> Get_snowParticleSystems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1600);
		return struct TArray<struct UParticleSystem>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> Get_snowEmitters() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1616);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	float Get_snowIntensity() {
		return memory.read<float>(m_addr + 1632);
	}
	struct UMaterialParameterCollection Get_mainMPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1640);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct UMaterialParameterCollection Get_foliageMPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1648);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_foliageMPCSubsurfaceColorIntensityCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1656);
	}
	struct UMaterialParameterCollection Get_wetnessMPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1792);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_wetnessMPCEmissiveIntensityCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1800);
	}
	struct UMaterialParameterCollection Get_particlesMPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1936);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct FRuntimeCurveLinearColor Get_particlesMPCGlobalParticlesColorCurve() {
		return memory.read<struct FRuntimeCurveLinearColor>(m_addr + 1944);
	}
	float Get_baseAirTemperature() {
		return memory.read<float>(m_addr + 2464);
	}
	struct FFloatInterval Get_baseAirTemperatureRange() {
		return memory.read<struct FFloatInterval>(m_addr + 2468);
	}
	float Get_airTemperatureHeightModifier() {
		return memory.read<float>(m_addr + 2476);
	}
	float Get_waterTemperature() {
		return memory.read<float>(m_addr + 2480);
	}
	struct FFloatInterval Get_waterTemperatureRange() {
		return memory.read<struct FFloatInterval>(m_addr + 2484);
	}
	float Get_waterTemperatureInterpSpeed() {
		return memory.read<float>(m_addr + 2492);
	}
	float Get_waterTemperatureHeightModifier() {
		return memory.read<float>(m_addr + 2496);
	}
	float Get_temperatureDifferenceBetweenShadeAndOnSun() {
		return memory.read<float>(m_addr + 2500);
	}
	struct FRuntimeFloatCurve Get_waterEvaporationRate() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 2504);
	}
	float Get_airRelativeHumidity() {
		return memory.read<float>(m_addr + 2640);
	}
	struct UWindDirectionalSourceComponent Get_windSourceComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2648);
		return struct UWindDirectionalSourceComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_leavesComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2656);
		return struct UParticleSystemComponent(ptr_addr);
	}
	float Get_windAzimuth() {
		return memory.read<float>(m_addr + 2664);
	}
	float Get_windIntensity() {
		return memory.read<float>(m_addr + 2668);
	}
	float Get_windAzimuthForWaves() {
		return memory.read<float>(m_addr + 2672);
	}
	float Get_windIntensityForWaves() {
		return memory.read<float>(m_addr + 2676);
	}
	float Get_maxWindSpeedKph() {
		return memory.read<float>(m_addr + 2680);
	}
	struct UExponentialHeightFogComponent Get_heightFog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2688);
		return struct UExponentialHeightFogComponent(ptr_addr);
	}
	float Get_fogDensity() {
		return memory.read<float>(m_addr + 2696);
	}
	float Get_fogFalloff() {
		return memory.read<float>(m_addr + 2700);
	}
	float Get_fogHeightOffset() {
		return memory.read<float>(m_addr + 2704);
	}
	struct FLinearColor Get_fogBaseInscatteringColor() {
		return memory.read<struct FLinearColor>(m_addr + 2708);
	}
	struct FLinearColor Get_fogBaseDirectionalInscatteringColor() {
		return memory.read<struct FLinearColor>(m_addr + 2724);
	}
	struct UChildActorComponent Get_postProcessVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2744);
		return struct UChildActorComponent(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_exposureMinBrightness() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 2752);
	}
	struct FRuntimeFloatCurve Get_exposureMaxBrightness() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 2888);
	}
	struct FRuntimeFloatCurve Get_exposureSpeedUp() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3024);
	}
	struct FRuntimeFloatCurve Get_exposureSpeedDown() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3160);
	}
	struct FMultistageRandomRoll Get_windAzimuthRandom() {
		return memory.read<struct FMultistageRandomRoll>(m_addr + 3296);
	}
	struct FMultistageRandomRoll Get_windIntensityRandom() {
		return memory.read<struct FMultistageRandomRoll>(m_addr + 3400);
	}
	struct FMultistageRandomRoll Get_cirrostratusCoverageRandom() {
		return memory.read<struct FMultistageRandomRoll>(m_addr + 3504);
	}
	struct FMultistageRandomRoll Get_cumulonimbusCoverageRandom() {
		return memory.read<struct FMultistageRandomRoll>(m_addr + 3608);
	}
	struct FMultistageRandomRoll Get_nimbostratusCoverageRandom() {
		return memory.read<struct FMultistageRandomRoll>(m_addr + 3712);
	}
	struct FRuntimeFloatCurve Get_baseAirTemperatureVsTimeOfDay() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3816);
	}
	struct FRuntimeFloatCurve Get_fogDensityVsSunIntensity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3952);
	}
	float Get_fogDensityFromCumulonimbus() {
		return memory.read<float>(m_addr + 4088);
	}
	float Get_fogRainRatioFromCumulonimbus() {
		return memory.read<float>(m_addr + 4092);
	}
	float Get_fogDensityWhenRaining() {
		return memory.read<float>(m_addr + 4100);
	}
	float Get_fogDensityInterpSpeed() {
		return memory.read<float>(m_addr + 4104);
	}
	float Get_autoSaveInterval() {
		return memory.read<float>(m_addr + 4108);
	}
	bool Get_shouldSerializeState() {
		return memory.read<bool>(m_addr + 4116);
	}
	float Get_sendReplicatedStateSnapshotInterval() {
		return memory.read<float>(m_addr + 4120);
	}
	float Get_nighttimeDarkness() {
		return memory.read<float>(m_addr + 4156);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMeleeSkill
{
public:
	UMeleeSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMeleeSkillAnimationsPreset GetAnimationsPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UMeleeSkillAnimationsPreset(ptr_addr);
	}
	struct FMeleeSkillExperienceAwards Get_noSkillExperienceAwards() {
		return memory.read<struct FMeleeSkillExperienceAwards>(m_addr + 184);
	}
	struct FMeleeSkillExperienceAwards Get_basicSkillExperienceAwards() {
		return memory.read<struct FMeleeSkillExperienceAwards>(m_addr + 200);
	}
	struct FMeleeSkillExperienceAwards Get_mediumSkillExperienceAwards() {
		return memory.read<struct FMeleeSkillExperienceAwards>(m_addr + 216);
	}
	struct FMeleeSkillExperienceAwards Get_advancedSkillExperienceAwards() {
		return memory.read<struct FMeleeSkillExperienceAwards>(m_addr + 232);
	}
	struct FMeleeSkillExperienceAwards Get_aboveAdvancedSkillExperienceAwards() {
		return memory.read<struct FMeleeSkillExperienceAwards>(m_addr + 248);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCharacterItemDragComponent
{
public:
	UCharacterItemDragComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPhysician
{
public:
	UPhysician(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMedicalService
{
public:
	UMedicalService(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGameEventInfoWidget
{
public:
	UGameEventInfoWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCharacterSpawnerPreset
{
public:
	UCharacterSpawnerPreset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterSpawnerData GetSpawnerData() {
		return memory.read<struct FCharacterSpawnerData>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UComboBoxWrapper
{
public:
	UComboBoxWrapper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UComboBoxString GetComboBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UComboBoxString(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNetworkDataIdAsset
{
public:
	UNetworkDataIdAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<uint32_t, struct FPrimaryAssetId> GetIdToAssetMap() {
		return memory.read<struct TMap<uint32_t, struct FPrimaryAssetId>>(m_addr + 48);
	}
	struct TMap<struct FPrimaryAssetId, uint32_t> GetAssetToIdMap() {
		return memory.read<struct TMap<struct FPrimaryAssetId, uint32_t>>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameEventRightPanel
{
public:
	UGameEventRightPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UOverlay GetLeaderboardSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UOverlay(ptr_addr);
	}
	UGameEventLeaderboardWidget Get_leaderboardWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return UGameEventLeaderboardWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBoxingSkill
{
public:
	UBoxingSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBruisingComponent
{
public:
	UBruisingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBruisingData GetBruisingData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UBruisingData(ptr_addr);
	}
	bool GetFadeBruises() {
		return memory.read<bool>(m_addr + 184);
	}
	float GetBruisesLifeTime() {
		return memory.read<float>(m_addr + 188);
	}
	float GetBruisesFadeUpdateInterval() {
		return memory.read<float>(m_addr + 192);
	}
	struct UTextureRenderTarget2D Get_renderTargetByLayer[3]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UTextureRenderTarget2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimInstance_Bike
{
public:
	UPrisonerAnimInstance_Bike(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_bikeSpeed() {
		return memory.read<float>(m_addr + 696);
	}
	float Get_bikeSpeedKmh() {
		return memory.read<float>(m_addr + 700);
	}
	float Get_steerAmount() {
		return memory.read<float>(m_addr + 704);
	}
	float Get_brakeAmount() {
		return memory.read<float>(m_addr + 708);
	}
	float Get_throttleAmount() {
		return memory.read<float>(m_addr + 712);
	}
	bool Get_isInCombatMode() {
		return memory.read<bool>(m_addr + 716);
	}
	bool Get_isDriver() {
		return memory.read<bool>(m_addr + 717);
	}
	bool Get_isBicycle() {
		return memory.read<bool>(m_addr + 718);
	}
	float Get_vehicleRoll() {
		return memory.read<float>(m_addr + 720);
	}
	float Get_lerpedBrakeThrottle() {
		return memory.read<float>(m_addr + 724);
	}
	float Get_inAirTimer() {
		return memory.read<float>(m_addr + 728);
	}
	float Get_driverIdlePlayRate() {
		return memory.read<float>(m_addr + 732);
	}
	bool Get_isStartingEngine() {
		return memory.read<bool>(m_addr + 736);
	}
	struct UBlendSpace Get_driverIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace Get_driverReverseIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UBlendSpace(ptr_addr);
	}
	struct FTransform Get_driverLHandleTransform() {
		return memory.read<struct FTransform>(m_addr + 768);
	}
	struct FTransform Get_driverRHandleTransform() {
		return memory.read<struct FTransform>(m_addr + 816);
	}
	struct FTransform Get_driverReverseSeatHandTransform() {
		return memory.read<struct FTransform>(m_addr + 864);
	}
	struct FTransform Get_driverLFootRestTransform() {
		return memory.read<struct FTransform>(m_addr + 912);
	}
	struct FTransform Get_driverRFootRestTransform() {
		return memory.read<struct FTransform>(m_addr + 960);
	}
	struct UBlendSpace Get_passengerIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1008);
		return struct UBlendSpace(ptr_addr);
	}
	bool Get_useVehicleWAPLowerBodyIdleTP() {
		return memory.read<bool>(m_addr + 1016);
	}
	struct UAnimSequenceBase Get_vehicleWAPLowerBodyIdleAimingTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1024);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_vehicleWAPLowerBodyIdleRelaxedTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1032);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequence Get_startEngineStartAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1040);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1048);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineLongLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1056);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineEndAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1064);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_standUpStartAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1072);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_standUpLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1080);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_standUpEndAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAimOffsetBlendSpace Get_turnAimOffset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct UAimOffsetBlendSpace(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZBuoyancyComponent
{
public:
	UConZBuoyancyComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FBuoyancyTestPoint> GetTestPoints() {
		return memory.read<struct TArray<struct FBuoyancyTestPoint>>(m_addr + 176);
	}
	int32_t GetNumTestPointGroups() {
		return memory.read<int32_t>(m_addr + 192);
	}
	struct FVector GetVelocityDamper() {
		return memory.read<struct FVector>(m_addr + 196);
	}
	float GetFluidLinearDamping() {
		return memory.read<float>(m_addr + 208);
	}
	float GetFluidAngularDamping() {
		return memory.read<float>(m_addr + 212);
	}
	bool GetClampMaxVelocity() {
		return memory.read<bool>(m_addr + 216);
	}
	float GetMaxUnderwaterVelocity() {
		return memory.read<float>(m_addr + 220);
	}
	bool GetShouldApplyWaterVelocity() {
		return memory.read<bool>(m_addr + 224);
	}
	float GetWaterVelocityMultiplier() {
		return memory.read<float>(m_addr + 228);
	}
	bool GetbDrawDebug() {
		return memory.read<bool>(m_addr + 232);
	}
	bool Get_isUnderwater() {
		return memory.read<bool>(m_addr + 233);
	}
	float Get_densityMultiplier() {
		return memory.read<float>(m_addr + 236);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBruisingData
{
public:
	UBruisingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FBruisePatch> GetPatches() {
		return memory.read<struct TArray<struct FBruisePatch>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Burping
{
public:
	UPrisonerBodySymptom_Burping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBuildingHelperComponent
{
public:
	UBuildingHelperComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADcxWheeledVehicle4W
{
public:
	ADcxWheeledVehicle4W(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponAutoCrossbowAnimInstance
{
public:
	UWeaponAutoCrossbowAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_followerBoneLocationOffset() {
		return memory.read<float>(m_addr + 776);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCCNonSelectableTextWidget
{
public:
	UCCNonSelectableTextWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URetainerBox Get_retainerBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct URetainerBox(ptr_addr);
	}
	struct USizeBox Get_sizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct USizeBox(ptr_addr);
	}
	struct UTextBlock Get_textBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct FText Get_text() {
		return memory.read<struct FText>(m_addr + 632);
	}
	int32_t Get_fontSize() {
		return memory.read<int32_t>(m_addr + 656);
	}
	struct FMargin Get_textPadding() {
		return memory.read<struct FMargin>(m_addr + 660);
	}
	struct FVector2D Get_sizeOverride() {
		return memory.read<struct FVector2D>(m_addr + 676);
	}
	char EHorizontalAlignment Get_textHorizontalAlignment() {
		return memory.read<char EHorizontalAlignment>(m_addr + 684);
	}
	struct FLinearColor Get_textColor() {
		return memory.read<struct FLinearColor>(m_addr + 688);
	}

private:
	std::uint64_t m_addr = 0;
};


class UReplenishableResourceManager
{
public:
	UReplenishableResourceManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_maxNumReplenishableResourceReplenishmentsPerTick() {
		return memory.read<int32_t>(m_addr + 552);
	}
	float Get_playerProximityToReplenish() {
		return memory.read<float>(m_addr + 556);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBuildingPanel
{
public:
	UBuildingPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_modularBaseBuildingWidgetsPerRow() {
		return memory.read<int32_t>(m_addr + 664);
	}
	UExpandableContainer Get_expandableContainerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return UExpandableContainer(ptr_addr);
	}
	struct UGridPanel Get_placeablesBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_placeablesSubBox1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_placeablesSubBox2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_placeablesSubBox3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_placeablesSubBox4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_placeablesSubBox5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UGridPanel(ptr_addr);
	}
	struct UUserWidget GetPlaceablesContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetPlaceablesSubContainer1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetPlaceablesSubContainer2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetPlaceablesSubContainer3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetPlaceablesSubContainer4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetPlaceablesSubContainer5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UUserWidget(ptr_addr);
	}
	struct UGridPanel Get_baseBuildingBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_baseBuildingSubBox1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_baseBuildingSubBox2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_baseBuildingSubBox3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_baseBuildingSubBox4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_baseBuildingSubBox5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UGridPanel(ptr_addr);
	}
	struct UUserWidget GetBaseBuildingContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetBaseBuildingSubContainer1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetBaseBuildingSubContainer2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetBaseBuildingSubContainer3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetBaseBuildingSubContainer4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetBaseBuildingSubContainer5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UUserWidget(ptr_addr);
	}
	struct UScrollBox Get_placeablesScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UScrollBox(ptr_addr);
	}
	struct UScaleBox Get_placeablesScaleBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UScaleBox(ptr_addr);
	}
	struct UVerticalBox Get_categoriesVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UVerticalBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemComponentStateBase
{
public:
	UItemComponentStateBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetID() {
		return memory.read<struct FDbIntegerId>(m_addr + 40);
	}
	struct FString GetComponentName() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMalfunctionsContainerWidget
{
public:
	UMalfunctionsContainerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateColor GetHotkeyTextColorUnhovered() {
		return memory.read<struct FSlateColor>(m_addr + 608);
	}
	struct FSlateColor GetHotkeyTextColorHovered() {
		return memory.read<struct FSlateColor>(m_addr + 648);
	}
	struct UCircularMenuWidget Get_malfunctionsCircularMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UCircularMenuWidget(ptr_addr);
	}
	struct UWidgetSwitcher Get_hotkeyDisplaySwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock Get_twoOp_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_twoOp_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_threeOp_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_threeOp_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_threeOp_4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_fourOp_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_fourOp_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_fourOp_4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_fourOp_5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTeamInvitationWidget
{
public:
	UTeamInvitationWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInvitationText() {
		return memory.read<struct FText>(m_addr + 608);
	}
	struct APrisoner Getinvitor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct APrisoner(ptr_addr);
	}
	struct APrisoner Getinvited() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct APrisoner(ptr_addr);
	}
	bool GetInvitedPlayerHasFlag() {
		return memory.read<bool>(m_addr + 648);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULandingDamageCustomization
{
public:
	ULandingDamageCustomization(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPrisonerAnkleSprainEnergyThreshold() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class AGlobalAquaticLifeManager
{
public:
	AGlobalAquaticLifeManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_updateRegisteredPrisonersTickTime() {
		return memory.read<float>(m_addr + 544);
	}
	struct TMap<int64_t, struct FAquaticLifeSpawningVolumeDescription> Get_fishSpawningVolumes() {
		return memory.read<struct TMap<int64_t, struct FAquaticLifeSpawningVolumeDescription>>(m_addr + 5656);
	}
	float Get_localFishSchoolManagerRelevancyRange() {
		return memory.read<float>(m_addr + 5768);
	}
	float Get_distanceBetweenLocalFishSchoolManagers() {
		return memory.read<float>(m_addr + 5772);
	}
	float Get_localFishSchoolManagerTickTime() {
		return memory.read<float>(m_addr + 5776);
	}
	float Get_localFishSchoolManagerDestructionTime() {
		return memory.read<float>(m_addr + 5780);
	}
	float Get_prisonerWaterImmersionRelevancyThreshold() {
		return memory.read<float>(m_addr + 5784);
	}
	float Get_waterSplinePitchThresholdForSchools() {
		return memory.read<float>(m_addr + 5788);
	}
	int32_t Get_maxSpawnedSchools() {
		return memory.read<int32_t>(m_addr + 5792);
	}
	float Get_localFishingZoneIndicatorManagerRelevancyRange() {
		return memory.read<float>(m_addr + 5824);
	}
	float Get_localFishingZoneIndicatorManagerTickTime() {
		return memory.read<float>(m_addr + 5828);
	}
	float Get_localFishingZoneIndicatorManagerDestructionTime() {
		return memory.read<float>(m_addr + 5832);
	}
	AFishingZoneIndicator Get_indicatorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5840);
		return AFishingZoneIndicator(ptr_addr);
	}
	float Get_fishingPrecision() {
		return memory.read<float>(m_addr + 5848);
	}
	struct UCurveFloat Get_weatherPercentageCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5856);
		return struct UCurveFloat(ptr_addr);
	}
	int32_t Get_maxSpawnedIndicators() {
		return memory.read<int32_t>(m_addr + 5864);
	}
	int32_t Get_maxLargeAquaticAnimals() {
		return memory.read<int32_t>(m_addr + 5904);
	}
	struct TArray<struct ULargeAquaticAnimalSpeciesData> Get_possibleLargeAquaticAnimals() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5912);
		return struct TArray<struct ULargeAquaticAnimalSpeciesData>(ptr_addr);
	}
	float Get_distanceBetweenLargeAquaticAnimals() {
		return memory.read<float>(m_addr + 5928);
	}
	float Get_largeAquaticAnimalSpawningRangeMin() {
		return memory.read<float>(m_addr + 5932);
	}
	float Get_largeAquaticAnimalSpawningRangeMax() {
		return memory.read<float>(m_addr + 5936);
	}
	float Get_requiredTimeInWaterToSpawnLargeAquaticAnimal() {
		return memory.read<float>(m_addr + 5940);
	}
	float Get_requiredTimeInWaterWhileBleedingToSpawnLargeAquaticAnimal() {
		return memory.read<float>(m_addr + 5944);
	}
	float Get_timeToReenableLargeAquaticAnimalSpawnZone() {
		return memory.read<float>(m_addr + 5948);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionEatItemDescription
{
public:
	UPrisonerActionEatItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTradingOutpostDescriptionDataAsset
{
public:
	UTradingOutpostDescriptionDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGuid GetTradeOutpostPersistentId() {
		return memory.read<struct FGuid>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemSpawnerPreset2
{
public:
	UItemSpawnerPreset2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FItemSpawnerPreset_Node> GetNodes() {
		return memory.read<struct TArray<struct FItemSpawnerPreset_Node>>(m_addr + 40);
	}
	struct TArray<struct FItemSpawnerPreset_Item> GetItems() {
		return memory.read<struct TArray<struct FItemSpawnerPreset_Item>>(m_addr + 56);
	}
	struct TArray<struct TSoftClassPtr<UObject>> GetFixedItems() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 72);
	}
	bool GetAlwaysSpawn() {
		return memory.read<bool>(m_addr + 88);
	}
	float GetProbability() {
		return memory.read<float>(m_addr + 92);
	}
	struct FInt32Interval GetQuantity() {
		return memory.read<struct FInt32Interval>(m_addr + 96);
	}
	bool GetAllowDuplicates() {
		return memory.read<bool>(m_addr + 104);
	}
	bool GetShouldFilterItemsByZone() {
		return memory.read<bool>(m_addr + 105);
	}
	float GetInitialDamage() {
		return memory.read<float>(m_addr + 108);
	}
	float GetRandomDamage() {
		return memory.read<float>(m_addr + 112);
	}
	float GetInitialUsage() {
		return memory.read<float>(m_addr + 116);
	}
	float GetRandomUsage() {
		return memory.read<float>(m_addr + 120);
	}
	struct TArray<struct TSoftClassPtr<UObject>> GetPostSpawnActions() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBuriableItemComponentState
{
public:
	UBuriableItemComponentState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsBuried() {
		return memory.read<bool>(m_addr + 64);
	}
	struct FDbIntegerId GetBurierUserId() {
		return memory.read<struct FDbIntegerId>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class AGardenManager
{
public:
	AGardenManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNetRelevancyRadius() {
		return memory.read<float>(m_addr + 560);
	}
	float GetNearGardenDistance() {
		return memory.read<float>(m_addr + 564);
	}
	struct FPlantGrowthStageData Get_seedingStageData() {
		return memory.read<struct FPlantGrowthStageData>(m_addr + 568);
	}
	struct FPlantGrowthStageData Get_vegetatingStageData() {
		return memory.read<struct FPlantGrowthStageData>(m_addr + 664);
	}
	struct FPlantGrowthStageData Get_floweringStageData() {
		return memory.read<struct FPlantGrowthStageData>(m_addr + 760);
	}
	struct FPlantGrowthStageData Get_ripeningStageData() {
		return memory.read<struct FPlantGrowthStageData>(m_addr + 856);
	}
	struct FInt32Interval Get_gardenMinMaxSize() {
		return memory.read<struct FInt32Interval>(m_addr + 952);
	}
	struct TArray<struct AGarden> Get_gardens() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1056);
		return struct TArray<struct AGarden>(ptr_addr);
	}
	float Get_updateTimestepSeconds() {
		return memory.read<float>(m_addr + 1120);
	}
	uint32_t Get_minUpdateBatchCount() {
		return memory.read<uint32_t>(m_addr + 1124);
	}
	float Get_dataSampleFadeSeconds() {
		return memory.read<float>(m_addr + 1128);
	}
	uint32_t Get_heightDataSampleCount() {
		return memory.read<uint32_t>(m_addr + 1132);
	}
	struct FFloatInterval Get_pestsDiseasesCheckTimeHours() {
		return memory.read<struct FFloatInterval>(m_addr + 1136);
	}
	struct FFloatInterval Get_weedCheckTimeHours() {
		return memory.read<struct FFloatInterval>(m_addr + 1144);
	}
	float Get_pestsDiseasesGrowthTimeHours() {
		return memory.read<float>(m_addr + 1152);
	}
	float Get_weedGrowthTimeHours() {
		return memory.read<float>(m_addr + 1156);
	}
	float Get_pestsDiseasesSpreadTimeHours() {
		return memory.read<float>(m_addr + 1160);
	}
	float Get_weedSpreadTimeHours() {
		return memory.read<float>(m_addr + 1164);
	}
	struct FVector2D Get_pestsDiseasesSpreadScaleThreshold() {
		return memory.read<struct FVector2D>(m_addr + 1168);
	}
	struct FVector2D Get_weedSpreadScaleThreshold() {
		return memory.read<struct FVector2D>(m_addr + 1176);
	}
	float Get_maxWaterLitersPerSlot() {
		return memory.read<float>(m_addr + 1184);
	}
	float Get_maxWaterLitersFromRainPerSlot() {
		return memory.read<float>(m_addr + 1188);
	}
	struct UMaterialParameterCollection Get_mainMPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1192);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct UMaterialParameterCollection Get_gardenMPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1200);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct TArray<struct FStaticMeshMaterialPair> Get_gardenEdgeMesh() {
		return memory.read<struct TArray<struct FStaticMeshMaterialPair>>(m_addr + 1208);
	}
	float Get_gardenEdgeVerticalOffset() {
		return memory.read<float>(m_addr + 1224);
	}
	float Get_gardenEdgeHorizontalOffset() {
		return memory.read<float>(m_addr + 1228);
	}
	struct TArray<struct FStaticMeshMaterialPair> Get_gardenSoilMesh() {
		return memory.read<struct TArray<struct FStaticMeshMaterialPair>>(m_addr + 1232);
	}
	float Get_gardenSoilVerticalOffset() {
		return memory.read<float>(m_addr + 1248);
	}
	struct FStaticMeshMaterialPair Get_cubeCollisionMesh() {
		return memory.read<struct FStaticMeshMaterialPair>(m_addr + 1256);
	}
	struct TArray<struct FStaticMeshMaterialPair> Get_weedMesh() {
		return memory.read<struct TArray<struct FStaticMeshMaterialPair>>(m_addr + 1280);
	}
	float Get_weedsVerticalOffset() {
		return memory.read<float>(m_addr + 1296);
	}
	struct TArray<struct UPlantSpecies> Get_plantSpecies() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1304);
		return struct TArray<struct UPlantSpecies>(ptr_addr);
	}
	struct UFarmingSkill Get_farmingSkillDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1320);
		return struct UFarmingSkill(ptr_addr);
	}
	struct TMap<struct FStaticMeshMaterialPair, struct UIndexedHierarchicalInstancedStaticMeshComponent> Get_hismcMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1328);
		return struct TMap<struct FStaticMeshMaterialPair, struct UIndexedHierarchicalInstancedStaticMeshComponent>(ptr_addr);
	}
	bool Get_showPreplacement() {
		return memory.read<bool>(m_addr + 1408);
	}
	float Get_databaseUpdateInterval() {
		return memory.read<float>(m_addr + 1412);
	}
	struct UChoppingRecipeDataAsset Get_destroyChoppingRecipeAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1416);
		return struct UChoppingRecipeDataAsset(ptr_addr);
	}
	float Get_prisonerInteractionDistance() {
		return memory.read<float>(m_addr + 1424);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBuriableChestItemComponentState
{
public:
	UBuriableChestItemComponentState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStoredAutoDestructTime() {
		return memory.read<float>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerUIData
{
public:
	UPrisonerUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText Get_attributeDescriptions[54]() {
		return memory.read<struct FText>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsRegionDetails
{
public:
	UCustomZoneSettingsRegionDetails(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UEditableText Get_name() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UEditableText(ptr_addr);
	}
	struct UButton Get_buttonRestore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UButton(ptr_addr);
	}
	struct UCarouselWithLabel Get_shape() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UCarouselWithLabel(ptr_addr);
	}
	struct USpinBox Get_locationX() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox Get_locationY() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct USpinBox(ptr_addr);
	}
	struct UTextBlock Get_textSize() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTextBlock(ptr_addr);
	}
	struct USpinBox Get_sizeX() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox Get_sizeY() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct USpinBox(ptr_addr);
	}
	struct UTextBlock Get_textConfiguration() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_buttonOpenConfiguration() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_buttonNextConfiguration() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_buttonPreviousConfiguration() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UButton(ptr_addr);
	}
	struct UVerticalBox Get_eventDisplayContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UVerticalBox(ptr_addr);
	}
	UCustomZoneSettingsEventDisplay Get_eventDisplayClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return UCustomZoneSettingsEventDisplay(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBurnDamageType
{
public:
	UBurnDamageType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionExtinguishItemDescription
{
public:
	UPrisonerActionExtinguishItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolismSkillProgressBar
{
public:
	UMetabolismSkillProgressBar(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSlateBrush> GetSkillRankIcons() {
		return memory.read<struct TArray<struct FSlateBrush>>(m_addr + 608);
	}
	struct FText GetSkillTitle() {
		return memory.read<struct FText>(m_addr + 624);
	}
	struct UImage Get_skillRankIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UImage(ptr_addr);
	}
	struct UMetabolismAdvancedProgressBar Get_apb_SkillProgress() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	USkill Get_skillClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return USkill(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZGameInstance
{
public:
	UConZGameInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCommonMaps GetCommonMaps() {
		return memory.read<struct FCommonMaps>(m_addr + 424);
	}
	struct FCharacterCreationMenuContext GetCharacterCreationMenuContext() {
		return memory.read<struct FCharacterCreationMenuContext>(m_addr + 544);
	}
	bool GetNetworkFailed() {
		return memory.read<bool>(m_addr + 592);
	}
	bool GetWasKickedFromGameSession() {
		return memory.read<bool>(m_addr + 593);
	}
	struct UGameplayLog GetGameplayLogLogin() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UGameplayLog(ptr_addr);
	}
	struct UGameplayLog GetGameplayLogAdmin() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UGameplayLog(ptr_addr);
	}
	struct UGameplayLog GetGameplayLogEventKill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UGameplayLog(ptr_addr);
	}
	struct UGameplayLog GetGameplayLogKill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UGameplayLog(ptr_addr);
	}
	struct UGameplayLog GetGameplayLogViolations() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UGameplayLog(ptr_addr);
	}
	struct UGameplayLog GetGameplayLogChat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UGameplayLog(ptr_addr);
	}
	struct UGameplayLog GetGameplayLogEconomy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UGameplayLog(ptr_addr);
	}
	struct UGameplayLog GetGameplayLogMiscellanious() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UGameplayLog(ptr_addr);
	}
	struct UGameplayLog GetGameplayLogFamePoints() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UGameplayLog(ptr_addr);
	}
	struct TMap<uint32_t, struct UDbConnection> Get_databaseConnections() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct TMap<uint32_t, struct UDbConnection>(ptr_addr);
	}
	struct UDedicatedServerRequest Get_dedicatedServerRequest() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UDedicatedServerRequest(ptr_addr);
	}
	struct UUserManager Get_userManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UUserManager(ptr_addr);
	}
	struct UUser Get_currentUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UUser(ptr_addr);
	}
	struct UUserProfile Get_currentUserProfile() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UUserProfile(ptr_addr);
	}
	UEntitySystem Get_entitySystemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return UEntitySystem(ptr_addr);
	}
	struct UEntitySystem Get_entitySystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UEntitySystem(ptr_addr);
	}
	struct UTexture2D Get_loadingScreenTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1008);
		return struct UTexture2D(ptr_addr);
	}
	struct ULoadingScreen Get_loadingScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct ULoadingScreen(ptr_addr);
	}
	struct UAdminCommandRegistry Get_adminCommandRegistry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1160);
		return struct UAdminCommandRegistry(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBuryData
{
public:
	UBuryData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<char EPhysicalSurface, struct FBuryMaterialData> GetAllowedBuryMaterials() {
		return memory.read<struct TMap<char EPhysicalSurface, struct FBuryMaterialData>>(m_addr + 48);
	}
	float GetStaminaDrain() {
		return memory.read<float>(m_addr + 128);
	}
	float GetRecoveredStaminaThreshold() {
		return memory.read<float>(m_addr + 132);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConstitutionSkill
{
public:
	UConstitutionSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCookingRecipeCategoryPanel
{
public:
	UCookingRecipeCategoryPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag Get_navigationTag() {
		return memory.read<struct FGameplayTag>(m_addr + 328);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBuryToolItemTag
{
public:
	UBuryToolItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsSmallSizedTool() {
		return memory.read<bool>(m_addr + 48);
	}
	int32_t GetBuryItemUsage() {
		return memory.read<int32_t>(m_addr + 52);
	}
	float GetBuryDurationModifier() {
		return memory.read<float>(m_addr + 56);
	}
	struct FName GetBladeTipSocket() {
		return memory.read<struct FName>(m_addr + 60);
	}
	struct FName GetBladeCenterSocket() {
		return memory.read<struct FName>(m_addr + 68);
	}
	float GetShortToolMinBuryTime() {
		return memory.read<float>(m_addr + 76);
	}
	float GetShortToolMaxBuryTime() {
		return memory.read<float>(m_addr + 80);
	}
	float GetLongToolMinBuryTime() {
		return memory.read<float>(m_addr + 84);
	}
	float GetLongToolMaxBuryTime() {
		return memory.read<float>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC4PartTag
{
public:
	UC4PartTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCamouflageSkill
{
public:
	UCamouflageSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_activationTime() {
		return memory.read<float>(m_addr + 176);
	}
	float Get_standingPenalty() {
		return memory.read<float>(m_addr + 180);
	}
	float Get_crouchingPenalty() {
		return memory.read<float>(m_addr + 184);
	}
	float Get_pronePenalty() {
		return memory.read<float>(m_addr + 188);
	}
	float Get_slowMovingStandingPenalty() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_slowMovingCrouchingPenalty() {
		return memory.read<float>(m_addr + 196);
	}
	float Get_slowMovingPronePenalty() {
		return memory.read<float>(m_addr + 200);
	}
	float Get_mediumMovingStandingPenalty() {
		return memory.read<float>(m_addr + 204);
	}
	float Get_mediumMovingCrouchingPenalty() {
		return memory.read<float>(m_addr + 208);
	}
	float Get_fastMovingStandingPenalty() {
		return memory.read<float>(m_addr + 212);
	}
	float Get_standingAIPerceptionMultiplier() {
		return memory.read<float>(m_addr + 216);
	}
	float Get_crouchingAIPerceptionMultiplier() {
		return memory.read<float>(m_addr + 220);
	}
	float Get_proneAIPerceptionMultiplier() {
		return memory.read<float>(m_addr + 224);
	}
	float Get_maxRelevantAIPerceptionRadius() {
		return memory.read<float>(m_addr + 228);
	}
	struct FCamouflageSkillExperienceAwards GetNoSkillExperienceAwards() {
		return memory.read<struct FCamouflageSkillExperienceAwards>(m_addr + 340);
	}
	struct FCamouflageSkillExperienceAwards GetBasicSkillExperienceAwards() {
		return memory.read<struct FCamouflageSkillExperienceAwards>(m_addr + 344);
	}
	struct FCamouflageSkillExperienceAwards GetMediumSkillExperienceAwards() {
		return memory.read<struct FCamouflageSkillExperienceAwards>(m_addr + 348);
	}
	struct FCamouflageSkillExperienceAwards GetAdvancedSkillExperienceAwards() {
		return memory.read<struct FCamouflageSkillExperienceAwards>(m_addr + 352);
	}
	struct FCamouflageSkillExperienceAwards GetAboveAdvancedSkillExperienceAwards() {
		return memory.read<struct FCamouflageSkillExperienceAwards>(m_addr + 356);
	}
	struct FCamouflageSkillParametersPerSkillLevel GetNoSkillParameters() {
		return memory.read<struct FCamouflageSkillParametersPerSkillLevel>(m_addr + 360);
	}
	struct FCamouflageSkillParametersPerSkillLevel GetBasicSkillParameters() {
		return memory.read<struct FCamouflageSkillParametersPerSkillLevel>(m_addr + 376);
	}
	struct FCamouflageSkillParametersPerSkillLevel GetMediumSkillParameters() {
		return memory.read<struct FCamouflageSkillParametersPerSkillLevel>(m_addr + 392);
	}
	struct FCamouflageSkillParametersPerSkillLevel GetAdvancedSkillParameters() {
		return memory.read<struct FCamouflageSkillParametersPerSkillLevel>(m_addr + 408);
	}
	struct FCamouflageSkillParametersPerSkillLevel GetAboveAdvancedSkillParameters() {
		return memory.read<struct FCamouflageSkillParametersPerSkillLevel>(m_addr + 424);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACargoDropContainer
{
public:
	ACargoDropContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDelayDuration() {
		return memory.read<float>(m_addr + 544);
	}
	float GetFallDuration() {
		return memory.read<float>(m_addr + 548);
	}
	float GetDetonationTime() {
		return memory.read<float>(m_addr + 552);
	}
	float GetDetonationCountdown() {
		return memory.read<float>(m_addr + 556);
	}
	struct UAkAudioEvent GetLandSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetWarningSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetDetonationSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UParticleSystem GetDetonationParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UParticleSystem(ptr_addr);
	}
	UMatineeCameraShake GetCameraShakeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return UMatineeCameraShake(ptr_addr);
	}
	struct TArray<UItemSpawnerPreset> GetMajorSpawnerOptions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct TArray<UItemSpawnerPreset>(ptr_addr);
	}
	struct TArray<UItemSpawnerPreset2> GetMajorSpawnerPresetOptions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct TArray<UItemSpawnerPreset2>(ptr_addr);
	}
	struct TArray<struct FCargoDropSpawnerPreset> GetMinorSpawnerOptions() {
		return memory.read<struct TArray<struct FCargoDropSpawnerPreset>>(m_addr + 632);
	}
	struct UAkAudioEvent GetUnlockLockersAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UStaticMeshComponent Get_parachuteMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_flareParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_dustParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UKillBoxTimerWidget Get_timerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UKillBoxTimerWidget(ptr_addr);
	}
	struct UDiegeticLockState Get_lockStateWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UDiegeticLockState(ptr_addr);
	}
	struct FVector Get_endLocation() {
		return memory.read<struct FVector>(m_addr + 712);
	}
	struct FRotator Get_rotation() {
		return memory.read<struct FRotator>(m_addr + 724);
	}
	bool Get_landed() {
		return memory.read<bool>(m_addr + 736);
	}
	float Get_fallingSpeed() {
		return memory.read<float>(m_addr + 740);
	}
	int32_t Get_timeRemaining() {
		return memory.read<int32_t>(m_addr + 744);
	}
	bool Get_flareParticlesEnabled() {
		return memory.read<bool>(m_addr + 748);
	}
	struct TArray<struct UStaticMeshComponent> Get_cargoLockers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponRecoilGroup
{
public:
	UWeaponRecoilGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetUp() {
		return memory.read<float>(m_addr + 48);
	}
	float GetDown() {
		return memory.read<float>(m_addr + 52);
	}
	float GetLeft() {
		return memory.read<float>(m_addr + 56);
	}
	float GetRight() {
		return memory.read<float>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWorldEvent
{
public:
	AWorldEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 544);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 556);
	}
	struct UTexture GetIconTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UTexture(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCarousel
{
public:
	UCarousel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_selectionDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_leftArrow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_rightArrow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UButton(ptr_addr);
	}
	struct TArray<struct FText> Get_carouselValues() {
		return memory.read<struct TArray<struct FText>>(m_addr + 664);
	}
	bool Get_canWrap() {
		return memory.read<bool>(m_addr + 680);
	}
	struct FCarouselStyle Get_selectedAndFocusedCarouselStyle() {
		return memory.read<struct FCarouselStyle>(m_addr + 688);
	}
	struct FCarouselStyle Get_selectedAndUnfocusedCarouselStyle() {
		return memory.read<struct FCarouselStyle>(m_addr + 2080);
	}
	struct FCarouselStyle Get_unselectedCarouselStyle() {
		return memory.read<struct FCarouselStyle>(m_addr + 3472);
	}
	struct FCarouselStyle Get_highlightedCarouselStyle() {
		return memory.read<struct FCarouselStyle>(m_addr + 4864);
	}
	struct FCarouselStyle Get_disabledCarouselStyle() {
		return memory.read<struct FCarouselStyle>(m_addr + 6256);
	}
	bool Get_controlWithMouseWheel() {
		return memory.read<bool>(m_addr + 7648);
	}
	bool Get_controlWithKeyboard() {
		return memory.read<bool>(m_addr + 7649);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDcxBikeAnimInstance
{
public:
	UDcxBikeAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRPM() {
		return memory.read<float>(m_addr + 2632);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 2636);
	}
	float GetSpeedKph() {
		return memory.read<float>(m_addr + 2640);
	}
	float GetSteerRotation() {
		return memory.read<float>(m_addr + 2644);
	}
	float GetSteerAmount() {
		return memory.read<float>(m_addr + 2648);
	}
	float GetThrottleAmount() {
		return memory.read<float>(m_addr + 2652);
	}
	float GetBrakeAmount() {
		return memory.read<float>(m_addr + 2656);
	}
	struct FRotator GetFrontWheelRotator() {
		return memory.read<struct FRotator>(m_addr + 2660);
	}
	struct FRotator GetRearWheelRotator() {
		return memory.read<struct FRotator>(m_addr + 2672);
	}
	struct FRotator GetTransmissionRotator() {
		return memory.read<struct FRotator>(m_addr + 2684);
	}
	float GetFrontSuspensionOffset() {
		return memory.read<float>(m_addr + 2696);
	}
	float GetRearSuspensionRotation() {
		return memory.read<float>(m_addr + 2700);
	}
	struct FVector GetMeshLocation() {
		return memory.read<struct FVector>(m_addr + 2704);
	}
	bool GetIsMounteeDriver() {
		return memory.read<bool>(m_addr + 2716);
	}

private:
	std::uint64_t m_addr = 0;
};


class UChainsawState
{
public:
	UChainsawState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCurrentFuelAmount() {
		return memory.read<float>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWeaponItem
{
public:
	AWeaponItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetMaxRange() {
		return memory.read<uint32_t>(m_addr + 2320);
	}
	uint32_t GetROF() {
		return memory.read<uint32_t>(m_addr + 2324);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameEventLeftPanel
{
public:
	UGameEventLeftPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UComboBoxWrapper GetAllEventsComboBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UComboBoxWrapper(ptr_addr);
	}
	struct UOverlay GetEventArea() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UOverlay(ptr_addr);
	}
	struct UVerticalBox GetVerticalBox_5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UVerticalBox(ptr_addr);
	}
	struct TArray<struct AGameEventBase> Get_allEvents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct TArray<struct AGameEventBase>(ptr_addr);
	}
	struct TArray<struct AGameEventBase> Get_currentEvents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct TArray<struct AGameEventBase>(ptr_addr);
	}
	struct TArray<struct AGameEventBase> Get_nextEvents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct TArray<struct AGameEventBase>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AChainsaw
{
public:
	AChainsaw(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetSkeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2336);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct FCharacterAndItemAnimation GetAnimationsStartEngine() {
		return memory.read<struct FCharacterAndItemAnimation>(m_addr + 2344);
	}
	struct FCharacterAndItemAnimation GetAnimationsCheckFuelStatus() {
		return memory.read<struct FCharacterAndItemAnimation>(m_addr + 2360);
	}
	struct UBaseItemTag GetChoppingToolItemTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2376);
		return struct UBaseItemTag(ptr_addr);
	}
	struct UAkAudioEvent GetTurnOnAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2384);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetTurnOffAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2392);
		return struct UAkAudioEvent(ptr_addr);
	}
	UGameResourceType Get_fuelType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2400);
		return UGameResourceType(ptr_addr);
	}
	struct FGameplayTagContainer Get_inFuelingSocketTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 2408);
	}
	float Get_maxFuelAmount() {
		return memory.read<float>(m_addr + 2440);
	}
	float Get_initialFuelAmount() {
		return memory.read<float>(m_addr + 2444);
	}
	float Get_fuelUsagePerHour() {
		return memory.read<float>(m_addr + 2448);
	}
	float Get_fuelUsagePerHourMultiplierWhenActive() {
		return memory.read<float>(m_addr + 2452);
	}
	float Get_fuelFillingDurationPerAmountFilled() {
		return memory.read<float>(m_addr + 2456);
	}
	float Get_fuelFillingExperiencePerAmount() {
		return memory.read<float>(m_addr + 2460);
	}
	struct UAnimMontage Get_fuelFillingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2464);
		return struct UAnimMontage(ptr_addr);
	}
	struct UMeleeSkillAnimationsPreset Get_meleeSkillAnimationsPresetWhenTurnedOff() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2472);
		return struct UMeleeSkillAnimationsPreset(ptr_addr);
	}
	struct UMeleeSkillAnimationsPreset Get_meleeSkillAnimationsPresetWhenTurnedOn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2480);
		return struct UMeleeSkillAnimationsPreset(ptr_addr);
	}
	struct UAkAudioEvent Get_fuelStartFillingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2488);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_fuelStopFillingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2496);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_noiseLoudnessWhileStarting() {
		return memory.read<float>(m_addr + 2504);
	}
	float Get_noiseLoudnessWhileRunning() {
		return memory.read<float>(m_addr + 2508);
	}
	float Get_noiseLoudnessUpdateFrequencyPerHour() {
		return memory.read<float>(m_addr + 2512);
	}
	struct FName Get_runningNoiseTag() {
		return memory.read<struct FName>(m_addr + 2516);
	}
	float Get_currentFuelAmount() {
		return memory.read<float>(m_addr + 2524);
	}
	bool Get_turnedOn() {
		return memory.read<bool>(m_addr + 2528);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemSpawnerPreset
{
public:
	UItemSpawnerPreset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FItemSpawnerData GetSpawnerData() {
		return memory.read<struct FItemSpawnerData>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWeapon
{
public:
	AWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetAttachmentAdded() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 2328);
	}
	struct FMulticastInlineDelegate GetAttachmentRemoved() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 2344);
	}
	struct USkeletalMeshComponent GetSkeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2432);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	uint8_t  GetWeaponFiringStateType() {
		return memory.read<uint8_t >(m_addr + 2440);
	}
	struct UWeaponStateFiring GetTempWeaponStateFiringAutomatic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2448);
		return struct UWeaponStateFiring(ptr_addr);
	}
	struct UWeaponStateFiring GetTempWeaponStateFiringSemiAutomatic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2456);
		return struct UWeaponStateFiring(ptr_addr);
	}
	struct UWeaponStateFiring GetTempWeaponStateFiringManual() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2464);
		return struct UWeaponStateFiring(ptr_addr);
	}
	struct UWeaponStateFiring GetTempWeaponStateFiringBurst() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2472);
		return struct UWeaponStateFiring(ptr_addr);
	}
	struct UWeaponStateActiveManualFiring GetTempWeaponStateActiveManualFiring() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2480);
		return struct UWeaponStateActiveManualFiring(ptr_addr);
	}
	struct UWeaponStateFiring GetFiringState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2488);
		return struct UWeaponStateFiring(ptr_addr);
	}
	struct TArray<uint8_t > GetSupportedFiringModes() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 2496);
	}
	struct TArray<struct UStaticMeshComponent> GetCartridgeMeshComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2512);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}
	struct TArray<UWeaponActionReloadSequence> GetReloadActionSequenceClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2528);
		return struct TArray<UWeaponActionReloadSequence>(ptr_addr);
	}
	struct TArray<UWeaponActionUnloadAmmoSequence> GetUnloadAmmoActionSequenceClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2544);
		return struct TArray<UWeaponActionUnloadAmmoSequence>(ptr_addr);
	}
	struct TArray<UWeaponActionCheckAmmoSequence> GetCheckAmmoActionSequenceClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2560);
		return struct TArray<UWeaponActionCheckAmmoSequence>(ptr_addr);
	}
	struct TArray<struct UWeaponActionReloadSequence> GetReloadActionSequences() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2576);
		return struct TArray<struct UWeaponActionReloadSequence>(ptr_addr);
	}
	struct TArray<struct UWeaponActionClearMalfunctionSequence> GetClearMalfunctionActionSequences() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2592);
		return struct TArray<struct UWeaponActionClearMalfunctionSequence>(ptr_addr);
	}
	struct TArray<struct UWeaponActionUnloadAmmoSequence> GetUnloadAmmoActionSequences() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2608);
		return struct TArray<struct UWeaponActionUnloadAmmoSequence>(ptr_addr);
	}
	struct TArray<struct UWeaponActionCheckAmmoSequence> GetCheckAmmoActionSequences() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2624);
		return struct TArray<struct UWeaponActionCheckAmmoSequence>(ptr_addr);
	}
	struct FGameplayTagContainer GetAmmunitionTags() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 2640);
	}
	AAmmunitionItem GetDefaultAmmunitionItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2672);
		return AAmmunitionItem(ptr_addr);
	}
	int32_t GetRequiredAmmoForShot() {
		return memory.read<int32_t>(m_addr + 2680);
	}
	int32_t GetMaxLoadedAmmo() {
		return memory.read<int32_t>(m_addr + 2684);
	}
	int32_t GetEventMaxAmmo() {
		return memory.read<int32_t>(m_addr + 2688);
	}
	int32_t GetInitialAmmo() {
		return memory.read<int32_t>(m_addr + 2692);
	}
	int32_t GetInternalMagazineCapacity() {
		return memory.read<int32_t>(m_addr + 2696);
	}
	bool GetUseChamberAsInternalMagazine() {
		return memory.read<bool>(m_addr + 2700);
	}
	int32_t GetBurstShotsCount() {
		return memory.read<int32_t>(m_addr + 2704);
	}
	bool GetIgnoreProceduralDownTheSightFiringAnimation() {
		return memory.read<bool>(m_addr + 2708);
	}
	struct UAnimMontage GetFireAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2712);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFireAnimationLastRound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2720);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFireAnimationBody() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2728);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFirstPersonFireAnimationBody() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2736);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFireAutomaticAnimationBody() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2744);
		return struct UAnimMontage(ptr_addr);
	}
	struct FBodyWeaponAnimation GetBodyWeaponAnimationChamber() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 2752);
	}
	struct UAnimMontage GetCheckFiringModeAnimationBody() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2768);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetChangeFiringModeAnimationBody() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2776);
		return struct UAnimMontage(ptr_addr);
	}
	struct TMap<AWeaponAttachment, struct FWeaponAttachmentAnimations> GetAttachmentsAnimations() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2784);
		return struct TMap<AWeaponAttachment, struct FWeaponAttachmentAnimations>(ptr_addr);
	}
	struct FName GetMuzzleSocketName() {
		return memory.read<struct FName>(m_addr + 2864);
	}
	struct FName GetGripCorrectionSocketName() {
		return memory.read<struct FName>(m_addr + 2872);
	}
	struct FName GetAimingDownTheSightsCenterSocketName() {
		return memory.read<struct FName>(m_addr + 2880);
	}
	struct FName GetEjectCasingSocketName() {
		return memory.read<struct FName>(m_addr + 2888);
	}
	bool GetIgnoreSupportingHandIK() {
		return memory.read<bool>(m_addr + 2896);
	}
	struct FName GetSupportingHandIKSocketName() {
		return memory.read<struct FName>(m_addr + 2900);
	}
	struct FVector GetSupportingHandIKLocation() {
		return memory.read<struct FVector>(m_addr + 2908);
	}
	struct FVector GetAimingDownTheSightsLocationOffset() {
		return memory.read<struct FVector>(m_addr + 2920);
	}
	struct FTransform GetHolsteredOnPrisonerLeftOffset() {
		return memory.read<struct FTransform>(m_addr + 2944);
	}
	struct FTransform GetHolsteredOnPrisonerRightOffset() {
		return memory.read<struct FTransform>(m_addr + 2992);
	}
	bool GetUseWeaponFOVWhileScoping() {
		return memory.read<bool>(m_addr + 3040);
	}
	float GetWeaponFOVWhileScoping() {
		return memory.read<float>(m_addr + 3044);
	}
	struct FVector GetWeaponCameraOffsetWhileScoping() {
		return memory.read<struct FVector>(m_addr + 3048);
	}
	struct FRuntimeFloatCurve GetOffsetPerAspectRatioWhileScoping() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3064);
	}
	bool GetIgnoreZeroRangeChange() {
		return memory.read<bool>(m_addr + 3200);
	}
	int32_t GetZeroRange() {
		return memory.read<int32_t>(m_addr + 3204);
	}
	int32_t GetZeroRangeStep() {
		return memory.read<int32_t>(m_addr + 3208);
	}
	int32_t GetZeroRangeMax() {
		return memory.read<int32_t>(m_addr + 3212);
	}
	struct UProjectileImpactEffects GetInstantHitImpactEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3216);
		return struct UProjectileImpactEffects(ptr_addr);
	}
	float GetFieldOfView() {
		return memory.read<float>(m_addr + 3224);
	}
	float GetDepthOfFieldFocalDistance() {
		return memory.read<float>(m_addr + 3228);
	}
	float GetDepthOfFieldFstop() {
		return memory.read<float>(m_addr + 3232);
	}
	float GetObstaclesDetectionOffset() {
		return memory.read<float>(m_addr + 3236);
	}
	bool GetUseFiringModeBoneRotation() {
		return memory.read<bool>(m_addr + 3240);
	}
	struct FRotator GetFiringModeBoneRotations[3]() {
		return memory.read<struct FRotator>(m_addr + 3244);
	}
	struct FPostProcessSettings GetPostProcessSettings() {
		return memory.read<struct FPostProcessSettings>(m_addr + 3280);
	}
	struct UAnimSequenceBase GetRelaxedGripCorrectionAnimationPose[4]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4656);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetAimingHipAnimationPose[4]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4688);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetAimingDownTheSightsAnimationPose[4]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4720);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetAimingDownTheSightsStillAnimationPose[4]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4752);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetAimingDownTheSightsWalkingAnimationPose[4]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4784);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetAimingDownTheSightsLimpingWalkingAnimationPose[4]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4816);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace GetWeaponAimOffsets[7]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4848);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace1D GetAimingDownTheSightsZeroRangeBlendSpace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4904);
		return struct UBlendSpace1D(ptr_addr);
	}
	uint8_t  GetWeaponCategory() {
		return memory.read<uint8_t >(m_addr + 4912);
	}
	bool GetIgnoreAimingSpread() {
		return memory.read<bool>(m_addr + 4913);
	}
	bool GetUseCustomWeaponSpreadData() {
		return memory.read<bool>(m_addr + 4914);
	}
	struct FWeaponSpreadData GetWeaponSpreadData() {
		return memory.read<struct FWeaponSpreadData>(m_addr + 4916);
	}
	bool GetUseCustomWeaponViewKickData() {
		return memory.read<bool>(m_addr + 4980);
	}
	struct FWeaponViewKickData GetWeaponViewKickData() {
		return memory.read<struct FWeaponViewKickData>(m_addr + 4984);
	}
	float GetViewKickMultiplier() {
		return memory.read<float>(m_addr + 5008);
	}
	float GetMaxRecoilOffset() {
		return memory.read<float>(m_addr + 5012);
	}
	float GetRecoilRecoverySpeed() {
		return memory.read<float>(m_addr + 5016);
	}
	float GetMuzzleEffectsScaleDistanceStart() {
		return memory.read<float>(m_addr + 5020);
	}
	float GetMuzzleEffectsScaleDistanceRange() {
		return memory.read<float>(m_addr + 5024);
	}
	float GetMuzzleEffectsScaleByDistanceFactor() {
		return memory.read<float>(m_addr + 5028);
	}
	float GetChamberBulletDelay() {
		return memory.read<float>(m_addr + 5032);
	}
	bool GetChamberBulletAutomatically() {
		return memory.read<bool>(m_addr + 5036);
	}
	bool GetChamberBulletWhenMagazineIsAttached() {
		return memory.read<bool>(m_addr + 5037);
	}
	float GetDamagePerShot() {
		return memory.read<float>(m_addr + 5040);
	}
	bool GetTestWeapon() {
		return memory.read<bool>(m_addr + 5044);
	}
	struct TArray<struct FFireAnimationData> GetWornOutFiringAnimations() {
		return memory.read<struct TArray<struct FFireAnimationData>>(m_addr + 5048);
	}
	bool GetCanBeInspectedWhenMalfunctioned() {
		return memory.read<bool>(m_addr + 5064);
	}
	struct UAnimMontage GetInspectModeAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5072);
		return struct UAnimMontage(ptr_addr);
	}
	bool GetUseCustomMalfunctionChances() {
		return memory.read<bool>(m_addr + 5080);
	}
	struct FWeaponMalfunctionChances GetMalfunctionChances() {
		return memory.read<struct FWeaponMalfunctionChances>(m_addr + 5084);
	}
	struct FName GetStovePipeSocketName() {
		return memory.read<struct FName>(m_addr + 5140);
	}
	struct UStaticMesh GetStovePipeMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5152);
		return struct UStaticMesh(ptr_addr);
	}
	struct FName GetDoubleFeedSocketName() {
		return memory.read<struct FName>(m_addr + 5160);
	}
	struct UStaticMesh GetDoubleFeedMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5168);
		return struct UStaticMesh(ptr_addr);
	}
	bool GetShouldClearInspectModeWhenClearingMalfunction() {
		return memory.read<bool>(m_addr + 5176);
	}
	struct TArray<UWeaponActionClearMalfunctionSequence> GetClearMalfunctionSequenceClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5184);
		return struct TArray<UWeaponActionClearMalfunctionSequence>(ptr_addr);
	}
	struct TMap<uint8_t , struct FWeaponMalfunctionData> GetMalfunctionsData() {
		return memory.read<struct TMap<uint8_t , struct FWeaponMalfunctionData>>(m_addr + 5200);
	}
	float GetDTSModeLerpDurationIn() {
		return memory.read<float>(m_addr + 5280);
	}
	float GetDTSModeLerpDurationOut() {
		return memory.read<float>(m_addr + 5284);
	}
	struct UCurveFloat GetDownTheSightsModeLerpCurveOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5288);
		return struct UCurveFloat(ptr_addr);
	}
	struct UWeaponState Get_currentState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5296);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponState Get_activeState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5304);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponStateEquipping Get_equippingState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5312);
		return struct UWeaponStateEquipping(ptr_addr);
	}
	struct UWeaponState Get_unequippingStateDefault() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5320);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponState Get_unequippingState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5328);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponState Get_inactiveState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5336);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponState Get_chamberBulletState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5344);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponStateReload Get_reloadState2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5352);
		return struct UWeaponStateReload(ptr_addr);
	}
	struct UWeaponStateClearMalfunction Get_clearMalfunctionState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5360);
		return struct UWeaponStateClearMalfunction(ptr_addr);
	}
	struct UWeaponStateUnloadAmmo Get_unloadAmmoState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5368);
		return struct UWeaponStateUnloadAmmo(ptr_addr);
	}
	struct UWeaponStateCheckAmmo Get_checkAmmoState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5376);
		return struct UWeaponStateCheckAmmo(ptr_addr);
	}
	uint8_t  Get_muzzleEffectsSpawnType() {
		return memory.read<uint8_t >(m_addr + 5384);
	}
	struct UParticleSystem Get_muzzlePS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5392);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem Get_suppressorMuzzlePS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5400);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystemComponent Get_muzzlePSC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5408);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystem Get_smokeAfterShotFiredPS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5416);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystemComponent Get_smokeAfterShotFiredPSC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5424);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystem Get_ejectCasingPS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5432);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem Get_ejectLiveRoundPS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5440);
		return struct UParticleSystem(ptr_addr);
	}
	struct APrisoner Get_weaponOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5448);
		return struct APrisoner(ptr_addr);
	}
	struct TArray<struct FAmmunitionData> Get_loadedAmmoData() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 5456);
	}
	bool Get_shouldOverrideUseMuzzleDirectionForShooting() {
		return memory.read<bool>(m_addr + 5474);
	}
	bool Get_useMuzzleDirectionForShootingOverride() {
		return memory.read<bool>(m_addr + 5475);
	}
	struct TWeakObjectPtr<AActor> Get_projectileTargetLocationOverride() {
		return memory.read<struct TWeakObjectPtr<AActor>>(m_addr + 5476);
	}
	uint8_t  Get_firingMode() {
		return memory.read<uint8_t >(m_addr + 5612);
	}
	struct TArray<struct AWeaponAttachment> Get_weaponAttachmentsReplicated() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5632);
		return struct TArray<struct AWeaponAttachment>(ptr_addr);
	}
	struct TArray<struct FAmmunitionData> Get_internalMagazineAmmoData() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 5688);
	}
	int32_t Get_usedAmmoCount() {
		return memory.read<int32_t>(m_addr + 5704);
	}
	bool Get_shouldPlayChamberOpenedIdle() {
		return memory.read<bool>(m_addr + 5709);
	}
	bool Get_isInGameEvent() {
		return memory.read<bool>(m_addr + 5725);
	}
	struct UAkAudioEvent Get_fireSingleShotAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5728);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_startAutoFireAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5736);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_stopAutoFireAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5744);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_suppressorFireSingleShotAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5752);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_suppressorStartAutoFireAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5760);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_suppressorStopAutoFireAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5768);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_improvisedSuppressorFireSingleShotAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5776);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_improvisedSuppressorStartAutoFireAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5784);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_improvisedSuppressorStopAutoFireAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5792);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_noAmmoAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5800);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_dryFireUncockedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5808);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_zeroRangeClickAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5816);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_changeFiringModeAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5824);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_onMalfunctionAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5832);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_switchADSStateAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5840);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_indoorSmallHearingDamageAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5848);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_indoorMediumHearingDamageAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5856);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_indoorLargeHearingDamageAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5864);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_outdoorLargeHearingDamageAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5872);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_makeNoiseLoudness() {
		return memory.read<float>(m_addr + 5880);
	}
	float Get_staminaDrainMultiplier() {
		return memory.read<float>(m_addr + 5900);
	}
	uint8_t  Get_malfunction() {
		return memory.read<uint8_t >(m_addr + 5916);
	}
	uint8_t  Get_behaviourMode() {
		return memory.read<uint8_t >(m_addr + 5917);
	}
	UObject Get_loadedAmmunitionItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5952);
		return UObject(ptr_addr);
	}
	AProjectile Get_loadedProjectileClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5968);
		return AProjectile(ptr_addr);
	}
	AProjectile Get_defaultProjectileClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5976);
		return AProjectile(ptr_addr);
	}
	float Get_totalControllerPitchAmountToAdd() {
		return memory.read<float>(m_addr + 5996);
	}
	float Get_controllerPitchAddTimeFrame() {
		return memory.read<float>(m_addr + 6000);
	}
	struct FWeaponStateSyncData Get_ownerWeaponStateSyncData() {
		return memory.read<struct FWeaponStateSyncData>(m_addr + 12024);
	}

private:
	std::uint64_t m_addr = 0;
};


class UChangeTextWidget
{
public:
	UChangeTextWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USkillLevelCraftingCondition
{
public:
	USkillLevelCraftingCondition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	USkill GetSkill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return USkill(ptr_addr);
	}
	uint8_t  GetMinSkillLevel() {
		return memory.read<uint8_t >(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCharacterActionComponent
{
public:
	UCharacterActionComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_shouldStopMontageOnEnd() {
		return memory.read<bool>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_Unmount
{
public:
	UPrisonerVehicleAction_Unmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCharacterMesh
{
public:
	UCharacterMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagContainer GetTags() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 40);
	}
	struct TArray<struct FCharacterMeshSlice> GetMeshSlices() {
		return memory.read<struct TArray<struct FCharacterMeshSlice>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTeamDeathmatchParticipantStats
{
public:
	UTeamDeathmatchParticipantStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCharacterMeshManager
{
public:
	UCharacterMeshManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<UCharacterMesh, struct FCharacterMeshClassSet> Get_incompatibleCharacterMeshClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TMap<UCharacterMesh, struct FCharacterMeshClassSet>(ptr_addr);
	}
	struct TMap<struct FGameplayTag, struct FCharacterMeshManagerPerSlotData> Get_perCharacterMeshSlotData() {
		return memory.read<struct TMap<struct FGameplayTag, struct FCharacterMeshManagerPerSlotData>>(m_addr + 144);
	}
	float Get_destroyUnusedMeshComponentsTime() {
		return memory.read<float>(m_addr + 224);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADistantLevel
{
public:
	ADistantLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent Get_previewMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct FString Get_streamingLevelName() {
		return memory.read<struct FString>(m_addr + 552);
	}
	uint8_t  Get_meshStreamingBehavior() {
		return memory.read<uint8_t >(m_addr + 568);
	}
	float Get_maxDrawDistance() {
		return memory.read<float>(m_addr + 572);
	}
	bool Get_neverDistanceCull() {
		return memory.read<bool>(m_addr + 576);
	}
	struct FBoxSphereBounds Get_meshBounds() {
		return memory.read<struct FBoxSphereBounds>(m_addr + 580);
	}
	struct TSoftObjectPtr<UStaticMesh> Get_collisionMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 608);
	}
	struct TArray<struct TSoftObjectPtr<UStaticMesh>> Get_meshLODs() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UStaticMesh>>>(m_addr + 648);
	}

private:
	std::uint64_t m_addr = 0;
};


class UForeignSubstance
{
public:
	UForeignSubstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText Get_name() {
		return memory.read<struct FText>(m_addr + 40);
	}
	uint8_t  Get_disposition() {
		return memory.read<uint8_t >(m_addr + 64);
	}
	float Get_absorptionCapacity() {
		return memory.read<float>(m_addr + 68);
	}
	float Get_absorptionRate() {
		return memory.read<float>(m_addr + 72);
	}
	float Get_baseDiscardRate() {
		return memory.read<float>(m_addr + 76);
	}
	struct TMap<UForeignSubstance, struct FRuntimeFloatCurve> Get_discardRateMultiplierPerOtherSubstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct TMap<UForeignSubstance, struct FRuntimeFloatCurve>(ptr_addr);
	}
	float Get_amountToDiscardPerWaterTransferredToBladder() {
		return memory.read<float>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACharacterModificationRoom
{
public:
	ACharacterModificationRoom(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent Get_sceneRoot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct USceneComponent(ptr_addr);
	}
	struct UChildActorComponent Get_childActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UChildActorComponent(ptr_addr);
	}
	struct UCineCameraComponent Get_camera() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UCineCameraComponent(ptr_addr);
	}
	struct USplineComponent Get_positionSpline() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct USplineComponent(ptr_addr);
	}
	struct USplineComponent Get_viewTargetSpline() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct USplineComponent(ptr_addr);
	}
	float Get_cameraInterpSpeed() {
		return memory.read<float>(m_addr + 600);
	}
	float Get_mouseTrackingSpeed() {
		return memory.read<float>(m_addr + 612);
	}
	struct FVector2D Get_mouseBasedCameraRotationIntensity() {
		return memory.read<struct FVector2D>(m_addr + 616);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_ICU_Expandable_Stats
{
public:
	UMetabolism_ICU_Expandable_Stats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetDisplayGraph() {
		return memory.read<bool>(m_addr + 608);
	}
	struct UMetabolism_ICU_GraphWidget Get_graph2D() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolism_ICU_GraphWidget(ptr_addr);
	}
	struct UImage Get_graph2D_Background() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCharacterNameDisplayWidget
{
public:
	UCharacterNameDisplayWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_nameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct USquadEmblemWidget Get_squadEmblem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct USquadEmblemWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UClientPriceCache
{
public:
	UClientPriceCache(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCharacterSpawnerComponent
{
public:
	UCharacterSpawnerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetOverrideDefaultProbability() {
		return memory.read<bool>(m_addr + 504);
	}
	float GetProbability() {
		return memory.read<float>(m_addr + 508);
	}
	bool GetOverrideDefaultRespawnTime() {
		return memory.read<bool>(m_addr + 512);
	}
	float GetRespawnTime() {
		return memory.read<float>(m_addr + 516);
	}
	int32_t GetMinCharactersToSpawn() {
		return memory.read<int32_t>(m_addr + 520);
	}
	int32_t GetMaxCharactersToSpawn() {
		return memory.read<int32_t>(m_addr + 524);
	}
	struct TArray<struct FCharacterSpawnerMarker> GetSpawnerMarkers() {
		return memory.read<struct TArray<struct FCharacterSpawnerMarker>>(m_addr + 528);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameResourceContainerProxyForReplenishableResource
{
public:
	UGameResourceContainerProxyForReplenishableResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFishingTrophyWidget
{
public:
	UFishingTrophyWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_fishNameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_fishWeightText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_fishSizeText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_keepFishHotkeyText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_releaseFishHotkeyText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_keepButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_releaseButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZSlider
{
public:
	UConZSlider(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_minValue() {
		return memory.read<int32_t>(m_addr + 640);
	}
	int32_t Get_maxValue() {
		return memory.read<int32_t>(m_addr + 644);
	}
	int32_t Get_stepSize() {
		return memory.read<int32_t>(m_addr + 648);
	}
	bool Get_controlWithKeyboard() {
		return memory.read<bool>(m_addr + 652);
	}
	struct UOverlay Get_progressBarOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UOverlay(ptr_addr);
	}
	struct UImage Get_sliderThumb() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}
	struct UProgressBar Get_progressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UProgressBar(ptr_addr);
	}
	struct FConZSliderStyle Get_selectedAndFocusedSliderStyle() {
		return memory.read<struct FConZSliderStyle>(m_addr + 704);
	}
	struct FConZSliderStyle Get_selectedAndUnfocusedSliderStyle() {
		return memory.read<struct FConZSliderStyle>(m_addr + 1256);
	}
	struct FConZSliderStyle Get_unselectedSliderStyle() {
		return memory.read<struct FConZSliderStyle>(m_addr + 1808);
	}
	struct FConZSliderStyle Get_highlightedSliderStyle() {
		return memory.read<struct FConZSliderStyle>(m_addr + 2360);
	}
	struct FConZSliderStyle Get_disabledSliderStyle() {
		return memory.read<struct FConZSliderStyle>(m_addr + 2912);
	}
	float Get_stepSpeedStartTreshold() {
		return memory.read<float>(m_addr + 3464);
	}
	float Get_stepSpeedThreshold() {
		return memory.read<float>(m_addr + 3468);
	}
	float Get_stepSpeedAtStart() {
		return memory.read<float>(m_addr + 3472);
	}
	float Get_stepSpeedSlow() {
		return memory.read<float>(m_addr + 3476);
	}
	float Get_stepSpeedFast() {
		return memory.read<float>(m_addr + 3480);
	}
	bool Get_controlWithMouseClick() {
		return memory.read<bool>(m_addr + 3484);
	}
	bool Get_controlWithMouseWheel() {
		return memory.read<bool>(m_addr + 3485);
	}

private:
	std::uint64_t m_addr = 0;
};


class USpamProtectionState
{
public:
	USpamProtectionState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetSeverity() {
		return memory.read<uint8_t >(m_addr + 40);
	}
	struct FDateTime GetLastSeverityChange() {
		return memory.read<struct FDateTime>(m_addr + 48);
	}
	struct FDateTime GetLastTimeout() {
		return memory.read<struct FDateTime>(m_addr + 56);
	}
	bool GetPermanentTimeout() {
		return memory.read<bool>(m_addr + 64);
	}
	uint8_t  GetMaxSeverityReached() {
		return memory.read<uint8_t >(m_addr + 65);
	}
	int32_t GetMaxSeverityCount() {
		return memory.read<int32_t>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDrinkWaterAssetData
{
public:
	UDrinkWaterAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UGameResourceType(ptr_addr);
	}
	float GetQuantityPerDrink() {
		return memory.read<float>(m_addr + 56);
	}
	float GetSalinity() {
		return memory.read<float>(m_addr + 60);
	}
	struct UAkAudioEvent GetStartDrinkingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopDrinkingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UChatSuggestionWidget
{
public:
	UChatSuggestionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBorder Get_border() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UBorder(ptr_addr);
	}
	struct UChatText Get_textBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UChatText(ptr_addr);
	}
	struct FLinearColor Get_defaultColor() {
		return memory.read<struct FLinearColor>(m_addr + 624);
	}
	struct FLinearColor Get_highlightedColor() {
		return memory.read<struct FLinearColor>(m_addr + 640);
	}

private:
	std::uint64_t m_addr = 0;
};


class UChatUIController
{
public:
	UChatUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_maxHistorySize() {
		return memory.read<int32_t>(m_addr + 280);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInv2021_ActorInventoryElement
{
public:
	UInv2021_ActorInventoryElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UChatText
{
public:
	UChatText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayableInstrument
{
public:
	UPlayableInstrument(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCheckAmmoMagazineNotAttached
{
public:
	UCheckAmmoMagazineNotAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USkillAction
{
public:
	USkillAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Leukopenia
{
public:
	UPrisonerBodySymptomCause_Leukopenia(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AFireItem
{
public:
	AFireItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_touchDamage() {
		return memory.read<float>(m_addr + 2344);
	}
	struct UHeatSourceItemComponent Get_heatSourceItemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct UHeatSourceItemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRollRevolverDrum
{
public:
	UPrisonerActionRollRevolverDrum(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCheckDetectableItemsAction
{
public:
	UCheckDetectableItemsAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCheckDetectablePlayersAction
{
public:
	UCheckDetectablePlayersAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AGameEventTransport
{
public:
	AGameEventTransport(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USphereComponent GetSphere() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USphereComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetPodMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetTargetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UStaticMeshComponent(ptr_addr);
	}
	float GetTravelSpeed() {
		return memory.read<float>(m_addr + 568);
	}
	float GetTravelHeight() {
		return memory.read<float>(m_addr + 572);
	}
	float GetHoverHeight() {
		return memory.read<float>(m_addr + 576);
	}
	float GetLargerRadius() {
		return memory.read<float>(m_addr + 580);
	}
	float GetSmallerRadius() {
		return memory.read<float>(m_addr + 584);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 588);
	}
	struct FVector Get_lastPosition() {
		return memory.read<struct FVector>(m_addr + 592);
	}
	struct FVector Get_targetPosition() {
		return memory.read<struct FVector>(m_addr + 604);
	}
	float Get_blend() {
		return memory.read<float>(m_addr + 616);
	}

private:
	std::uint64_t m_addr = 0;
};


class UExpandableContainer
{
public:
	UExpandableContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_titleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UNamedSlot Get_contentNamedSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UNamedSlot(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADropZoneCargo
{
public:
	ADropZoneCargo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UChildActorComponent GetSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UChildActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDetectableTag
{
public:
	UDetectableTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UChestItemState
{
public:
	UChestItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetOwningUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 256);
	}
	float GetContainedItemsWeight() {
		return memory.read<float>(m_addr + 264);
	}
	uint8_t  GetActiveAccessLevel() {
		return memory.read<uint8_t >(m_addr + 268);
	}
	struct TArray<struct FDbIntegerId> GetLocks() {
		return memory.read<struct TArray<struct FDbIntegerId>>(m_addr + 272);
	}

private:
	std::uint64_t m_addr = 0;
};


class AChestItem
{
public:
	AChestItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_capacityX() {
		return memory.read<int32_t>(m_addr + 2344);
	}
	int32_t Get_capacityY() {
		return memory.read<int32_t>(m_addr + 2348);
	}
	struct UInventoryItemComponent Get_inventoryComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct UInventoryItemComponent(ptr_addr);
	}
	struct UInventoryContainer2D Get_inventoryContainer2D() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2360);
		return struct UInventoryContainer2D(ptr_addr);
	}
	struct UBuriableChestItemComponent Get_buriableChestItemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2376);
		return struct UBuriableChestItemComponent(ptr_addr);
	}
	struct UNameableItemComponent Get_nameableItemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2384);
		return struct UNameableItemComponent(ptr_addr);
	}
	bool Get_canContainChestItem() {
		return memory.read<bool>(m_addr + 2392);
	}
	bool Get_lockpickableEnabled() {
		return memory.read<bool>(m_addr + 2393);
	}
	bool Get_overrideCanBeNamed() {
		return memory.read<bool>(m_addr + 2394);
	}
	bool Get_canBeNamed() {
		return memory.read<bool>(m_addr + 2395);
	}
	float Get_containedItemsWeight() {
		return memory.read<float>(m_addr + 2396);
	}
	float Get_pendingContainedItemsRadiationAmount() {
		return memory.read<float>(m_addr + 2400);
	}
	struct FDbIntegerId Get_owningUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 2408);
	}
	struct FTransform Get_unlockTransform() {
		return memory.read<struct FTransform>(m_addr + 2416);
	}
	float Get_forceUnlockMovementAcceptanceRadius() {
		return memory.read<float>(m_addr + 2464);
	}
	struct TArray<UObject> Get_lockItemsClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2472);
		return struct TArray<UObject>(ptr_addr);
	}
	struct TArray<struct ULockData> Get_lockData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2488);
		return struct TArray<struct ULockData>(ptr_addr);
	}
	struct TArray<int32_t> Get_remainingNeutralizationAttemptsPerLock() {
		return memory.read<struct TArray<int32_t>>(m_addr + 2504);
	}
	struct TWeakObjectPtr<ABCULockItem> Get_attachedBCULockItem() {
		return memory.read<struct TWeakObjectPtr<ABCULockItem>>(m_addr + 2520);
	}
	struct TArray<struct FDbIntegerId> Get_locks() {
		return memory.read<struct TArray<struct FDbIntegerId>>(m_addr + 2544);
	}
	uint8_t  Get_activeAccessLevel() {
		return memory.read<uint8_t >(m_addr + 2576);
	}
	int32_t Get_cachedInventoryCount() {
		return memory.read<int32_t>(m_addr + 2580);
	}
	bool Get_doesSupportBCULocking() {
		return memory.read<bool>(m_addr + 2584);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionForceUnlock
{
public:
	UPrisonerActionForceUnlock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDestroyItem
{
public:
	UPrisonerActionDestroyItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UChopItemAction
{
public:
	UChopItemAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDamageDealer
{
public:
	UDamageDealer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AChoppingObjective
{
public:
	AChoppingObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TSoftClassPtr<UObject>> Get_targetActors() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 816);
	}
	bool Get_targetSpecificClothesType() {
		return memory.read<bool>(m_addr + 832);
	}
	struct TArray<struct TSoftClassPtr<UObject>> Get_targetClothesCharacterMeshTypes() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 840);
	}
	bool Get_singleTarget() {
		return memory.read<bool>(m_addr + 856);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTraderItemButton
{
public:
	UTraderItemButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton Get_button() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UButton(ptr_addr);
	}
	struct UImage Get_icon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UImage(ptr_addr);
	}
	struct UOverlay Get_priceOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UOverlay(ptr_addr);
	}
	struct UTextBlock Get_title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UTextBlock(ptr_addr);
	}
	struct UOverlay Get_tradeDataOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UOverlay(ptr_addr);
	}
	struct UTextBlock Get_price() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_quantity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_quantityFadeout() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_quantityBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_quantityBackgroundFadeout() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UImage(ptr_addr);
	}
	struct UOverlay Get_insufficientFamePointsOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UOverlay(ptr_addr);
	}
	struct UTextBlock Get_requiredFamePointsText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetAnimation Get_changeQuantity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UTexture2D Get_iconBlankTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1048);
		return struct UTexture2D(ptr_addr);
	}
	struct UAkAudioEvent Get_soundOnHover() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1056);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_soundOnClick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1064);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCauseUIData_Weakness
{
public:
	UPrisonerBodySymptomCauseUIData_Weakness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UChoppingRecipeDataAsset
{
public:
	UChoppingRecipeDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FChoppingRecipe GetChoppingRecipe() {
		return memory.read<struct FChoppingRecipe>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingFavouriteButton
{
public:
	UCookingFavouriteButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_buttonImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct UWidgetAnimation Get_clickAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation Get_hoverAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct FLinearColor Get_nonFavouriteButtonColor() {
		return memory.read<struct FLinearColor>(m_addr + 720);
	}
	struct FLinearColor Get_favouriteButtonColor() {
		return memory.read<struct FLinearColor>(m_addr + 736);
	}
	struct FLinearColor Get_disabledButtonColor() {
		return memory.read<struct FLinearColor>(m_addr + 752);
	}

private:
	std::uint64_t m_addr = 0;
};


class AChristmasGhost
{
public:
	AChristmasGhost(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TSoftClassPtr<UObject>> Get_possibleGifts() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 544);
	}
	struct TSoftObjectPtr<UParticleSystem> Get_giftSpawnParticles() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 560);
	}
	struct TSoftObjectPtr<UAkAudioEvent> Get_giftSpawnAudioEvent() {
		return memory.read<struct TSoftObjectPtr<UAkAudioEvent>>(m_addr + 600);
	}
	struct FTransform Get_giftSpawnParticlesRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 640);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULockpickingMinigameValidationParams
{
public:
	ULockpickingMinigameValidationParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCircularMenuSegmentInfo
{
public:
	UCircularMenuSegmentInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetCaption() {
		return memory.read<struct FText>(m_addr + 48);
	}
	struct UCircularMenuSegmentIcons GetIcons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UCircularMenuSegmentIcons(ptr_addr);
	}
	bool GetShouldApplyFadeToIcon() {
		return memory.read<bool>(m_addr + 80);
	}
	float GetIconSizeOverride() {
		return memory.read<float>(m_addr + 84);
	}
	bool GetShouldStayVisible() {
		return memory.read<bool>(m_addr + 88);
	}
	bool GetShowTooltip() {
		return memory.read<bool>(m_addr + 89);
	}
	struct FText GetToolTipText() {
		return memory.read<struct FText>(m_addr + 96);
	}
	struct UCircularMenuWidget GetParentCircularWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UCircularMenuWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionInjectSubstanceDescription
{
public:
	UPrisonerActionInjectSubstanceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCircularMenuSegmentWeaponMalfunctionInfo
{
public:
	UCircularMenuSegmentWeaponMalfunctionInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_weaponMalfunction() {
		return memory.read<uint8_t >(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADeer2
{
public:
	ADeer2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_hartBaseScale() {
		return memory.read<float>(m_addr + 2808);
	}
	float Get_hartScaleVariance() {
		return memory.read<float>(m_addr + 2812);
	}
	float Get_hindBaseScale() {
		return memory.read<float>(m_addr + 2816);
	}
	float Get_hindScaleVariance() {
		return memory.read<float>(m_addr + 2820);
	}
	float Get_maleChance() {
		return memory.read<float>(m_addr + 2824);
	}
	bool Get_isMale() {
		return memory.read<bool>(m_addr + 2828);
	}
	struct USkeletalMesh Get_maleSkeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2832);
		return struct USkeletalMesh(ptr_addr);
	}
	struct TArray<struct UStaticMesh> Get_antlerMeshes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2840);
		return struct TArray<struct UStaticMesh>(ptr_addr);
	}
	struct UStaticMeshComponent Get_antlers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2856);
		return struct UStaticMeshComponent(ptr_addr);
	}
	uint32_t Get_hartHind() {
		return memory.read<uint32_t>(m_addr + 2864);
	}
	struct UChoppingRecipeDataAsset Get_maleChoppingRecipeDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2872);
		return struct UChoppingRecipeDataAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFishingAttachmentHook
{
public:
	AFishingAttachmentHook(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_visibilityFactor() {
		return memory.read<float>(m_addr + 2352);
	}
	float Get_maxTension() {
		return memory.read<float>(m_addr + 2356);
	}
	float Get_hookedWeight() {
		return memory.read<float>(m_addr + 2360);
	}
	struct FTransform Get_hookedFishTransform() {
		return memory.read<struct FTransform>(m_addr + 2368);
	}
	struct UStaticMeshComponent Get_hookedFishMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2416);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct FName Get_hookedFishHookPositionName() {
		return memory.read<struct FName>(m_addr + 2424);
	}
	float Get_checkIfFishIsHookedRate() {
		return memory.read<float>(m_addr + 2432);
	}
	float Get_timeToLooseTheFishWhenHookBitten() {
		return memory.read<float>(m_addr + 2436);
	}
	struct UParticleSystemComponent Get_movingRippleParticleSystemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2440);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_splashParticleSystemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2448);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCircularMenuSegmentIcons
{
public:
	UCircularMenuSegmentIcons(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetUnselectedIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetSelectedIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetDisabledIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetOverlayIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDepotItemUserData
{
public:
	UDepotItemUserData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetOwnerUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 40);
	}
	struct FString GetTraderPersistentId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	bool GetShouldClearContents() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCraftingPanelWidget
{
public:
	UCraftingPanelWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCraftingRecipeDescriptionPanel Get_craftingRecipeDescriptionPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UCraftingRecipeDescriptionPanel(ptr_addr);
	}
	struct UBuildingPanel Get_buildingPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UBuildingPanel(ptr_addr);
	}
	struct UCraftingPanel Get_craftingPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UCraftingPanel(ptr_addr);
	}
	struct UCentralBuildingPanel Get_centralBuildingPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UCentralBuildingPanel(ptr_addr);
	}
	struct UWidgetSwitcher Get_buildingCraftingWidgetSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetSwitcher(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCircularMenuSegmentSubmenuInfo
{
public:
	UCircularMenuSegmentSubmenuInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UCircularMenuSegmentInfo> GetSubmenuInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct TArray<struct UCircularMenuSegmentInfo>(ptr_addr);
	}
	float GetIndexOffset() {
		return memory.read<float>(m_addr + 144);
	}
	bool GetRequireSupporterPack() {
		return memory.read<bool>(m_addr + 148);
	}

private:
	std::uint64_t m_addr = 0;
};


class UContinuousFuelHeatSource
{
public:
	UContinuousFuelHeatSource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_autoFindFuelConsumption() {
		return memory.read<bool>(m_addr + 552);
	}
	struct FName Get_associatedFuelConsumptionEntityComponent() {
		return memory.read<struct FName>(m_addr + 556);
	}
	UGameResourceType Get_resourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return UGameResourceType(ptr_addr);
	}
	bool Get_requiresMinimumAvailableEnergyAmountToTurnOn() {
		return memory.read<bool>(m_addr + 576);
	}
	bool Get_isRecreateable() {
		return memory.read<bool>(m_addr + 577);
	}
	float Get_maxEnergyConsumptionRate() {
		return memory.read<float>(m_addr + 580);
	}
	char Get_repCurrentEnergyConsumptionRatio() {
		return memory.read<char>(m_addr + 584);
	}
	struct FRuntimeFloatCurve Get_energyConsumptionRateVsTemperatureScaleCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 592);
	}
	char Get_repDialValue() {
		return memory.read<char>(m_addr + 728);
	}
	float Get_dialOffValue() {
		return memory.read<float>(m_addr + 732);
	}
	float Get_minDialDeltaValueForRPC() {
		return memory.read<float>(m_addr + 736);
	}
	float Get_updateToServerCheckInterval() {
		return memory.read<float>(m_addr + 740);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_EnergyDeficiency
{
public:
	UPrisonerBodyCondition_EnergyDeficiency(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_severityVsEnergyDeficiencyRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 192);
	}
	float Get_maxRatioOfAbsorbedEnergyCapacityToBeRecovered() {
		return memory.read<float>(m_addr + 328);
	}
	float Get_artificialAbsorbedEnergyAccumulationScale() {
		return memory.read<float>(m_addr + 332);
	}
	float Get_energyDeficiency() {
		return memory.read<float>(m_addr + 336);
	}
	float Get_energyDeficiencyToRecover() {
		return memory.read<float>(m_addr + 340);
	}
	float Get_artificialAbsorbedEnergy() {
		return memory.read<float>(m_addr + 344);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCircularMenuSegmentInteractionInfo
{
public:
	UCircularMenuSegmentInteractionInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetInteractionTargetType() {
		return memory.read<uint8_t >(m_addr + 128);
	}
	struct FInteractionStruct GetInteractionInfo() {
		return memory.read<struct FInteractionStruct>(m_addr + 136);
	}
	bool GetRequireSupporterPack() {
		return memory.read<bool>(m_addr + 288);
	}
	struct APrisoner Get_interactionInitiator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return struct APrisoner(ptr_addr);
	}
	struct UObject Get_interactableObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCircularMenuMusicPlayerToggleInfo
{
public:
	UCircularMenuMusicPlayerToggleInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetInteractionTargetType() {
		return memory.read<uint8_t >(m_addr + 128);
	}
	struct FInteractionStruct GetPrimaryInteractionInfo() {
		return memory.read<struct FInteractionStruct>(m_addr + 136);
	}
	struct FInteractionStruct GetSecondaryInteractionInfo() {
		return memory.read<struct FInteractionStruct>(m_addr + 288);
	}
	struct FText GetPrimaryCaption() {
		return memory.read<struct FText>(m_addr + 440);
	}
	struct UCircularMenuSegmentIcons GetPrimaryIcons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 464);
		return struct UCircularMenuSegmentIcons(ptr_addr);
	}
	struct FText GetSecondaryCaption() {
		return memory.read<struct FText>(m_addr + 472);
	}
	struct UCircularMenuSegmentIcons GetSecondaryIcons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 496);
		return struct UCircularMenuSegmentIcons(ptr_addr);
	}
	bool GetIsPrimaryActive() {
		return memory.read<bool>(m_addr + 504);
	}
	uint8_t  GetMusicPlayerCommandType() {
		return memory.read<uint8_t >(m_addr + 505);
	}
	struct APrisoner Get_interactionInitiator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 512);
		return struct APrisoner(ptr_addr);
	}
	struct UObject Get_interactableObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 520);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCircularProgressBar
{
public:
	UCircularProgressBar(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_speedChange() {
		return memory.read<float>(m_addr + 624);
	}
	bool Get_shouldProgressTextBeVisible() {
		return memory.read<bool>(m_addr + 628);
	}
	struct FLinearColor Get_alarmColor() {
		return memory.read<struct FLinearColor>(m_addr + 632);
	}
	struct FLinearColor Get_normalColor() {
		return memory.read<struct FLinearColor>(m_addr + 648);
	}
	struct FLinearColor Get_textColor() {
		return memory.read<struct FLinearColor>(m_addr + 664);
	}
	struct UMaterialInstanceDynamic Get_circularMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UTexture2D GetImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTexture2D(ptr_addr);
	}
	struct UImage GetFill_Value_BCG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct UImage GetIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UImage(ptr_addr);
	}
	struct UHorizontalBox GetProgressTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UTextBlock GetTPercentage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTPercentageSign() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetOuterCircleAlarmAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_QuickInstallAttachment
{
public:
	UPrisonerVehicleAction_QuickInstallAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USimpleParachuteItemTag
{
public:
	USimpleParachuteItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerAirMovementParameters GetMovementParameters() {
		return memory.read<struct FPrisonerAirMovementParameters>(m_addr + 48);
	}
	struct FParachuteAnimParams GetFallLongAnimation() {
		return memory.read<struct FParachuteAnimParams>(m_addr + 80);
	}
	struct FParachuteAnimParams GetSkydiveSlowAnimation() {
		return memory.read<struct FParachuteAnimParams>(m_addr + 96);
	}
	struct FParachuteAnimParams GetSkydiveFastAnimation() {
		return memory.read<struct FParachuteAnimParams>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventorySizeData2D
{
public:
	UInventorySizeData2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSizeX() {
		return memory.read<int32_t>(m_addr + 40);
	}
	int32_t GetSizeY() {
		return memory.read<int32_t>(m_addr + 44);
	}
	struct TArray<bool> GetBitmask() {
		return memory.read<struct TArray<bool>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZWaterSplineOcean
{
public:
	AConZWaterSplineOcean(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetFollowCamera() {
		return memory.read<bool>(m_addr + 696);
	}
	struct UTexture2D GetOceanOpacityMaskTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USingletonStatics
{
public:
	USingletonStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UClearBadRound
{
public:
	UClearBadRound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Fatigue
{
public:
	UPrisonerBodySymptomCause_Fatigue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInv2021_InventoryPositionObject
{
public:
	UInv2021_InventoryPositionObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UClearDoubleFeed
{
public:
	UClearDoubleFeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 184);
	}
	int32_t Get_ejectedRoundsCount() {
		return memory.read<int32_t>(m_addr + 192);
	}
	struct AWeaponAttachmentMagazine Get_magazineToRestore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct AWeaponAttachmentMagazine(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionStartRestingDescription
{
public:
	UPrisonerActionStartRestingDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UConsumableUserData
{
public:
	UConsumableUserData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UClearStuckBullet
{
public:
	UClearStuckBullet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UClientSettingsMenu
{
public:
	UClientSettingsMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UInputWidget Get_inputWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1576);
		return UInputWidget(ptr_addr);
	}
	UAudioDeviceDisplay Get_audioDeviceDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1584);
		return UAudioDeviceDisplay(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZSettingsUIController
{
public:
	UConZSettingsUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UClientSettingsUIController
{
public:
	UClientSettingsUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UInputWidget GetInputWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 520);
		return struct UInputWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULockpickingStatics
{
public:
	ULockpickingStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UClothesItemState
{
public:
	UClothesItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getdirtiness() {
		return memory.read<float>(m_addr + 256);
	}
	bool GetIsPatched() {
		return memory.read<bool>(m_addr + 260);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionWashEyesDescription
{
public:
	UPrisonerActionWashEyesDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEntitySetup
{
public:
	UEntitySetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetTransient() {
		return memory.read<bool>(m_addr + 64);
	}
	bool GetHidden() {
		return memory.read<bool>(m_addr + 65);
	}
	float GetBoundsRadius() {
		return memory.read<float>(m_addr + 68);
	}
	struct TSoftClassPtr<UObject> GetActor() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct TArray<struct FEntitySetup_Component> GetComponents() {
		return memory.read<struct TArray<struct FEntitySetup_Component>>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMissionRewardWidget
{
public:
	UMissionRewardWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_rewardImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_rewardAmount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UClothesItemEntitySetup
{
public:
	UClothesItemEntitySetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInsertCartridgeIntoMagazine
{
public:
	UInsertCartridgeIntoMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class AElectricityGeneratorItem
{
public:
	AElectricityGeneratorItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBasicGameResourceContainerComponent Get_resourceContainerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct UBasicGameResourceContainerComponent(ptr_addr);
	}
	struct URangedResourceProviderComponentContinousAmount Get_rangedResourceProviderComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2328);
		return struct URangedResourceProviderComponentContinousAmount(ptr_addr);
	}
	struct UAkAudioEvent Get_turnOnAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2336);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_turnOffAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2344);
		return struct UAkAudioEvent(ptr_addr);
	}
	bool Get_isTurnedOn() {
		return memory.read<bool>(m_addr + 2352);
	}
	float Get_power() {
		return memory.read<float>(m_addr + 2356);
	}
	float Get_load() {
		return memory.read<float>(m_addr + 2360);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChangeStanceWaitEndOnOwningClient
{
public:
	UPrisonerActionChangeStanceWaitEndOnOwningClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTraderForPlayerAndDepotItemRequest
{
public:
	UTraderForPlayerAndDepotItemRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCollapsableColorPicker
{
public:
	UCollapsableColorPicker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USelectionOverlayWidget Get_selectionOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct USelectionOverlayWidget(ptr_addr);
	}
	struct UTextBlock Get_label() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_colorPreviewSquare() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct UColorPicker Get_colorPicker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UColorPicker(ptr_addr);
	}
	struct FText GetdropdownLabel() {
		return memory.read<struct FText>(m_addr + 664);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCollapsableContainer
{
public:
	UCollapsableContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetTitle() {
		return memory.read<struct FText>(m_addr + 608);
	}
	struct UTextBlock Get_title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_titleBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UButton Get_displayContentButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UButton(ptr_addr);
	}
	struct UOverlay Get_contentAreaOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UOverlay(ptr_addr);
	}
	struct FDataTableRowHandle Get_titleBackgroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 664);
	}
	struct FDataTableRowHandle Get_titleTextColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 680);
	}
	struct FButtonStyle Get_buttonStyleWhenCollapsedContent() {
		return memory.read<struct FButtonStyle>(m_addr + 696);
	}
	struct FButtonStyle Get_buttonStyleWhenExpandedContent() {
		return memory.read<struct FButtonStyle>(m_addr + 1328);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCutObjectAssetData
{
public:
	UCutObjectAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UChoppingRecipeDataAsset GetChoppingRecipeDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UChoppingRecipeDataAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerStatics
{
public:
	UPrisonerStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class APrisonerHallucinationIllusion_SeeFirearmsAsSticksAndBananas
{
public:
	APrisonerHallucinationIllusion_SeeFirearmsAsSticksAndBananas(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh Get_bananaMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UStaticMesh(ptr_addr);
	}
	struct UStaticMesh Get_mediumStickMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UStaticMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionLightFireDescription
{
public:
	UPrisonerActionLightFireDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCollectObjectAssetData
{
public:
	UCollectObjectAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCollectSeedsItemTag
{
public:
	UCollectSeedsItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> Get_seedsClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UColorPicker
{
public:
	UColorPicker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_dynamicGradient() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_dynamicReticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct USlider Get_sliderHUE() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct USlider(ptr_addr);
	}
	struct FVector2D Get_saturationAndBrightnessPickerSize() {
		return memory.read<struct FVector2D>(m_addr + 632);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFundsOverviewUIController
{
public:
	UFundsOverviewUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCombinationLockUnlockAttemptRequest
{
public:
	UCombinationLockUnlockAttemptRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDiegeticLockState
{
public:
	UDiegeticLockState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateColor GetLockedColor() {
		return memory.read<struct FSlateColor>(m_addr + 608);
	}
	struct FSlateColor GetUnlockedColor() {
		return memory.read<struct FSlateColor>(m_addr + 648);
	}
	struct UTextBlock Get_lockState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_HeightenedSenses
{
public:
	UPrisonerBodySymptom_HeightenedSenses(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCombinationLockUnlockAttemptResponse
{
public:
	UCombinationLockUnlockAttemptResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCompassItemTag
{
public:
	UCompassItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetCompassLevel() {
		return memory.read<char>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMeleeAttackCollisionCapsule
{
public:
	UMeleeAttackCollisionCapsule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag Get_attachment() {
		return memory.read<struct FGameplayTag>(m_addr + 1136);
	}
	struct FDataTableRowHandle Get_weaponDescRef() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 1144);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULevelUpNotificationWidget
{
public:
	ULevelUpNotificationWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UOverlay Get_overlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UOverlay(ptr_addr);
	}
	struct UImage Get_backgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_arrowImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_skillLevelText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_skillNameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UAkAudioEvent Get_levelUpNotificationAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_displayTime() {
		return memory.read<float>(m_addr + 660);
	}
	float Get_slideInTime() {
		return memory.read<float>(m_addr + 664);
	}
	float Get_slideOutTime() {
		return memory.read<float>(m_addr + 668);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCompassWidget
{
public:
	UCompassWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_compassTrack() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UTexture2D Get_compassTrackNorthOnly() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_compassTrackCardinalOnly() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_compassTrackCardinalAndIntercardinal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_compassTrackEverything() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTexture2D(ptr_addr);
	}
	struct FVector2D Get_offset() {
		return memory.read<struct FVector2D>(m_addr + 656);
	}
	float Get_compassTrackWidthMultiplier() {
		return memory.read<float>(m_addr + 664);
	}

private:
	std::uint64_t m_addr = 0;
};


class UComplexAnimal2AnimInstance
{
public:
	UComplexAnimal2AnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetCurrentAction() {
		return memory.read<uint8_t >(m_addr + 752);
	}
	float GetHeadLookRight() {
		return memory.read<float>(m_addr + 756);
	}
	float GetHeadLookUp() {
		return memory.read<float>(m_addr + 760);
	}
	float GetAngularVelocity() {
		return memory.read<float>(m_addr + 764);
	}
	struct FName GetfaceMorphTargetName() {
		return memory.read<struct FName>(m_addr + 768);
	}
	float GetInterpolationSpeed() {
		return memory.read<float>(m_addr + 776);
	}
	float GetBlendInTime() {
		return memory.read<float>(m_addr + 780);
	}
	float GetBlendOutTime() {
		return memory.read<float>(m_addr + 784);
	}
	float Get_faceMorphValueChangePerSeconds() {
		return memory.read<float>(m_addr + 848);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerLifeIndicatorsSprite
{
public:
	UPrisonerLifeIndicatorsSprite(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCanvasPanel GetMPI_CanvasPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UCanvasPanel(ptr_addr);
	}
	struct UBreathingBarLungsWidget Get_breathingBarLungsWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UBreathingBarLungsWidget(ptr_addr);
	}
	struct UDualArcedProgressBar Get_dualProgressBarBreathing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UDualArcedProgressBar(ptr_addr);
	}
	struct UGradedArcedProgressBar Get_gradedProgressBarActionDifficulty() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UGradedArcedProgressBar(ptr_addr);
	}
	struct UCircularProgressBar GetCircularProgressBarSpritesHLTH() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UCircularProgressBar(ptr_addr);
	}
	struct UCircularProgressBar GetCircularProgressBarSpritesSTA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UCircularProgressBar(ptr_addr);
	}
	struct UCircularProgressBar GetCircularProgressBarSpritesNRG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UCircularProgressBar(ptr_addr);
	}
	struct UCircularProgressBar GetCircularProgressBarSpritesHYD() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UCircularProgressBar(ptr_addr);
	}
	struct UCircularProgressBar GetCircularProgressBarSpritesNoise() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UCircularProgressBar(ptr_addr);
	}
	struct UCircularProgressBar GetCircularProgressBarSpritesAIPerception() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UCircularProgressBar(ptr_addr);
	}
	struct UImage GetHeadInjury() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}
	struct UImage GetChestInjury() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct UImage GetAbdomenInjury() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UImage(ptr_addr);
	}
	struct UImage GetArmRightUpperInjury() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UImage(ptr_addr);
	}
	struct UImage GetArmRightLowerInjury() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UImage(ptr_addr);
	}
	struct UImage GetArmLeftUpperInjury() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UImage(ptr_addr);
	}
	struct UImage GetArmLeftLowerInjury() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UImage(ptr_addr);
	}
	struct UImage GetLegRightUpperInjury() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UImage(ptr_addr);
	}
	struct UImage GetLegRightLowerInjury() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UImage(ptr_addr);
	}
	struct UImage GetLegLeftUpperInjury() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UImage(ptr_addr);
	}
	struct UImage GetLegLeftLowerInjury() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UImage(ptr_addr);
	}
	struct UScaleBox GetBloodDropBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UScaleBox(ptr_addr);
	}
	struct UWidgetAnimation GetNewAnimation_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct APrisoner Get_prisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneDataAsset
{
public:
	UCustomZoneDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCustomZoneDisplayData> GetCustomZoneEventDisplayData() {
		return memory.read<struct TArray<struct FCustomZoneDisplayData>>(m_addr + 48);
	}
	struct TArray<struct FCustomZoneDisplayData> GetCustomZoneHandlingMethodDisplayData() {
		return memory.read<struct TArray<struct FCustomZoneDisplayData>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConsoleStatics
{
public:
	UConsoleStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFillItemWithReplenishableResourceAssetData
{
public:
	UFillItemWithReplenishableResourceAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFillItemWithReplenishableResourceInteractionData GetInteractionData() {
		return memory.read<struct FFillItemWithReplenishableResourceInteractionData>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADeathmatchGameEvent
{
public:
	ADeathmatchGameEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDeathmatchParameters Get_deathmatchParameters() {
		return memory.read<struct FDeathmatchParameters>(m_addr + 1376);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConsumableDigestionHandler
{
public:
	UConsumableDigestionHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UContainerDisplay
{
public:
	UContainerDisplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_containerImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_containerImage2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UImage(ptr_addr);
	}
	struct USizeBox Get_sizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct USizeBox(ptr_addr);
	}
	struct UTextBlock Get_name() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_name2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_durability() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_durability2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UTextBlock(ptr_addr);
	}
	struct UProgressBar Get_durabilityProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UProgressBar(ptr_addr);
	}
	struct UProgressBar Get_durabilityProgressBar2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UProgressBar(ptr_addr);
	}
	struct UWidgetSwitcher Get_selectionSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UWidgetSwitcher(ptr_addr);
	}
	float Get_width() {
		return memory.read<float>(m_addr + 784);
	}
	float Get_height() {
		return memory.read<float>(m_addr + 788);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_MountDescription
{
public:
	UPrisonerVehicleAction_MountDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDualArcedProgressBar
{
public:
	UDualArcedProgressBar(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_frontFillImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_backFillImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UMaterialInstanceConstant Get_frontFillMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMaterialInstanceConstant(ptr_addr);
	}
	struct UMaterialInstanceConstant Get_backFillMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMaterialInstanceConstant(ptr_addr);
	}
	struct FLinearColor Get_frontFillColor() {
		return memory.read<struct FLinearColor>(m_addr + 640);
	}
	struct FLinearColor Get_backFillColor() {
		return memory.read<struct FLinearColor>(m_addr + 656);
	}

private:
	std::uint64_t m_addr = 0;
};


class UContinuousFuelConsumptionEntityComponentSetup
{
public:
	UContinuousFuelConsumptionEntityComponentSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetHasInfiniteResources() {
		return memory.read<bool>(m_addr + 72);
	}
	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return UGameResourceType(ptr_addr);
	}
	bool GetAutoFindResourceComponent() {
		return memory.read<bool>(m_addr + 88);
	}
	struct FName GetAssociatedResourceComponentName() {
		return memory.read<struct FName>(m_addr + 92);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyEffect_ExhaustionChange
{
public:
	UPrisonerBodyEffect_ExhaustionChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodyEffectUIData_ExhaustionChange Get_uiDataClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return UPrisonerBodyEffectUIData_ExhaustionChange(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZBaseManager
{
public:
	AConZBaseManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_damageEventProcessingPeriod() {
		return memory.read<float>(m_addr + 688);
	}
	float Get_decayProcessingPeriod() {
		return memory.read<float>(m_addr + 692);
	}
	float Get_flagOvertakePeriod() {
		return memory.read<float>(m_addr + 696);
	}
	float Get_baseInteractionsPeriod() {
		return memory.read<float>(m_addr + 700);
	}
	AConZBase Get_baseClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return AConZBase(ptr_addr);
	}
	AConZBaseElement Get_baseElementClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return AConZBaseElement(ptr_addr);
	}
	AFlagAreaVisualizer Get_flagAreaVisualizerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return AFlagAreaVisualizer(ptr_addr);
	}
	struct FVector2D Get_initialBaseSize() {
		return memory.read<struct FVector2D>(m_addr + 728);
	}
	float Get_flagInfluenceRadius() {
		return memory.read<float>(m_addr + 736);
	}
	int32_t Get_flagOvertakeDuration() {
		return memory.read<int32_t>(m_addr + 740);
	}
	int32_t Get_maxElementsPerFlag() {
		return memory.read<int32_t>(m_addr + 744);
	}
	int32_t Get_extraElementsPerFlagForAdditionalSquadMember() {
		return memory.read<int32_t>(m_addr + 748);
	}
	int32_t Get_maxNumberOfExpandedElementsPerFlag() {
		return memory.read<int32_t>(m_addr + 752);
	}
	bool Get_allowMultipleFlagsPerPlayer() {
		return memory.read<bool>(m_addr + 756);
	}
	float Get_maxBaseBuildingHeight() {
		return memory.read<float>(m_addr + 760);
	}
	struct FConZBaseRepairAreaDuration Get_shortRepairDuration() {
		return memory.read<struct FConZBaseRepairAreaDuration>(m_addr + 764);
	}
	struct FConZBaseRepairAreaDuration Get_mediumRepairDuration() {
		return memory.read<struct FConZBaseRepairAreaDuration>(m_addr + 772);
	}
	struct FConZBaseRepairAreaDuration Get_longRepairDuration() {
		return memory.read<struct FConZBaseRepairAreaDuration>(m_addr + 780);
	}
	struct TMap<int64_t, struct AConZBase> Get_bases() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct TMap<int64_t, struct AConZBase>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZBorderBase
{
public:
	UConZBorderBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_borderSize() {
		return memory.read<uint8_t >(m_addr + 608);
	}
	struct FLinearColor Get_color() {
		return memory.read<struct FLinearColor>(m_addr + 612);
	}
	struct UTexture2D GetWhite1x1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetWhite2x2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetWhite4x4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTexture2D(ptr_addr);
	}
	struct UImage GetImage_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UImage(ptr_addr);
	}
	struct UNamedSlot GetNamedSlot_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UNamedSlot(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class APowerNode
{
public:
	APowerNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent Get_root() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USceneComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_mesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UPowerCableMeshSet Get_cableMeshSet() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UPowerCableMeshSet(ptr_addr);
	}
	float Get_maxCablesDrawDistance() {
		return memory.read<float>(m_addr + 568);
	}
	struct TArray<struct FPowerNodeConnector> Get_connectors() {
		return memory.read<struct TArray<struct FPowerNodeConnector>>(m_addr + 576);
	}
	struct APowerNode Get_connectionTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct APowerNode(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDcxBicycleDriverMountSlot
{
public:
	UDcxBicycleDriverMountSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCriminalRecordSkill
{
public:
	UCriminalRecordSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UQuartalPieProgressBar Get_quartalPieProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UQuartalPieProgressBar(ptr_addr);
	}
	struct UTextBlock Get_textName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_textPercentage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEconomyManagerRequest
{
public:
	UEconomyManagerRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AConZCameraManager
{
public:
	AConZCameraManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_introCinematicDuration() {
		return memory.read<float>(m_addr + 10284);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZCustomInteractionButton
{
public:
	UConZCustomInteractionButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionWashWithReplenishableResourceDescription
{
public:
	UPrisonerActionWashWithReplenishableResourceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameResourceContainerProxyForReplenishableResource GetProxyForReplenishableResource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UGameResourceContainerProxyForReplenishableResource(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZGameSession
{
public:
	AConZGameSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDropdownMenuColorSelectionWidget
{
public:
	UDropdownMenuColorSelectionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 680);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChangeWeaponFiringModeModeDescription
{
public:
	UPrisonerActionChangeWeaponFiringModeModeDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTraderBuyUIController
{
public:
	UTraderBuyUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGameplayLog
{
public:
	UGameplayLog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UConZPlayerPawn
{
public:
	UConZPlayerPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerResponseIdle_NeedToUrinate
{
public:
	UPrisonerResponseIdle_NeedToUrinate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AConZPlayerState
{
public:
	AConZPlayerState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionStartCarryingItem
{
public:
	UPrisonerActionStartCarryingItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UConZReverbComponent
{
public:
	UConZReverbComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAuxBus GetIndoorSmallAuxBus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UAkAuxBus(ptr_addr);
	}
	struct UAkAuxBus GetIndoorMediumAuxBus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UAkAuxBus(ptr_addr);
	}
	struct UAkAuxBus GetIndoorLargeAuxBus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UAkAuxBus(ptr_addr);
	}
	struct UAkAuxBus GetOutdoorLargeAuxBus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UAkAuxBus(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Leukopenia
{
public:
	UPrisonerBodySymptom_Leukopenia(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 184);
	}
	float Get_maxSeverityImmuneSystemEfficiencyModifier() {
		return memory.read<float>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionStopRestingDescription
{
public:
	UPrisonerActionStopRestingDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AConZReverbVolume
{
public:
	AConZReverbVolume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionInsertArrowDescription
{
public:
	UPrisonerActionInsertArrowDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AConZSquad
{
public:
	AConZSquad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetsquadId() {
		return memory.read<struct FDbIntegerId>(m_addr + 544);
	}
	struct FString GetSquadName() {
		return memory.read<struct FString>(m_addr + 552);
	}
	struct FString GetSquadMessage() {
		return memory.read<struct FString>(m_addr + 568);
	}
	struct FString GetSquadInformation() {
		return memory.read<struct FString>(m_addr + 584);
	}
	struct FConZSquadEmblem GetSquadEmblem() {
		return memory.read<struct FConZSquadEmblem>(m_addr + 600);
	}
	struct TArray<struct FConZSquadPendingMember> Get_pendingMembers() {
		return memory.read<struct TArray<struct FConZSquadPendingMember>>(m_addr + 640);
	}
	struct TArray<struct FConZSquadMember> Get_members() {
		return memory.read<struct TArray<struct FConZSquadMember>>(m_addr + 656);
	}
	struct TArray<struct FConZSquadMember> Get_oldMembers() {
		return memory.read<struct TArray<struct FConZSquadMember>>(m_addr + 672);
	}
	uint64_t Get_repEmblem() {
		return memory.read<uint64_t>(m_addr + 688);
	}
	int32_t Get_maxAllowedSquadMembers() {
		return memory.read<int32_t>(m_addr + 696);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZStandardButton
{
public:
	UConZStandardButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton GetMainButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UButton(ptr_addr);
	}
	struct UTextBlock GetTextBlock_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTextBlock(ptr_addr);
	}
	bool GetOverridesHighlight() {
		return memory.read<bool>(m_addr + 704);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConZVehicleAnimInstance
{
public:
	UConZVehicleAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetEngineState() {
		return memory.read<uint8_t >(m_addr + 696);
	}
	bool GetIsEngineRunning() {
		return memory.read<bool>(m_addr + 697);
	}
	float GetEngineRpm() {
		return memory.read<float>(m_addr + 700);
	}
	float GetEngineRpmInterpSpeed() {
		return memory.read<float>(m_addr + 704);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 708);
	}
	float GetSpeedKph() {
		return memory.read<float>(m_addr + 712);
	}
	float GetMaxSteeringWheelSteerAngle() {
		return memory.read<float>(m_addr + 716);
	}
	float GetSteeringWheelSteerAngleInterpSpeed() {
		return memory.read<float>(m_addr + 720);
	}
	float GetCurrentSteeringWheelSteerAngle() {
		return memory.read<float>(m_addr + 724);
	}
	struct TArray<float> GetDoorOpenPercentage() {
		return memory.read<struct TArray<float>>(m_addr + 728);
	}
	struct TArray<float> GetDoorWindowOpenPercentage() {
		return memory.read<struct TArray<float>>(m_addr + 744);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZWaterSpline
{
public:
	AConZWaterSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetSceneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USceneComponent(ptr_addr);
	}
	struct USplineComponent GetSplineComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USplineComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetSurfaceMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetSubsurfaceMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UStaticMeshComponent(ptr_addr);
	}
	bool GetDrawDebug() {
		return memory.read<bool>(m_addr + 576);
	}
	int32_t GetSelectRangeStart() {
		return memory.read<int32_t>(m_addr + 580);
	}
	int32_t GetSelectRangeEnd() {
		return memory.read<int32_t>(m_addr + 584);
	}
	bool GetSelectRange() {
		return memory.read<bool>(m_addr + 588);
	}
	bool GetFlattenZ() {
		return memory.read<bool>(m_addr + 589);
	}
	struct TArray<struct FConZWaterSplineControlPoint> GetControlPoints() {
		return memory.read<struct TArray<struct FConZWaterSplineControlPoint>>(m_addr + 592);
	}
	float GetMaxDepth() {
		return memory.read<float>(m_addr + 608);
	}
	struct UStaticMesh GetSurfaceMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UStaticMesh(ptr_addr);
	}
	struct UStaticMesh GetSubsurfaceMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UStaticMesh(ptr_addr);
	}
	struct UMaterialInterface GetSurfaceMeshMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetSubsurfaceMeshMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetUnderwaterPostProcessing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMaterialInterface(ptr_addr);
	}
	struct TArray<struct UAssetUserData> GetSurfaceMeshUserData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct TArray<struct UAssetUserData>(ptr_addr);
	}
	struct TArray<struct FConZGerstnerWavesParameters> GetGerstnerWavesParameters() {
		return memory.read<struct TArray<struct FConZGerstnerWavesParameters>>(m_addr + 672);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWeatherAmbientSounds
{
public:
	AWeatherAmbientSounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetWeatherRTPCsUpdateInterval() {
		return memory.read<float>(m_addr + 544);
	}
	float GetTimeOfDayRTPCUpdateInterval() {
		return memory.read<float>(m_addr + 548);
	}
	float GetTimeOfDayRTPCInterpolationSpeed() {
		return memory.read<float>(m_addr + 552);
	}
	struct UAkAudioEvent GetRainAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetWindAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZWaterSplineIsland
{
public:
	AConZWaterSplineIsland(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ATrapItem
{
public:
	ATrapItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBuriableTrapItemComponent Get_buriableTrapItemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2368);
		return struct UBuriableTrapItemComponent(ptr_addr);
	}
	uint8_t  Get_trapType() {
		return memory.read<uint8_t >(m_addr + 2376);
	}
	float Get_autoDestroyTimeWhenArmed() {
		return memory.read<float>(m_addr + 2380);
	}
	float Get_autoDestroyTimeWhenOwnerless() {
		return memory.read<float>(m_addr + 2384);
	}
	bool Get_destroyAfterTriggered() {
		return memory.read<bool>(m_addr + 2388);
	}
	float Get_destroyDelay() {
		return memory.read<float>(m_addr + 2392);
	}
	bool Get_canEverBeRefueled() {
		return memory.read<bool>(m_addr + 2396);
	}
	struct UTrapRefuelItemTag Get_refuelItemTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2400);
		return struct UTrapRefuelItemTag(ptr_addr);
	}
	struct FVector Get_triggerForwardVector() {
		return memory.read<struct FVector>(m_addr + 2408);
	}
	float Get_ragdollDuration() {
		return memory.read<float>(m_addr + 2420);
	}
	bool Get_isArmedByDefault() {
		return memory.read<bool>(m_addr + 2424);
	}
	bool Get_shouldApplyPhysicalDamage() {
		return memory.read<bool>(m_addr + 2425);
	}
	struct FBox Get_physicalDamageBoundsBox() {
		return memory.read<struct FBox>(m_addr + 2428);
	}
	float Get_actorDestructionDelay() {
		return memory.read<float>(m_addr + 2456);
	}
	int32_t Get_numRemainingDefuseAttempts() {
		return memory.read<int32_t>(m_addr + 2460);
	}
	bool Get_numRemainingDefuseAttemptsDependsOnSkill() {
		return memory.read<bool>(m_addr + 2464);
	}
	bool Get_logTrapTriggered() {
		return memory.read<bool>(m_addr + 2465);
	}
	bool Get_hasFixedTrigger() {
		return memory.read<bool>(m_addr + 2466);
	}
	float Get_minDamageForTrigger() {
		return memory.read<float>(m_addr + 2468);
	}
	bool Get_triggeredByRadialDamage() {
		return memory.read<bool>(m_addr + 2472);
	}
	bool Get_triggerableWhenBuried() {
		return memory.read<bool>(m_addr + 2473);
	}
	float Get_maxTriggerAngle() {
		return memory.read<float>(m_addr + 2476);
	}
	bool Get_canEverShowTriggerVisuals() {
		return memory.read<bool>(m_addr + 2480);
	}
	struct FTransform Get_triggerVisualTransform() {
		return memory.read<struct FTransform>(m_addr + 2496);
	}
	AMinigame Get_minigameClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2544);
		return AMinigame(ptr_addr);
	}
	UBaseItemTag Get_minigameToolTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2552);
		return UBaseItemTag(ptr_addr);
	}
	bool Get_isDestroyed() {
		return memory.read<bool>(m_addr + 2561);
	}
	bool Get_isArmed() {
		return memory.read<bool>(m_addr + 2592);
	}
	bool Get_wasTriggered() {
		return memory.read<bool>(m_addr + 2593);
	}
	bool Get_canBeTriggered() {
		return memory.read<bool>(m_addr + 2594);
	}
	uint8_t  Get_currentTrigger() {
		return memory.read<uint8_t >(m_addr + 2612);
	}
	struct FDbIntegerId Get_lastTriggerOwner() {
		return memory.read<struct FDbIntegerId>(m_addr + 2616);
	}
	float Get_quality() {
		return memory.read<float>(m_addr + 2624);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZWaterSplineLake
{
public:
	AConZWaterSplineLake(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSurfaceMeshCullingDistance() {
		return memory.read<float>(m_addr + 696);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCriminalRecord
{
public:
	UCriminalRecord(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCriminalRecordSkill Get_criminalRecordSkillClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return UCriminalRecordSkill(ptr_addr);
	}
	struct UCriminalRecordText Get_textName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textAliases() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textCrime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textNumber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textDateOfArrest() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textCountry() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textCity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textGender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textHeight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textWeight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textAge() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textBirthDate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textEyeColor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textHairColor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textFlaws() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textServerLocation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textBuildAndOccupation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UCriminalRecordText Get_textStrengthCategory() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UVerticalBox Get_verticalBoxStrengthSkills() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UVerticalBox(ptr_addr);
	}
	struct UCriminalRecordText Get_textConstitutionCategory() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UVerticalBox Get_verticalBoxConstitutionSkills() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UVerticalBox(ptr_addr);
	}
	struct UCriminalRecordText Get_textDexterityCategory() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UVerticalBox Get_verticalBoxDexteritySkills() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UVerticalBox(ptr_addr);
	}
	struct UCriminalRecordText Get_textIntelligenceCategory() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UCriminalRecordText(ptr_addr);
	}
	struct UVerticalBox Get_verticalBoxIntelligenceSkills() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UVerticalBox(ptr_addr);
	}
	struct UConZStandardButton Get_buttonCancel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonOk() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UConZStandardButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_BlurredVision
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_BlurredVision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodySymptom_BlurredVision Get_symptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodySymptom_BlurredVision(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_BlurredVision Get_symptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPrisonerBodySymptomCause_BlurredVision(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_intensityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 64);
	}
	struct FRuntimeFloatCurve Get_offsetVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 200);
	}
	struct FRuntimeFloatCurve Get_falloffVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 336);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZWaterSplineRegistry
{
public:
	AConZWaterSplineRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyEffectUIData
{
public:
	UPrisonerBodyEffectUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodyEffect Get_bodyEffectClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodyEffect(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingUtilityUIDataAsset
{
public:
	UCookingUtilityUIDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetName() {
		return memory.read<struct FText>(m_addr + 48);
	}
	bool GetCanAddRecipeTo() {
		return memory.read<bool>(m_addr + 72);
	}
	struct TSoftObjectPtr<UTexture2D> GetIcon() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 80);
	}
	uint8_t  GetCookingTemperatureControlType() {
		return memory.read<uint8_t >(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class AConZWaterSplineRiver
{
public:
	AConZWaterSplineRiver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetSplineMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UStaticMesh(ptr_addr);
	}
	struct UMaterialInterface GetSplineMeshMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UMaterialInterface(ptr_addr);
	}
	float GetSplineMeshCullingDistance() {
		return memory.read<float>(m_addr + 712);
	}
	bool GetClearRoll() {
		return memory.read<bool>(m_addr + 716);
	}
	bool GetAutoCalculateMeshCount() {
		return memory.read<bool>(m_addr + 717);
	}
	int32_t GetSplineMeshCount() {
		return memory.read<int32_t>(m_addr + 720);
	}
	bool GetRefreshMesh() {
		return memory.read<bool>(m_addr + 724);
	}
	bool GetArmBatchEditWidth() {
		return memory.read<bool>(m_addr + 725);
	}
	float GetBatchEditWidth() {
		return memory.read<float>(m_addr + 728);
	}
	bool GetArmBatchEditMaxDepth() {
		return memory.read<bool>(m_addr + 732);
	}
	float GetBatchEditMaxDepth() {
		return memory.read<float>(m_addr + 736);
	}
	bool GetArmBatchEditSpeed() {
		return memory.read<bool>(m_addr + 740);
	}
	float GetBatchEditSpeed() {
		return memory.read<float>(m_addr + 744);
	}
	bool GetArmBatchEditOpacity() {
		return memory.read<bool>(m_addr + 748);
	}
	float GetBatchEditOpacity() {
		return memory.read<float>(m_addr + 752);
	}
	bool GetArmBatchEdit() {
		return memory.read<bool>(m_addr + 756);
	}
	bool GetBatchEditReplace() {
		return memory.read<bool>(m_addr + 757);
	}
	bool GetBatchEditAdd() {
		return memory.read<bool>(m_addr + 758);
	}
	bool GetBatchEditMultiply() {
		return memory.read<bool>(m_addr + 759);
	}
	bool GetBatchEditFlattenZ() {
		return memory.read<bool>(m_addr + 760);
	}
	struct TArray<struct USplineMeshComponent> Get_splineMeshComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct TArray<struct USplineMeshComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookedFoodItemEntitySave
{
public:
	UCookedFoodItemEntitySave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCookAmount() {
		return memory.read<float>(m_addr + 40);
	}
	float GetExhaustionBonus() {
		return memory.read<float>(m_addr + 44);
	}
	uint8_t  GetCookQuality() {
		return memory.read<uint8_t >(m_addr + 48);
	}
	struct TMap<struct FPrimaryAssetId, float> GetOptionalResourceTypes() {
		return memory.read<struct TMap<struct FPrimaryAssetId, float>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookedFoodItemEntitySetup
{
public:
	UCookedFoodItemEntitySetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_Abrasions
{
public:
	UPrisonerBodyCondition_Abrasions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatInterval Get_baseAbrasionsRaiseRateVsConstitution() {
		return memory.read<struct FFloatInterval>(m_addr + 200);
	}
	float Get_abrasionsWeightFactor() {
		return memory.read<float>(m_addr + 208);
	}
	float Get_abrasionsFallRate() {
		return memory.read<float>(m_addr + 212);
	}
	struct FRuntimeFloatCurve Get_severityVsAbrasions() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 216);
	}
	float Get_abrasions() {
		return memory.read<float>(m_addr + 352);
	}
	float Get_abrasionsAtRecoveryStart() {
		return memory.read<float>(m_addr + 356);
	}
	float Get_bandagesProtection() {
		return memory.read<float>(m_addr + 360);
	}
	struct FBandages Get_bandages() {
		return memory.read<struct FBandages>(m_addr + 368);
	}
	UNotificationDescription Get_bandagesProtectionDecreaseNotification() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 392);
		return UNotificationDescription(ptr_addr);
	}
	float Get_bandagesProtectionDecreaseNotificationCooldown() {
		return memory.read<float>(m_addr + 400);
	}
	struct FRuntimeFloatCurve Get_stabilizationDurationVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 408);
	}
	float Get_stabilizationDurationReductionFromPhysician() {
		return memory.read<float>(m_addr + 544);
	}
	struct FRuntimeFloatCurve Get_recoveryDurationVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 552);
	}
	struct FRuntimeFloatCurve Get_bleedingSeverityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 688);
	}
	UPrisonerBodySymptom_Bleeding Get_bleedingSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return UPrisonerBodySymptom_Bleeding(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Bleeding Get_bleedingSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UPrisonerBodySymptomCause_Bleeding(ptr_addr);
	}
	float Get_bloodLoss() {
		return memory.read<float>(m_addr + 840);
	}
	float Get_bloodLossToRecover() {
		return memory.read<float>(m_addr + 844);
	}
	struct UAkAudioEvent Get_painGruntAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_painGruntIntervalVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 856);
	}
	UPrisonerBodySymptom_Pain Get_painSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return UPrisonerBodySymptom_Pain(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Pain Get_painSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1008);
		return struct UPrisonerBodySymptomCause_Pain(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_painSymptomOverallIntensityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1016);
	}
	struct FRuntimeFloatCurve Get_painSymptomLimpingIntensityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1152);
	}
	struct FPrisonerMaxMovementPaceVsSeverity Get_painSymptomMaxMovementPaceVsSeverity() {
		return memory.read<struct FPrisonerMaxMovementPaceVsSeverity>(m_addr + 1288);
	}
	struct FRuntimeFloatCurve Get_painSymptomMovementSpeedModifierVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1304);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 1440);
	}
	float Get_timerElapsedTime() {
		return memory.read<float>(m_addr + 1448);
	}
	float Get_timerDuration() {
		return memory.read<float>(m_addr + 1452);
	}
	float Get_disinfectantAmount() {
		return memory.read<float>(m_addr + 1456);
	}
	UPrisonerBodyCondition_Infection Get_infectionClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1464);
		return UPrisonerBodyCondition_Infection(ptr_addr);
	}
	struct UPrisonerBodyCondition_Infection Get_infection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1472);
		return struct UPrisonerBodyCondition_Infection(ptr_addr);
	}
	float Get_contaminationIncreaseBaseRate() {
		return memory.read<float>(m_addr + 1480);
	}
	struct FRuntimeFloatCurve Get_contaminationIncreaseRateMultiplierVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1488);
	}
	struct FRuntimeFloatCurve Get_contaminationIncreaseRateMultiplierVsAsepsis() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1624);
	}
	float Get_disinfectantContaminationDecreaseRate() {
		return memory.read<float>(m_addr + 1760);
	}
	float Get_disinfectantEvaporationRate() {
		return memory.read<float>(m_addr + 1764);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingControlButton
{
public:
	UCookingControlButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_buttonBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_timerBorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct UWidgetSwitcher Get_visualSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock Get_buttonTimer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTextBlock(ptr_addr);
	}
	struct UCookingTextTooltip Get_cookingTextTooltip() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UCookingTextTooltip(ptr_addr);
	}
	UCookingTextTooltip Get_cookingTextTooltipClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return UCookingTextTooltip(ptr_addr);
	}
	uint8_t  Get_controlButtonState() {
		return memory.read<uint8_t >(m_addr + 736);
	}
	struct TMap<uint8_t , struct FHoverClickButtonVisualInfo> Get_hoverAndClickVisualsMap() {
		return memory.read<struct TMap<uint8_t , struct FHoverClickButtonVisualInfo>>(m_addr + 744);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingAddRecipeButton
{
public:
	UCookingAddRecipeButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_addRecipeIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_emptySlotText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_heatSourceWarningText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTextBlock(ptr_addr);
	}
	struct FLinearColor Get_disabledColor() {
		return memory.read<struct FLinearColor>(m_addr + 712);
	}
	struct FLinearColor Get_enabledColor() {
		return memory.read<struct FLinearColor>(m_addr + 728);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingFinishedWidget
{
public:
	UCookingFinishedWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_productImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_ratingText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UHorizontalBox Get_starsHorizontalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UTextBlock Get_qualityDescription() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_grabButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UButton(ptr_addr);
	}
	struct FSlateBrush Get_activeStarBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 664);
	}
	struct FSlateBrush Get_inactiveStarBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 800);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWheelBarrowDriverCapsuleComponent
{
public:
	UWheelBarrowDriverCapsuleComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCookingHeatSourceButton
{
public:
	UCookingHeatSourceButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USizeBox Get_mainSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct USizeBox(ptr_addr);
	}
	struct UImage Get_heatSourceIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_borderImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	bool Get_selected() {
		return memory.read<bool>(m_addr + 648);
	}
	struct FVector2D Get_selectedButtonSize() {
		return memory.read<struct FVector2D>(m_addr + 652);
	}
	struct FVector2D Get_deselectedButtonSize() {
		return memory.read<struct FVector2D>(m_addr + 660);
	}
	struct FLinearColor Get_selectedBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 668);
	}
	struct FLinearColor Get_deselectedBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 684);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingInfoButton
{
public:
	UCookingInfoButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation Get_pulseAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingIngredientTooltip
{
public:
	UCookingIngredientTooltip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_ingredientName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_ingredientNecessity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACookingManager
{
public:
	ACookingManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCookingUtilitySlotArray Get_cookingUtilitySlots() {
		return memory.read<struct FCookingUtilitySlotArray>(m_addr + 544);
	}
	struct FMainPointSnappedUtilities Get_mainPointSnappedCookingUtilities() {
		return memory.read<struct FMainPointSnappedUtilities>(m_addr + 1104);
	}
	float Get_netRelevancyRadius() {
		return memory.read<float>(m_addr + 1544);
	}
	float Get_newClientCheckTimeInterval() {
		return memory.read<float>(m_addr + 1548);
	}
	float Get_databaseUpdateInterval() {
		return memory.read<float>(m_addr + 1552);
	}
	float Get_utilitySnapDistance() {
		return memory.read<float>(m_addr + 1556);
	}
	float Get_maxMainPointSnapDistance() {
		return memory.read<float>(m_addr + 1560);
	}
	float Get_proxyMeshSpawnRadius() {
		return memory.read<float>(m_addr + 1564);
	}
	float Get_proxyMeshReleaseRadius() {
		return memory.read<float>(m_addr + 1568);
	}
	struct TMap<struct FDbIntegerId, struct FCookingFoodProxyMesh> Get_proxyMeshMap() {
		return memory.read<struct TMap<struct FDbIntegerId, struct FCookingFoodProxyMesh>>(m_addr + 1608);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingProgressWidget
{
public:
	UCookingProgressWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URetainerBox Get_progressImageRetainerBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct URetainerBox(ptr_addr);
	}
	struct UImage Get_progressImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct URichTextBlock Get_cookingTimeText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct URichTextBlock(ptr_addr);
	}
	struct URichTextBlock Get_cookingTemperatureText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct URichTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInsertCartridge
{
public:
	UInsertCartridge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFoliageInstancedGrass
{
public:
	UFoliageInstancedGrass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCookingRecipe
{
public:
	UCookingRecipe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetRecipeName() {
		return memory.read<struct FText>(m_addr + 48);
	}
	struct FText GetDescription() {
		return memory.read<struct FText>(m_addr + 72);
	}
	struct TArray<struct FRecipeIngredient> GetMainIngredients() {
		return memory.read<struct TArray<struct FRecipeIngredient>>(m_addr + 96);
	}
	struct TArray<struct FRecipeIngredient> GetOptionalIngredients() {
		return memory.read<struct TArray<struct FRecipeIngredient>>(m_addr + 112);
	}
	struct FCookingResult GetResultingFood() {
		return memory.read<struct FCookingResult>(m_addr + 128);
	}
	float GetCookingTemperature() {
		return memory.read<float>(m_addr + 168);
	}
	float GetCookingTime() {
		return memory.read<float>(m_addr + 172);
	}
	struct FGameplayTagContainer GetUtility() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 176);
	}
	struct FGameplayTagContainer GetCategory() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 208);
	}
	struct TSoftObjectPtr<UStaticMesh> GetCookProgressMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 240);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetCookProgressMeshMaterial() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 280);
	}
	int32_t GetCookProgressMeshMaterialSlot() {
		return memory.read<int32_t>(m_addr + 320);
	}
	bool GetUseMeshRelativeTransform() {
		return memory.read<bool>(m_addr + 324);
	}
	struct FTransform GetCookProgressMeshRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 336);
	}
	bool GetCookProgressMeshFacesHeatsource() {
		return memory.read<bool>(m_addr + 384);
	}
	struct UAkAudioEvent GetStartCookingEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 392);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopCookingEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 400);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UUPrisonerActionCleanDescription
{
public:
	UUPrisonerActionCleanDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCookingRecipeCollectionItemTag
{
public:
	UCookingRecipeCollectionItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrimaryAssetId> Get_recipes() {
		return memory.read<struct TArray<struct FPrimaryAssetId>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingRecipeDetailsWidget
{
public:
	UCookingRecipeDetailsWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCookingIngredientInfoWidget Get_ingredientInfoWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return UCookingIngredientInfoWidget(ptr_addr);
	}
	UPossibleCookingIngredientWidget Get_possibleIngredientWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return UPossibleCookingIngredientWidget(ptr_addr);
	}
	struct UImage Get_recipeIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct UCookingFavouriteButton Get_favouritesButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UCookingFavouriteButton(ptr_addr);
	}
	struct URichTextBlock Get_cookingTimeText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct URichTextBlock(ptr_addr);
	}
	struct URichTextBlock Get_cookingTemperatureText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct URichTextBlock(ptr_addr);
	}
	struct UTextBlock Get_recipeTitle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTextBlock(ptr_addr);
	}
	struct UWrapBox Get_mainIngredientsWrapBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWrapBox(ptr_addr);
	}
	struct UVerticalBox Get_mainIngredientDetailsVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UVerticalBox(ptr_addr);
	}
	struct UWrapBox Get_possibleMainIngredientsWrapBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UWrapBox(ptr_addr);
	}
	struct UWrapBox Get_optionalIngredientsWrapBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UWrapBox(ptr_addr);
	}
	struct UVerticalBox Get_optionalIngredientDetailsVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UVerticalBox(ptr_addr);
	}
	struct UWrapBox Get_possibleOptionalIngredientsWrapBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UWrapBox(ptr_addr);
	}
	struct UTextBlock Get_detailedDescriptionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_cookingUtilities() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_cookingTimeEmphasized() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_cookingTemperatureEmphasized() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingRecipesPanel
{
public:
	UCookingRecipesPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USearchBox Get_searchBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct USearchBox(ptr_addr);
	}
	struct UCookingCategoryDropdown Get_cookingCategoryDropdown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UCookingCategoryDropdown(ptr_addr);
	}
	struct UCookingUtilityFilterDropdown Get_cookingUtilityFilterDropdown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UCookingUtilityFilterDropdown(ptr_addr);
	}
	struct UCookingFavouriteButton Get_filterFavouritesButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UCookingFavouriteButton(ptr_addr);
	}
	struct UCookingSortingDropdown Get_cookingSortingDropdown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UCookingSortingDropdown(ptr_addr);
	}
	struct UWidgetSwitcher Get_categorySwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWrapBox Get_catResults() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UWrapBox(ptr_addr);
	}
	struct UCookingRecipeDetailsWidget Get_cookingRecipeDetailsWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UCookingRecipeDetailsWidget(ptr_addr);
	}
	struct UButton Get_btnBack() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_btnAddRecipe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UButton(ptr_addr);
	}
	UCookingRecipeButtonWidget Get_cookingRecipeButtonClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return UCookingRecipeButtonWidget(ptr_addr);
	}
	struct FGameplayTag Get_rootNavigationTag() {
		return memory.read<struct FGameplayTag>(m_addr + 720);
	}
	struct FGameplayTag Get_resultsNavigationTag() {
		return memory.read<struct FGameplayTag>(m_addr + 728);
	}
	struct FGameplayTag Get_rootCookingTag() {
		return memory.read<struct FGameplayTag>(m_addr + 736);
	}
	struct FGameplayTag Get_favouritesCookingTag() {
		return memory.read<struct FGameplayTag>(m_addr + 744);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingSkill
{
public:
	UCookingSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrimaryAssetId> Get_recipesKnownByDefault() {
		return memory.read<struct TArray<struct FPrimaryAssetId>>(m_addr + 176);
	}
	float Get_cookTimeMultiplier_NoSkill() {
		return memory.read<float>(m_addr + 352);
	}
	float Get_cookTimeMultiplier_Basic() {
		return memory.read<float>(m_addr + 356);
	}
	float Get_cookTimeMultiplier_Medium() {
		return memory.read<float>(m_addr + 360);
	}
	float Get_cookTimeMultiplier_Advanced() {
		return memory.read<float>(m_addr + 364);
	}
	float Get_cookTimeMultiplier_AboveAdvanced() {
		return memory.read<float>(m_addr + 368);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDamageCustomization
{
public:
	UDamageCustomization(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCookingSortingDropdown
{
public:
	UCookingSortingDropdown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	USimpleTextDropdownEntry Get_textDropdownEntryClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return USimpleTextDropdownEntry(ptr_addr);
	}
	UVerticalScrollBoxDropdownContent Get_categoryDropdownContentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return UVerticalScrollBoxDropdownContent(ptr_addr);
	}
	struct UImage Get_icon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct UMenuAnchor Get_popup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMenuAnchor(ptr_addr);
	}
	struct TArray<struct FCookingSortingDropdownEntryData> Get_cookingSortingDropdownEntries() {
		return memory.read<struct TArray<struct FCookingSortingDropdownEntryData>>(m_addr + 664);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGrappleActionComponent
{
public:
	UGrappleActionComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter Get_grappler() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct AConZCharacter(ptr_addr);
	}
	struct APrisoner Get_prisonerVictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct APrisoner(ptr_addr);
	}
	struct UGrappleActionParameters Get_grappleActionParameters() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UGrappleActionParameters(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADropZoneLocationMarker
{
public:
	ADropZoneLocationMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDropZoneParameters GetDropZoneParameters() {
		return memory.read<struct FDropZoneParameters>(m_addr + 1048);
	}
	struct FVector GetSpawnOffsetA() {
		return memory.read<struct FVector>(m_addr + 1092);
	}
	struct FVector GetSpawnOffsetB() {
		return memory.read<struct FVector>(m_addr + 1104);
	}
	float GetSpawnRadiusA() {
		return memory.read<float>(m_addr + 1116);
	}
	float GetSpawnRadiusB() {
		return memory.read<float>(m_addr + 1120);
	}
	struct FTransform GetCargoDropOffset() {
		return memory.read<struct FTransform>(m_addr + 1136);
	}
	struct FTransform GetCrateDropOffsetA() {
		return memory.read<struct FTransform>(m_addr + 1184);
	}
	struct FTransform GetCrateDropOffsetB() {
		return memory.read<struct FTransform>(m_addr + 1232);
	}
	struct UStaticMeshComponent GetCrateAPreviewMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1280);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetCrateBPreviewMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1288);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetCargoPreviewMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1296);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsMap
{
public:
	UCustomZoneSettingsMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_map() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_infoLeft() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_infoRight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_buttonAddCircleRegion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_buttonAddRectangleRegion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_buttonRemoveRegion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UButton(ptr_addr);
	}
	struct FLinearColor Get_buttonHighlightColor() {
		return memory.read<struct FLinearColor>(m_addr + 680);
	}
	struct UMaterialInstanceDynamic Get_mapMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingTemperatureControlLinearWidget
{
public:
	UCookingTemperatureControlLinearWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URetainerBox Get_effectBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct URetainerBox(ptr_addr);
	}
	struct USlider Get_temperatureSlider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct USlider(ptr_addr);
	}
	struct UOverlay Get_temperatureValuesOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UOverlay(ptr_addr);
	}
	float Get_minimumVisualValue() {
		return memory.read<float>(m_addr + 656);
	}
	float Get_maximumVisualValue() {
		return memory.read<float>(m_addr + 660);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCutObjectDescription
{
public:
	UPrisonerActionCutObjectDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDcxBikeDriverMountSlot
{
public:
	UDcxBikeDriverMountSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetDriverLHandleSocketName() {
		return memory.read<struct FName>(m_addr + 320);
	}
	struct FName GetDriverRHandleSocketName() {
		return memory.read<struct FName>(m_addr + 328);
	}
	struct FName GetDriverReverseSeatHandSocketName() {
		return memory.read<struct FName>(m_addr + 336);
	}
	struct UBlendSpace Get_forwardIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 344);
		return struct UBlendSpace(ptr_addr);
	}
	struct UAnimSequenceBase Get_forwardSteeringAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 352);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_forwardSteeringAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 360);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace Get_reverseIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 368);
		return struct UBlendSpace(ptr_addr);
	}
	struct UAnimSequenceBase Get_reverseSteeringAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 376);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_reverseSteeringAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequence Get_standUpStartAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 392);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_standUpLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 400);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_standUpEndAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 408);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineStartAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 416);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 424);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineLongLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 432);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineEndAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 440);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAimOffsetBlendSpace Get_turnAimOffset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 448);
		return struct UAimOffsetBlendSpace(ptr_addr);
	}
	float Get_playratePerMovementPace[4]() {
		return memory.read<float>(m_addr + 456);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismSave
{
public:
	UMetabolismSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetLeanBodyMass() {
		return memory.read<float>(m_addr + 40);
	}
	struct TArray<struct FDigestionItemSave> GetDigestionItems() {
		return memory.read<struct TArray<struct FDigestionItemSave>>(m_addr + 48);
	}
	struct TArray<struct FForeignSubstanceSave> GetForeignSubstances() {
		return memory.read<struct TArray<struct FForeignSubstanceSave>>(m_addr + 64);
	}
	struct FSubstancesData GetAbsorbedSubstances() {
		return memory.read<struct FSubstancesData>(m_addr + 80);
	}
	struct FSubstancesData GetFecesVolumeInIntestine() {
		return memory.read<struct FSubstancesData>(m_addr + 288);
	}
	struct FSubstancesData GetFecesVolumeInColon() {
		return memory.read<struct FSubstancesData>(m_addr + 496);
	}
	float GetUrineVolumeInBladder() {
		return memory.read<float>(m_addr + 704);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryContainer2D
{
public:
	UInventoryContainer2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInventoryContainer2DRepData Get_data() {
		return memory.read<struct FInventoryContainer2DRepData>(m_addr + 184);
	}
	struct FInventoryContainer2DRepData Get_oldData() {
		return memory.read<struct FInventoryContainer2DRepData>(m_addr + 216);
	}
	struct TArray<struct UInventoryContainerWidget2> Get_widgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct TArray<struct UInventoryContainerWidget2>(ptr_addr);
	}
	struct TScriptInterface<IInventoryNode> Get_parent() {
		return memory.read<struct TScriptInterface<IInventoryNode>>(m_addr + 264);
	}
	struct UInventoryContainerWidget2 Get_widget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct UInventoryContainerWidget2(ptr_addr);
	}
	struct TArray<bool> Get_grid() {
		return memory.read<struct TArray<bool>>(m_addr + 288);
	}
	struct TArray<bool> Get_gridDamaged() {
		return memory.read<struct TArray<bool>>(m_addr + 304);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingTemperatureControlRadialWidget
{
public:
	UCookingTemperatureControlRadialWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher Get_dialDetailSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UOverlay Get_exactTemperaturesOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UOverlay(ptr_addr);
	}
	struct UImage Get_dialArrow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	float Get_rotationSpeedMultiplier() {
		return memory.read<float>(m_addr + 648);
	}
	struct FSlateBrush Get_arrowNormalBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 656);
	}
	struct FSlateBrush Get_arrowHoveredBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 792);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingTextTooltip
{
public:
	UCookingTextTooltip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingUIController
{
public:
	UCookingUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_vicinityRadius() {
		return memory.read<float>(m_addr + 712);
	}
	struct FLinearColor Get_overcookedColor() {
		return memory.read<struct FLinearColor>(m_addr + 716);
	}
	struct FLinearColor Get_cookedColor() {
		return memory.read<struct FLinearColor>(m_addr + 732);
	}
	struct FLinearColor Get_undercookedColor() {
		return memory.read<struct FLinearColor>(m_addr + 748);
	}
	float Get_updateAllRecipeInstanceProgressBarColorsPeriod() {
		return memory.read<float>(m_addr + 1008);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimStatics
{
public:
	UPrisonerAnimStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UUser
{
public:
	UUser(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCookingUtilityFilterDropdown
{
public:
	UCookingUtilityFilterDropdown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_utilityFilterIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UMenuAnchor Get_popup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMenuAnchor(ptr_addr);
	}
	USimpleTextDropdownEntryWithCheckBox Get_dropdownEntryClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return USimpleTextDropdownEntryWithCheckBox(ptr_addr);
	}
	UVerticalScrollBoxDropdownContent Get_dropdownContentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return UVerticalScrollBoxDropdownContent(ptr_addr);
	}
	struct TArray<struct FCookingUtilityFilterDropdownEntryData> Get_cookingUtilityFilterDropdownEntries() {
		return memory.read<struct TArray<struct FCookingUtilityFilterDropdownEntryData>>(m_addr + 664);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHandsCorrectionsData
{
public:
	UHandsCorrectionsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHandsPoseCorrections GetCorrections[4]() {
		return memory.read<struct FHandsPoseCorrections>(m_addr + 48);
	}
	struct FHandsPoseCorrections GetFirstPersonCorrections[4]() {
		return memory.read<struct FHandsPoseCorrections>(m_addr + 304);
	}
	bool GetOverrideFingersOnlyInProne() {
		return memory.read<bool>(m_addr + 560);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_HealthLow
{
public:
	UPrisonerBodyCondition_HealthLow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_healthRatioToExist() {
		return memory.read<float>(m_addr + 192);
	}
	struct FRuntimeFloatCurve Get_colorSaturationEffectIntensityVsEffectsIntensity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCookingUtilityItemTag
{
public:
	UCookingUtilityItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetUsesMainSnapPoint() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FCookingUtilityMainSnapPoint GetMainSnapPoint() {
		return memory.read<struct FCookingUtilityMainSnapPoint>(m_addr + 56);
	}
	struct TArray<struct FCookingUtilitySlot> GetSlots() {
		return memory.read<struct TArray<struct FCookingUtilitySlot>>(m_addr + 128);
	}
	bool GetHighlightItem() {
		return memory.read<bool>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHasCustomRadialDamageHandler
{
public:
	UHasCustomRadialDamageHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCookingUtilitySlotsPanel
{
public:
	UCookingUtilitySlotsPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScrollBox Get_utilityOverviewScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UScrollBox(ptr_addr);
	}
	UCookingUtilityOverview Get_cookingUtilityOverviewClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return UCookingUtilityOverview(ptr_addr);
	}
	struct FMargin Get_utilityOverviewPadding() {
		return memory.read<struct FMargin>(m_addr + 640);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHasProcessViewRotation
{
public:
	UHasProcessViewRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AProjectileExplosive
{
public:
	AProjectileExplosive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_selfDestructTime() {
		return memory.read<float>(m_addr + 1080);
	}
	float Get_explosionDamage() {
		return memory.read<float>(m_addr + 1084);
	}
	float Get_explosionInnerRadius() {
		return memory.read<float>(m_addr + 1088);
	}
	float Get_explosionOuterRadius() {
		return memory.read<float>(m_addr + 1092);
	}
	float Get_explosionFalloff() {
		return memory.read<float>(m_addr + 1096);
	}
	float Get_explosionForce() {
		return memory.read<float>(m_addr + 1100);
	}
	float Get_hearingDamageRadius() {
		return memory.read<float>(m_addr + 1104);
	}
	struct UParticleSystem Get_explosionParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1112);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent Get_explosionAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1120);
		return struct UAkAudioEvent(ptr_addr);
	}
	UMatineeCameraShake Get_explosionCameraShakeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1128);
		return UMatineeCameraShake(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACorpse
{
public:
	ACorpse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetRagdollMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UChoppingRecipeDataAsset GetChoppingRecipeDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UChoppingRecipeDataAsset(ptr_addr);
	}
	AItem GetItemRepresentation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return AItem(ptr_addr);
	}
	bool GetIterativeChopping() {
		return memory.read<bool>(m_addr + 592);
	}
	struct FName GetMainBoneName() {
		return memory.read<struct FName>(m_addr + 596);
	}
	struct FCorpseSkeletalMeshRepData GetRagdollMeshData() {
		return memory.read<struct FCorpseSkeletalMeshRepData>(m_addr + 608);
	}
	struct TArray<struct FCorpseStaticMeshRepData> GetStaticMeshData() {
		return memory.read<struct TArray<struct FCorpseStaticMeshRepData>>(m_addr + 720);
	}
	struct TArray<struct FCorpseSkeletalMeshRepData> GetSkeletalMeshData() {
		return memory.read<struct TArray<struct FCorpseSkeletalMeshRepData>>(m_addr + 736);
	}
	struct FCorpsePoseData GetPoseData() {
		return memory.read<struct FCorpsePoseData>(m_addr + 752);
	}
	struct TArray<struct AItem> Getinventory() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct TArray<struct AItem>(ptr_addr);
	}
	float GetSearchTime() {
		return memory.read<float>(m_addr + 832);
	}
	float GetPhysicsPauseDistance() {
		return memory.read<float>(m_addr + 836);
	}
	struct UAkAudioEvent GetStartSearchAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopSearchAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetAutoDestructTime() {
		return memory.read<float>(m_addr + 856);
	}
	float GetAutoDestructRadius() {
		return memory.read<float>(m_addr + 860);
	}
	struct TArray<struct AActor> GetAttachements() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct TArray<struct FName> GetAttachementSockets() {
		return memory.read<struct TArray<struct FName>>(m_addr + 880);
	}
	struct AConZCharacter Get_sourceCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct AConZCharacter(ptr_addr);
	}
	bool Get_atRest() {
		return memory.read<bool>(m_addr + 936);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionTakeItemInHandsDescription
{
public:
	UPrisonerActionTakeItemInHandsDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCraftableItem
{
public:
	UCraftableItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetItemCategory() {
		return memory.read<uint8_t >(m_addr + 48);
	}
	int32_t GetItemOrder() {
		return memory.read<int32_t>(m_addr + 52);
	}
	struct TArray<struct FCraftingPair> GetCraftedItems() {
		return memory.read<struct TArray<struct FCraftingPair>>(m_addr + 56);
	}
	uint8_t  GetInteraction() {
		return memory.read<uint8_t >(m_addr + 72);
	}
	struct FText GetInteractionCaption() {
		return memory.read<struct FText>(m_addr + 80);
	}
	bool GetHideItemCaptionInCraftingCaption() {
		return memory.read<bool>(m_addr + 104);
	}
	struct TArray<struct FCraftingItem> GetMandatoryItems() {
		return memory.read<struct TArray<struct FCraftingItem>>(m_addr + 112);
	}
	struct TArray<struct FCraftingItem> GetOptionalItems() {
		return memory.read<struct TArray<struct FCraftingItem>>(m_addr + 128);
	}
	struct TArray<struct FCraftingItem> GetToolsNeeded() {
		return memory.read<struct TArray<struct FCraftingItem>>(m_addr + 144);
	}
	bool GetAutoCalculation() {
		return memory.read<bool>(m_addr + 160);
	}
	USkill GetSkill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return USkill(ptr_addr);
	}
	struct FCraftingSkillLevelData GetNoSkillLevelData() {
		return memory.read<struct FCraftingSkillLevelData>(m_addr + 176);
	}
	struct FCraftingSkillLevelData GetBasicLevelData() {
		return memory.read<struct FCraftingSkillLevelData>(m_addr + 196);
	}
	struct FCraftingSkillLevelData GetMediumLevelData() {
		return memory.read<struct FCraftingSkillLevelData>(m_addr + 216);
	}
	struct FCraftingSkillLevelData GetAdvancedLevelData() {
		return memory.read<struct FCraftingSkillLevelData>(m_addr + 236);
	}
	struct UAnimMontage GetCustomCraftingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAkAudioEvent GetStartCraftingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopCraftingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UAkAudioEvent(ptr_addr);
	}
	bool GetOnlyForSupporterPack() {
		return memory.read<bool>(m_addr + 280);
	}
	bool GetAutoCalculateHealth() {
		return memory.read<bool>(m_addr + 281);
	}
	bool GetAutoCalculateWeight() {
		return memory.read<bool>(m_addr + 282);
	}
	bool GetAutoCalculateFoodParameters() {
		return memory.read<bool>(m_addr + 283);
	}
	float GetAlcoholContentMultiplier() {
		return memory.read<float>(m_addr + 284);
	}
	int32_t GetBulletStackAmount() {
		return memory.read<int32_t>(m_addr + 288);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALockBombDefusalMinigame
{
public:
	ALockBombDefusalMinigame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	ATrapItem Get_bombClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return ATrapItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCorpseInterface
{
public:
	UCorpseInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlaceableCraftableItem
{
public:
	UPlaceableCraftableItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	APlaceableActorBase GetPlaceableActorOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return APlaceableActorBase(ptr_addr);
	}
	float GetMaxPlacementAngle() {
		return memory.read<float>(m_addr + 304);
	}
	bool GetAdjustRotation() {
		return memory.read<bool>(m_addr + 308);
	}
	float GetGroundOffsetWhilePlacing() {
		return memory.read<float>(m_addr + 312);
	}
	float GetMaxDistanceFromGroundWhilePlacing() {
		return memory.read<float>(m_addr + 316);
	}
	float GetReachabilityVerticalOffset() {
		return memory.read<float>(m_addr + 320);
	}
	bool GetIgnoreFloatingCheckWhilePlacing() {
		return memory.read<bool>(m_addr + 324);
	}
	struct FVector GetPlacementLocationOffset() {
		return memory.read<struct FVector>(m_addr + 328);
	}
	struct FVector GetBoundsExtensionWhilePlacingMin() {
		return memory.read<struct FVector>(m_addr + 340);
	}
	struct FVector GetBoundsExtensionWhilePlacingMax() {
		return memory.read<struct FVector>(m_addr + 352);
	}
	struct FVector GetPlacementTracesBoundsExtension() {
		return memory.read<struct FVector>(m_addr + 364);
	}
	struct FVector GetFloatingTracesBoundsExtension() {
		return memory.read<struct FVector>(m_addr + 376);
	}
	struct FVector GetFloatingTracesCenterOffset() {
		return memory.read<struct FVector>(m_addr + 388);
	}
	float GetMaxHeightAdjustmentWhilePlacing() {
		return memory.read<float>(m_addr + 400);
	}
	float GetMinHeightAdjustmentWhilePlacing() {
		return memory.read<float>(m_addr + 404);
	}
	bool GetCanPlaceOnWater() {
		return memory.read<bool>(m_addr + 408);
	}
	bool GetUseMeshCollisionForPlacement() {
		return memory.read<bool>(m_addr + 409);
	}
	bool GetOnlyPlaceableInFriendlyFlagArea() {
		return memory.read<bool>(m_addr + 410);
	}
	bool GetCanPlaceInEnemyFlagArea() {
		return memory.read<bool>(m_addr + 411);
	}
	bool GetCheckBaseBuildingPlacementMask() {
		return memory.read<bool>(m_addr + 412);
	}
	int32_t GetMaxInstancesPerFlagArea() {
		return memory.read<int32_t>(m_addr + 416);
	}
	uint8_t  GetPlacementAlgorithm() {
		return memory.read<uint8_t >(m_addr + 420);
	}
	float GetMaxMissedPlacementTracesPercent() {
		return memory.read<float>(m_addr + 424);
	}
	bool GetShowDirectionIndicator() {
		return memory.read<bool>(m_addr + 428);
	}
	struct FVector GetDirectionIndicatorOffset() {
		return memory.read<struct FVector>(m_addr + 432);
	}
	float GetDirectionIndicatorRotation() {
		return memory.read<float>(m_addr + 444);
	}
	float GetDirectionIndicatorSize() {
		return memory.read<float>(m_addr + 448);
	}
	float GetOutlineMaterialBaseOffset() {
		return memory.read<float>(m_addr + 452);
	}
	float GetOutlineMaterialThinness() {
		return memory.read<float>(m_addr + 456);
	}
	bool GetIsOutlineMaterialTwoSided() {
		return memory.read<bool>(m_addr + 460);
	}
	struct UMaterialInterface GetPlacementAllowedMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 464);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetPlacementDisallowedMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 472);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetOutlineMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 480);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetDepthMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 488);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameResourceItemTag
{
public:
	UGameResourceItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UGameResourceType(ptr_addr);
	}
	struct FGameplayTagContainer GetSocketTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 56);
	}
	float GetResourceAmountPerUse() {
		return memory.read<float>(m_addr + 88);
	}
	struct TArray<struct UBaseItemTag> GetRequiredItemTagsForFueling() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct TArray<struct UBaseItemTag>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFragGrenadeItem
{
public:
	AFragGrenadeItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFortificationCraftableItem
{
public:
	UFortificationCraftableItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetFortificationClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 496);
		return UObject(ptr_addr);
	}
	struct UTexture2D GetIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 504);
		return struct UTexture2D(ptr_addr);
	}
	struct FText GetCaption() {
		return memory.read<struct FText>(m_addr + 512);
	}
	struct FText GetDescription() {
		return memory.read<struct FText>(m_addr + 536);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStandardLockData
{
public:
	UStandardLockData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetLockMeshOuter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct UStaticMesh(ptr_addr);
	}
	struct UStaticMesh GetLockMeshInner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct UStaticMesh(ptr_addr);
	}
	float GetRotatingTresholdAngle() {
		return memory.read<float>(m_addr + 168);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 172);
	}
	float GetAngleTolerance() {
		return memory.read<float>(m_addr + 176);
	}
	float GetPickBreakingMultiplier() {
		return memory.read<float>(m_addr + 180);
	}
	int32_t GetPickBreakingAtNumberOfFailedPushAttempts() {
		return memory.read<int32_t>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPhysicalSurfacesData
{
public:
	UPhysicalSurfacesData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPhysicalSurfaceData GetDefault() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 48);
	}
	struct FPhysicalSurfaceData Getgrass() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 76);
	}
	struct FPhysicalSurfaceData GetForrestGroundCoastal() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 104);
	}
	struct FPhysicalSurfaceData GetForrestGroundContinental() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 132);
	}
	struct FPhysicalSurfaceData GetRock() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 160);
	}
	struct FPhysicalSurfaceData GetStone() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 188);
	}
	struct FPhysicalSurfaceData GetGravel() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 216);
	}
	struct FPhysicalSurfaceData GetGravelBeach() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 244);
	}
	struct FPhysicalSurfaceData GetPebbles() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 272);
	}
	struct FPhysicalSurfaceData GetSnow() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 300);
	}
	struct FPhysicalSurfaceData GetIce() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 328);
	}
	struct FPhysicalSurfaceData GetSand() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 356);
	}
	struct FPhysicalSurfaceData GetAsphalt() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 384);
	}
	struct FPhysicalSurfaceData GetDirt() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 412);
	}
	struct FPhysicalSurfaceData GetWater() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 440);
	}
	struct FPhysicalSurfaceData GetWaterOcean() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 468);
	}
	struct FPhysicalSurfaceData GetCloth() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 496);
	}
	struct FPhysicalSurfaceData GetMetal() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 524);
	}
	struct FPhysicalSurfaceData GetAluminium() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 552);
	}
	struct FPhysicalSurfaceData GetConcrete() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 580);
	}
	struct FPhysicalSurfaceData GetBrick() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 608);
	}
	struct FPhysicalSurfaceData GetWood() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 636);
	}
	struct FPhysicalSurfaceData GetPlastic() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 664);
	}
	struct FPhysicalSurfaceData GetRubber() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 692);
	}
	struct FPhysicalSurfaceData GetGlass() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 720);
	}
	struct FPhysicalSurfaceData GetFoliage() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 748);
	}
	struct FPhysicalSurfaceData GetBark() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 776);
	}
	struct FPhysicalSurfaceData GetFlesh() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 804);
	}
	struct FPhysicalSurfaceData GetRoofTile() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 832);
	}
	struct FPhysicalSurfaceData GetCeramicTiles() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 860);
	}
	struct FPhysicalSurfaceData GetScrap() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 888);
	}
	struct FPhysicalSurfaceData GetTrunk() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 916);
	}
	struct FPhysicalSurfaceData GetLeaves() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 944);
	}
	struct FPhysicalSurfaceData GetFruit() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 972);
	}
	struct FPhysicalSurfaceData GetCardboard() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 1000);
	}
	struct FPhysicalSurfaceData GetPlaster() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 1028);
	}
	struct FPhysicalSurfaceData GetKevlar() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 1056);
	}
	struct FPhysicalSurfaceData GetForceField() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 1084);
	}
	struct FPhysicalSurfaceData GetNoEffect() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 1112);
	}
	struct FPhysicalSurfaceData GetWhiteGravel() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 1140);
	}
	struct FPhysicalSurfaceData GetMud() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 1168);
	}
	struct FPhysicalSurfaceData GetRiverSand() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 1196);
	}
	struct FPhysicalSurfaceData GetGrassContinental() {
		return memory.read<struct FPhysicalSurfaceData>(m_addr + 1224);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBaseBuildingBlockCraftableItem
{
public:
	UBaseBuildingBlockCraftableItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetBaseBlockClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 496);
		return UObject(ptr_addr);
	}
	struct UTexture2D GetIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 504);
		return struct UTexture2D(ptr_addr);
	}
	struct FText GetCaption() {
		return memory.read<struct FText>(m_addr + 512);
	}
	struct FText GetDescription() {
		return memory.read<struct FText>(m_addr + 536);
	}
	struct FVector GetPlacementMeshOffset() {
		return memory.read<struct FVector>(m_addr + 560);
	}
	struct FVector GetPlacementMeshScale() {
		return memory.read<struct FVector>(m_addr + 572);
	}
	bool GetIsUpgrade() {
		return memory.read<bool>(m_addr + 584);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCraftingCache
{
public:
	UCraftingCache(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetIngredientPaths() {
		return memory.read<struct TArray<struct FString>>(m_addr + 48);
	}
	struct TMap<UCraftingIngredientType, struct FIngredientClassesArray> Get_craftingTypes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TMap<UCraftingIngredientType, struct FIngredientClassesArray>(ptr_addr);
	}
	struct TArray<struct TSoftClassPtr<UObject>> Get_ingredients() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 144);
	}
	struct TArray<struct TSoftClassPtr<UObject>> Get_recipes() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};


class URangedResourceProviderComponent
{
public:
	URangedResourceProviderComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType Get_repResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return UGameResourceType(ptr_addr);
	}
	float Get_repResourceAmount() {
		return memory.read<float>(m_addr + 256);
	}
	float Get_repAvailableResourceAmount() {
		return memory.read<float>(m_addr + 260);
	}
	AInfluenceAreaVisualizer Get_influenceAreaVisualizerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return AInfluenceAreaVisualizer(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFireplaceItem
{
public:
	AFireplaceItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent Get_collisionMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2360);
		return struct UStaticMeshComponent(ptr_addr);
	}
	float Get_fireDamageProcessingPeriod() {
		return memory.read<float>(m_addr + 2368);
	}
	float Get_fireBaseDamageToItemsPerSecond() {
		return memory.read<float>(m_addr + 2376);
	}
	float Get_fireDamageRadius() {
		return memory.read<float>(m_addr + 2380);
	}
	int32_t Get_minBurningStageForManualPutOut() {
		return memory.read<int32_t>(m_addr + 2384);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCraftingComponentTooltip
{
public:
	UCraftingComponentTooltip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetBackgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetComponentTypeText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetDescriptionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetImage_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetNameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UCraftingComponentWidget Get_craftingComponentWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UCraftingComponentWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UExplosionFailurePenalty
{
public:
	UExplosionFailurePenalty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_explosionBaseDamage() {
		return memory.read<float>(m_addr + 48);
	}
	struct FTargetTypeDamageMultiplier Get_targetTypeMultiplier() {
		return memory.read<struct FTargetTypeDamageMultiplier>(m_addr + 56);
	}
	float Get_minimumDamage() {
		return memory.read<float>(m_addr + 72);
	}
	float Get_damageInnerRadius() {
		return memory.read<float>(m_addr + 76);
	}
	float Get_damageOuterRadius() {
		return memory.read<float>(m_addr + 80);
	}
	float Get_damageFalloff() {
		return memory.read<float>(m_addr + 84);
	}
	struct UParticleSystem Get_explosionPS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent Get_explosionAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCraftingDatabase
{
public:
	UCraftingDatabase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UCraftableItem> GetCraftableItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct UCraftableItem>(ptr_addr);
	}
	struct TArray<struct FString> GetAssetPaths() {
		return memory.read<struct TArray<struct FString>>(m_addr + 64);
	}
	struct UCraftingItemTag GetCookableTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UCraftingItemTag(ptr_addr);
	}
	struct UCraftingItemTag GetSmokableTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UCraftingItemTag(ptr_addr);
	}
	struct UCraftingItemTag GetOpenItemTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UCraftingItemTag(ptr_addr);
	}
	struct UCraftingItemTag GetLightFireTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UCraftingItemTag(ptr_addr);
	}
	struct UCraftingItemTag GetConservedFoodTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UCraftingItemTag(ptr_addr);
	}
	struct UItemGroup GetIngredientsGroup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UItemGroup(ptr_addr);
	}
	struct TArray<struct FString> GetIngredientsGroupPaths() {
		return memory.read<struct TArray<struct FString>>(m_addr + 128);
	}
	struct TArray<struct FString> GetIngredientsExcludePaths() {
		return memory.read<struct TArray<struct FString>>(m_addr + 144);
	}
	struct TMap<struct UCraftingItemTag, struct FItemClassesArray> Get_itemsByTags() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct TMap<struct UCraftingItemTag, struct FItemClassesArray>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyEffectUIData_AntibioticsReaction
{
public:
	UPrisonerBodyEffectUIData_AntibioticsReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText Get_name() {
		return memory.read<struct FText>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionWashEyesWithReplenishableResource
{
public:
	UPrisonerActionWashEyesWithReplenishableResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCraftingItemTag
{
public:
	UCraftingItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCraftingPanel
{
public:
	UCraftingPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGridPanel Get_toolsAndWeaponsBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_toolsAndWeaponsSubBox1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_toolsAndWeaponsSubBox2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_toolsAndWeaponsSubBox3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_toolsAndWeaponsSubBox4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_toolsAndWeaponsSubBox5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UGridPanel(ptr_addr);
	}
	struct UUserWidget GetToolsAndWeaponsSubContainer1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetToolsAndWeaponsSubContainer2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetToolsAndWeaponsSubContainer3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetToolsAndWeaponsSubContainer4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetToolsAndWeaponsSubContainer5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UUserWidget(ptr_addr);
	}
	struct UGridPanel Get_itemsBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_itemsSubBox1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_itemsSubBox2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_itemsSubBox3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_itemsSubBox4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_itemsSubBox5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UGridPanel(ptr_addr);
	}
	struct UUserWidget GetItemsSubContainer1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetItemsSubContainer2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetItemsSubContainer3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetItemsSubContainer4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetItemsSubContainer5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UUserWidget(ptr_addr);
	}
	struct UScrollBox Get_toolsAndWeaponsScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UScrollBox(ptr_addr);
	}
	struct UScrollBox Get_itemsScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UScrollBox(ptr_addr);
	}
	struct UScaleBox Get_toolsAndWeaponsScaleBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UScaleBox(ptr_addr);
	}
	struct UScaleBox Get_itemsScaleBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UScaleBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ARemoteKeyItem
{
public:
	ARemoteKeyItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBasicGameResourceContainerComponent Get_resourceContainerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct UBasicGameResourceContainerComponent(ptr_addr);
	}
	float Get_triggerRadius() {
		return memory.read<float>(m_addr + 2328);
	}
	struct UAkAudioEvent Get_triggerAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2336);
		return struct UAkAudioEvent(ptr_addr);
	}
	bool Get_isPaired() {
		return memory.read<bool>(m_addr + 2360);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameEventNotificationUIController
{
public:
	UGameEventNotificationUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCraftingProduct
{
public:
	UCraftingProduct(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_WetFeet
{
public:
	UPrisonerBodySymptom_WetFeet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_feetWetnessToExist() {
		return memory.read<float>(m_addr + 184);
	}
	struct FRuntimeFloatCurve Get_severityVsFeetWetness() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCraftingRecipeDescriptionPanel
{
public:
	UCraftingRecipeDescriptionPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCraftingInfoWidget Get_craftingInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UCraftingInfoWidget(ptr_addr);
	}
	struct UGridPanel Get_inventoryBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_vicinityBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UGridPanel(ptr_addr);
	}
	struct FText Get_blueprintNumberExceededMessage() {
		return memory.read<struct FText>(m_addr + 632);
	}
	UTooltipBase Get_tooltipClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return UTooltipBase(ptr_addr);
	}
	struct TArray<struct AItem> Get_ingredientsToUseForCrafting() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct TArray<struct AItem>(ptr_addr);
	}
	struct TArray<struct UUserWidget> Get_inventoryEmptyWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct TArray<struct UUserWidget>(ptr_addr);
	}
	struct TArray<struct UUserWidget> Get_vicinityEmptyWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct TArray<struct UUserWidget>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFillGameResourceContainerWithReplenishableResourcePaidDescription
{
public:
	UPrisonerActionFillGameResourceContainerWithReplenishableResourcePaidDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameResourceContainerProxyForReplenishableResource GetProxyForReplenishableResource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UGameResourceContainerProxyForReplenishableResource(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryItemDataDescription
{
public:
	UInventoryItemDataDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetName() {
		return memory.read<struct FText>(m_addr + 48);
	}
	struct FText GetDescription() {
		return memory.read<struct FText>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlaceableElementWidget
{
public:
	UPlaceableElementWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_icon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USquadTooltip
{
public:
	USquadTooltip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetSquadName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetSquadInformation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct USquadEmblemWidget GetSquadEmblem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct USquadEmblemWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCraftingIngredientType
{
public:
	UCraftingIngredientType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAmount() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemClassWidget
{
public:
	UItemClassWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetBackgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage GetMainImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	bool GetBackgroundVisible() {
		return memory.read<bool>(m_addr + 632);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCraftItemAction
{
public:
	UCraftItemAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ACTFFlag
{
public:
	ACTFFlag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USphereComponent GetSphereComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USphereComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetFlagMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct TArray<struct UMaterialInstance> GetTeamMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct TArray<struct UMaterialInstance>(ptr_addr);
	}
	struct FName GetAttachSocketName() {
		return memory.read<struct FName>(m_addr + 576);
	}
	struct ACTFGameEvent Get_gameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct ACTFGameEvent(ptr_addr);
	}
	int32_t Get_team() {
		return memory.read<int32_t>(m_addr + 592);
	}
	struct APrisoner Get_carrier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct APrisoner(ptr_addr);
	}
	float Get_resetProgress() {
		return memory.read<float>(m_addr + 616);
	}
	struct FTransform Get_baseTransform() {
		return memory.read<struct FTransform>(m_addr + 624);
	}
	struct FTransform Get_flagTransform() {
		return memory.read<struct FTransform>(m_addr + 672);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameEventParticipantStats
{
public:
	UGameEventParticipantStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_score() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionSearchObjectDescription
{
public:
	UPrisonerActionSearchObjectDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCTFParticipantStats
{
public:
	UCTFParticipantStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPickups() {
		return memory.read<int32_t>(m_addr + 72);
	}
	int32_t GetCaptures() {
		return memory.read<int32_t>(m_addr + 76);
	}
	int32_t GetReturns() {
		return memory.read<int32_t>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPhysicalSurfacesEffectsData
{
public:
	UPhysicalSurfacesEffectsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPhysicalSurfaceEffectsData GetDefault() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 48);
	}
	struct FPhysicalSurfaceEffectsData Getgrass() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 128);
	}
	struct FPhysicalSurfaceEffectsData GetForrestGroundCoastal() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 208);
	}
	struct FPhysicalSurfaceEffectsData GetForrestGroundContinental() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 288);
	}
	struct FPhysicalSurfaceEffectsData GetRock() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 368);
	}
	struct FPhysicalSurfaceEffectsData GetStone() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 448);
	}
	struct FPhysicalSurfaceEffectsData GetGravel() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 528);
	}
	struct FPhysicalSurfaceEffectsData GetGravelBeach() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 608);
	}
	struct FPhysicalSurfaceEffectsData GetPebbles() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 688);
	}
	struct FPhysicalSurfaceEffectsData GetSnow() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 768);
	}
	struct FPhysicalSurfaceEffectsData GetIce() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 848);
	}
	struct FPhysicalSurfaceEffectsData GetSand() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 928);
	}
	struct FPhysicalSurfaceEffectsData GetAsphalt() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 1008);
	}
	struct FPhysicalSurfaceEffectsData GetDirt() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 1088);
	}
	struct FPhysicalSurfaceEffectsData GetWater() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 1168);
	}
	struct FPhysicalSurfaceEffectsData GetWaterOcean() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 1248);
	}
	struct FPhysicalSurfaceEffectsData GetCloth() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 1328);
	}
	struct FPhysicalSurfaceEffectsData GetMetal() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 1408);
	}
	struct FPhysicalSurfaceEffectsData GetAluminium() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 1488);
	}
	struct FPhysicalSurfaceEffectsData GetConcrete() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 1568);
	}
	struct FPhysicalSurfaceEffectsData GetBrick() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 1648);
	}
	struct FPhysicalSurfaceEffectsData GetWood() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 1728);
	}
	struct FPhysicalSurfaceEffectsData GetPlastic() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 1808);
	}
	struct FPhysicalSurfaceEffectsData GetRubber() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 1888);
	}
	struct FPhysicalSurfaceEffectsData GetGlass() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 1968);
	}
	struct FPhysicalSurfaceEffectsData GetFoliage() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 2048);
	}
	struct FPhysicalSurfaceEffectsData GetBark() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 2128);
	}
	struct FPhysicalSurfaceEffectsData GetFlesh() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 2208);
	}
	struct FPhysicalSurfaceEffectsData GetRoofTile() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 2288);
	}
	struct FPhysicalSurfaceEffectsData GetCeramicTiles() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 2368);
	}
	struct FPhysicalSurfaceEffectsData GetScrap() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 2448);
	}
	struct FPhysicalSurfaceEffectsData GetTrunk() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 2528);
	}
	struct FPhysicalSurfaceEffectsData GetLeaves() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 2608);
	}
	struct FPhysicalSurfaceEffectsData GetFruit() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 2688);
	}
	struct FPhysicalSurfaceEffectsData GetCardboard() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 2768);
	}
	struct FPhysicalSurfaceEffectsData GetPlaster() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 2848);
	}
	struct FPhysicalSurfaceEffectsData GetKevlar() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 2928);
	}
	struct FPhysicalSurfaceEffectsData GetForceField() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 3008);
	}
	struct FPhysicalSurfaceEffectsData GetNoEffect() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 3088);
	}
	struct FPhysicalSurfaceEffectsData GetWhiteGravel() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 3168);
	}
	struct FPhysicalSurfaceEffectsData GetMud() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 3248);
	}
	struct FPhysicalSurfaceEffectsData GetRiverSand() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 3328);
	}
	struct FPhysicalSurfaceEffectsData GetGrassContinental() {
		return memory.read<struct FPhysicalSurfaceEffectsData>(m_addr + 3408);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_Hypothermia
{
public:
	UPrisonerBodyConditionUIData_Hypothermia(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionVomit
{
public:
	UPrisonerActionVomit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UUserManager
{
public:
	UUserManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ACTFLocationMarker
{
public:
	ACTFLocationMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCTFParameters GetCTFParameters() {
		return memory.read<struct FCTFParameters>(m_addr + 1048);
	}
	struct FVector GetCaptureOffsetA() {
		return memory.read<struct FVector>(m_addr + 1096);
	}
	struct FVector GetCaptureOffsetB() {
		return memory.read<struct FVector>(m_addr + 1108);
	}
	float GetCaptureRadiusA() {
		return memory.read<float>(m_addr + 1120);
	}
	float GetCaptureRadiusB() {
		return memory.read<float>(m_addr + 1124);
	}
	struct FTransform GetFlagOffsetA() {
		return memory.read<struct FTransform>(m_addr + 1136);
	}
	struct FTransform GetFlagOffsetB() {
		return memory.read<struct FTransform>(m_addr + 1184);
	}
	struct UStaticMeshComponent GetFlagAPreviewMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1232);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetFlagBPreviewMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1240);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerResponseIdle_BodyConditionOrSymptomPresence
{
public:
	UPrisonerResponseIdle_BodyConditionOrSymptomPresence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodyConditionOrSymptom GetBodyConditionOrSymptom() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return UPrisonerBodyConditionOrSymptom(ptr_addr);
	}
	struct FInt32Range GetSeverityLevels() {
		return memory.read<struct FInt32Range>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCurrencyConversionRequest
{
public:
	UCurrencyConversionRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerUIStatics
{
public:
	UPrisonerUIStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGameResourceType
{
public:
	UGameResourceType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetResourceName() {
		return memory.read<struct FText>(m_addr + 40);
	}
	struct FString GetConfigSectionName() {
		return memory.read<struct FString>(m_addr + 64);
	}
	bool GetCanWashWith() {
		return memory.read<bool>(m_addr + 80);
	}
	bool GetCanPutOutFireWith() {
		return memory.read<bool>(m_addr + 81);
	}
	bool GetCanDisinfectWith() {
		return memory.read<bool>(m_addr + 82);
	}
	struct FGameplayTag GetCookingIngredientTag() {
		return memory.read<struct FGameplayTag>(m_addr + 84);
	}
	struct TSoftObjectPtr<UTexture2D> GetResourceImage() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 96);
	}
	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 136);
	}
	struct UGameResourceConsumptionData GetConsumptionData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct UGameResourceConsumptionData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCurrencyItemComponent
{
public:
	UCurrencyItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_value() {
		return memory.read<int32_t>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCursedScrollBar
{
public:
	UCursedScrollBar(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetScrollBarValue() {
		return memory.read<float>(m_addr + 632);
	}
	float GetViewportHeight() {
		return memory.read<float>(m_addr + 636);
	}
	float GetContentHeight() {
		return memory.read<float>(m_addr + 640);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACustomMapBorder
{
public:
	ACustomMapBorder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetTournamentMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UMaterialInstanceDynamic GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct FVector2D Get_minCustomMapSize() {
		return memory.read<struct FVector2D>(m_addr + 568);
	}
	bool Get_isInTournamentMode() {
		return memory.read<bool>(m_addr + 576);
	}
	float Get_tournamentModeCompletionPercentage() {
		return memory.read<float>(m_addr + 580);
	}
	float Get_nearingCompletionPercentage() {
		return memory.read<float>(m_addr + 584);
	}
	struct FVector2D Get_minTournamentMapSize() {
		return memory.read<struct FVector2D>(m_addr + 596);
	}
	struct FBox2D Get_tournamentFinalBorderDimensions() {
		return memory.read<struct FBox2D>(m_addr + 604);
	}
	bool Get_active() {
		return memory.read<bool>(m_addr + 624);
	}
	struct FBox2D Get_customMapDimensions() {
		return memory.read<struct FBox2D>(m_addr + 628);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInteriorCharacterSpawnerComponent
{
public:
	UInteriorCharacterSpawnerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsColorPicker
{
public:
	UCustomZoneSettingsColorPicker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton Get_button0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_button1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_button2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_button3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_button4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_button5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_button6() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_button7() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UButton(ptr_addr);
	}
	struct UGridPanel Get_border0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_border1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_border2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_border3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_border4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_border5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_border6() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UGridPanel(ptr_addr);
	}
	struct UGridPanel Get_border7() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UGridPanel(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionStartChainsawEngineDescription
{
public:
	UPrisonerActionStartChainsawEngineDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsConfigurationDetails
{
public:
	UCustomZoneSettingsConfigurationDetails(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UEditableText Get_name() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UEditableText(ptr_addr);
	}
	struct UCustomZoneSettingsColorPicker Get_color() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UCustomZoneSettingsColorPicker(ptr_addr);
	}
	struct UVerticalBox Get_handlingMethodSelectorContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UVerticalBox(ptr_addr);
	}
	struct TArray<struct FLinearColor> Get_colors() {
		return memory.read<struct TArray<struct FLinearColor>>(m_addr + 656);
	}
	UCustomZoneSettingsHandlingMethodSelector Get_handlingMethodSelectorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return UCustomZoneSettingsHandlingMethodSelector(ptr_addr);
	}
	bool Get_shouldShowSkipOption() {
		return memory.read<bool>(m_addr + 680);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsDetailsDisplay
{
public:
	UCustomZoneSettingsDetailsDisplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBorder Get_displayBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UBorder(ptr_addr);
	}
	UCustomZoneSettingsConfigurationDetails Get_globalConfigurationDetailsWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return UCustomZoneSettingsConfigurationDetails(ptr_addr);
	}
	UCustomZoneSettingsConfigurationDetails Get_configurationDetailsWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return UCustomZoneSettingsConfigurationDetails(ptr_addr);
	}
	UCustomZoneSettingsRegionDetails Get_regionDetailsWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return UCustomZoneSettingsRegionDetails(ptr_addr);
	}
	struct UCustomZoneSettingsConfigurationDetails Get_globalConfigurationDetails() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UCustomZoneSettingsConfigurationDetails(ptr_addr);
	}
	struct UCustomZoneSettingsConfigurationDetails Get_configurationDetails() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UCustomZoneSettingsConfigurationDetails(ptr_addr);
	}
	struct UCustomZoneSettingsRegionDetails Get_regionDetails() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UCustomZoneSettingsRegionDetails(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInternalMountPath
{
public:
	UInternalMountPath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetDestinationSlotId() {
		return memory.read<struct FGameplayTag>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomZoneSettingsUIController
{
public:
	UCustomZoneSettingsUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCutObjectAction
{
public:
	UCutObjectAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASilentAlarmTrapItem
{
public:
	ASilentAlarmTrapItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent Get_triggerSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2656);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_detonationDelay() {
		return memory.read<float>(m_addr + 2664);
	}
	struct UNameableItemComponent Get_nameableItemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2672);
		return struct UNameableItemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDamageDirectionIndicator
{
public:
	UDamageDirectionIndicator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetVisible() {
		return memory.read<bool>(m_addr + 40);
	}
	struct UTexture GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UTexture(ptr_addr);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 56);
	}
	float GetOpacityMultiplier() {
		return memory.read<float>(m_addr + 60);
	}
	float GetDefaultDelayDuration() {
		return memory.read<float>(m_addr + 64);
	}
	float GetDefaultSustainDuration() {
		return memory.read<float>(m_addr + 68);
	}
	float GetDefaultReleaseDuration() {
		return memory.read<float>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPostItemsSpawnedActions_SetResourceAmount
{
public:
	UPostItemsSpawnedActions_SetResourceAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_useAbsoluteAmount() {
		return memory.read<bool>(m_addr + 40);
	}
	struct FFloatInterval Get_absoluteAmount() {
		return memory.read<struct FFloatInterval>(m_addr + 44);
	}
	bool Get_useAmountRatio() {
		return memory.read<bool>(m_addr + 52);
	}
	struct FFloatInterval Get_amountRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDamageReceiver
{
public:
	UDamageReceiver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ATrader
{
public:
	ATrader(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UTraderPersonalityDataAsset> Get_traderPersonalityDataAsset() {
		return memory.read<struct TWeakObjectPtr<UTraderPersonalityDataAsset>>(m_addr + 2320);
	}
	bool Get_disregardsMales() {
		return memory.read<bool>(m_addr + 2329);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScumPointDamageType
{
public:
	UScumPointDamageType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScumRadialDamageType
{
public:
	UScumRadialDamageType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerSkillsUIData
{
public:
	UPrisonerSkillsUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDamageStatics
{
public:
	UDamageStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemRackSlotComponent
{
public:
	UItemRackSlotComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem Get_placedItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 512);
		return struct AItem(ptr_addr);
	}
	struct TArray<UPlaceableOnRackItemTag> Get_acceptableTags() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 528);
		return struct TArray<UPlaceableOnRackItemTag>(ptr_addr);
	}
	struct UAkAudioEvent Get_placeItemAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AHUD_John
{
public:
	AHUD_John(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFont GetNormalFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UFont(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADamagingTrapItem
{
public:
	ADamagingTrapItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_initialDamageAmount() {
		return memory.read<float>(m_addr + 2656);
	}
	float Get_damagePerSecond() {
		return memory.read<float>(m_addr + 2660);
	}
	struct UAkAudioEvent Get_triggerSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2664);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDbConnection
{
public:
	UDbConnection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADcxWheeledVehicle
{
public:
	ADcxWheeledVehicle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDcxVehicleDriveComponent Get_driveComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2824);
		return struct UDcxVehicleDriveComponent(ptr_addr);
	}
	struct UVehicleDoorsComponent Get_doorsComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2832);
		return struct UVehicleDoorsComponent(ptr_addr);
	}
	struct UDcxWheeledVehicleEffectsComponent Get_effectsComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2840);
		return struct UDcxWheeledVehicleEffectsComponent(ptr_addr);
	}
	int32_t Get_minimumNumberOfWheelsToBeDriven() {
		return memory.read<int32_t>(m_addr + 2932);
	}
	int32_t Get_minimumNumberOfWheelsToBePushed() {
		return memory.read<int32_t>(m_addr + 2936);
	}
	float Get_minPushStartVelocity() {
		return memory.read<float>(m_addr + 2940);
	}
	float Get_minPushStartVelocityIgnition() {
		return memory.read<float>(m_addr + 2944);
	}
	struct UAkAudioEvent Get_hornStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2952);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_hornStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2960);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_maxPushForce() {
		return memory.read<float>(m_addr + 2968);
	}
	float Get_minPushForce() {
		return memory.read<float>(m_addr + 2976);
	}
	float Get_maxPushForcePerPusher() {
		return memory.read<float>(m_addr + 2980);
	}
	float Get_minPushStartForce() {
		return memory.read<float>(m_addr + 2984);
	}
	struct UCurveFloat Get_speedToPushForceCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2992);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_maxLinearVelocityWhenPushing() {
		return memory.read<float>(m_addr + 3000);
	}
	float Get_maxAllowedDistanceFromPushStartingPlayer() {
		return memory.read<float>(m_addr + 3004);
	}
	struct FRuntimeFloatCurve Get_pusherActionDifficultyVsSpeed() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3008);
	}
	struct FRuntimeFloatCurve Get_pusherBaseStrengthChangeRateSpeedInfluenceVsSpeed() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3144);
	}
	struct FRuntimeFloatCurve Get_pusherBaseConstitutionChangeRateModifierVsSpeed() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3280);
	}

private:
	std::uint64_t m_addr = 0;
};


class USortByButton
{
public:
	USortByButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton GetButton_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UButton(ptr_addr);
	}
	struct USizeBox GetSizeBox_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct USizeBox(ptr_addr);
	}
	struct UTextBlock GetTextBlock_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	float GetSize() {
		return memory.read<float>(m_addr + 656);
	}
	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 664);
	}
	char ESortByType GetType() {
		return memory.read<char ESortByType>(m_addr + 688);
	}

private:
	std::uint64_t m_addr = 0;
};


class UExplosiveProtectionItemComponent
{
public:
	UExplosiveProtectionItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AMinigame Get_minigameClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return AMinigame(ptr_addr);
	}
	UBaseItemTag Get_minigameToolTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return UBaseItemTag(ptr_addr);
	}
	struct ULockItemTag Get_lockItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct ULockItemTag(ptr_addr);
	}
	struct ULockData Get_lockData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct ULockData(ptr_addr);
	}
	struct UParticleSystem Get_explosionParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UParticleSystem(ptr_addr);
	}
	struct FVector Get_explosionParticlesLocation() {
		return memory.read<struct FVector>(m_addr + 248);
	}
	struct UAkAudioEvent Get_explosionAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_explosionBaseDamage() {
		return memory.read<float>(m_addr + 272);
	}
	float Get_explosionMinimalDamage() {
		return memory.read<float>(m_addr + 276);
	}
	float Get_explosionDamagePositionOffset() {
		return memory.read<float>(m_addr + 280);
	}
	float Get_explosionDamageFalloff() {
		return memory.read<float>(m_addr + 284);
	}
	float Get_explosionInnerRadius() {
		return memory.read<float>(m_addr + 288);
	}
	float Get_explosionOuterRadius() {
		return memory.read<float>(m_addr + 292);
	}
	struct FTargetTypeDamageMultiplier Get_targetTypeMultiplier() {
		return memory.read<struct FTargetTypeDamageMultiplier>(m_addr + 296);
	}
	float Get_hearingDamageRadius() {
		return memory.read<float>(m_addr + 312);
	}
	UMatineeCameraShake Get_explosionCameraShakeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return UMatineeCameraShake(ptr_addr);
	}
	bool Get_isArmed() {
		return memory.read<bool>(m_addr + 328);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEngineeringSkill
{
public:
	UEngineeringSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FEngineeringSkillExperienceAwards GetNoSkillExperienceAwards() {
		return memory.read<struct FEngineeringSkillExperienceAwards>(m_addr + 176);
	}
	struct FEngineeringSkillExperienceAwards GetBasicSkillExperienceAwards() {
		return memory.read<struct FEngineeringSkillExperienceAwards>(m_addr + 192);
	}
	struct FEngineeringSkillExperienceAwards GetMediumSkillExperienceAwards() {
		return memory.read<struct FEngineeringSkillExperienceAwards>(m_addr + 208);
	}
	struct FEngineeringSkillExperienceAwards GetAdvancedSkillExperienceAwards() {
		return memory.read<struct FEngineeringSkillExperienceAwards>(m_addr + 224);
	}
	struct FEngineeringSkillExperienceAwards GetAboveAdvancedSkillExperienceAwards() {
		return memory.read<struct FEngineeringSkillExperienceAwards>(m_addr + 240);
	}
	struct FEngineeringSkillParametersPerSkillLevel GetNoSkillParameters() {
		return memory.read<struct FEngineeringSkillParametersPerSkillLevel>(m_addr + 256);
	}
	struct FEngineeringSkillParametersPerSkillLevel GetBasicSkillParameters() {
		return memory.read<struct FEngineeringSkillParametersPerSkillLevel>(m_addr + 288);
	}
	struct FEngineeringSkillParametersPerSkillLevel GetMediumSkillParameters() {
		return memory.read<struct FEngineeringSkillParametersPerSkillLevel>(m_addr + 320);
	}
	struct FEngineeringSkillParametersPerSkillLevel GetAdvancedSkillParameters() {
		return memory.read<struct FEngineeringSkillParametersPerSkillLevel>(m_addr + 352);
	}
	struct FEngineeringSkillParametersPerSkillLevel GetAboveAdvancedSkillParameters() {
		return memory.read<struct FEngineeringSkillParametersPerSkillLevel>(m_addr + 384);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGloveStatsTag
{
public:
	UGloveStatsTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetElectricalDamageModifier() {
		return memory.read<float>(m_addr + 48);
	}
	float GetLockpkickingPressureModifier() {
		return memory.read<float>(m_addr + 52);
	}
	bool GetPreventsHandAbrasions() {
		return memory.read<bool>(m_addr + 56);
	}
	float GetDecayMultiplierWhileDoingAbrasiveActions() {
		return memory.read<float>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADcxBike
{
public:
	ADcxBike(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_shouldApplyStabilization() {
		return memory.read<bool>(m_addr + 3428);
	}
	struct FVector Get_centerOfMassOffset() {
		return memory.read<struct FVector>(m_addr + 3432);
	}
	struct FVector Get_centerOfMassOffsetNotMounted() {
		return memory.read<struct FVector>(m_addr + 3444);
	}
	float Get_angVelXDamping() {
		return memory.read<float>(m_addr + 3456);
	}
	float Get_angVelYDamping() {
		return memory.read<float>(m_addr + 3460);
	}
	float Get_angVelZDamping() {
		return memory.read<float>(m_addr + 3464);
	}
	float Get_bicycleDriftAmount() {
		return memory.read<float>(m_addr + 3472);
	}
	float Get_bicycleDriftLeanAmount() {
		return memory.read<float>(m_addr + 3476);
	}
	float Get_impactSpeedForUnmount() {
		return memory.read<float>(m_addr + 3480);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADcxMotorcycle
{
public:
	ADcxMotorcycle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFillWaterDescription
{
public:
	UPrisonerActionFillWaterDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDcxMotorcycleAnimInstance
{
public:
	UDcxMotorcycleAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDcxWheeledVehicleDriveComponent4W
{
public:
	UDcxWheeledVehicleDriveComponent4W(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_maxArtificialBrakingForceVsSpeedKph() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1032);
	}
	struct TArray<struct FDcxWheeledVehicleFlatTireWheelConfiguration> Get_flatTireWheelConfigurations() {
		return memory.read<struct TArray<struct FDcxWheeledVehicleFlatTireWheelConfiguration>>(m_addr + 1168);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDcxWheeledVehicleTire
{
public:
	UDcxWheeledVehicleTire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDcxVehicleTireParticleData GetParticleTrail() {
		return memory.read<struct FDcxVehicleTireParticleData>(m_addr + 224);
	}
	struct FDcxVehicleTireParticleData GetParticleWave() {
		return memory.read<struct FDcxVehicleTireParticleData>(m_addr + 244);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFillGameResourceContainerWithReplenishableResourceDescription
{
public:
	UPrisonerActionFillGameResourceContainerWithReplenishableResourceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameResourceContainerProxyForReplenishableResource GetProxyForReplenishableResource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct UGameResourceContainerProxyForReplenishableResource(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADeathmatchLocationMarker
{
public:
	ADeathmatchLocationMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDeathmatchParameters GetDeathmatchParameters() {
		return memory.read<struct FDeathmatchParameters>(m_addr + 1048);
	}
	struct FVector GetFocusOffset() {
		return memory.read<struct FVector>(m_addr + 1068);
	}
	float GetMinimalRadius() {
		return memory.read<float>(m_addr + 1080);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDebugRpcChannel
{
public:
	UDebugRpcChannel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDedicatedServerRequest
{
public:
	UDedicatedServerRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADepotItem
{
public:
	ADepotItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ATradePost Get_assignedTradePost() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2624);
		return struct ATradePost(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryNode
{
public:
	UInventoryNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDefaultDamageCustomization
{
public:
	UDefaultDamageCustomization(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerInjuryTypeLikelihoods> GetPrisonerInjuryTypeLikelihoodsPerBodyPart() {
		return memory.read<struct TArray<struct FPrisonerInjuryTypeLikelihoods>>(m_addr + 40);
	}
	struct TArray<float> GetPrisonerBleedingSeverityEnergyThreshold() {
		return memory.read<struct TArray<float>>(m_addr + 56);
	}
	float GetPrisonerDamageMultiplierPerBodyPart[c]() {
		return memory.read<float>(m_addr + 72);
	}
	float GetStaminaDrainPerHundredJoules() {
		return memory.read<float>(m_addr + 120);
	}
	float GetHeadshotInstantKillEnergyThreshold() {
		return memory.read<float>(m_addr + 124);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPostItemsSpawnedActions_SetClothesDirtiness
{
public:
	UPostItemsSpawnedActions_SetClothesDirtiness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatInterval Get_dirtiness() {
		return memory.read<struct FFloatInterval>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADropZoneCrate
{
public:
	ADropZoneCrate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	ADropZoneKey GetKeyClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return ADropZoneKey(ptr_addr);
	}
	bool Get_hasKey() {
		return memory.read<bool>(m_addr + 648);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDefusingCuttingToolItemTag
{
public:
	UDefusingCuttingToolItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMesh GetSkeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct USkeletalMesh(ptr_addr);
	}
	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleDoorsComponent
{
public:
	UVehicleDoorsComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDemolitionSkill
{
public:
	UDemolitionSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDemolitionSkillParametersPerSkillLevel GetNoSkillParameters() {
		return memory.read<struct FDemolitionSkillParametersPerSkillLevel>(m_addr + 176);
	}
	struct FDemolitionSkillParametersPerSkillLevel GetBasicSkillParameters() {
		return memory.read<struct FDemolitionSkillParametersPerSkillLevel>(m_addr + 296);
	}
	struct FDemolitionSkillParametersPerSkillLevel GetMediumSkillParameters() {
		return memory.read<struct FDemolitionSkillParametersPerSkillLevel>(m_addr + 416);
	}
	struct FDemolitionSkillParametersPerSkillLevel GetAdvancedSkillParameters() {
		return memory.read<struct FDemolitionSkillParametersPerSkillLevel>(m_addr + 536);
	}
	struct FDemolitionSkillParametersPerSkillLevel GetAboveAdvancedSkillParameters() {
		return memory.read<struct FDemolitionSkillParametersPerSkillLevel>(m_addr + 656);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerTradingComponent
{
public:
	UPrisonerTradingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDetectableMetalAssetData
{
public:
	UDetectableMetalAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolismBodyReservesPanel
{
public:
	UMetabolismBodyReservesPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolismRadialProgressBar Get_rpb_Muscle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMetabolismRadialProgressBar(ptr_addr);
	}
	struct UMetabolismRadialProgressBar Get_rpb_Fat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismRadialProgressBar(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADialLockMinigameBase
{
public:
	ADialLockMinigameBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent Get_lockBody() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_lockClamp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UStaticMeshComponent(ptr_addr);
	}
	float Get_animationLength() {
		return memory.read<float>(m_addr + 776);
	}
	struct TArray<struct FWheelData> Get_wheels() {
		return memory.read<struct TArray<struct FWheelData>>(m_addr + 784);
	}
	struct UAkAudioEvent Get_wheelTurnedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADialLockMinigame
{
public:
	ADialLockMinigame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent Get_incorrectCombinationAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_unlockedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FTransform Get_protectionParticlesTransform() {
		return memory.read<struct FTransform>(m_addr + 880);
	}
	float Get_throbberDelay() {
		return memory.read<float>(m_addr + 992);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffectUIData_IntelligenceModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffectUIData_IntelligenceModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_ICU_TEMP_Stats
{
public:
	UMetabolism_ICU_TEMP_Stats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_tempMinMax() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_tempDeviation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULockpickingMinigameConfiguration
{
public:
	ULockpickingMinigameConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULockData GetLockData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct ULockData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTabGroup
{
public:
	UTabGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPanelWidget Get_tabPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UPanelWidget(ptr_addr);
	}
	uint8_t  Get_previous() {
		return memory.read<uint8_t >(m_addr + 664);
	}
	uint8_t  Get_next() {
		return memory.read<uint8_t >(m_addr + 665);
	}
	uint8_t  Get_in() {
		return memory.read<uint8_t >(m_addr + 666);
	}
	bool Get_canWrap() {
		return memory.read<bool>(m_addr + 667);
	}
	char EHorizontalAlignment Get_tabHorizontalAlignment() {
		return memory.read<char EHorizontalAlignment>(m_addr + 668);
	}
	char EVerticalAlignment Get_tabVerticalAlignment() {
		return memory.read<char EVerticalAlignment>(m_addr + 669);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDialLockMinigameConfiguration
{
public:
	UDialLockMinigameConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class APrisonerHUD
{
public:
	APrisonerHUD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UHudWidget GetHudWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UHudWidget(ptr_addr);
	}
	struct UDamageDirectionIndicator GetDamageDirectionIndicator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UDamageDirectionIndicator(ptr_addr);
	}
	bool GetShouldDrawCrosshair() {
		return memory.read<bool>(m_addr + 816);
	}
	bool GetShouldDrawScreenCenterDot() {
		return memory.read<bool>(m_addr + 817);
	}
	struct UMaterialInterface GetTacticsMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UMaterialInterface(ptr_addr);
	}
	struct ULoadingIconWidget GetLoadingIconWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct ULoadingIconWidget(ptr_addr);
	}
	struct USpawnScreen GetSpawnScreenWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct USpawnScreen(ptr_addr);
	}
	struct UWaypointScreenWidget GetWaypointScreenWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UWaypointScreenWidget(ptr_addr);
	}
	struct FMulticastInlineDelegate GetOnShouldShowExtendedWidgetTooltipChanged() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 856);
	}
	struct UFont Get_HUDFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UFont(ptr_addr);
	}
	struct UFont Get_HUDFontScope() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UFont(ptr_addr);
	}
	float Get_customMapBorderWidth() {
		return memory.read<float>(m_addr + 936);
	}
	struct FLinearColor Get_customMapBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 940);
	}
	UPauseMenuUIController Get_pauseMenuUIControllerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return UPauseMenuUIController(ptr_addr);
	}
	struct FGameplayTagContainer Get_traderCategories() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 1024);
	}
	UPlantingPanel Get_plantingPanelWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1064);
		return UPlantingPanel(ptr_addr);
	}
	UAdminPlantPanel Get_adminPlantPanelWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1072);
		return UAdminPlantPanel(ptr_addr);
	}
	UPlantStatusIndicatorWidget Get_plantStatusIndicatorWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return UPlantStatusIndicatorWidget(ptr_addr);
	}
	UCookingUIController Get_cookingUIControllerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1120);
		return UCookingUIController(ptr_addr);
	}
	UChatUIController Get_chatUIControllerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1136);
		return UChatUIController(ptr_addr);
	}
	bool Get_shouldDrawOtherPlayerInfo() {
		return memory.read<bool>(m_addr + 1266);
	}
	bool Get_isLeftMouseButtonPressed() {
		return memory.read<bool>(m_addr + 1267);
	}
	struct FMapHUDPrisonerObject Get_prisonerMapHUDObject() {
		return memory.read<struct FMapHUDPrisonerObject>(m_addr + 1320);
	}
	struct FMapHUDHomeLocationObject Get_homeLocationMapHUDObject() {
		return memory.read<struct FMapHUDHomeLocationObject>(m_addr + 1384);
	}
	struct FMapHUDWorldEventsObject Get_worldEventsMapHUDObject() {
		return memory.read<struct FMapHUDWorldEventsObject>(m_addr + 1456);
	}
	struct FMapHUDOtherPlayersObject Get_otherPlayersMapHUDObjects() {
		return memory.read<struct FMapHUDOtherPlayersObject>(m_addr + 1480);
	}
	struct FMapHUDDroneObject Get_droneMapHUDObject() {
		return memory.read<struct FMapHUDDroneObject>(m_addr + 1672);
	}
	struct FMapHUDVehiclesObject Get_vehicleMapHUDObjects() {
		return memory.read<struct FMapHUDVehiclesObject>(m_addr + 1728);
	}
	struct FMapHUDFlagsObject Get_flagMapHUDObjects() {
		return memory.read<struct FMapHUDFlagsObject>(m_addr + 1952);
	}
	struct UItemSplitWidget Get_itemSplitWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2192);
		return struct UItemSplitWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADialLockSetCombinationMinigame
{
public:
	ADialLockSetCombinationMinigame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AKillBoxC4SpawnPoint
{
public:
	AKillBoxC4SpawnPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<AItem> Get_possibleSpawnClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct TArray<AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDialLockSetConfigurationMinigameConfiguration
{
public:
	UDialLockSetConfigurationMinigameConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInventoryPositionData
{
public:
	UInventoryPositionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_Leukopenia
{
public:
	UPrisonerBodySymptomUIData_Leukopenia(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDialLockWidget
{
public:
	UDialLockWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation Get_onSuccess() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation Get_onFailure() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation Get_showThrobber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation Get_hideThrobber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AGlobalGuardedZoneManager
{
public:
	AGlobalGuardedZoneManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FGuardedZoneManagerDescription> Get_guardedZoneManagers() {
		return memory.read<struct TArray<struct FGuardedZoneManagerDescription>>(m_addr + 568);
	}
	float Get_guardedZoneTickTime() {
		return memory.read<float>(m_addr + 592);
	}
	float Get_playerLogicTickTime() {
		return memory.read<float>(m_addr + 596);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDialogButton
{
public:
	UDialogButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetPreviewSelectedState() {
		return memory.read<bool>(m_addr + 688);
	}
	struct UButton Get_button() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UButton(ptr_addr);
	}
	struct UTextBlock Get_text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTextBlock(ptr_addr);
	}
	struct USizeBox Get_sizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct USizeBox(ptr_addr);
	}
	struct FText Get_initialTitle() {
		return memory.read<struct FText>(m_addr + 720);
	}
	struct FTabButtonStyle Get_selectedButtonStyle() {
		return memory.read<struct FTabButtonStyle>(m_addr + 744);
	}
	struct FTabButtonStyle Get_deselectedButtonStyle() {
		return memory.read<struct FTabButtonStyle>(m_addr + 1392);
	}
	struct FTabTextStyle Get_selectedTextStyle() {
		return memory.read<struct FTabTextStyle>(m_addr + 2040);
	}
	struct FTabTextStyle Get_deselectedTextStyle() {
		return memory.read<struct FTabTextStyle>(m_addr + 2192);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDialogueContainerWidget
{
public:
	UDialogueContainerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USubtitleWidget Get_subtitleWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct USubtitleWidget(ptr_addr);
	}
	struct UOverlay Get_avatarImageOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UOverlay(ptr_addr);
	}
	struct UTextBlock Get_actionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USquareCheckbox
{
public:
	USquareCheckbox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation Get_selectAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionAnalyzeAnimalTrack
{
public:
	UPrisonerActionAnalyzeAnimalTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADistantLevelManager
{
public:
	ADistantLevelManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent Get_rootComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USceneComponent(ptr_addr);
	}
	float Get_minCameraLocationChangeToUpdateDistantLevels() {
		return memory.read<float>(m_addr + 552);
	}
	float Get_distantMeshPreloadDistance() {
		return memory.read<float>(m_addr + 556);
	}
	int32_t Get_maxNumSimultaneouslyStreamedDistantMeshLODs() {
		return memory.read<int32_t>(m_addr + 560);
	}
	float Get_distantCollisionMeshUnloadDistance() {
		return memory.read<float>(m_addr + 564);
	}
	int32_t Get_maxNumSimultaneouslyStreamedDistantCollisionMeshes() {
		return memory.read<int32_t>(m_addr + 568);
	}
	struct TArray<struct FDistantLevelDescription> Get_distantLevelDescriptions() {
		return memory.read<struct TArray<struct FDistantLevelDescription>>(m_addr + 576);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFlareItemComponent
{
public:
	UFlareItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor Get_pointLightColor() {
		return memory.read<struct FLinearColor>(m_addr + 424);
	}
	struct UMaterialInterface Get_pointLightMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 440);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRepairItemDescription
{
public:
	UPrisonerActionRepairItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDivingMaskTag
{
public:
	UDivingMaskTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULockpickItemTag
{
public:
	ULockpickItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UStaticMesh(ptr_addr);
	}
	float GetLockpickingDurability() {
		return memory.read<float>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemTooltipTab
{
public:
	UItemTooltipTab(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UPanelWidget> Get_panels() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct TArray<struct UPanelWidget>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADogTagItem
{
public:
	ADogTagItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId Get_userProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 2320);
	}
	struct FString Get_userProfileName() {
		return memory.read<struct FString>(m_addr + 2328);
	}
	struct UExpirableItemComponent Get_expirableItemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct UExpirableItemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemLightDisplay
{
public:
	UItemLightDisplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_itemImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_emptySlotBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct USizeBox Get_sizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct USizeBox(ptr_addr);
	}
	struct UTextBlock Get_durability() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_uses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UBorder Get_selectionBorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UBorder(ptr_addr);
	}
	struct UOverlay Get_itemDataOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UOverlay(ptr_addr);
	}
	struct UProgressBar Get_durabilityProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UProgressBar(ptr_addr);
	}
	struct UProgressBar Get_usesProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UProgressBar(ptr_addr);
	}
	float Get_width() {
		return memory.read<float>(m_addr + 704);
	}
	float Get_height() {
		return memory.read<float>(m_addr + 708);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_ICU_EKG_Stats
{
public:
	UMetabolism_ICU_EKG_Stats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_heartPulseBPM() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFamePointDebugWidget
{
public:
	UFamePointDebugWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_famePointsText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADoor
{
public:
	ADoor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetControlName() {
		return memory.read<struct FName>(m_addr + 576);
	}
	struct UMeshComponent GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UMeshComponent(ptr_addr);
	}
	struct FMulticastInlineDelegate GetOnOpened() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 592);
	}
	uint8_t  Get_doorType() {
		return memory.read<uint8_t >(m_addr + 720);
	}
	struct USceneComponent Get_rootComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct USceneComponent(ptr_addr);
	}
	int32_t Get_maxNumberOfLocks() {
		return memory.read<int32_t>(m_addr + 740);
	}
	int32_t Get_maxNumberOfZappers() {
		return memory.read<int32_t>(m_addr + 744);
	}
	bool Get_supportsRemoteSensor() {
		return memory.read<bool>(m_addr + 748);
	}
	bool GetCanOpenOnBothSides() {
		return memory.read<bool>(m_addr + 749);
	}
	bool Get_canOpen() {
		return memory.read<bool>(m_addr + 750);
	}
	float Get_openingDuration() {
		return memory.read<float>(m_addr + 752);
	}
	float Get_closingDuration() {
		return memory.read<float>(m_addr + 756);
	}
	bool Get_canInteractWhileInTransition() {
		return memory.read<bool>(m_addr + 760);
	}
	bool Get_shouldSelfClose() {
		return memory.read<bool>(m_addr + 761);
	}
	float Get_openedDurationBeforeSelfClosing() {
		return memory.read<float>(m_addr + 764);
	}
	float Get_selfCloseDuration() {
		return memory.read<float>(m_addr + 768);
	}
	struct UAkAudioEvent Get_openingSoundCue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_openedSoundCue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_closingSoundCue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_closedSoundCue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_noiseLoudness() {
		return memory.read<float>(m_addr + 808);
	}
	UDoorUnlockData Get_doorUnlockData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return UDoorUnlockData(ptr_addr);
	}
	uint8_t  Get_stateFlags() {
		return memory.read<uint8_t >(m_addr + 856);
	}
	bool Get_canEverBeOpened() {
		return memory.read<bool>(m_addr + 858);
	}
	bool Get_canEverBeClosed() {
		return memory.read<bool>(m_addr + 859);
	}
	struct UPriceCategory Get_priceCategory() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UPriceCategory(ptr_addr);
	}
	struct FTransform Get_unlockTransformInside() {
		return memory.read<struct FTransform>(m_addr + 880);
	}
	struct FTransform Get_unlockTransformOutside() {
		return memory.read<struct FTransform>(m_addr + 928);
	}
	float Get_forceUnlockMovementAcceptanceRadius() {
		return memory.read<float>(m_addr + 976);
	}
	struct TArray<UObject> Get_upgradeItemsClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 984);
		return struct TArray<UObject>(ptr_addr);
	}
	struct TArray<struct ULockData> Get_lockData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct TArray<struct ULockData>(ptr_addr);
	}
	struct TArray<UObject> Get_originalUpgradeItemsClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1032);
		return struct TArray<UObject>(ptr_addr);
	}
	struct TArray<struct ULockData> Get_originalLockData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1048);
		return struct TArray<struct ULockData>(ptr_addr);
	}
	struct FDbIntegerId Get_owningUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 1080);
	}
	struct UDoorUpgradeWidget Get_upgradeWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1104);
		return struct UDoorUpgradeWidget(ptr_addr);
	}
	struct FDoorRepData Get_doorRepData() {
		return memory.read<struct FDoorRepData>(m_addr + 1120);
	}
	bool Get_disableSerialization() {
		return memory.read<bool>(m_addr + 1209);
	}
	struct TArray<struct AItem> Get_attachedItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1240);
		return struct TArray<struct AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDoorEntitySetup
{
public:
	UDoorEntitySetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerSkillUIData_Running
{
public:
	UPrisonerSkillUIData_Running(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMessageBoxWithList
{
public:
	UMessageBoxWithList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScrollBox Get_listScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UScrollBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDoorUnlockData
{
public:
	UDoorUnlockData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 40);
	}
	struct FString GetDescription() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNotificationChain
{
public:
	UNotificationChain(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FNotificationAndDelay> Get_notifications() {
		return memory.read<struct TArray<struct FNotificationAndDelay>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UUpgradeSlotWidget
{
public:
	UUpgradeSlotWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_itemIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_gridSymbol() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_backgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_defaultImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct FLinearColor Get_regularColour() {
		return memory.read<struct FLinearColor>(m_addr + 640);
	}
	struct FLinearColor Get_dropUnavailableColour() {
		return memory.read<struct FLinearColor>(m_addr + 656);
	}
	struct FLinearColor Get_dropAvailableColour() {
		return memory.read<struct FLinearColor>(m_addr + 672);
	}
	uint8_t  Get_slotType() {
		return memory.read<uint8_t >(m_addr + 688);
	}
	struct TArray<AItem> Get_buyableUpgrades() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct TArray<AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_Infection
{
public:
	UPrisonerBodyConditionUIData_Infection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInventoryPositionData2D
{
public:
	UInventoryPositionData2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPositionX() {
		return memory.read<int32_t>(m_addr + 40);
	}
	int32_t GetPositionY() {
		return memory.read<int32_t>(m_addr + 44);
	}
	char GetRotation() {
		return memory.read<char>(m_addr + 48);
	}
	bool GetIsLoading() {
		return memory.read<bool>(m_addr + 49);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBCUUpgradeSlotWidget
{
public:
	UBCUUpgradeSlotWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor Get_connectedBackgroundColor() {
		return memory.read<struct FLinearColor>(m_addr + 728);
	}
	struct FSlateBrush Get_connectedIconTexture() {
		return memory.read<struct FSlateBrush>(m_addr + 744);
	}
	struct FSlateBrush Get_disconnectedIconTexture() {
		return memory.read<struct FSlateBrush>(m_addr + 880);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADoubleDoor
{
public:
	ADoubleDoor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMeshComponent GetMesh1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct UMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADoubleRegularDoorStatic
{
public:
	ADoubleRegularDoorStatic(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator Get_openRotation0() {
		return memory.read<struct FRotator>(m_addr + 1264);
	}
	struct FRotator Get_openRotation1() {
		return memory.read<struct FRotator>(m_addr + 1276);
	}
	struct FRotator Get_closedRotation0() {
		return memory.read<struct FRotator>(m_addr + 1288);
	}
	struct FRotator Get_closedRotation1() {
		return memory.read<struct FRotator>(m_addr + 1300);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDrivingSkill
{
public:
	UDrivingSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVehicleHandlingExperienceAwards GetNoSkillExperienceAwards() {
		return memory.read<struct FVehicleHandlingExperienceAwards>(m_addr + 176);
	}
	struct FVehicleHandlingExperienceAwards GetBasicSkillExperienceAwards() {
		return memory.read<struct FVehicleHandlingExperienceAwards>(m_addr + 184);
	}
	struct FVehicleHandlingExperienceAwards GetMediumSkillExperienceAwards() {
		return memory.read<struct FVehicleHandlingExperienceAwards>(m_addr + 192);
	}
	struct FVehicleHandlingExperienceAwards GetAdvancedSkillExperienceAwards() {
		return memory.read<struct FVehicleHandlingExperienceAwards>(m_addr + 200);
	}
	struct FVehicleHandlingExperienceAwards GetAboveAdvancedSkillExperienceAwards() {
		return memory.read<struct FVehicleHandlingExperienceAwards>(m_addr + 208);
	}
	struct FDrivingSkillParametersPerSkillLevel GetNoSkillParameters() {
		return memory.read<struct FDrivingSkillParametersPerSkillLevel>(m_addr + 216);
	}
	struct FDrivingSkillParametersPerSkillLevel GetBasicSkillParameters() {
		return memory.read<struct FDrivingSkillParametersPerSkillLevel>(m_addr + 472);
	}
	struct FDrivingSkillParametersPerSkillLevel GetMediumSkillParameters() {
		return memory.read<struct FDrivingSkillParametersPerSkillLevel>(m_addr + 728);
	}
	struct FDrivingSkillParametersPerSkillLevel GetAdvancedSkillParameters() {
		return memory.read<struct FDrivingSkillParametersPerSkillLevel>(m_addr + 984);
	}
	struct FDrivingSkillParametersPerSkillLevel GetAboveAdvancedSkillParameters() {
		return memory.read<struct FDrivingSkillParametersPerSkillLevel>(m_addr + 1240);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionActivateSlot
{
public:
	UPrisonerActionActivateSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AHuntingManager
{
public:
	AHuntingManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_huntInitTickBudgetInMilliseconds() {
		return memory.read<float>(m_addr + 568);
	}
	int32_t Get_maxActiveHuntsNum() {
		return memory.read<int32_t>(m_addr + 572);
	}
	float Get_daytimeSpawnMultipliers[4]() {
		return memory.read<float>(m_addr + 576);
	}
	struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>> Get_huntingCluesPerAnimal() {
		return memory.read<struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>>>(m_addr + 592);
	}
	struct TArray<char EPhysicalSurface> Get_allowedClueSpawnSurfaces() {
		return memory.read<struct TArray<char EPhysicalSurface>>(m_addr + 672);
	}
	float Get_huntStartPlayerCheckRadius() {
		return memory.read<float>(m_addr + 688);
	}
	float Get_oldClueRemovalDistance() {
		return memory.read<float>(m_addr + 692);
	}
	float Get_huntFailureTime() {
		return memory.read<float>(m_addr + 696);
	}
	float Get_huntFailureAnimalDistance() {
		return memory.read<float>(m_addr + 700);
	}
	float Get_corpseLifetimeMinutes() {
		return memory.read<float>(m_addr + 704);
	}
	int32_t Get_maxSpawnPointGenerationFailures() {
		return memory.read<int32_t>(m_addr + 708);
	}
	float Get_timeToPlaySoundAfterClueInteractionMin() {
		return memory.read<float>(m_addr + 712);
	}
	float Get_timeToPlaySoundAfterClueInteractionMax() {
		return memory.read<float>(m_addr + 716);
	}
	struct TArray<struct FHuntingBiomeDescription> Get_huntingBiomes() {
		return memory.read<struct TArray<struct FHuntingBiomeDescription>>(m_addr + 720);
	}

private:
	std::uint64_t m_addr = 0;
};


class UElectricianGlovesTag
{
public:
	UElectricianGlovesTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPrisonerDamageModifier() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADrone
{
public:
	ADrone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent Get_engineAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1952);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_engineStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1960);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct TArray<float> Get_speedSteps() {
		return memory.read<struct TArray<float>>(m_addr + 1968);
	}
	float Get_movementInertiaAI() {
		return memory.read<float>(m_addr + 1984);
	}
	float Get_movementRotationSpeedExpFactor() {
		return memory.read<float>(m_addr + 1988);
	}
	float Get_engineParticlesChangeSpeedExpFactor() {
		return memory.read<float>(m_addr + 1992);
	}
	struct UCurveFloat Get_engineVolumeFromSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2000);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_movementBreathingInterval() {
		return memory.read<float>(m_addr + 2008);
	}
	float Get_movementBreathingIntensity() {
		return memory.read<float>(m_addr + 2012);
	}
	struct UParticleSystem Get_selfDestructParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2016);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem Get_smokeParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2024);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystemComponent Get_smokeParticleSystemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2032);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UAkAudioEvent Get_selfDestructAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2040);
		return struct UAkAudioEvent(ptr_addr);
	}
	char Get_currentSpeedStep() {
		return memory.read<char>(m_addr + 2072);
	}
	float Get_movementInertia() {
		return memory.read<float>(m_addr + 2076);
	}
	struct UStaticMeshComponent Get_cameraMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2088);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_engineParticlesM() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2096);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_engineParticlesML() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2104);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_engineParticlesMR() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2112);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_engineParticlesLL() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2120);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_engineParticlesLR() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2128);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct USpotLightComponent Get_lightComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2136);
		return struct USpotLightComponent(ptr_addr);
	}
	float Get_speedOfSoundMultiplerForDoppler() {
		return memory.read<float>(m_addr + 2144);
	}
	float Get_health() {
		return memory.read<float>(m_addr + 2208);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADroneCameraActor
{
public:
	ADroneCameraActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDroneDestructibleItemComponent
{
public:
	UDroneDestructibleItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerCharacterMesh
{
public:
	UPrisonerCharacterMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetBodySlotMapping() {
		return memory.read<uint8_t >(m_addr + 96);
	}
	struct FPrisonerCharacterMeshDecayMultiplierData GetDecayMultiplierData() {
		return memory.read<struct FPrisonerCharacterMeshDecayMultiplierData>(m_addr + 100);
	}
	float GetWarmthFactor() {
		return memory.read<float>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDropdownContainerWithDialogue
{
public:
	UDropdownContainerWithDialogue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USelectionOverlayWidget Get_selectionOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct USelectionOverlayWidget(ptr_addr);
	}
	struct UTextBlock Get_label() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UVerticalBox Get_dropdownContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UVerticalBox(ptr_addr);
	}
	struct UButton Get_cancelButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_applyButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UButton(ptr_addr);
	}
	struct FText GetdropdownLabel() {
		return memory.read<struct FText>(m_addr + 648);
	}

private:
	std::uint64_t m_addr = 0;
};


class APlaceableActorModularBaseBuilding
{
public:
	APlaceableActorModularBaseBuilding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Hunger
{
public:
	UPrisonerBodySymptom_Hunger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_severityVsEnergyRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDropdownColorPicker
{
public:
	UDropdownColorPicker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_colorPreviewSquare() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UImage(ptr_addr);
	}
	struct UColorPicker Get_colorPicker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UColorPicker(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleServiceStationAnimInstance
{
public:
	UVehicleServiceStationAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_liftTime() {
		return memory.read<float>(m_addr + 696);
	}
	float Get_liftInterpValue() {
		return memory.read<float>(m_addr + 700);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPreviewAnimationComponent
{
public:
	UPreviewAnimationComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FGameplayTag, struct UAnimationAsset> Get_animationsPerTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct TMap<struct FGameplayTag, struct UAnimationAsset>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDropdownMenuSelectionWidget
{
public:
	UDropdownMenuSelectionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetSelectionImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UImage(ptr_addr);
	}
	struct UCustomBorder GetSelectionBorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UCustomBorder(ptr_addr);
	}
	struct UDropdownMenuWidget Get_dropdownMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UDropdownMenuWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDropZoneParticipantStats
{
public:
	UDropZoneParticipantStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetActivations() {
		return memory.read<int32_t>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class USerializableLayoutWidgetInterface
{
public:
	USerializableLayoutWidgetInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFuelItemTag
{
public:
	UFuelItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCombustibleItemParams GetCombustionParams() {
		return memory.read<struct FCombustibleItemParams>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEconomyManagerResponse
{
public:
	UEconomyManagerResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UEconomyManagerResponseData Get_payload() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UEconomyManagerResponseData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMissionManager
{
public:
	AMissionManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<AMission, struct FMissionData> Get_mainStoryMissions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct TMap<AMission, struct FMissionData>(ptr_addr);
	}
	struct TMap<AMission, struct FMissionData> Get_sideStoryMissions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct TMap<AMission, struct FMissionData>(ptr_addr);
	}
	struct TMap<AMission, struct FMissionData> Get_tutorialMissions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct TMap<AMission, struct FMissionData>(ptr_addr);
	}
	bool Get_tutorialEnabled() {
		return memory.read<bool>(m_addr + 835);
	}
	float Get_tutorialDelay() {
		return memory.read<float>(m_addr + 836);
	}
	struct AMission Get_activeMainStoryMission() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct AMission(ptr_addr);
	}
	struct AMission Get_activeSideStoryMission() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct AMission(ptr_addr);
	}
	struct AMission Get_activeTutorialMission() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct AMission(ptr_addr);
	}
	struct AMission Get_availableMission() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct AMission(ptr_addr);
	}
	uint8_t  Get_missionManagerState() {
		return memory.read<uint8_t >(m_addr + 880);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEconomySpecificData
{
public:
	UEconomySpecificData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetCashItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 48);
	}
	int32_t GetCashStackMaxValue() {
		return memory.read<int32_t>(m_addr + 88);
	}
	struct TSoftClassPtr<UObject> GetDepotItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 96);
	}
	struct TSoftClassPtr<UObject> GetVehicleLockItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 136);
	}
	float GetBasePriceModifierPerTradeCategory[1c]() {
		return memory.read<float>(m_addr + 176);
	}
	float GetBaseSalePriceReductionModifierPerTradeCategory[1c]() {
		return memory.read<float>(m_addr + 288);
	}
	struct FCurrencyDescription GetCurrencyDescriptions[3]() {
		return memory.read<struct FCurrencyDescription>(m_addr + 400);
	}
	struct TMap<uint8_t , struct FBankCardTypeData> GetCardDataPerBankCardType() {
		return memory.read<struct TMap<uint8_t , struct FBankCardTypeData>>(m_addr + 712);
	}
	float GetATMProvisionPercentage() {
		return memory.read<float>(m_addr + 792);
	}
	float GetBankerProvisionPercentage() {
		return memory.read<float>(m_addr + 796);
	}
	struct TMap<struct FGameplayTag, float> GetRotationRarityVsAvailabilityChance() {
		return memory.read<struct TMap<struct FGameplayTag, float>>(m_addr + 800);
	}
	float GetOutpostProsperityVsAvailabilityChanceIncrease[6]() {
		return memory.read<float>(m_addr + 880);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEconomyStatics
{
public:
	UEconomyStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UElectricDoorAssetData
{
public:
	UElectricDoorAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEmblemData
{
public:
	UEmblemData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UTexture2D> GetBackgroundTextures() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct UTexture2D>(ptr_addr);
	}
	struct TArray<struct UTexture2D> GetSymbolTextures() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TArray<struct UTexture2D>(ptr_addr);
	}
	struct TArray<struct FLinearColor> GetColorPalette() {
		return memory.read<struct TArray<struct FLinearColor>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Nausea
{
public:
	UPrisonerBodySymptomCause_Nausea(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class APrisoner
{
public:
	APrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerSkillComponent GetSkillComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2016);
		return struct UPrisonerSkillComponent(ptr_addr);
	}
	struct UPrisonerInventoryComponent GetInventoryComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2024);
		return struct UPrisonerInventoryComponent(ptr_addr);
	}
	struct UPrisonerAppearanceComponent GetAppearanceComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2032);
		return struct UPrisonerAppearanceComponent(ptr_addr);
	}
	struct UMeleeCombatComponent GetMeleeCombatComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2040);
		return struct UMeleeCombatComponent(ptr_addr);
	}
	struct UHitReactComponent GetHitReactComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2048);
		return struct UHitReactComponent(ptr_addr);
	}
	struct UPhysicalAnimationComponent GetPhysicalAnimationComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2056);
		return struct UPhysicalAnimationComponent(ptr_addr);
	}
	struct UInteractionComponent GetInteractionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2064);
		return struct UInteractionComponent(ptr_addr);
	}
	struct UPawnSensingComponent GetSensingComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2072);
		return struct UPawnSensingComponent(ptr_addr);
	}
	struct UBaseInteractionComponent GetBaseInteractionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2080);
		return struct UBaseInteractionComponent(ptr_addr);
	}
	bool GetIgnoreMovementSettings() {
		return memory.read<bool>(m_addr + 2088);
	}
	bool GetOverrideAimOffset() {
		return memory.read<bool>(m_addr + 2089);
	}
	struct FRotator GetAimOffsetOverride() {
		return memory.read<struct FRotator>(m_addr + 2092);
	}
	struct AActor GetEyesLookAtTargetOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2104);
		return struct AActor(ptr_addr);
	}
	bool GetIsFriendly() {
		return memory.read<bool>(m_addr + 2112);
	}
	bool GetCanEverBeKnockedOutByMeleeAttack() {
		return memory.read<bool>(m_addr + 2113);
	}
	bool GetShouldOverrideCharacterTemplate() {
		return memory.read<bool>(m_addr + 2114);
	}
	struct FCharacterTemplate GetCharacterTemplateOverride() {
		return memory.read<struct FCharacterTemplate>(m_addr + 2120);
	}
	struct FAttachmentSocket GetLeftHandAttachmentSocket() {
		return memory.read<struct FAttachmentSocket>(m_addr + 2344);
	}
	struct FAttachmentSocket GetRightHandAttachmentSocket() {
		return memory.read<struct FAttachmentSocket>(m_addr + 2360);
	}
	struct FAttachmentSocket GetLeftShoulderHolsterSocket() {
		return memory.read<struct FAttachmentSocket>(m_addr + 2376);
	}
	struct FAttachmentSocket GetRightShoulderHolsterSocket() {
		return memory.read<struct FAttachmentSocket>(m_addr + 2392);
	}
	struct FMulticastInlineDelegate GetTabModeOpened() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 2792);
	}
	struct FMulticastInlineDelegate GetTabModeClosed() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 2808);
	}
	struct FMulticastInlineDelegate GetPanelsClosed() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 2824);
	}
	struct FMulticastInlineDelegate GetHoveredActorChanged() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 2840);
	}
	bool GetRespawnOnKill() {
		return memory.read<bool>(m_addr + 2896);
	}
	float GetIKOffsetLeftFoot() {
		return memory.read<float>(m_addr + 2900);
	}
	float GetIKOffsetRightFoot() {
		return memory.read<float>(m_addr + 2904);
	}
	uint8_t  GetBorderCrossingPenalty() {
		return memory.read<uint8_t >(m_addr + 2908);
	}
	struct FMulticastInlineDelegate GetBorderCrossingPenaltyChange() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 2912);
	}
	struct UPrisonerBodySimulationComponent Get_bodySimulationComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3408);
		return struct UPrisonerBodySimulationComponent(ptr_addr);
	}
	struct UThermalSensorComponent Get_skinThermalSensingComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3416);
		return struct UThermalSensorComponent(ptr_addr);
	}
	struct UPrisonerMeshManager Get_prisonerMeshManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3424);
		return struct UPrisonerMeshManager(ptr_addr);
	}
	struct UUserProfile Get_userProfile() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3432);
		return struct UUserProfile(ptr_addr);
	}
	struct FString Get_userId() {
		return memory.read<struct FString>(m_addr + 3440);
	}
	struct FDbIntegerId Get_serverUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 3456);
	}
	struct FString Get_userProfileName() {
		return memory.read<struct FString>(m_addr + 3464);
	}
	struct FString Get_userFakeName() {
		return memory.read<struct FString>(m_addr + 3480);
	}
	struct UParticleSystemComponent Get_waterParticlesComponentWhenIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3600);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_waterParticlesComponentWhenMoving() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3608);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_waterParticlesComponentWhenDiving() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3616);
		return struct UParticleSystemComponent(ptr_addr);
	}
	uint8_t  Get_desiredStance() {
		return memory.read<uint8_t >(m_addr + 3630);
	}
	float Get_targetCrouchStage() {
		return memory.read<float>(m_addr + 3644);
	}
	uint8_t  Get_desiredPace() {
		return memory.read<uint8_t >(m_addr + 3648);
	}
	bool Get_freeLookEnabled() {
		return memory.read<bool>(m_addr + 3651);
	}
	bool Get_postFreeLookControllerRotationBlendActive() {
		return memory.read<bool>(m_addr + 3692);
	}
	struct FRotator Get_repAimOffset() {
		return memory.read<struct FRotator>(m_addr + 3708);
	}
	struct APrisonerCorpse Get_lastCorpse() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3784);
		return struct APrisonerCorpse(ptr_addr);
	}
	struct APrisonerCorpse Get_lastEventCorpse() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3792);
		return struct APrisonerCorpse(ptr_addr);
	}
	float Get_targetLeanAmount() {
		return memory.read<float>(m_addr + 3852);
	}
	struct AActor Get_meleeTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5832);
		return struct AActor(ptr_addr);
	}
	struct UMeleeSkill Get_activeMeleeSkill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5848);
		return struct UMeleeSkill(ptr_addr);
	}
	struct AActor Get_rotationTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5872);
		return struct AActor(ptr_addr);
	}
	struct UUnarmedCombatInputRedirector Get_unarmedCombatInputRedirector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5880);
		return struct UUnarmedCombatInputRedirector(ptr_addr);
	}
	struct USkillEventHandler Get_skillEventHandler() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5888);
		return struct USkillEventHandler(ptr_addr);
	}
	struct AItem Get_itemInHands() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5912);
		return struct AItem(ptr_addr);
	}
	uint8_t  Get_scopingWithItemInHandsState() {
		return memory.read<uint8_t >(m_addr + 5957);
	}
	uint8_t  Get_weaponAimingType() {
		return memory.read<uint8_t >(m_addr + 6000);
	}
	char Get_itemInHandsVisualObstructionDepthRep() {
		return memory.read<char>(m_addr + 6036);
	}
	bool Get_isInCombatMode() {
		return memory.read<bool>(m_addr + 6304);
	}
	struct AItem Get_leftShoulderHolsteredItemReplicated() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6392);
		return struct AItem(ptr_addr);
	}
	struct AItem Get_rightShoulderHolsteredItemReplicated() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6408);
		return struct AItem(ptr_addr);
	}
	struct FTimerHandle Get_interactDefaultContextMenuTimerHandle() {
		return memory.read<struct FTimerHandle>(m_addr + 6488);
	}
	struct TArray<struct APrisoner> Get_examinedBy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6496);
		return struct TArray<struct APrisoner>(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_tacticsBlobMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6512);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> Get_bodyPartEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6520);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct UBondageComponent Get_handsBondage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6536);
		return struct UBondageComponent(ptr_addr);
	}
	struct UPrisonerPrisonWalletComponent Get_prisonWalletComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6544);
		return struct UPrisonerPrisonWalletComponent(ptr_addr);
	}
	struct UPrisonerFishingComponent Get_fishingComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6552);
		return struct UPrisonerFishingComponent(ptr_addr);
	}
	struct UPrisonerMusicPlayerComponent Get_musicPlayerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6560);
		return struct UPrisonerMusicPlayerComponent(ptr_addr);
	}
	struct UPrisonerTradingComponent Get_tradingComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6568);
		return struct UPrisonerTradingComponent(ptr_addr);
	}
	struct UPrisonerThrowComponent Get_throwingComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6576);
		return struct UPrisonerThrowComponent(ptr_addr);
	}
	struct UCharacterItemDragComponent Get_itemDragComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6584);
		return struct UCharacterItemDragComponent(ptr_addr);
	}
	uint32_t Get_packedWaterWeight() {
		return memory.read<uint32_t>(m_addr + 6620);
	}
	struct AGameEventBase Get_gameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6664);
		return struct AGameEventBase(ptr_addr);
	}
	struct UPrisonerLoadout Get_gameEventLoadout() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6672);
		return struct UPrisonerLoadout(ptr_addr);
	}
	struct FPrisonerNearbyFoliageInfo Get_nearbyFoliageInfo() {
		return memory.read<struct FPrisonerNearbyFoliageInfo>(m_addr + 6696);
	}
	struct FPrisonerNearbyFoliageInfo Get_collidingNearbyFoliageInfo() {
		return memory.read<struct FPrisonerNearbyFoliageInfo>(m_addr + 6712);
	}
	struct UWidgetComponent Get_nameWidgetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6928);
		return struct UWidgetComponent(ptr_addr);
	}
	struct UBaseItemTag GetSaveSpawnLocationTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 6936);
		return struct UBaseItemTag(ptr_addr);
	}
	struct FDeluxeVersion Get_deluxeVersion() {
		return memory.read<struct FDeluxeVersion>(m_addr + 6984);
	}
	struct TWeakObjectPtr<APrisoner> Get_examinedPrisoner() {
		return memory.read<struct TWeakObjectPtr<APrisoner>>(m_addr + 6996);
	}
	bool Get_killClaimed() {
		return memory.read<bool>(m_addr + 7004);
	}
	uint8_t  Get_playingInstrumentState() {
		return memory.read<uint8_t >(m_addr + 7032);
	}
	uint8_t  Get_carryingItemState() {
		return memory.read<uint8_t >(m_addr + 7034);
	}
	bool Get_shouldShowGenitalsOverride() {
		return memory.read<bool>(m_addr + 7088);
	}
	struct FPrisonerMountReplication Get_repMount() {
		return memory.read<struct FPrisonerMountReplication>(m_addr + 7136);
	}
	struct UMIDIDeviceController Get_midiDeviceController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 7152);
		return struct UMIDIDeviceController(ptr_addr);
	}
	bool Get_hasInfiniteAmmo() {
		return memory.read<bool>(m_addr + 7224);
	}
	bool Get_isInGodMode() {
		return memory.read<bool>(m_addr + 7225);
	}
	bool Get_isImmortal() {
		return memory.read<bool>(m_addr + 7226);
	}
	bool Get_isSuperJumpEnabled() {
		return memory.read<bool>(m_addr + 7227);
	}
	bool Get_enablePerComponentReplicationFrequency() {
		return memory.read<bool>(m_addr + 7264);
	}
	float Get_componentsReplicationFrequency[5]() {
		return memory.read<float>(m_addr + 7268);
	}
	struct UNavigationInvokerComponent Get_navigationInvokerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 7384);
		return struct UNavigationInvokerComponent(ptr_addr);
	}
	struct FGameplayTag GetLegsInjuryTag() {
		return memory.read<struct FGameplayTag>(m_addr + 7532);
	}
	uint8_t  Get_vehicleWeaponAimingStance() {
		return memory.read<uint8_t >(m_addr + 7672);
	}
	float Get_vehicleAimingYawReplicated() {
		return memory.read<float>(m_addr + 7716);
	}
	struct TWeakObjectPtr<AClothesItem> Get_activeParachute() {
		return memory.read<struct TWeakObjectPtr<AClothesItem>>(m_addr + 7856);
	}
	char Get_replicatedBooleans() {
		return memory.read<char>(m_addr + 7876);
	}
	struct UPrisonerCommonData Get_commonData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 7896);
		return struct UPrisonerCommonData(ptr_addr);
	}
	int32_t Get_meshForcedLodIfNotPlayerControlled() {
		return memory.read<int32_t>(m_addr + 7904);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerSkillUIData
{
public:
	UPrisonerSkillUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText Get_description() {
		return memory.read<struct FText>(m_addr + 40);
	}
	USkill Get_skillClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return USkill(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerSkillUIData_Endurance
{
public:
	UPrisonerSkillUIData_Endurance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEntitySystem
{
public:
	UEntitySystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UEntitySystemSettings Get_settings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UEntitySystemSettings(ptr_addr);
	}
	struct TMap<struct UObject, int32_t> Get_uobjectReferences() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1672);
		return struct TMap<struct UObject, int32_t>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_SetupCarJackDescription
{
public:
	UPrisonerVehicleAction_SetupCarJackDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UQuickAccessItemSwitcher3
{
public:
	UQuickAccessItemSwitcher3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 608);
	}
	struct UTextBlock Get_nameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UInventorySlotUserWidget Get_slotWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UInventorySlotUserWidget(ptr_addr);
	}
	struct UTextBlock GetIndexText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UItemWidget2 Get_itemWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UItemWidget2(ptr_addr);
	}
	struct UCheckBox Get_throwingModeCheckbox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UCheckBox(ptr_addr);
	}
	struct FText Get_throwingModeCaption() {
		return memory.read<struct FText>(m_addr + 680);
	}
	struct FText Get_throwingModeDescription() {
		return memory.read<struct FText>(m_addr + 704);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateUnloadAmmo
{
public:
	UWeaponStateUnloadAmmo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULockableItemComponent
{
public:
	ULockableItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct ULockData> Get_staticLocks() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct TArray<struct ULockData>(ptr_addr);
	}
	struct TArray<struct ULockItemTag> Get_lockItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct TArray<struct ULockItemTag>(ptr_addr);
	}
	uint8_t  Get_activeAccessLevel() {
		return memory.read<uint8_t >(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionStartPlayingInstrumentDescription
{
public:
	UPrisonerActionStartPlayingInstrumentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerUIDataImpl
{
public:
	UPrisonerUIDataImpl(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerSkillsUIData GetSkillsUIData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2104);
		return struct UPrisonerSkillsUIData(ptr_addr);
	}
	struct UPrisonerBodySimulationUIData GetBodySimulationUIData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2112);
		return struct UPrisonerBodySimulationUIData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEntitySystemSettings
{
public:
	UEntitySystemSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FEntityToCreateOnStartupParams> GetEntitiesToCreateOnStartup() {
		return memory.read<struct TArray<struct FEntityToCreateOnStartupParams>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPostItemsSpawnedActions
{
public:
	UPostItemsSpawnedActions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerForeignSubstance_Painkillers
{
public:
	UPrisonerForeignSubstance_Painkillers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AGasTankItem
{
public:
	AGasTankItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBasicGameResourceContainerComponent Get_resourceContainerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct UBasicGameResourceContainerComponent(ptr_addr);
	}
	struct URangedResourceProviderComponent Get_rangedResourceProviderComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2328);
		return struct URangedResourceProviderComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AObtainItemObjective
{
public:
	AObtainItemObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TSoftClassPtr<UObject>> Get_targetItems() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 816);
	}
	bool Get_itemInHands() {
		return memory.read<bool>(m_addr + 832);
	}
	bool Get_itemInHolster() {
		return memory.read<bool>(m_addr + 833);
	}
	bool Get_itemInInventory() {
		return memory.read<bool>(m_addr + 834);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEquipmentItemState
{
public:
	UEquipmentItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom
{
public:
	UPrisonerBodySymptom(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerBodySymptomNotifier Get_notifier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UPrisonerBodySymptomNotifier(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AEquipmentItem
{
public:
	AEquipmentItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetMinRange() {
		return memory.read<uint32_t>(m_addr + 2320);
	}
	uint32_t GetMaxRange() {
		return memory.read<uint32_t>(m_addr + 2324);
	}
	uint32_t GetMinDamage() {
		return memory.read<uint32_t>(m_addr + 2328);
	}
	uint32_t GetMaxDamage() {
		return memory.read<uint32_t>(m_addr + 2332);
	}
	uint32_t GetAP() {
		return memory.read<uint32_t>(m_addr + 2336);
	}

private:
	std::uint64_t m_addr = 0;
};


class UObjectivesContainerWidget
{
public:
	UObjectivesContainerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMissionContainerWidget Get_mainMissionContainerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMissionContainerWidget(ptr_addr);
	}
	struct UMissionContainerWidget Get_sideMissionContainerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMissionContainerWidget(ptr_addr);
	}
	struct UMissionContainerWidget Get_tutorialMissionContainerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMissionContainerWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEvaluatedEntitySpawnerRegistrySetup
{
public:
	UEvaluatedEntitySpawnerRegistrySetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEventInsertMagazine
{
public:
	UEventInsertMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionIgniteItemDescription
{
public:
	UPrisonerActionIgniteItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UExamineAction
{
public:
	UExamineAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AHuntingClue
{
public:
	AHuntingClue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent Get_rootComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USceneComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_focusModeParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UDecalComponent Get_clueDecalComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UDecalComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_clueStaticMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UArrowComponent Get_debugArrowComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UArrowComponent(ptr_addr);
	}
	struct TArray<struct FHuntingClueVisuals> Get_firstClueVisuals() {
		return memory.read<struct TArray<struct FHuntingClueVisuals>>(m_addr + 592);
	}
	struct TArray<struct FHuntingClueVisuals> Get_visuals() {
		return memory.read<struct TArray<struct FHuntingClueVisuals>>(m_addr + 608);
	}
	struct TArray<struct TSoftObjectPtr<UAkAudioEvent>> Get_firstClueSoundVariations() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UAkAudioEvent>>>(m_addr + 624);
	}
	struct TArray<struct TSoftObjectPtr<UAkAudioEvent>> Get_secondClueSoundVariations() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UAkAudioEvent>>>(m_addr + 640);
	}
	struct TArray<struct TSoftObjectPtr<UAkAudioEvent>> Get_thirdPlusClueSoundVariations() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UAkAudioEvent>>>(m_addr + 656);
	}
	float Get_hearingDistance() {
		return memory.read<float>(m_addr + 672);
	}
	float Get_minApparentDistance() {
		return memory.read<float>(m_addr + 676);
	}
	float Get_fadeTime() {
		return memory.read<float>(m_addr + 680);
	}
	float Get_lifetimeAfterFadeOut() {
		return memory.read<float>(m_addr + 684);
	}
	float Get_directionalConeHalfAngle() {
		return memory.read<float>(m_addr + 688);
	}
	char Get_packedClueIndexData() {
		return memory.read<char>(m_addr + 692);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyEffect_AntibioticsReaction
{
public:
	UPrisonerBodyEffect_AntibioticsReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodyEffectUIData_AntibioticsReaction Get_uiDataClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return UPrisonerBodyEffectUIData_AntibioticsReaction(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_immuneSystemEfficiencyModifierVsAntibioticsAmountRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UExamineAssetData
{
public:
	UExamineAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FExamineItemSpawnerData GetExamineData() {
		return memory.read<struct FExamineItemSpawnerData>(m_addr + 48);
	}
	struct FItemSpawnerPresetWithOverrides GetSpawnerPreset() {
		return memory.read<struct FItemSpawnerPresetWithOverrides>(m_addr + 224);
	}
	struct UAkAudioEvent GetStartExamineAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopExamineAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 392);
		return struct UAkAudioEvent(ptr_addr);
	}
	uint8_t  GetnoiseLevel() {
		return memory.read<uint8_t >(m_addr + 400);
	}
	bool GetCanStore() {
		return memory.read<bool>(m_addr + 401);
	}
	bool GetCanSave() {
		return memory.read<bool>(m_addr + 402);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATradePost
{
public:
	ATradePost(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FTraderMarker> Get_traderMarkers() {
		return memory.read<struct TArray<struct FTraderMarker>>(m_addr + 944);
	}
	struct TArray<struct FTraderLocationMarker> Get_locationMarkers() {
		return memory.read<struct TArray<struct FTraderLocationMarker>>(m_addr + 960);
	}
	struct TArray<struct ATrader> Get_spawnedTraders() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 976);
		return struct TArray<struct ATrader>(ptr_addr);
	}
	struct TMap<struct FDbIntegerId, struct FSpawnedDepotsHelperStruct> Get_spawnedDepots() {
		return memory.read<struct TMap<struct FDbIntegerId, struct FSpawnedDepotsHelperStruct>>(m_addr + 1008);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionPairRemoteKeyAndSensorDescription
{
public:
	UPrisonerActionPairRemoteKeyAndSensorDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UExaminePrisonerAction
{
public:
	UExaminePrisonerAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMissionDataGroup
{
public:
	UMissionDataGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMissionRootPath() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct UAkAudioEvent GetMissionStartedSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetMissionCompletedSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetMissionFailedSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetObjectiveStartedSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetObjectiveCompletedSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetObjectiveFailedSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct TMap<AMission, struct FMissionData> GetMainStoryMissions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct TMap<AMission, struct FMissionData>(ptr_addr);
	}
	struct TMap<AMission, struct FMissionData> GetSideStoryMissions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct TMap<AMission, struct FMissionData>(ptr_addr);
	}
	struct TMap<AMission, struct FMissionData> GetTutorialMissions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct TMap<AMission, struct FMissionData>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Vomiting
{
public:
	UPrisonerBodySymptomCause_Vomiting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UExecuteInteractionAction
{
public:
	UExecuteInteractionAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFailurePenalty
{
public:
	UFailurePenalty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_shouldExecuteOnClients() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInteractionContainerUserWidget
{
public:
	UInteractionContainerUserWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVerticalBox Get_actionContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UVerticalBox(ptr_addr);
	}
	struct TWeakObjectPtr<AActor> Get_underlyingInteractableActor() {
		return memory.read<struct TWeakObjectPtr<AActor>>(m_addr + 652);
	}
	struct UPrisonerTreatmentUIController Get_uiController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UPrisonerTreatmentUIController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UExplosiveProtectionItemComponentState
{
public:
	UExplosiveProtectionItemComponentState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsArmed() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleMarkersResponse
{
public:
	UVehicleMarkersResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVehicleMarkersData Get_payload() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UVehicleMarkersData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFakeItem
{
public:
	AFakeItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent Get_staticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UNiagaraComponent Get_niagaraComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UNiagaraComponent(ptr_addr);
	}
	struct FVector Get_spawnLocationOffset() {
		return memory.read<struct FVector>(m_addr + 568);
	}
	struct FRotator Get_spawnRotationOffset() {
		return memory.read<struct FRotator>(m_addr + 580);
	}
	float Get_spawnRotationRandomization() {
		return memory.read<float>(m_addr + 592);
	}
	float Get_lifeTimeAfterInteraction() {
		return memory.read<float>(m_addr + 596);
	}
	float Get_additionalLifetimeForParticles() {
		return memory.read<float>(m_addr + 600);
	}
	struct UAkAudioEvent Get_interactionAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UMaterialInterface Get_niagaraParticleMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMaterialInterface(ptr_addr);
	}
	float Get_niagaraParticleForce() {
		return memory.read<float>(m_addr + 624);
	}
	float Get_niagaraParticleAmount() {
		return memory.read<float>(m_addr + 628);
	}
	struct TArray<struct UMaterialInstanceDynamic> Get_meshMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct TArray<struct UMaterialInstanceDynamic>(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_particleMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UIndexedHierarchicalInstancedStaticMeshComponent
{
public:
	UIndexedHierarchicalInstancedStaticMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASimpleAnimalAIController
{
public:
	ASimpleAnimalAIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetWanderRadius() {
		return memory.read<float>(m_addr + 808);
	}
	float GetRunAwayTime() {
		return memory.read<float>(m_addr + 812);
	}
	float GetMinActionTime() {
		return memory.read<float>(m_addr + 816);
	}
	float GetMaxActionTime() {
		return memory.read<float>(m_addr + 820);
	}
	float GetWalkSpeed() {
		return memory.read<float>(m_addr + 824);
	}
	float GetRunSpeed() {
		return memory.read<float>(m_addr + 828);
	}
	float GetFleeSegmentDistance() {
		return memory.read<float>(m_addr + 832);
	}
	float GetAlertStartupTime() {
		return memory.read<float>(m_addr + 836);
	}
	float GetMinMoveDistance() {
		return memory.read<float>(m_addr + 840);
	}
	float GetDoNotDespawnTime() {
		return memory.read<float>(m_addr + 844);
	}

private:
	std::uint64_t m_addr = 0;
};


class USpawnExaminedObjectsInterface
{
public:
	USpawnExaminedObjectsInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFamePointSettings
{
public:
	UFamePointSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFamePointAwards GetAwards() {
		return memory.read<struct FFamePointAwards>(m_addr + 48);
	}
	struct FFamePointPenalties GetPenalties() {
		return memory.read<struct FFamePointPenalties>(m_addr + 400);
	}
	struct UFamePointTagSettings GetFamePointTagSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 424);
		return struct UFamePointTagSettings(ptr_addr);
	}
	struct UCurveFloat GetFameGainCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 432);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULockBombData
{
public:
	ULockBombData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDuration() {
		return memory.read<float>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFamePointTagSettings
{
public:
	UFamePointTagSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FGameplayTag, float> Get_famePointAmountWhenLootedForTag() {
		return memory.read<struct TMap<struct FGameplayTag, float>>(m_addr + 48);
	}
	struct TMap<struct FGameplayTag, float> Get_famePointAmountWhenSellingForTag() {
		return memory.read<struct TMap<struct FGameplayTag, float>>(m_addr + 128);
	}
	struct TMap<struct FGameplayTag, float> Get_famePointAmountWhenBuyingForTag() {
		return memory.read<struct TMap<struct FGameplayTag, float>>(m_addr + 208);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFarmingSkill
{
public:
	UFarmingSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFarmingSkillParametersPerSkillLevel GetNoSkillParameters() {
		return memory.read<struct FFarmingSkillParametersPerSkillLevel>(m_addr + 176);
	}
	struct FFarmingSkillParametersPerSkillLevel GetBasicSkillParameters() {
		return memory.read<struct FFarmingSkillParametersPerSkillLevel>(m_addr + 288);
	}
	struct FFarmingSkillParametersPerSkillLevel GetMediumSkillParameters() {
		return memory.read<struct FFarmingSkillParametersPerSkillLevel>(m_addr + 400);
	}
	struct FFarmingSkillParametersPerSkillLevel GetAdvancedSkillParameters() {
		return memory.read<struct FFarmingSkillParametersPerSkillLevel>(m_addr + 512);
	}
	struct FFarmingSkillParametersPerSkillLevel GetAboveAdvancedSkillParameters() {
		return memory.read<struct FFarmingSkillParametersPerSkillLevel>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFertilizerItemComponent
{
public:
	UFertilizerItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_type() {
		return memory.read<uint8_t >(m_addr + 200);
	}
	struct UAnimMontage Get_addFertilizerMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFireworksItem
{
public:
	AFireworksItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_isFiring() {
		return memory.read<bool>(m_addr + 2320);
	}
	int32_t Get_totalShells() {
		return memory.read<int32_t>(m_addr + 2328);
	}
	float Get_secondsBetweenLaunches() {
		return memory.read<float>(m_addr + 2344);
	}
	float Get_noiseLoudnessOnLaunch() {
		return memory.read<float>(m_addr + 2348);
	}
	bool Get_canBePickedUpWhenLit() {
		return memory.read<bool>(m_addr + 2352);
	}
	bool Get_hasFuse() {
		return memory.read<bool>(m_addr + 2353);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFishInstancedStaticMeshComponent
{
public:
	UFishInstancedStaticMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AFishingAttachmentBait
{
public:
	AFishingAttachmentBait(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<uint8_t , float> Get_baitCatchingChanceMultiplier() {
		return memory.read<struct TMap<uint8_t , float>>(m_addr + 2352);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFishingAttachmentFloater
{
public:
	AFishingAttachmentFloater(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UConZBuoyancyComponent Get_floatingComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct UConZBuoyancyComponent(ptr_addr);
	}
	int32_t Get_floaterBreakSegmentIndex() {
		return memory.read<int32_t>(m_addr + 2360);
	}
	float Get_sinkSpeed() {
		return memory.read<float>(m_addr + 2364);
	}
	float Get_sinkSpeedDuringFastReel() {
		return memory.read<float>(m_addr + 2368);
	}
	float Get_minDistanceForSizeIncrease() {
		return memory.read<float>(m_addr + 2372);
	}
	float Get_maxDistanceForSizeIncrease() {
		return memory.read<float>(m_addr + 2376);
	}
	float Get_maxScale() {
		return memory.read<float>(m_addr + 2380);
	}
	float Get_velocityThreshold() {
		return memory.read<float>(m_addr + 2384);
	}
	float Get_shouldCheckVelocityThreshold() {
		return memory.read<float>(m_addr + 2388);
	}
	float Get_movingRippleThreshold() {
		return memory.read<float>(m_addr + 2392);
	}
	struct FVector Get_floaterWaterCheckOffset() {
		return memory.read<struct FVector>(m_addr + 2396);
	}
	float Get_sendStateInterval() {
		return memory.read<float>(m_addr + 2408);
	}
	struct UParticleSystem Get_hitWaterParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2528);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystemComponent Get_rippleParticleSystemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2536);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_movingRippleParticleSystemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2544);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_sinkParticleSystemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2552);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UMaterialInterface Get_scaledMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2560);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface Get_storedMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2568);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemSelection
{
public:
	UItemSelection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AItem GetMainItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return AItem(ptr_addr);
	}
	struct TArray<AItem> GetSupportItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<AItem>(ptr_addr);
	}
	struct TArray<AItem> GetAttachments() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<AItem>(ptr_addr);
	}
	struct UTexture2D GetUnselectedIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetSelectedIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetDisabledIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UTexture2D(ptr_addr);
	}
	struct FText GetSelectionName() {
		return memory.read<struct FText>(m_addr + 112);
	}
	float GetSizeX() {
		return memory.read<float>(m_addr + 136);
	}
	float GetSizeY() {
		return memory.read<float>(m_addr + 140);
	}
	int32_t GetTeamIndex() {
		return memory.read<int32_t>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFishingAttachmentSinker
{
public:
	AFishingAttachmentSinker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFishingBarWidget
{
public:
	UFishingBarWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetTopSegmentGradientColorBottom() {
		return memory.read<struct FLinearColor>(m_addr + 608);
	}
	struct FLinearColor GetTopSegmentGradientColorTop() {
		return memory.read<struct FLinearColor>(m_addr + 624);
	}
	float GetBarBoxesTotalHeight() {
		return memory.read<float>(m_addr + 640);
	}
	float GetBarSegmentsTotalHeight() {
		return memory.read<float>(m_addr + 644);
	}
	int32_t GetBarSegmentNum() {
		return memory.read<int32_t>(m_addr + 648);
	}
	struct FSlateBrush GetProgressBarBackgroundBoxBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 656);
	}
	struct FLinearColor GetProgressBarBackgroundBoxColorAndOpacity() {
		return memory.read<struct FLinearColor>(m_addr + 792);
	}
	float GetProgressBarBackgroundBoxPadding() {
		return memory.read<float>(m_addr + 808);
	}
	struct FSlateBrush GetProgressBarSegmentBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 816);
	}
	struct FLinearColor GetProgressBarSegmentColorAndOpacity() {
		return memory.read<struct FLinearColor>(m_addr + 952);
	}
	float GetProgressBarSegmentPadding() {
		return memory.read<float>(m_addr + 968);
	}
	struct UVerticalBox Get_progressBarSegmentBackgroundBoxesContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 976);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_progressBarSegmentsContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 984);
		return struct UVerticalBox(ptr_addr);
	}
	struct USizeBox Get_simulatedProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 992);
		return struct USizeBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInfiniteResourceAssetData
{
public:
	UInfiniteResourceAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UGameResourceType(ptr_addr);
	}
	struct FGameplayTagContainer GetInSocketTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 56);
	}
	struct FGameplayTagContainer GetOutSocketTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 88);
	}
	struct TArray<struct UBaseItemTag> GetRequiredItemTagsForFilling() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct TArray<struct UBaseItemTag>(ptr_addr);
	}
	float GetFillBaseActionDuration() {
		return memory.read<float>(m_addr + 136);
	}
	float GetFillActionDurationPerAmountFilled() {
		return memory.read<float>(m_addr + 140);
	}
	float GetFillResourceFillingExperiencePerAmount() {
		return memory.read<float>(m_addr + 144);
	}
	struct UAnimMontage GetFillMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAkAudioEvent GetFillStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetFillStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFishingContainerWidget
{
public:
	UFishingContainerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFishingBarWidget Get_castingBarWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UFishingBarWidget(ptr_addr);
	}
	struct UFishingBarWidget Get_fishingBarWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UFishingBarWidget(ptr_addr);
	}
	float Get_tensionBarInterpSpeed() {
		return memory.read<float>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UZombieArmorDamageReductionAssetData
{
public:
	UZombieArmorDamageReductionAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCollisionDamageMultiplierPerBodyPart[c]() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHazmatSuitTag
{
public:
	UHazmatSuitTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFishingReelAnimInstance
{
public:
	UFishingReelAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_reelHandleRotationAnimationExplicitTime() {
		return memory.read<float>(m_addr + 696);
	}
	uint8_t  Get_owningPrisonerStance() {
		return memory.read<uint8_t >(m_addr + 700);
	}
	bool Get_isOwningPrisonerInFirstPersonView() {
		return memory.read<bool>(m_addr + 701);
	}
	bool Get_isLocked() {
		return memory.read<bool>(m_addr + 702);
	}
	bool Get_isCasting() {
		return memory.read<bool>(m_addr + 703);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFishingRodState
{
public:
	UFishingRodState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FEntityId> GetFishingAttachments() {
		return memory.read<struct TArray<struct FEntityId>>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFishingRod
{
public:
	AFishingRod(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetAttachmentAdded() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 2320);
	}
	struct FMulticastInlineDelegate GetAttachmentRemoved() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 2336);
	}
	struct USkeletalMeshComponent GetSkeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	float GetFishingAreaRadius() {
		return memory.read<float>(m_addr + 2360);
	}
	struct APrisoner Get_fishingRodOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2368);
		return struct APrisoner(ptr_addr);
	}
	struct TArray<struct AFishingAttachment> Get_fishingAttachmentsReplicated() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2400);
		return struct TArray<struct AFishingAttachment>(ptr_addr);
	}
	float Get_reelingAmount() {
		return memory.read<float>(m_addr + 2416);
	}
	struct UFishSpeciesData Get_fishSpeciesData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2496);
		return struct UFishSpeciesData(ptr_addr);
	}
	struct AItem Get_minigameCaughtItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2624);
		return struct AItem(ptr_addr);
	}
	struct AFishingTrophyActor Get_minigameTrophyActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2632);
		return struct AFishingTrophyActor(ptr_addr);
	}
	bool Get_isInTrophyState() {
		return memory.read<bool>(m_addr + 2641);
	}
	float Get_floaterSimulatedWeight() {
		return memory.read<float>(m_addr + 2648);
	}
	float Get_floaterSimulatedWeightDuringFastReeling() {
		return memory.read<float>(m_addr + 2652);
	}
	float Get_shortCastingPower() {
		return memory.read<float>(m_addr + 2656);
	}
	float Get_minCastingPower() {
		return memory.read<float>(m_addr + 2660);
	}
	float Get_maxCastingPower() {
		return memory.read<float>(m_addr + 2664);
	}
	float Get_safeAreaRadius() {
		return memory.read<float>(m_addr + 2668);
	}
	float Get_fishNotBitingAreaRadius() {
		return memory.read<float>(m_addr + 2672);
	}
	float Get_minigameSafeAreaRadius() {
		return memory.read<float>(m_addr + 2676);
	}
	float Get_baseReelingSpeed() {
		return memory.read<float>(m_addr + 2680);
	}
	float Get_fastReelingSpeed() {
		return memory.read<float>(m_addr + 2684);
	}
	float Get_defaultWaterVelocityMultiplier() {
		return memory.read<float>(m_addr + 2688);
	}
	float Get_shortCastingAngle() {
		return memory.read<float>(m_addr + 2692);
	}
	float Get_longCastingAngle() {
		return memory.read<float>(m_addr + 2696);
	}
	float Get_fishingLineTensionToHookThreshold() {
		return memory.read<float>(m_addr + 2700);
	}
	struct FTransform Get_caughtFishOffsetTransform() {
		return memory.read<struct FTransform>(m_addr + 2704);
	}
	AFishingTrophyActor Get_trophyActorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2752);
		return AFishingTrophyActor(ptr_addr);
	}
	float Get_sendStateInterval() {
		return memory.read<float>(m_addr + 2760);
	}
	float Get_fishIdleTimeAtStart() {
		return memory.read<float>(m_addr + 2880);
	}
	float Get_fishStruggleOffsetAmplitude() {
		return memory.read<float>(m_addr + 2884);
	}
	float Get_fishStruggleOffsetPeriod() {
		return memory.read<float>(m_addr + 2888);
	}
	float Get_minDistanceToApplyStruggleOffset() {
		return memory.read<float>(m_addr + 2892);
	}
	float Get_fishToSurfaceRadius() {
		return memory.read<float>(m_addr + 2896);
	}
	float Get_fishGenericSpeed() {
		return memory.read<float>(m_addr + 2900);
	}
	float Get_minFishDirectionChangeTime() {
		return memory.read<float>(m_addr + 2904);
	}
	float Get_maxFishDirectionChangeTime() {
		return memory.read<float>(m_addr + 2908);
	}
	float Get_fishDrainStaminaModifier() {
		return memory.read<float>(m_addr + 2912);
	}
	float Get_fishRecoveryStaminaModifier() {
		return memory.read<float>(m_addr + 2916);
	}
	float Get_lineBreakConstant() {
		return memory.read<float>(m_addr + 2920);
	}
	float Get_reelingTensionModifier() {
		return memory.read<float>(m_addr + 2924);
	}
	float Get_fishRecoveryRadiusBuffer() {
		return memory.read<float>(m_addr + 2928);
	}
	float Get_fishUnderWaterSurfaceOffset() {
		return memory.read<float>(m_addr + 2932);
	}
	float Get_fishStrengthModifier() {
		return memory.read<float>(m_addr + 2936);
	}
	float Get_fishingBoundsAngle() {
		return memory.read<float>(m_addr + 2940);
	}
	float Get_fishingBoundsRadius() {
		return memory.read<float>(m_addr + 2944);
	}
	float Get_fishingLineInTensionDamageAmount() {
		return memory.read<float>(m_addr + 2948);
	}
	float Get_fishingLineOnBreakDamageAmount() {
		return memory.read<float>(m_addr + 2952);
	}
	float Get_fishStuckTimeThreshold() {
		return memory.read<float>(m_addr + 2956);
	}
	float Get_fishNewDirectionAngleStep() {
		return memory.read<float>(m_addr + 2960);
	}
	bool Get_useRodAsRootLocation() {
		return memory.read<bool>(m_addr + 2964);
	}
	struct UAkAudioEvent Get_castingObjectDropToWaterAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2968);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_fishHookedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2976);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_wireBreakAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2984);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_wireTensionStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2992);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_wireTensionEndAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3000);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_menuButtonClickAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3008);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_castPower() {
		return memory.read<float>(m_addr + 3016);
	}
	bool Get_shouldShortCast() {
		return memory.read<bool>(m_addr + 3020);
	}
	float Get_minFishRecoveryTime() {
		return memory.read<float>(m_addr + 3036);
	}
	float Get_maxFishRecoveryTime() {
		return memory.read<float>(m_addr + 3040);
	}
	float Get_minFishStaminaDrainTime() {
		return memory.read<float>(m_addr + 3044);
	}
	float Get_maxFishStaminaDrainTime() {
		return memory.read<float>(m_addr + 3048);
	}
	bool Get_randomFishDrainAndRecovery() {
		return memory.read<bool>(m_addr + 3052);
	}
	bool Get_isFastReeling() {
		return memory.read<bool>(m_addr + 3060);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFishingTrophyActor
{
public:
	AFishingTrophyActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent Get_skeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_staticMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFishingWireComponent
{
public:
	UFishingWireComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionCause_Sepsis
{
public:
	UPrisonerBodyConditionCause_Sepsis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AFishingZoneIndicator
{
public:
	AFishingZoneIndicator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent Get_sceneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USceneComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_fishIconParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent Get_rippleParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UParticleSystemComponent(ptr_addr);
	}
	float Get_radius() {
		return memory.read<float>(m_addr + 568);
	}
	float Get_catchingChanceMultiplier() {
		return memory.read<float>(m_addr + 572);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerResponseIdle_NeedToDefecate
{
public:
	UPrisonerResponseIdle_NeedToDefecate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFishSpeciesPreset
{
public:
	UFishSpeciesPreset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FFishSpawnData> GetFishSpawnData() {
		return memory.read<struct TArray<struct FFishSpawnData>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInteractableInterface
{
public:
	UInteractableInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AShark
{
public:
	AShark(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem Get_sharkBiteBloodPS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2048);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystemComponent Get_sharkBiteBloodPSC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2056);
		return struct UParticleSystemComponent(ptr_addr);
	}
	float Get_biteParticlesScale() {
		return memory.read<float>(m_addr + 2064);
	}
	struct FName Get_spawnBiteAttackParticlesSocketName() {
		return memory.read<struct FName>(m_addr + 2068);
	}
	struct UParticleSystem Get_onDeathPS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2080);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystemComponent Get_onDeathPSC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2088);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct FName Get_onDeathParticlesSocketName() {
		return memory.read<struct FName>(m_addr + 2096);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFlagAreaVisualizer
{
public:
	AFlagAreaVisualizer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent Get_staticMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFlagElementsExpansionItem
{
public:
	AFlagElementsExpansionItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_numberOfElements() {
		return memory.read<int32_t>(m_addr + 2320);
	}

private:
	std::uint64_t m_addr = 0;
};


class UResistanceSkill
{
public:
	UResistanceSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AZombie2
{
public:
	AZombie2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_enableBaseInteraction() {
		return memory.read<bool>(m_addr + 1976);
	}
	struct UNavigationInvokerComponent Get_navigationInvokerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1984);
		return struct UNavigationInvokerComponent(ptr_addr);
	}
	struct UHitReactComponent Get_hitReactComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1992);
		return struct UHitReactComponent(ptr_addr);
	}
	struct UBaseInteractionComponent Get_baseInteractionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2000);
		return struct UBaseInteractionComponent(ptr_addr);
	}
	struct TArray<struct FZombieMeshVariation2> Get_meshVariations() {
		return memory.read<struct TArray<struct FZombieMeshVariation2>>(m_addr + 2008);
	}
	struct TArray<struct FZombieRelaxedStanceVariation2> Get_relaxedStanceVariations() {
		return memory.read<struct TArray<struct FZombieRelaxedStanceVariation2>>(m_addr + 2024);
	}
	struct TArray<struct FZombieCombatStanceVariation2> Get_combatStanceVariations() {
		return memory.read<struct TArray<struct FZombieCombatStanceVariation2>>(m_addr + 2040);
	}
	struct FZombieTurnMontageDescription Get_turnMontageDescriptions[4]() {
		return memory.read<struct FZombieTurnMontageDescription>(m_addr + 2056);
	}
	struct UAnimMontage Get_gettingUpMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2216);
		return struct UAnimMontage(ptr_addr);
	}
	struct TArray<struct UAnimMontage> Get_intimidateMontages() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2224);
		return struct TArray<struct UAnimMontage>(ptr_addr);
	}
	struct TArray<struct FZombieAttackDescription> Get_attacks() {
		return memory.read<struct TArray<struct FZombieAttackDescription>>(m_addr + 2240);
	}
	struct FGameplayTag Get_hitReactType() {
		return memory.read<struct FGameplayTag>(m_addr + 2256);
	}
	float Get_explosionDamageMultiplier() {
		return memory.read<float>(m_addr + 2264);
	}
	float Get_ragdollHitImpulseStrengthPerUnitDamage() {
		return memory.read<float>(m_addr + 2268);
	}
	float Get_minDynamicMovementBaseSpeedForRagdoll() {
		return memory.read<float>(m_addr + 2272);
	}
	float Get_eyeViewPointOffset() {
		return memory.read<float>(m_addr + 2276);
	}
	struct FName Get_centralBone() {
		return memory.read<struct FName>(m_addr + 2280);
	}
	float Get_collisionDamageMultiplierPerBodyPart[c]() {
		return memory.read<float>(m_addr + 2288);
	}
	float Get_receivedDamageComboCooldown() {
		return memory.read<float>(m_addr + 2336);
	}
	float Get_receivedMeleeHitComboCooldown() {
		return memory.read<float>(m_addr + 2340);
	}
	float Get_inflictedMeleeHitComboCooldown() {
		return memory.read<float>(m_addr + 2344);
	}
	float Get_minRagdollRecoveryTimeAfterKnockout() {
		return memory.read<float>(m_addr + 2348);
	}
	float Get_maxRagdollRecoveryTimeAfterKnockout() {
		return memory.read<float>(m_addr + 2352);
	}
	float Get_minLandingImpactSpeedForDamage() {
		return memory.read<float>(m_addr + 2356);
	}
	float Get_landingDamagePerImpactSpeed() {
		return memory.read<float>(m_addr + 2360);
	}
	float Get_landingImpactSpeedForRagdoll() {
		return memory.read<float>(m_addr + 2364);
	}
	float Get_minRagdollRecoveryTimeAfterLanding() {
		return memory.read<float>(m_addr + 2368);
	}
	float Get_maxRagdollRecoveryTimeAfterLanding() {
		return memory.read<float>(m_addr + 2372);
	}
	struct ULandingEffects Get_landingEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2376);
		return struct ULandingEffects(ptr_addr);
	}
	bool Get_canEverBeSearched() {
		return memory.read<bool>(m_addr + 2384);
	}
	bool Get_shouldGoToRagdollOnDeath() {
		return memory.read<bool>(m_addr + 2385);
	}
	struct UParticleSystem Get_deathParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2392);
		return struct UParticleSystem(ptr_addr);
	}
	struct FTransform Get_deathParticlesRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 2400);
	}
	float Get_corpseSearchDuration() {
		return memory.read<float>(m_addr + 2448);
	}
	float Get_corpseMaxLifeTimeInMinutes() {
		return memory.read<float>(m_addr + 2452);
	}
	float Get_destroyCorpseTimerInterval() {
		return memory.read<float>(m_addr + 2456);
	}
	float Get_minDistanceToPlayerPawnOrSpectatorToDestroyCorpse() {
		return memory.read<float>(m_addr + 2460);
	}
	uint32_t Get_packedZombieVariationIndices() {
		return memory.read<uint32_t>(m_addr + 2464);
	}
	float Get_hitPoints() {
		return memory.read<float>(m_addr + 2468);
	}
	float Get_inflictedMeleeDamageMultiplier() {
		return memory.read<float>(m_addr + 2472);
	}
	float Get_health() {
		return memory.read<float>(m_addr + 2476);
	}
	bool Get_isSearched() {
		return memory.read<bool>(m_addr + 2480);
	}
	uint8_t  Get_stance() {
		return memory.read<uint8_t >(m_addr + 2482);
	}
	struct TWeakObjectPtr<APawn> Get_foe() {
		return memory.read<struct TWeakObjectPtr<APawn>>(m_addr + 2484);
	}
	float Get_inflictedDamageMultiplierConfig() {
		return memory.read<float>(m_addr + 2616);
	}
	uint8_t  Get_fatalBodyPartHit() {
		return memory.read<uint8_t >(m_addr + 2620);
	}
	float Get_drownDamageCycleLength() {
		return memory.read<float>(m_addr + 2624);
	}
	float Get_drownDamagePerCycle() {
		return memory.read<float>(m_addr + 2628);
	}

private:
	std::uint64_t m_addr = 0;
};


class UIgnitableItemComponent
{
public:
	UIgnitableItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_canBurnUnderwater() {
		return memory.read<bool>(m_addr + 200);
	}
	bool Get_canBeIgnitedUnderwater() {
		return memory.read<bool>(m_addr + 201);
	}
	bool Get_canBeIgnitedWet() {
		return memory.read<bool>(m_addr + 202);
	}
	bool Get_canBeIgnitedOnGround() {
		return memory.read<bool>(m_addr + 203);
	}
	bool Get_canBePutOut() {
		return memory.read<bool>(m_addr + 204);
	}
	float Get_autoDestroyTimeOnUse() {
		return memory.read<float>(m_addr + 208);
	}
	struct FName Get_effectsSocket() {
		return memory.read<struct FName>(m_addr + 212);
	}
	struct UAnimMontage Get_prisonerIgniteMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAkAudioEvent Get_ignitionAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_extinguishAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UParticleSystem Get_ignitionParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem Get_burningParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem Get_extinguishParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UParticleSystem(ptr_addr);
	}
	struct UNiagaraSystem Get_ignitionNiagaraParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UNiagaraSystem(ptr_addr);
	}
	struct UNiagaraSystem Get_burningNiagaraParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct UNiagaraSystem(ptr_addr);
	}
	struct UNiagaraSystem Get_extinguishNiagaraParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 288);
		return struct UNiagaraSystem(ptr_addr);
	}
	float Get_ignitionParticleDuration() {
		return memory.read<float>(m_addr + 296);
	}
	float Get_particlesLoopDuration() {
		return memory.read<float>(m_addr + 300);
	}
	float Get_extinguishParticleDuration() {
		return memory.read<float>(m_addr + 304);
	}
	uint8_t  Get_repState() {
		return memory.read<uint8_t >(m_addr + 309);
	}
	bool Get_wasEverIgnited() {
		return memory.read<bool>(m_addr + 310);
	}
	float Get_particlesLoopStartBlend() {
		return memory.read<float>(m_addr + 320);
	}
	float Get_noiseLoudnessWhileIgnited() {
		return memory.read<float>(m_addr + 324);
	}
	float Get_noiseLoudnessUpdateFrequencyPerHour() {
		return memory.read<float>(m_addr + 328);
	}
	struct FName Get_burningNoiseTag() {
		return memory.read<struct FName>(m_addr + 332);
	}
	struct TArray<struct FIgnitableItemIgnitionRequirements> Get_ignitionRequirements() {
		return memory.read<struct TArray<struct FIgnitableItemIgnitionRequirements>>(m_addr + 344);
	}
	float Get_ignitionDurationOnTheGround() {
		return memory.read<float>(m_addr + 360);
	}
	bool Get_shouldControlUsage() {
		return memory.read<bool>(m_addr + 364);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFlareTrapItem
{
public:
	AFlareTrapItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent Get_triggerSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2656);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_detonationDelay() {
		return memory.read<float>(m_addr + 2664);
	}
	AProjectile Get_projectileClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2672);
		return AProjectile(ptr_addr);
	}
	struct FVector Get_projectileLocation() {
		return memory.read<struct FVector>(m_addr + 2680);
	}
	struct FRotator Get_projectileRotation() {
		return memory.read<struct FRotator>(m_addr + 2692);
	}
	float Get_projectileMuzzleVelocity() {
		return memory.read<float>(m_addr + 2704);
	}
	float Get_projectileLifetime() {
		return memory.read<float>(m_addr + 2708);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerMetabolismUIDataImpl
{
public:
	UPrisonerMetabolismUIDataImpl(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AGrenadeItem
{
public:
	AGrenadeItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_explosionDamage() {
		return memory.read<float>(m_addr + 2320);
	}
	float Get_explosionOuterRadius() {
		return memory.read<float>(m_addr + 2324);
	}
	float Get_explosionInnerRadius() {
		return memory.read<float>(m_addr + 2328);
	}
	float Get_explosionFalloff() {
		return memory.read<float>(m_addr + 2332);
	}
	float Get_explosionDelay() {
		return memory.read<float>(m_addr + 2336);
	}
	float Get_explosionForce() {
		return memory.read<float>(m_addr + 2340);
	}
	struct FTargetTypeDamageMultiplier Get_explosionTargetTypeMultiplier() {
		return memory.read<struct FTargetTypeDamageMultiplier>(m_addr + 2344);
	}
	float Get_explosionImpulse_OBSOLETE() {
		return memory.read<float>(m_addr + 2360);
	}
	struct UParticleSystem Get_explosionParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2376);
		return struct UParticleSystem(ptr_addr);
	}
	UMatineeCameraShake Get_explosionCameraShakeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2384);
		return UMatineeCameraShake(ptr_addr);
	}
	float Get_hearingDamageRadius() {
		return memory.read<float>(m_addr + 2392);
	}
	struct UAkAudioEvent GetExplosionAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2400);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_explosionAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2408);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_pullPinAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2416);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct USkeletalMeshComponent Get_skeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2424);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UAnimMontage Get_grenadeLongThrowMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2432);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_grenadeLongThrowLoopMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2440);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_grenadeShortThrowMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2448);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_grenadeThrowbackMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2456);
		return struct UAnimMontage(ptr_addr);
	}
	struct FName Get_leverReleasedSocketName() {
		return memory.read<struct FName>(m_addr + 2464);
	}
	struct UParticleSystem Get_leverReleasedPS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2472);
		return struct UParticleSystem(ptr_addr);
	}
	float Get_netCullDistanceSquaredMeters() {
		return memory.read<float>(m_addr + 2480);
	}
	bool Get_pinPulled() {
		return memory.read<bool>(m_addr + 2484);
	}
	float Get_pinPullingDurationOnTheGround() {
		return memory.read<float>(m_addr + 2488);
	}
	struct UTakeInHandsAssetData Get_takeInHandsWhenPinIsPulledAssetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2496);
		return struct UTakeInHandsAssetData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFlashbangItemEffects
{
public:
	AFlashbangItemEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem Get_explosionParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UParticleSystem(ptr_addr);
	}
	UMatineeCameraShake Get_explosionCameraShakeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return UMatineeCameraShake(ptr_addr);
	}
	struct UAkAudioEvent Get_explosionAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_startStunnedSoundEffectsAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_stopStunnedSoundEffectsAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_minFlashbangDurationToStartStunnedSoundEffects() {
		return memory.read<float>(m_addr + 584);
	}
	float Get_fullFlashDuration() {
		return memory.read<float>(m_addr + 588);
	}
	float Get_flashFadeOutDuration() {
		return memory.read<float>(m_addr + 592);
	}
	float Get_flashRadius() {
		return memory.read<float>(m_addr + 596);
	}
	float Get_flashLineTraceDistance() {
		return memory.read<float>(m_addr + 600);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFloatingWidgetCanvas
{
public:
	UFloatingWidgetCanvas(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_StomachFullness
{
public:
	UPrisonerBodySymptom_StomachFullness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_severityVsStomachFullness() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 184);
	}
	struct FRuntimeFloatCurve Get_eatingSpeedModifierVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 320);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScopeableItemComponent
{
public:
	UScopeableItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FScopeZoomLevelSettings> Get_zoomLevelSettings() {
		return memory.read<struct TArray<struct FScopeZoomLevelSettings>>(m_addr + 200);
	}
	struct UTexture2D Get_scopingOverlayTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UTexture2D(ptr_addr);
	}
	float Get_scopingStartDelay() {
		return memory.read<float>(m_addr + 224);
	}
	float Get_scopingStopDelay() {
		return memory.read<float>(m_addr + 228);
	}
	struct UAnimMontage Get_montageStandingFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_montageCrouchingFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_montageProneFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_montageStandingTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_montageCrouchingTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_montageProneTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UAnimMontage(ptr_addr);
	}
	int32_t Get_currentZoomLevel() {
		return memory.read<int32_t>(m_addr + 280);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFocusableWidgetInterface
{
public:
	UFocusableWidgetInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFoliageInstancedBush
{
public:
	UFoliageInstancedBush(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomUIData
{
public:
	UPrisonerBodyConditionOrSymptomUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_isVisibleByDefault() {
		return memory.read<bool>(m_addr + 56);
	}
	struct FText Get_name() {
		return memory.read<struct FText>(m_addr + 64);
	}
	struct FText Get_description() {
		return memory.read<struct FText>(m_addr + 88);
	}
	struct TArray<struct UPrisonerBodyConditionOrSymptomSideEffectUIData> Get_sideEffectsUIData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct TArray<struct UPrisonerBodyConditionOrSymptomSideEffectUIData>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFoodItemState
{
public:
	UFoodItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTemperature() {
		return memory.read<float>(m_addr + 256);
	}
	float GetCookedAmount() {
		return memory.read<float>(m_addr + 260);
	}
	float GetCookedQuality() {
		return memory.read<float>(m_addr + 264);
	}
	bool GetItemOpened() {
		return memory.read<bool>(m_addr + 268);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElementData_ValueWithModifier_Small
{
public:
	UModularTooltipElementData_ValueWithModifier_Small(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UForceUnlockItemTag
{
public:
	UForceUnlockItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFortificationComponent
{
public:
	UFortificationComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem Get_destructionParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent Get_destructionAudio() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct ABuilding Get_parentBuilding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return struct ABuilding(ptr_addr);
	}
	int32_t Get_markerIndex() {
		return memory.read<int32_t>(m_addr + 1280);
	}
	float Get_health() {
		return memory.read<float>(m_addr + 1284);
	}
	float Get_collisionEnergyResistance() {
		return memory.read<float>(m_addr + 1288);
	}
	float Get_explosionResistance() {
		return memory.read<float>(m_addr + 1292);
	}
	float Get_hardness() {
		return memory.read<float>(m_addr + 1296);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFundsOverview
{
public:
	UFundsOverview(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_famePointsText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_rankText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_accountBalanceText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_goldBalanceText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionAddWeaponAttachmentDescription
{
public:
	UPrisonerActionAddWeaponAttachmentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMessage
{
public:
	UMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AGameEventBorder
{
public:
	AGameEventBorder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UMaterialInstanceDynamic GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UChildActorComponent GetSoundSpline() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UChildActorComponent(ptr_addr);
	}
	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UAkAudioEvent(ptr_addr);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 576);
	}
	float Get_desiredRadius() {
		return memory.read<float>(m_addr + 580);
	}
	struct FVector Get_desiredOffset() {
		return memory.read<struct FVector>(m_addr + 588);
	}
	float Get_desiredHeat() {
		return memory.read<float>(m_addr + 612);
	}
	float Get_radiusChangeSpeed() {
		return memory.read<float>(m_addr + 620);
	}
	float Get_offsetChangeSpeed() {
		return memory.read<float>(m_addr + 624);
	}
	float Get_heatChangeSpeed() {
		return memory.read<float>(m_addr + 628);
	}
	bool Get_collisionEnabled() {
		return memory.read<bool>(m_addr + 632);
	}
	bool Get_blockPawns() {
		return memory.read<bool>(m_addr + 633);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameEventLeaderboardWidget
{
public:
	UGameEventLeaderboardWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FEventsRankingStatsItem> GetTopPlayersStats() {
		return memory.read<struct TArray<struct FEventsRankingStatsItem>>(m_addr + 608);
	}
	struct TArray<struct FEventsRankingStatsItem> GetPlayerRankingStats() {
		return memory.read<struct TArray<struct FEventsRankingStatsItem>>(m_addr + 624);
	}
	int32_t GetplayerRank() {
		return memory.read<int32_t>(m_addr + 640);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_InhalationPoisoning
{
public:
	UPrisonerBodyCondition_InhalationPoisoning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_severityVsInhalableSubstanceAmountRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 192);
	}
	float Get_inhalableSubstanceAmountAtRecoveryStart() {
		return memory.read<float>(m_addr + 328);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 332);
	}
	float Get_inhalableSubstanceAmount() {
		return memory.read<float>(m_addr + 340);
	}
	struct FRuntimeFloatCurve Get_inhalableSubstanceMaxAmountVsConstitutionRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 344);
	}
	float Get_baseInhalableSubstanceDiscardRate() {
		return memory.read<float>(m_addr + 480);
	}
	struct FPrisonerBodyBoneGroupsVsSeverity Get_affectedBodyBoneGroupsVsSeverity() {
		return memory.read<struct FPrisonerBodyBoneGroupsVsSeverity>(m_addr + 488);
	}
	struct FPrisonerBodyMuscleGroupsVsSeverity Get_affectedBodyMuscleGroupsVsSeverity() {
		return memory.read<struct FPrisonerBodyMuscleGroupsVsSeverity>(m_addr + 504);
	}
	struct FPrisonerBodyOrganGroupsVsSeverity Get_affectedBodyOrganGroupsVsSeverity() {
		return memory.read<struct FPrisonerBodyOrganGroupsVsSeverity>(m_addr + 520);
	}

private:
	std::uint64_t m_addr = 0;
};


class AGameEventManager
{
public:
	AGameEventManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEventHistoryLimit() {
		return memory.read<int32_t>(m_addr + 544);
	}
	struct TArray<struct AGameEventBase> Get_announcedGameEvents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct TArray<struct AGameEventBase>(ptr_addr);
	}
	struct TArray<struct AGameEventBase> Get_currentGameEvents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct TArray<struct AGameEventBase>(ptr_addr);
	}
	struct TArray<struct AGameEventBase> Get_endedGameEvents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct TArray<struct AGameEventBase>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameEventParticipantStatsWidget
{
public:
	UGameEventParticipantStatsWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameEventBase Get_gameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct AGameEventBase(ptr_addr);
	}
	int32_t Get_index() {
		return memory.read<int32_t>(m_addr + 616);
	}
	struct UGameEventScoreboardWidget Get_scoreboard() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UGameEventScoreboardWidget(ptr_addr);
	}
	int32_t Get_teamIndex() {
		return memory.read<int32_t>(m_addr + 632);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMessageContainer
{
public:
	UMessageContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVerticalBox Get_messages() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UVerticalBox(ptr_addr);
	}
	UMessage Get_messageClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return UMessage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameEventScoreboardWidget
{
public:
	UGameEventScoreboardWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameEventRoundInfoWidget GetRoundInfoWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return UGameEventRoundInfoWidget(ptr_addr);
	}
	UGameEventTeamHeaderWidget GetTeamHeaderWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return UGameEventTeamHeaderWidget(ptr_addr);
	}
	UGameEventParticipantStatsWidget GetStatWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return UGameEventParticipantStatsWidget(ptr_addr);
	}
	struct TArray<struct UGameEventParticipantStatsWidget> GetStatWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct TArray<struct UGameEventParticipantStatsWidget>(ptr_addr);
	}
	struct AGameEventBase Get_gameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct AGameEventBase(ptr_addr);
	}
	int32_t Get_selected() {
		return memory.read<int32_t>(m_addr + 656);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHandsHolstersWidget2
{
public:
	UHandsHolstersWidget2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_slotTypeText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UInventoryContainer2D Get_container() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UInventoryContainer2D(ptr_addr);
	}
	struct UInventoryContainerHandsHolsters Get_handsHolstersContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UInventoryContainerHandsHolsters(ptr_addr);
	}
	struct UTextBlock Get_nameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UInventorySlotUserWidget Get_itemSlotWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UInventorySlotUserWidget(ptr_addr);
	}
	struct UItemWidget2 Get_itemWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UItemWidget2(ptr_addr);
	}
	struct UTextBlock Get_price() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UOverlay Get_priceOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UOverlay(ptr_addr);
	}
	struct UExpandableContainer Get_expandableContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UExpandableContainer(ptr_addr);
	}
	struct UGridPanel Get_inventoryGrid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UGridPanel(ptr_addr);
	}
	struct UInventorySlotUserWidget Get_attachmentSlotWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UInventorySlotUserWidget(ptr_addr);
	}
	struct TArray<struct UInventorySlotUserWidget> Get_slotsWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct TArray<struct UInventorySlotUserWidget>(ptr_addr);
	}
	struct TArray<struct UItemWidget2> Get_attachmentWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct TArray<struct UItemWidget2>(ptr_addr);
	}
	uint8_t  Get_type() {
		return memory.read<uint8_t >(m_addr + 728);
	}
	struct TScriptInterface<IInventoryNode> Get_item() {
		return memory.read<struct TScriptInterface<IInventoryNode>>(m_addr + 736);
	}
	struct FText Get_slotName() {
		return memory.read<struct FText>(m_addr + 752);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameEventTeamHeaderWidget
{
public:
	UGameEventTeamHeaderWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyEffect
{
public:
	UPrisonerBodyEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_id() {
		return memory.read<int32_t>(m_addr + 40);
	}
	float Get_tickInterval() {
		return memory.read<float>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameResourceConsumptionData
{
public:
	UGameResourceConsumptionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetConsumptionMethod() {
		return memory.read<uint8_t >(m_addr + 40);
	}
	struct FGameplayTag GetConsumptionDuration() {
		return memory.read<struct FGameplayTag>(m_addr + 44);
	}
	struct FGameplayTag GetDigestionDuration() {
		return memory.read<struct FGameplayTag>(m_addr + 52);
	}
	float GetDensity() {
		return memory.read<float>(m_addr + 60);
	}
	float GetTotalCarbohydrate() {
		return memory.read<float>(m_addr + 64);
	}
	float GetFiber() {
		return memory.read<float>(m_addr + 68);
	}
	float GetStarch() {
		return memory.read<float>(m_addr + 72);
	}
	float GetSugars() {
		return memory.read<float>(m_addr + 76);
	}
	float GetTotalFat() {
		return memory.read<float>(m_addr + 80);
	}
	float GetSaturatedFat() {
		return memory.read<float>(m_addr + 84);
	}
	float GetProtein() {
		return memory.read<float>(m_addr + 88);
	}
	float GetVitaminA() {
		return memory.read<float>(m_addr + 92);
	}
	float GetVitaminC() {
		return memory.read<float>(m_addr + 96);
	}
	float GetVitaminD() {
		return memory.read<float>(m_addr + 100);
	}
	float GetVitaminE() {
		return memory.read<float>(m_addr + 104);
	}
	float GetVitaminK() {
		return memory.read<float>(m_addr + 108);
	}
	float GetVitaminB1() {
		return memory.read<float>(m_addr + 112);
	}
	float GetVitaminB2() {
		return memory.read<float>(m_addr + 116);
	}
	float GetVitaminB3() {
		return memory.read<float>(m_addr + 120);
	}
	float GetVitaminB6() {
		return memory.read<float>(m_addr + 124);
	}
	float GetVitaminB9() {
		return memory.read<float>(m_addr + 128);
	}
	float GetVitaminB12() {
		return memory.read<float>(m_addr + 132);
	}
	float GetVitaminB5() {
		return memory.read<float>(m_addr + 136);
	}
	float GetVitaminB4() {
		return memory.read<float>(m_addr + 140);
	}
	float GetCalcium() {
		return memory.read<float>(m_addr + 144);
	}
	float GetIron() {
		return memory.read<float>(m_addr + 148);
	}
	float GetMagnesium() {
		return memory.read<float>(m_addr + 152);
	}
	float GetPhosphorus() {
		return memory.read<float>(m_addr + 156);
	}
	float GetPotassium() {
		return memory.read<float>(m_addr + 160);
	}
	float GetSodium() {
		return memory.read<float>(m_addr + 164);
	}
	float GetZinc() {
		return memory.read<float>(m_addr + 168);
	}
	float GetCopper() {
		return memory.read<float>(m_addr + 172);
	}
	float GetManganese() {
		return memory.read<float>(m_addr + 176);
	}
	float GetSelenium() {
		return memory.read<float>(m_addr + 180);
	}
	float GetAlcohol() {
		return memory.read<float>(m_addr + 184);
	}
	float GetWater() {
		return memory.read<float>(m_addr + 188);
	}
	struct TArray<struct FGameResourceConsumptionDataForeignSubstance> GetForeignSubstances() {
		return memory.read<struct TArray<struct FGameResourceConsumptionDataForeignSubstance>>(m_addr + 192);
	}
	float GetDisgustAmountPerGramOfRawFood() {
		return memory.read<float>(m_addr + 208);
	}
	struct TArray<struct UConsumableDigestionHandler> GetDigestionHandlers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct TArray<struct UConsumableDigestionHandler>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UUpdateableNotification
{
public:
	UUpdateableNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AHeatSourceManager
{
public:
	AHeatSourceManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMassOfAdditionalOxygenUsedPerGramOfFuelBurned() {
		return memory.read<float>(m_addr + 544);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameResourceContainerEntityComponentSave
{
public:
	UGameResourceContainerEntityComponentSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UGameResourceType(ptr_addr);
	}
	float GetResourceAmount() {
		return memory.read<float>(m_addr + 48);
	}
	float GetResourceUsageRate() {
		return memory.read<float>(m_addr + 52);
	}
	bool GetResourceUsageEnabled() {
		return memory.read<bool>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Pain
{
public:
	UPrisonerBodySymptomCause_Pain(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_Knockout
{
public:
	UPrisonerBodyCondition_Knockout(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText Get_reason() {
		return memory.read<struct FText>(m_addr + 192);
	}
	float Get_duration() {
		return memory.read<float>(m_addr + 216);
	}
	float Get_elapsedTime() {
		return memory.read<float>(m_addr + 220);
	}
	UPrisonerBodySymptom_Unconsciousness Get_unconsciousnessSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return UPrisonerBodySymptom_Unconsciousness(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Unconsciousness Get_unconsciousnessSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UPrisonerBodySymptomCause_Unconsciousness(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionVoicelineDescription
{
public:
	UPrisonerActionVoicelineDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGameResourceContainerProxyRegistry
{
public:
	UGameResourceContainerProxyRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGameResourceContainerProxyForInfiniteResource
{
public:
	UGameResourceContainerProxyForInfiniteResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType Get_resourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UGameResourceType(ptr_addr);
	}
	struct TArray<struct UBaseItemTag> Get_requiredItemTagsForFilling() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct TArray<struct UBaseItemTag>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHitReactLandingParams
{
public:
	UHitReactLandingParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontageToPlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAnimMontage(ptr_addr);
	}
	float GetRegainControlDurationMultiplier() {
		return memory.read<float>(m_addr + 56);
	}
	struct FFloatInterval GetRagdollImpactSpeedRange() {
		return memory.read<struct FFloatInterval>(m_addr + 60);
	}
	struct FFloatInterval GetRagdollDuration() {
		return memory.read<struct FFloatInterval>(m_addr + 68);
	}
	struct UCurveFloat GetLandingDamageCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetWaterImpactDamageCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerUIDebugDataRequest
{
public:
	UPrisonerUIDebugDataRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGameResourceType_Liquid
{
public:
	UGameResourceType_Liquid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGameResourceType_Alcohol
{
public:
	UGameResourceType_Alcohol(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionVomitDescription
{
public:
	UPrisonerActionVomitDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGameResourceType_Water
{
public:
	UGameResourceType_Water(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSalinity() {
		return memory.read<float>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameResourceType_SoftDrink
{
public:
	UGameResourceType_SoftDrink(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTextStatics
{
public:
	UTextStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AGarden
{
public:
	AGarden(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint16_t Get_gardenId() {
		return memory.read<uint16_t>(m_addr + 544);
	}
	struct FGardenSlotArray Get_gardenSlots() {
		return memory.read<struct FGardenSlotArray>(m_addr + 552);
	}
	struct FIntPoint Get_numSlots() {
		return memory.read<struct FIntPoint>(m_addr + 840);
	}
	float Get_radius() {
		return memory.read<float>(m_addr + 852);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_TrenchFoot
{
public:
	UPrisonerBodyConditionUIData_TrenchFoot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGasMaskTag
{
public:
	UGasMaskTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AGuardedZoneManager
{
public:
	AGuardedZoneManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBillboardComponent Get_sprite() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UBillboardComponent(ptr_addr);
	}
	struct TArray<struct ASentrySpawner2> Get_sentrySpawners() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct TArray<struct ASentrySpawner2>(ptr_addr);
	}
	struct TArray<struct FSentrySpawnerDescription> Get_sentrySpawnerDescriptions() {
		return memory.read<struct TArray<struct FSentrySpawnerDescription>>(m_addr + 568);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemWithSkeletalMesh
{
public:
	AItemWithSkeletalMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetSkeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionCauseUIData_Sepsis
{
public:
	UPrisonerBodyConditionCauseUIData_Sepsis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCutHair
{
public:
	UPrisonerActionCutHair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerThirdPersonSubviewComponent
{
public:
	UPrisonerThirdPersonSubviewComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetSubviewID() {
		return memory.read<uint8_t >(m_addr + 664);
	}
	float GetFieldOfView() {
		return memory.read<float>(m_addr + 668);
	}
	bool GetUseFieldOfViewForLOD() {
		return memory.read<bool>(m_addr + 672);
	}
	bool GetConstrainAspectRatio() {
		return memory.read<bool>(m_addr + 673);
	}
	float GetAspectRatio() {
		return memory.read<float>(m_addr + 676);
	}
	float GetMinViewYaw() {
		return memory.read<float>(m_addr + 680);
	}
	float GetMaxViewYaw() {
		return memory.read<float>(m_addr + 684);
	}
	float GetMinViewPitch() {
		return memory.read<float>(m_addr + 688);
	}
	float GetMaxViewPitch() {
		return memory.read<float>(m_addr + 692);
	}
	float GetLeanOffsetLeft() {
		return memory.read<float>(m_addr + 696);
	}
	float GetLeanOffsetRight() {
		return memory.read<float>(m_addr + 700);
	}
	struct FVector GetGlobalOffset() {
		return memory.read<struct FVector>(m_addr + 704);
	}
	bool GetMirrorAroundXZPlane() {
		return memory.read<bool>(m_addr + 716);
	}
	struct FVector GetMaxLocalOffsetWhenColliding() {
		return memory.read<struct FVector>(m_addr + 720);
	}
	bool GetShouldConstrainTraceOriginToOwnerCapsule() {
		return memory.read<bool>(m_addr + 732);
	}
	float GetOwnerCapsuleContrainBuffer() {
		return memory.read<float>(m_addr + 736);
	}
	struct FVector GetTraceOriginGlobalOffset() {
		return memory.read<struct FVector>(m_addr + 740);
	}
	struct FVector GetTraceOriginRelativeOffset() {
		return memory.read<struct FVector>(m_addr + 752);
	}
	float GetLocalOffsetCurvesBlendSpeed() {
		return memory.read<float>(m_addr + 764);
	}
	struct FLocalOffsetCurves GetLocalOffsetCurves[2]() {
		return memory.read<struct FLocalOffsetCurves>(m_addr + 768);
	}
	struct FName GetAnimationOffsetTZCurveName() {
		return memory.read<struct FName>(m_addr + 832);
	}
	float GetPostProcessBlendWeight() {
		return memory.read<float>(m_addr + 840);
	}
	struct FPostProcessSettings GetPostProcessSettings() {
		return memory.read<struct FPostProcessSettings>(m_addr + 848);
	}
	float GetBlendInDuration() {
		return memory.read<float>(m_addr + 2224);
	}
	float GetBlendOutDuration() {
		return memory.read<float>(m_addr + 2228);
	}
	bool GetShouldScaleProbeWithFOV() {
		return memory.read<bool>(m_addr + 2232);
	}
	struct FVector Get_clippingPreventionOffset() {
		return memory.read<struct FVector>(m_addr + 2260);
	}
	float Get_clippingPreventionSweepLength() {
		return memory.read<float>(m_addr + 2272);
	}
	float Get_clippingPreventionAmount() {
		return memory.read<float>(m_addr + 2276);
	}
	struct FVector Get_clippingPreventionTraceOffset() {
		return memory.read<struct FVector>(m_addr + 2280);
	}
	float Get_minFactorForPrisonerHiding() {
		return memory.read<float>(m_addr + 2292);
	}

private:
	std::uint64_t m_addr = 0;
};


class AGeigerCounter
{
public:
	AGeigerCounter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBasicGameResourceContainerComponent Get_resourceContainerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2328);
		return struct UBasicGameResourceContainerComponent(ptr_addr);
	}
	bool Get_hasVisualIndicator() {
		return memory.read<bool>(m_addr + 2336);
	}
	float Get_maxAmountDetectable() {
		return memory.read<float>(m_addr + 2340);
	}
	float Get_maxDetectionRadius() {
		return memory.read<float>(m_addr + 2344);
	}
	float Get_lightIndicatorBaseEmisiveStrength() {
		return memory.read<float>(m_addr + 2348);
	}
	struct UAkAudioEvent Get_startEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_stopEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2360);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class APrisonerHallucinationIllusion_SpawnFakeItemsThatDisappearOnPickup
{
public:
	APrisonerHallucinationIllusion_SpawnFakeItemsThatDisappearOnPickup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<AFakeItem> Get_fakeItemClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct TArray<AFakeItem>(ptr_addr);
	}
	float Get_fakeItemSpawnChance() {
		return memory.read<float>(m_addr + 560);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPickupItemAssetData
{
public:
	UPickupItemAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGeigerCounterAnimInstance
{
public:
	UGeigerCounterAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_radiationRatio() {
		return memory.read<float>(m_addr + 704);
	}
	bool Get_isTurnedOn() {
		return memory.read<bool>(m_addr + 708);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGenericTooltip
{
public:
	UGenericTooltip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTextBlockStyle GetTextStyle() {
		return memory.read<struct FTextBlockStyle>(m_addr + 608);
	}
	struct UExtendedRichTextBlock GetDescriptionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1232);
		return struct UExtendedRichTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AGib
{
public:
	AGib(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UStaticMeshComponent(ptr_addr);
	}
	float GetShrinkFactor() {
		return memory.read<float>(m_addr + 552);
	}
	float GetImpulseMultiplier() {
		return memory.read<float>(m_addr + 556);
	}

private:
	std::uint64_t m_addr = 0;
};


class UZoneRegistry
{
public:
	UZoneRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolismHumanBodyPanel
{
public:
	UMetabolismHumanBodyPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetColdBodyColor() {
		return memory.read<struct FLinearColor>(m_addr + 608);
	}
	struct FLinearColor GetHotBodyColor() {
		return memory.read<struct FLinearColor>(m_addr + 624);
	}
	float GetBodyTemperaturePreview() {
		return memory.read<float>(m_addr + 640);
	}
	struct UImage Get_img_BodyGlow_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_BodyScan_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_BodyGlow_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_BodyScan_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Head_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Ear_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Ear_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Neck_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Trapezius_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Shoulder_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Shoulder_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Chest_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Arm_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Arm_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Forearm_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Forearm_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Hand_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Hand_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Umbilicus_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Abdomen_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Thigh_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Thigh_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Kneecap_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Kneecap_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Leg_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Leg_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Foot_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Foot_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Footbones_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Footbones_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Legbones_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Legbones_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Thighbone_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Thighbone_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Pelvis_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Spine_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Handbones_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Handbones_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Forearmbones_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 952);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Forearmbones_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Armbone_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Armbone_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 976);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Scapula_Left_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 984);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Scapula_Right_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 992);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Ribcage_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Skull_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1008);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Head_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Ear_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1024);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Ear_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1032);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Neck_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1040);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Trapezius_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1048);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Shoulder_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1056);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Shoulder_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1064);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Chest_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1072);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Arm_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1080);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Arm_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Forearm_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Forearm_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1104);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Hand_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1112);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Hand_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1120);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Umbilicus_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1128);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Abdomen_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1136);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Thigh_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1144);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Thigh_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1152);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Kneecap_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1160);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Kneecap_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1168);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Leg_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1176);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Leg_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1184);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Foot_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1192);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Foot_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1200);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Footbones_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1208);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Footbones_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1216);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Legbones_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1224);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Legbones_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1232);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Thighbone_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1240);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Thighbone_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1248);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Pelvis_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Spine_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Handbones_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Handbones_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1280);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Forearmbones_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1288);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Forearmbones_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1296);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Armbone_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1304);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Armbone_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1312);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Scapula_Left_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1320);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Scapula_Right_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1328);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Ribcage_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1336);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Skull_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1344);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_SpinalCord() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1352);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Lungs() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1360);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_RespiratorySystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1368);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_CirculatorySystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1376);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Colon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1384);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Intestine() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1392);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Bladder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1400);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Liver() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1408);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Kidneys() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1416);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_AdrenalGlands() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1424);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Gallbladder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1432);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Pancreas() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1440);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Stomach() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1448);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Heart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1456);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Spleen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1464);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Brain() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1472);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Reproductive_Male() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1480);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_img_Reproductive_Female() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1488);
		return struct UImage(ptr_addr);
	}
	struct UButton Get_btn_EntireBody() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1496);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_btn_HeadRegion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1504);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_btn_RightLegRegion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1512);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_btn_LeftLegRegion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1520);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_btn_TorsoRegion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1528);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_btn_RightArmRegion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1536);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_btn_LeftArmRegion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1544);
		return struct UButton(ptr_addr);
	}
	struct UOverlay Get_mainOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1552);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay Get_maleOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1560);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay Get_femaleOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1568);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay Get_bothOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1576);
		return struct UOverlay(ptr_addr);
	}
	struct UWidgetAnimation Get_focusBodyRegion_Head() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1584);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation Get_focusBodyRegion_Torso() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1592);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation Get_focusBodyRegion_LeftArm() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1600);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation Get_focusBodyRegion_RightArm() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1608);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation Get_focusBodyRegion_LeftLeg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1616);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation Get_focusBodyRegion_RightLeg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1624);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UImage Get_vignette() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1632);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHandheldLightItemAnimInstance
{
public:
	UHandheldLightItemAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_lightAngle() {
		return memory.read<float>(m_addr + 696);
	}

private:
	std::uint64_t m_addr = 0;
};


class AGlobalBirdSpawner2
{
public:
	AGlobalBirdSpawner2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMaxSpawnInstances() {
		return memory.read<int32_t>(m_addr + 544);
	}
	int32_t GetMaxCoastalBirdSpawnPerPlayer() {
		return memory.read<int32_t>(m_addr + 548);
	}
	int32_t GetMaxContinentalBirdSpawnPerPlayer() {
		return memory.read<int32_t>(m_addr + 552);
	}
	struct TArray<ABird2> GetCoastalBirds() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct TArray<ABird2>(ptr_addr);
	}
	struct TArray<ABird2> GetContinentalBirds() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct TArray<ABird2>(ptr_addr);
	}
	float GetFlyingBirdSpawnAwayDistanceMin() {
		return memory.read<float>(m_addr + 592);
	}
	float GetFlyingBirdSpawnAwayDistanceMax() {
		return memory.read<float>(m_addr + 596);
	}
	float GetGroundBirdSpawnAwayDistanceMin() {
		return memory.read<float>(m_addr + 600);
	}
	float GetGroundBirdSpawnAwayDistanceMax() {
		return memory.read<float>(m_addr + 604);
	}
	float GetMinSpawnInfrontDistance() {
		return memory.read<float>(m_addr + 608);
	}
	struct FGameplayTag GetBirdSpawnerMask() {
		return memory.read<struct FGameplayTag>(m_addr + 612);
	}
	int32_t GetBulkSpawn() {
		return memory.read<int32_t>(m_addr + 620);
	}
	struct TArray<char EPhysicalSurface> GetAllowedSurfaces() {
		return memory.read<struct TArray<char EPhysicalSurface>>(m_addr + 624);
	}
	struct UBillboardComponent GetSprite() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UBillboardComponent(ptr_addr);
	}
	struct TArray<struct ABird2> Get_birds() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct TArray<struct ABird2>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyAbrasionsStatics
{
public:
	UPrisonerBodyAbrasionsStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGlobalUIData
{
public:
	UGlobalUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UModularTooltip GetDefaultModularTooltipClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UModularTooltip(ptr_addr);
	}
	struct TMap<UModularTooltipElementData, UModularTooltipElement*> GetModularTooltipElementClassMapping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TMap<UModularTooltipElementData, UModularTooltipElement*>(ptr_addr);
	}
	UMessageBox GetMessageBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return UMessageBox(ptr_addr);
	}
	ULogoutMessageBox GetLogoutMessageBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return ULogoutMessageBox(ptr_addr);
	}
	UMessageBoxWithList GetMessageBoxWithList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return UMessageBoxWithList(ptr_addr);
	}
	UMessageBox GetPartialPriceSellConfirmation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return UMessageBox(ptr_addr);
	}
	UUserWidget GetMessageBoxButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetLabeledSliderWithNumber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetLabeledCarousel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetLabeledDropdown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetLabeledTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGradedArcedProgressBar
{
public:
	UGradedArcedProgressBar(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_fillImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UMaterialInstanceConstant Get_fillMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMaterialInstanceConstant(ptr_addr);
	}
	struct FLinearColor Get_fillColorStart() {
		return memory.read<struct FLinearColor>(m_addr + 624);
	}
	struct FLinearColor Get_fillColorMiddle() {
		return memory.read<struct FLinearColor>(m_addr + 640);
	}
	struct FLinearColor Get_fillColorEnd() {
		return memory.read<struct FLinearColor>(m_addr + 656);
	}
	float Get_maxRateOfChangePerSecond() {
		return memory.read<float>(m_addr + 672);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKillBoxDetectionField
{
public:
	AKillBoxDetectionField(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGraphicsSettingsManager
{
public:
	UGraphicsSettingsManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWaterDetectionComponent
{
public:
	UWaterDetectionComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_waterImmersionDepthLimitWhenEquipped() {
		return memory.read<float>(m_addr + 248);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHandgunSkill
{
public:
	UHandgunSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AHandheldLightItem
{
public:
	AHandheldLightItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_currentLightAngleIndex() {
		return memory.read<int32_t>(m_addr + 2320);
	}
	struct TArray<float> Get_possibleLightAngles() {
		return memory.read<struct TArray<float>>(m_addr + 2328);
	}
	float Get_minIntensityValue() {
		return memory.read<float>(m_addr + 2344);
	}
	float Get_intensityChangeStep() {
		return memory.read<float>(m_addr + 2348);
	}
	struct UBasicGameResourceContainerComponent Get_resourceContainerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct UBasicGameResourceContainerComponent(ptr_addr);
	}
	char Get_lightIntensityReplicated() {
		return memory.read<char>(m_addr + 2364);
	}
	bool Get_canChangeLightIntensity() {
		return memory.read<bool>(m_addr + 2365);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemStatics
{
public:
	UItemStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AHandheldSkeletalMeshLightItem
{
public:
	AHandheldSkeletalMeshLightItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetSkeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2368);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHasOwningUser
{
public:
	UHasOwningUser(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHealthWidget
{
public:
	UHealthWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHeatSourceDebuggerEntitySetup
{
public:
	UHeatSourceDebuggerEntitySetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHeatSourceEntityComponentState
{
public:
	UHeatSourceEntityComponentState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UGameResourceType(ptr_addr);
	}
	float GetDesiredHeatIntensity() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismHealthPanel
{
public:
	UMetabolismHealthPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolism_BCU_ICU_Monitor Get_icuMonitor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMetabolism_BCU_ICU_Monitor(ptr_addr);
	}
	struct UMetabolismBodyOverviewPanel Get_bodyOverviewPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismBodyOverviewPanel(ptr_addr);
	}
	struct UMetabolismTreatmentPanel Get_treatmentPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMetabolismTreatmentPanel(ptr_addr);
	}
	struct UButton Get_resetHealthPanelToSelf() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UButton(ptr_addr);
	}
	struct UPanelWidget Get_healthPanelNormal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UPanelWidget(ptr_addr);
	}
	struct UPanelWidget Get_healthPanelOutOfRange() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UPanelWidget(ptr_addr);
	}
	struct UWidgetSwitcher Get_healthPanelSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock Get_patientName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	UTextOnlyTooltip Get_tooltipClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return UTextOnlyTooltip(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHeatSourceItemTag
{
public:
	UHeatSourceItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHeatSource GetHeatSource() {
		return memory.read<struct FHeatSource>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class AHeatSourceMarker
{
public:
	AHeatSourceMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent Get_sceneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USceneComponent(ptr_addr);
	}
	struct FHeatSourceParameters Get_heatSourceParameters() {
		return memory.read<struct FHeatSourceParameters>(m_addr + 560);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHeatSourceMarkersComponent
{
public:
	UHeatSourceMarkersComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FHeatSource> Get_heatSources() {
		return memory.read<struct TArray<struct FHeatSource>>(m_addr + 504);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHitReactComponent
{
public:
	UHitReactComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UHitReactMapping> GetHitReactMappings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct UHitReactMapping>(ptr_addr);
	}
	struct FPhysicalHitReactData GetPhysicalHitReactData() {
		return memory.read<struct FPhysicalHitReactData>(m_addr + 216);
	}
	struct FName GetRagdollConstraintProfileName() {
		return memory.read<struct FName>(m_addr + 240);
	}
	float GetRagdollRestThresholdSingleBodyMax() {
		return memory.read<float>(m_addr + 248);
	}
	float GetRagdollRestThresholdAverageBodyMax() {
		return memory.read<float>(m_addr + 252);
	}
	struct FName Get_pelvisBoneName() {
		return memory.read<struct FName>(m_addr + 296);
	}
	struct FName Get_rootBoneName() {
		return memory.read<struct FName>(m_addr + 304);
	}
	struct UAnimMontage Get_getUpFromFaceMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_getUpFromBackMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct UAnimMontage(ptr_addr);
	}
	bool Get_shouldSnapToServerLocation() {
		return memory.read<bool>(m_addr + 328);
	}
	uint8_t  Get_ragdollTransitionState() {
		return memory.read<uint8_t >(m_addr + 442);
	}
	struct FVector Get_serverRagdollLocation() {
		return memory.read<struct FVector>(m_addr + 444);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMechanicRepairService
{
public:
	UMechanicRepairService(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHitReactMapping
{
public:
	UHitReactMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagContainer GetHitReactTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 48);
	}
	float GetRegainControlMultiplier() {
		return memory.read<float>(m_addr + 80);
	}
	struct FHitReactMagnitudeData GetHeadHit() {
		return memory.read<struct FHitReactMagnitudeData>(m_addr + 88);
	}
	struct FHitReactMagnitudeData GetBodyHit() {
		return memory.read<struct FHitReactMagnitudeData>(m_addr + 376);
	}
	struct FHitReactMagnitudeData GetLegsHit() {
		return memory.read<struct FHitReactMagnitudeData>(m_addr + 664);
	}
	struct FHitReactLandingData GetLandingHit() {
		return memory.read<struct FHitReactLandingData>(m_addr + 952);
	}

private:
	std::uint64_t m_addr = 0;
};


class APesticideItem
{
public:
	APesticideItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetSkeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	uint8_t  Get_type() {
		return memory.read<uint8_t >(m_addr + 2328);
	}
	struct UAnimMontage Get_applyPesticidePrisonerMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2336);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_applyPesticideItemMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2344);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerConsumableDigestionHandler_Exhaustion
{
public:
	UPrisonerConsumableDigestionHandler_Exhaustion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_exhaustionAmountToRecoverPerSubstancesAbsorbedMass() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHoverPanelWidget
{
public:
	UHoverPanelWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHUDNotification
{
public:
	UHUDNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHudWidget
{
public:
	UHudWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCanvasPanel Get_mainCanvasPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UCanvasPanel(ptr_addr);
	}
	struct UQuickAccessBarWidget Get_quickAccessBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UQuickAccessBarWidget(ptr_addr);
	}
	struct UThrowingQuickAccessItemWidget Get_throwingAccess() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UThrowingQuickAccessItemWidget(ptr_addr);
	}
	struct UQuickAccessItemWidget Get_handQuickAccessItemWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UQuickAccessItemWidget(ptr_addr);
	}
	struct UChatWidget Get_chatWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UChatWidget(ptr_addr);
	}
	bool Get_chatOpen() {
		return memory.read<bool>(m_addr + 648);
	}
	struct UMessageContainer Get_messages() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMessageContainer(ptr_addr);
	}
	struct UWarning Get_warningMessage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UWarning(ptr_addr);
	}
	struct UMicInputIndicator Get_micInputIndicator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UMicInputIndicator(ptr_addr);
	}
	struct UVerticalBox Get_warningsVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_killNotificationVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UVerticalBox(ptr_addr);
	}
	UWarningSignWidget Get_warningSignWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return UWarningSignWidget(ptr_addr);
	}
	UKillNotificationWidget Get_killNotificationWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return UKillNotificationWidget(ptr_addr);
	}
	struct UTabMenuReborn Get_tabMenuReborn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTabMenuReborn(ptr_addr);
	}
	struct UObjectivesContainerWidget Get_objectivesContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UObjectivesContainerWidget(ptr_addr);
	}
	struct UMissionResult Get_missionResultWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UMissionResult(ptr_addr);
	}
	struct UDialogueContainerWidget Get_dialogueContainerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UDialogueContainerWidget(ptr_addr);
	}
	struct UInventoryCompletePanel Get_inventoryCompletePanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UInventoryCompletePanel(ptr_addr);
	}
	struct UVicinityContainer3 Get_openContainerInventoryVicinityContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UVicinityContainer3(ptr_addr);
	}
	struct UPrisonerLifeIndicatorsSprite Get_prisonerLifeIndicatorsSprite() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UPrisonerLifeIndicatorsSprite(ptr_addr);
	}
	struct UCompassWidget Get_compassWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UCompassWidget(ptr_addr);
	}
	struct UScreenSpaceHealthWidget Get_screenSpaceHealthWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UScreenSpaceHealthWidget(ptr_addr);
	}
	struct UResourceIndicatorWidget Get_nightVisionGogglesBatteryWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UResourceIndicatorWidget(ptr_addr);
	}
	struct UShotsFiredTrackerWidget Get_shotsFiredTrackerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UShotsFiredTrackerWidget(ptr_addr);
	}
	struct UFishingContainerWidget Get_fishingContainerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UFishingContainerWidget(ptr_addr);
	}
	struct UGrapplingWidget Get_grapplingWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UGrapplingWidget(ptr_addr);
	}
	struct UMusicPlayerDisplayWidget Get_musicPlayerDisplayWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UMusicPlayerDisplayWidget(ptr_addr);
	}
	struct UFishingTrophyWidget Get_fishingTrophyWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UFishingTrophyWidget(ptr_addr);
	}
	struct UVehicleHudWidget Get_vehicleHUD() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UVehicleHudWidget(ptr_addr);
	}
	struct UPlasticSurgeryMenuWidget Get_plasticSurgeryPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UPlasticSurgeryMenuWidget(ptr_addr);
	}
	struct UBarberShopMenuWidget Get_barberShopPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UBarberShopMenuWidget(ptr_addr);
	}
	struct USizeBox Get_inventoryCompleteSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct USizeBox(ptr_addr);
	}
	struct UTraderMainPanel Get_traderMainPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UTraderMainPanel(ptr_addr);
	}
	struct UCanvasPanel Get_chatCanvas() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UCanvasPanel(ptr_addr);
	}
	struct UWidgetSwitcher Get_masterSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UMasterMenu Get_masterMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UMasterMenu(ptr_addr);
	}
	struct UFloatingWidgetCanvas Get_floatingWidgetCanvas() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UFloatingWidgetCanvas(ptr_addr);
	}
	struct UGameEventNotificationPanel Get_gameEventNotificationPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UGameEventNotificationPanel(ptr_addr);
	}
	struct UPanelWidget Get_masterHUD() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UPanelWidget(ptr_addr);
	}
	struct UFundsOverview Get_fundsOverview() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UFundsOverview(ptr_addr);
	}
	struct UNotificationPanelWidget Get_notificationPanelWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct UNotificationPanelWidget(ptr_addr);
	}
	struct ULevelUpNotificationWidget Get_levelUpNotification() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 952);
		return struct ULevelUpNotificationWidget(ptr_addr);
	}
	UNotificationWidget Get_notificationWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return UNotificationWidget(ptr_addr);
	}
	struct UNotificationWidget Get_updateableNotification() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct UNotificationWidget(ptr_addr);
	}
	struct FMargin Get_adjustmentPaddingForVicinityWhenTrading() {
		return memory.read<struct FMargin>(m_addr + 976);
	}
	float Get_notificationSoundCooldownInMinutes() {
		return memory.read<float>(m_addr + 996);
	}
	struct UAkAudioEvent Get_playerKillIndicatorSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1080);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UTextBlock Get_debugInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMainMenu
{
public:
	UMainMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UConZStandardButton Get_continueButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_multiplayerButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_singleplayerButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_optionsButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_quitButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UTextBlock Get_selectedCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UVerticalBox Get_messageBoxPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UVerticalBox(ptr_addr);
	}
	struct UTextBlock Get_gameVersionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct FText Get_createOrSelectCharacterText() {
		return memory.read<struct FText>(m_addr + 672);
	}
	struct FText Get_quitMessageBoxText() {
		return memory.read<struct FText>(m_addr + 696);
	}

private:
	std::uint64_t m_addr = 0;
};


class AInfluenceAreaVisualizer
{
public:
	AInfluenceAreaVisualizer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent Get_staticMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UIngredientEmptyCraftingCondition
{
public:
	UIngredientEmptyCraftingCondition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSlotIndex() {
		return memory.read<int32_t>(m_addr + 40);
	}
	struct FString GetSlotName() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionTreatInteraction_ApplyBandagesOrDisinfect
{
public:
	UPrisonerBodyConditionTreatInteraction_ApplyBandagesOrDisinfect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPBCTI_ApplyBandagesOrDisinfect_DisinfectData Get_disinfectData() {
		return memory.read<struct FPBCTI_ApplyBandagesOrDisinfect_DisinfectData>(m_addr + 160);
	}
	struct FPBCTI_ApplyBandagesOrDisinfect_ApplyBandagesData Get_applyBandagesData() {
		return memory.read<struct FPBCTI_ApplyBandagesOrDisinfect_ApplyBandagesData>(m_addr + 216);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionTreatInteractionItemTag
{
public:
	UPrisonerBodyConditionTreatInteractionItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInjectableSubstance
{
public:
	UInjectableSubstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerSkillComponent
{
public:
	UPrisonerSkillComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerInitialSkillInfo> GetInitialSkills() {
		return memory.read<struct TArray<struct FPrisonerInitialSkillInfo>>(m_addr + 176);
	}
	float GetTickFrequency() {
		return memory.read<float>(m_addr + 192);
	}
	struct TArray<struct USkill> Get_skills() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct TArray<struct USkill>(ptr_addr);
	}
	struct TArray<struct USkillAction> Get_actions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct TArray<struct USkillAction>(ptr_addr);
	}
	struct USkillClasses Get_skillClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 408);
		return struct USkillClasses(ptr_addr);
	}
	struct TArray<struct AItem> Get_lastSurroundingItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 416);
		return struct TArray<struct AItem>(ptr_addr);
	}
	struct TArray<struct FSkillRecord> Get_replicatedSkills() {
		return memory.read<struct TArray<struct FSkillRecord>>(m_addr + 568);
	}
	uint32_t Get_replicatedNoiseLevel() {
		return memory.read<uint32_t>(m_addr + 588);
	}
	float Get_skillReplicationPeriod() {
		return memory.read<float>(m_addr + 596);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInputDataAsset
{
public:
	UInputDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FInputActionKeyMapping> GetActionMappings() {
		return memory.read<struct TArray<struct FInputActionKeyMapping>>(m_addr + 48);
	}
	struct TArray<struct FInputAxisKeyMapping> GetAxisMappings() {
		return memory.read<struct TArray<struct FInputAxisKeyMapping>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCollectSeedsDescription
{
public:
	UPrisonerActionCollectSeedsDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USimpleTextDropdownEntry
{
public:
	USimpleTextDropdownEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_background() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_label() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct FLinearColor Get_black() {
		return memory.read<struct FLinearColor>(m_addr + 640);
	}
	struct FLinearColor Get_white() {
		return memory.read<struct FLinearColor>(m_addr + 656);
	}
	int32_t Get_singleIndentationValue() {
		return memory.read<int32_t>(m_addr + 672);
	}

private:
	std::uint64_t m_addr = 0;
};


class UThrowableItemTag
{
public:
	UThrowableItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMeleeWeaponDesc GetWeaponDesc() {
		return memory.read<struct FMeleeWeaponDesc>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInputWidget
{
public:
	UInputWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher GetControlsWidgetSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UCarousel Get_sectionSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UCarousel(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInspectedItemWidget
{
public:
	UInspectedItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemClassWidget GetItemWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UItemClassWidget(ptr_addr);
	}
	struct UTextBlock GetSkillText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetSkillLevelText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULockpickableLocksVisualComponent
{
public:
	ULockpickableLocksVisualComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> Get_lockStaticMeshComponentNames() {
		return memory.read<struct TArray<struct FString>>(m_addr + 520);
	}
	struct UStaticMesh Get_lockMeshPerLockDifficulty[4]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 536);
		return struct UStaticMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInteractionObject
{
public:
	UInteractionObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInteractiveIngredientWidget
{
public:
	UInteractiveIngredientWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher Get_mainSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UImage Get_ingredientIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_overlayHighlight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UImage(ptr_addr);
	}
	struct UWidgetSwitcher Get_quantitySwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock Get_useAmountText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_currentVolumeTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_requiredVolumeTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_mainIngredientIndication() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UImage(ptr_addr);
	}
	struct FLinearColor Get_unacceptableItemDraggedColor() {
		return memory.read<struct FLinearColor>(m_addr + 732);
	}
	struct FLinearColor Get_acceptableItemDraggedColor() {
		return memory.read<struct FLinearColor>(m_addr + 748);
	}
	struct FLinearColor Get_defaultBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 764);
	}
	float Get_uncoloredVignetteExponent() {
		return memory.read<float>(m_addr + 780);
	}
	float Get_coloredVignetteExponent() {
		return memory.read<float>(m_addr + 784);
	}
	struct FLinearColor Get_mainIngredientTriangleColor() {
		return memory.read<struct FLinearColor>(m_addr + 788);
	}
	struct FLinearColor Get_optionalIngredientTriangleColor() {
		return memory.read<struct FLinearColor>(m_addr + 804);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInteriorStaticMeshComponent
{
public:
	UInteriorStaticMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTextBoxWithLabel
{
public:
	UTextBoxWithLabel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_name() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTextBlock(ptr_addr);
	}
	struct UEditableTextBox Get_inputTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UImage Get_focusBackgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_showPasswordOff() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_showPasswordOn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UImage(ptr_addr);
	}
	struct UOverlay Get_showPasswordIconOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UOverlay(ptr_addr);
	}
	struct FText Get_label() {
		return memory.read<struct FText>(m_addr + 760);
	}
	struct FTextBoxWithLabelStyle Get_selectedAndFocusedTWLStyle() {
		return memory.read<struct FTextBoxWithLabelStyle>(m_addr + 784);
	}
	struct FTextBoxWithLabelStyle Get_selectedAndUnfocusedTWLStyle() {
		return memory.read<struct FTextBoxWithLabelStyle>(m_addr + 1128);
	}
	struct FTextBoxWithLabelStyle Get_unselectedTWLStyle() {
		return memory.read<struct FTextBoxWithLabelStyle>(m_addr + 1472);
	}
	struct FTextBoxWithLabelStyle Get_highlightedTWLStyle() {
		return memory.read<struct FTextBoxWithLabelStyle>(m_addr + 1816);
	}
	struct FTextBoxWithLabelStyle Get_disabledTWLStyle() {
		return memory.read<struct FTextBoxWithLabelStyle>(m_addr + 2160);
	}
	struct FEditableTextBoxStyle Get_correctInputTextBoxStyle() {
		return memory.read<struct FEditableTextBoxStyle>(m_addr + 2504);
	}
	struct FEditableTextBoxStyle Get_incorrectInputTextBoxStyle() {
		return memory.read<struct FEditableTextBoxStyle>(m_addr + 4544);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionExtinguishItem
{
public:
	UPrisonerActionExtinguishItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInv2021_InventoryContainer
{
public:
	UInv2021_InventoryContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInv2021_InventoryContainerClothes
{
public:
	UInv2021_InventoryContainerClothes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FInventoryContainerClothesElement> Get_replicatedData() {
		return memory.read<struct TArray<struct FInventoryContainerClothesElement>>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class URemoveMagazineInsertMagazineInsertCartridge
{
public:
	URemoveMagazineInsertMagazineInsertCartridge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMontageEndSectionName() {
		return memory.read<struct FName>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInv2021_InventoryElement
{
public:
	UInv2021_InventoryElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInventoryPositionDataClothes
{
public:
	UInventoryPositionDataClothes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInventoryPositionDataHandsHolsters
{
public:
	UInventoryPositionDataHandsHolsters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionExecuteBodyConditionInteractionDescription
{
public:
	UPrisonerActionExecuteBodyConditionInteractionDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetBeginInteractionPatientAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetEndInteractionPatientAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALocationTrigger
{
public:
	ALocationTrigger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform Get_markerTransform() {
		return memory.read<struct FTransform>(m_addr + 560);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryItemWidget2Test
{
public:
	UInventoryItemWidget2Test(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_itemIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_itemCaption() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryContainerWidget2Test
{
public:
	UInventoryContainerWidget2Test(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_itemIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_itemCaption() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UVerticalBox Get_itemContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UVerticalBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryPanelWidget2Test
{
public:
	UInventoryPanelWidget2Test(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScrollBox Get_itemContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UScrollBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryGridWidget
{
public:
	UInventoryGridWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_image() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryItemData
{
public:
	UInventoryItemData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElement_ValueWithModifier
{
public:
	UModularTooltipElement_ValueWithModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_nameTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_currentValueTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_baseValueTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_modifierSignTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_modifierTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryItem
{
public:
	UInventoryItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInventoryItemComponentState
{
public:
	UInventoryItemComponentState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FDbIntegerId> GetContainedElementsIds() {
		return memory.read<struct TArray<struct FDbIntegerId>>(m_addr + 64);
	}
	struct TArray<struct FInv2021_InventoryPosition2D> GetContainedElementsPositions() {
		return memory.read<struct TArray<struct FInv2021_InventoryPosition2D>>(m_addr + 80);
	}
	float GetContainedItemsWeight() {
		return memory.read<float>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryPanelSideLayerWidget
{
public:
	UInventoryPanelSideLayerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemWidget2 Get_itemWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UItemWidget2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventoryPanelThirdIteration
{
public:
	UInventoryPanelThirdIteration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UHandsHolstersWidget2 GetHands() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UHandsHolstersWidget2(ptr_addr);
	}
	struct UHandsHolstersWidget2 GetLeftHolster() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UHandsHolstersWidget2(ptr_addr);
	}
	struct UHandsHolstersWidget2 GetRightHolster() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UHandsHolstersWidget2(ptr_addr);
	}
	struct TWeakObjectPtr<ACharacter> Get_displayedCharacter() {
		return memory.read<struct TWeakObjectPtr<ACharacter>>(m_addr + 632);
	}
	struct UTabContainer Get_tabRow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTabContainer(ptr_addr);
	}
	struct UScrollBox Get_inventoriesScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UScrollBox(ptr_addr);
	}
	struct UVerticalBox Get_nonContainerBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_nonTradingBits() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_tradingBits() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UVerticalBox(ptr_addr);
	}
	struct UWidgetSwitcher Get_inventoryAndHolstersSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher Get_inventoryTradingSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock Get_playerName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_availabilityOverlayImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UImage(ptr_addr);
	}
	struct TMap<struct TWeakObjectPtr<UObject>, struct UItemInventoryWidget2> Get_inventories() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct TMap<struct TWeakObjectPtr<UObject>, struct UItemInventoryWidget2>(ptr_addr);
	}
	struct TMap<struct TWeakObjectPtr<UObject>, struct UInventoryPanelSideLayerWidget> Get_sideLayers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct TMap<struct TWeakObjectPtr<UObject>, struct UInventoryPanelSideLayerWidget>(ptr_addr);
	}
	struct TMap<struct TWeakObjectPtr<UObject>, struct UItemWidget2> Get_nonContainerItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct TMap<struct TWeakObjectPtr<UObject>, struct UItemWidget2>(ptr_addr);
	}
	struct FMargin Get_nonContainerItemsPadding() {
		return memory.read<struct FMargin>(m_addr + 952);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInventorySlotUserWidget
{
public:
	UInventorySlotUserWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetHasItem() {
		return memory.read<bool>(m_addr + 608);
	}
	struct UImage GetImageWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct USizeBox GetSizeBoxWrapper() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct USizeBox(ptr_addr);
	}
	struct UBaseItemContainerWidget GetParentContainerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UBaseItemContainerWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UIsUnmountedOrMountedOnGroundCondition
{
public:
	UIsUnmountedOrMountedOnGroundCondition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UObjectStatics
{
public:
	UObjectStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemActionDescription
{
public:
	UItemActionDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionExtinguishFireDescription
{
public:
	UPrisonerActionExtinguishFireDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemAction
{
public:
	UItemAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemActionDescription Get_description() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UItemActionDescription(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemActionSequenceDescription
{
public:
	UItemActionSequenceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemActionSequenceLoadMagazine_M1Clip
{
public:
	UItemActionSequenceLoadMagazine_M1Clip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCheckWeaponFiringModeDescription
{
public:
	UPrisonerActionCheckWeaponFiringModeDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemContainerManager
{
public:
	AItemContainerManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct AItemContainer, struct FBox2D> Get_itemContainers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct TMap<struct AItemContainer, struct FBox2D>(ptr_addr);
	}
	struct TMap<struct FDbIntegerId, struct FItemContainersArray> Get_itemContainersOwned() {
		return memory.read<struct TMap<struct FDbIntegerId, struct FItemContainersArray>>(m_addr + 696);
	}
	struct FItemContainersReplicationHelper Get_itemContainersDataRepHelper() {
		return memory.read<struct FItemContainersReplicationHelper>(m_addr + 784);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemDropPlaceholder
{
public:
	AItemDropPlaceholder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent Get_rootComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USceneComponent(ptr_addr);
	}
	struct UBoxComponent Get_boxCollisionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UBoxComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_staticMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct USkeletalMeshComponent Get_skeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemInventoryWidget2
{
public:
	UItemInventoryWidget2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UInventoryContainer2D Get_container() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UInventoryContainer2D(ptr_addr);
	}
	struct UCanvasPanel Get_inventoryCanvas() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UCanvasPanel(ptr_addr);
	}
	struct TScriptInterface<IInventoryNode> Get_item() {
		return memory.read<struct TScriptInterface<IInventoryNode>>(m_addr + 632);
	}
	struct UTextBlock Get_nameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UItemWidget2 Get_itemWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UItemWidget2(ptr_addr);
	}
	struct UGridPanel Get_inventoryGrid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UGridPanel(ptr_addr);
	}
	struct UWidget Get_loadingWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UWidget(ptr_addr);
	}
	struct UInventoryGridWidget Get_inventoryGridWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UInventoryGridWidget(ptr_addr);
	}
	struct UHorizontalBox Get_contentBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UCheckBox Get_expandToggle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UCheckBox(ptr_addr);
	}
	struct TArray<struct UInventorySlotUserWidget> Get_slotsWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct TArray<struct UInventorySlotUserWidget>(ptr_addr);
	}
	struct UWidgetAnimation GetBlinkAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct URetainerBox GetRetainerBoxDeadCells() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct URetainerBox(ptr_addr);
	}
	bool Get_canMinimize() {
		return memory.read<bool>(m_addr + 736);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemObstructionStatics
{
public:
	UItemObstructionStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionUncraftItemDescription
{
public:
	UPrisonerActionUncraftItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemRegistry
{
public:
	UItemRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemSelectionSlotWidget
{
public:
	UItemSelectionSlotWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScrollBox Get_selectionScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UScrollBox(ptr_addr);
	}
	struct UTextBlock GetTextBlock_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UVerticalBox GetVerticalBox_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UVerticalBox(ptr_addr);
	}
	struct FText GetName() {
		return memory.read<struct FText>(m_addr + 632);
	}
	UItemSelectionWidget Get_selectionWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return UItemSelectionWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemSelectionWidget
{
public:
	UItemSelectionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_selection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_itemName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UItemSelection Get_itemData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UItemSelection(ptr_addr);
	}
	struct UTexture2D Get_cancelTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTexture2D(ptr_addr);
	}
	struct UAkAudioEvent Get_selectionAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FSlateColor Get_selectedColor() {
		return memory.read<struct FSlateColor>(m_addr + 656);
	}
	struct FSlateColor Get_notSelectedColor() {
		return memory.read<struct FSlateColor>(m_addr + 696);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySimulationComponent
{
public:
	UPrisonerBodySimulationComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerBodySimulationData Get_data() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UPrisonerBodySimulationData(ptr_addr);
	}
	struct TArray<struct UPrisonerBodyEffect> Get_bodyEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1200);
		return struct TArray<struct UPrisonerBodyEffect>(ptr_addr);
	}
	struct UMetabolism Get_metabolism() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1496);
		return struct UMetabolism(ptr_addr);
	}
	uint64_t Get_repState1() {
		return memory.read<uint64_t>(m_addr + 1536);
	}
	uint64_t Get_repState2() {
		return memory.read<uint64_t>(m_addr + 1544);
	}
	uint64_t Get_repState3() {
		return memory.read<uint64_t>(m_addr + 1552);
	}
	uint64_t Get_repState4() {
		return memory.read<uint64_t>(m_addr + 1560);
	}
	uint64_t Get_repState5() {
		return memory.read<uint64_t>(m_addr + 1568);
	}
	char Get_repState6() {
		return memory.read<char>(m_addr + 1576);
	}
	struct TArray<struct UPrisonerBodyEffect> Get_repBodyEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1584);
		return struct TArray<struct UPrisonerBodyEffect>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemSpawnerComponent
{
public:
	UItemSpawnerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetItemSpawnLimit() {
		return memory.read<int32_t>(m_addr + 504);
	}
	struct TArray<struct FItemSpawnerMarker> GetSpawnerMarkers() {
		return memory.read<struct TArray<struct FItemSpawnerMarker>>(m_addr + 512);
	}
	struct FString GetSpawnerGroupName() {
		return memory.read<struct FString>(m_addr + 528);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemSpawnerGroup
{
public:
	AItemSpawnerGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemSpawnerComponent GetSpawnerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UItemSpawnerComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemSpawnerVolume
{
public:
	AItemSpawnerVolume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FItemLocation Getzone() {
		return memory.read<struct FItemLocation>(m_addr + 600);
	}
	float GetItemHealthMultiplier() {
		return memory.read<float>(m_addr + 616);
	}
	float GetProbabilityMultiplier() {
		return memory.read<float>(m_addr + 620);
	}
	float GetExamineProbabilityMultiplier() {
		return memory.read<float>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemSpawningDataRegistry
{
public:
	UItemSpawningDataRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemSpawningManager
{
public:
	AItemSpawningManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemSplitWidget
{
public:
	UItemSplitWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UEditableTextBox Get_currentItemStackAmount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UTextBlock Get_newItemStackAmount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct USlider Get_valueSlider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct USlider(ptr_addr);
	}
	struct UButton Get_splitButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemTooltip
{
public:
	UItemTooltip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemTooltipPanel Get_mainPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UItemTooltipPanel(ptr_addr);
	}
	struct UItemTooltipTab Get_overviewPanels() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UItemTooltipTab(ptr_addr);
	}
	struct UItemTooltipTab Get_additionalPanels() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UItemTooltipTab(ptr_addr);
	}
	struct UImage Get_pageIndicatorBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_expandHintText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UUserWidget GetUI_Border() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UUserWidget(ptr_addr);
	}
	struct UGridPanel Get_pageIndicatorGrid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UGridPanel(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UExtendedRichTextBlock
{
public:
	UExtendedRichTextBlock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Vomiting
{
public:
	UPrisonerBodySymptom_Vomiting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_minimalSubstanceVolumeInStomachRatioToVomit() {
		return memory.read<float>(m_addr + 232);
	}
	struct FFloatInterval Get_retryVomitingInterval() {
		return memory.read<struct FFloatInterval>(m_addr + 236);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_ImmuneSystemEfficiencyModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_ImmuneSystemEfficiencyModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemTooltipPanel
{
public:
	UItemTooltipPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemVirtualizationManager
{
public:
	AItemVirtualizationManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASentryGuardVolume2
{
public:
	ASentryGuardVolume2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVector> Get_hotZonesLocalLocations() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 632);
	}
	struct TArray<struct ABuilding> Get_hotZonesBuildings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct TArray<struct ABuilding>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemWidget2
{
public:
	UItemWidget2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetOnRightClicked() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 608);
	}
	struct UVicinityContainer3 GetParentVicinity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UVicinityContainer3(ptr_addr);
	}
	struct UTextBlock GetLowerLeftTextFirst() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetLowerLeftTextSecond() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTextBlock(ptr_addr);
	}
	struct TMap<struct FName, float> Get_numberData() {
		return memory.read<struct TMap<struct FName, float>>(m_addr + 688);
	}
	struct UProgressBar GetProgressBarDurability() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UProgressBar(ptr_addr);
	}
	struct UProgressBar GetProgressBarUses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UProgressBar(ptr_addr);
	}
	struct UImage GetBackgroundHighlight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UImage(ptr_addr);
	}
	bool Get_isVicinityContainer() {
		return memory.read<bool>(m_addr + 792);
	}
	struct TScriptInterface<IInventoryNode> Get_item() {
		return memory.read<struct TScriptInterface<IInventoryNode>>(m_addr + 800);
	}
	struct TScriptInterface<IInventoryContainer> Get_container() {
		return memory.read<struct TScriptInterface<IInventoryContainer>>(m_addr + 816);
	}
	UObject Get_itemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return UObject(ptr_addr);
	}
	struct UImage Get_icon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UImage(ptr_addr);
	}
	struct USizeBox Get_iconSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct USizeBox(ptr_addr);
	}
	struct UImage Get_background() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UImage(ptr_addr);
	}
	struct UInvalidationBox Get_mainInvalidationBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UInvalidationBox(ptr_addr);
	}
	struct UOverlay Get_priceOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UOverlay(ptr_addr);
	}
	struct UTextBlock Get_priceText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UTextBlock(ptr_addr);
	}
	struct UUniformGridPanel Get_backgroundGrid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UUniformGridPanel(ptr_addr);
	}
	struct UUniformGridPanel Get_foregroundGrid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UUniformGridPanel(ptr_addr);
	}
	struct UOverlay Get_selectionOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UOverlay(ptr_addr);
	}
	uint8_t  Get_widgetType() {
		return memory.read<uint8_t >(m_addr + 944);
	}
	struct UVerticalBox Get_healthPercentageProgressBarVBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 952);
		return struct UVerticalBox(ptr_addr);
	}
	struct UImage Get_irreparableIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_radiationIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct UImage(ptr_addr);
	}
	struct FLinearColor Get_defaultBackgroundColour() {
		return memory.read<struct FLinearColor>(m_addr + 976);
	}
	struct FLinearColor Get_hoveredBackgroundColour() {
		return memory.read<struct FLinearColor>(m_addr + 992);
	}
	struct FLinearColor Get_selectedBackgroundColour() {
		return memory.read<struct FLinearColor>(m_addr + 1008);
	}
	struct FLinearColor Get_selectedHoveredBackgroundColour() {
		return memory.read<struct FLinearColor>(m_addr + 1024);
	}
	struct UHorizontalBox Get_lowerLeftBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1072);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UImage Get_additionalIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1080);
		return struct UImage(ptr_addr);
	}
	struct USizeBox Get_additionalIconSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct USizeBox(ptr_addr);
	}
	struct TArray<struct UTexture2D> Get_temperatureLevelImages() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1168);
		return struct TArray<struct UTexture2D>(ptr_addr);
	}
	struct TArray<struct UTexture2D> Get_wetnessLevelImages() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1184);
		return struct TArray<struct UTexture2D>(ptr_addr);
	}
	struct USizeBox GetMainSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1200);
		return struct USizeBox(ptr_addr);
	}
	struct UImage GetTemperature() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1208);
		return struct UImage(ptr_addr);
	}
	struct UImage GetWetness() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1216);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetUsageSeparator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1224);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetUsesBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1232);
		return struct UImage(ptr_addr);
	}
	struct UImage GetHealthBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1240);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetLowerRightText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1248);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetUpperRightBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetUpperRightText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetUpperLeftBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetUpperLeftText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1280);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetMiddleBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1288);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetMiddleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1296);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetUpperBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1304);
		return struct UImage(ptr_addr);
	}
	struct UImage GetLowerBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1312);
		return struct UImage(ptr_addr);
	}
	struct UWidgetAnimation GetLowerLeftBoxFadeIn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1320);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetLowerLeftBoxFadeOut() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1328);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAdditionalIconFadeIn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1336);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAdditionalIconFadeOut() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1344);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetLowerLeftBoxShow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1352);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTimedTriggerComponentState
{
public:
	UTimedTriggerComponentState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCountdownRemainingTime() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemWidgetDragDropOperation
{
public:
	UItemWidgetDragDropOperation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemFirstPersonAnimationsDataAsset
{
public:
	UItemFirstPersonAnimationsDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FItemFirstPersonUpperBodyAnimationsData GetUpperBody() {
		return memory.read<struct FItemFirstPersonUpperBodyAnimationsData>(m_addr + 48);
	}
	struct UBlendSpace GetAimOffsetStanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace GetAimOffsetCrouching() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace GetAimOffsetProne() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct UBlendSpace(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemWithText
{
public:
	AItemWithText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMaxTextCharactersPerRow() {
		return memory.read<int32_t>(m_addr + 2328);
	}
	int32_t GetMaxTextRows() {
		return memory.read<int32_t>(m_addr + 2332);
	}
	struct UWidgetComponent Get_textWidgetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2336);
		return struct UWidgetComponent(ptr_addr);
	}
	struct FString Get_text() {
		return memory.read<struct FString>(m_addr + 2344);
	}
	struct FDbIntegerId Get_owningUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 2360);
	}

private:
	std::uint64_t m_addr = 0;
};


class UJournalMissionContainer
{
public:
	UJournalMissionContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVerticalBox Get_missionItemWidgetsContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_completedMissionItemWidgetsContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UVerticalBox(ptr_addr);
	}
	struct UOverlay Get_completedMissionsOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UOverlay(ptr_addr);
	}
	struct UTextBlock Get_noContentText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct TMap<AMission, struct TWeakObjectPtr<UMissionItemWidget>> Get_missionItemWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct TMap<AMission, struct TWeakObjectPtr<UMissionItemWidget>>(ptr_addr);
	}
	struct TMap<AMission, struct TWeakObjectPtr<UMissionItemWidget>> Get_completedMissionItemWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct TMap<AMission, struct TWeakObjectPtr<UMissionItemWidget>>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerCreationUIController
{
public:
	UPrisonerCreationUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName Get_editedPrisonerActorTag() {
		return memory.read<struct FName>(m_addr + 740);
	}
	struct FName Get_mugshotPrisonerActorTag() {
		return memory.read<struct FName>(m_addr + 748);
	}
	struct TArray<struct UCharacterMesh> Get_characterMeshesToAddOntoMugshotPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct TArray<struct UCharacterMesh>(ptr_addr);
	}
	struct FGameplayTag Get_femaleTag() {
		return memory.read<struct FGameplayTag>(m_addr + 776);
	}
	struct FGameplayTag Get_maleTag() {
		return memory.read<struct FGameplayTag>(m_addr + 784);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATimedGiftSpawner
{
public:
	ATimedGiftSpawner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t Get_giftSpawnTime() {
		return memory.read<int64_t>(m_addr + 544);
	}
	struct TArray<struct TSoftClassPtr<UObject>> Get_possibleGifts() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 552);
	}
	struct TSoftClassPtr<UObject> Get_referenceItem() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 568);
	}
	float Get_giftOffsetFromReferenceItem() {
		return memory.read<float>(m_addr + 608);
	}

private:
	std::uint64_t m_addr = 0;
};


class UJournalMissionPanel
{
public:
	UJournalMissionPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher Get_journalWidgetSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UJournalMissionContainer Get_mainStoryContainerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UJournalMissionContainer(ptr_addr);
	}
	struct UJournalMissionContainer Get_sideStoryContainerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UJournalMissionContainer(ptr_addr);
	}
	struct UJournalMissionContainer Get_tutorialContainerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UJournalMissionContainer(ptr_addr);
	}
	struct UMissionTabWidget Get_mainStoryTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMissionTabWidget(ptr_addr);
	}
	struct UMissionTabWidget Get_sideStoryTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMissionTabWidget(ptr_addr);
	}
	struct UMissionTabWidget Get_tutorialTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMissionTabWidget(ptr_addr);
	}
	struct UImage Get_firstTabDivider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_secondTabDivider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UImage(ptr_addr);
	}
	struct UAkAudioEvent Get_menuButtonClickAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UJournalObjectiveContainer Get_objectivesContainerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UJournalObjectiveContainer(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_Sepsis
{
public:
	UPrisonerBodyCondition_Sepsis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 208);
	}
	float Get_maxContamination() {
		return memory.read<float>(m_addr + 212);
	}
	float Get_contamination() {
		return memory.read<float>(m_addr + 216);
	}
	float Get_contaminationChangeRate() {
		return memory.read<float>(m_addr + 220);
	}
	float Get_contaminationAtRecoveryStart() {
		return memory.read<float>(m_addr + 224);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 228);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFillGameResourceContainerDescription
{
public:
	UPrisonerActionFillGameResourceContainerDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKeyBinding
{
public:
	UKeyBinding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetActionNameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetActionKeyText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct FText GetUserFriendlyName() {
		return memory.read<struct FText>(m_addr + 672);
	}
	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 696);
	}
	bool GetIsAxis() {
		return memory.read<bool>(m_addr + 704);
	}
	float GetAxisScale() {
		return memory.read<float>(m_addr + 708);
	}
	struct FName GetGroupName() {
		return memory.read<struct FName>(m_addr + 712);
	}
	bool GetCheckOnlySameKeyWithinGroup() {
		return memory.read<bool>(m_addr + 720);
	}
	struct FName GetSameKeyBlockerGroupName() {
		return memory.read<struct FName>(m_addr + 724);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerLoadout
{
public:
	UPrisonerLoadout(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AItem Getprimary() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return AItem(ptr_addr);
	}
	struct TArray<AItem> GetprimaryAttachments() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<AItem>(ptr_addr);
	}
	AItem Getsecondary() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return AItem(ptr_addr);
	}
	struct TArray<AItem> GetsecondaryAttachments() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct TArray<AItem>(ptr_addr);
	}
	AItem Gettertiary() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return AItem(ptr_addr);
	}
	struct TArray<AItem> GettertiaryAttachments() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct TArray<AItem>(ptr_addr);
	}
	struct TArray<AItem> Getoutfit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct TArray<AItem>(ptr_addr);
	}
	struct TArray<AItem> Getsupport() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct TArray<AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVoiceAudioComponent
{
public:
	UVoiceAudioComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVoiceDecoder GetVoiceDecoder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2152);
		return struct UVoiceDecoder(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKillboxComponent
{
public:
	UKillboxComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_isActivated() {
		return memory.read<bool>(m_addr + 176);
	}
	bool Get_isFinale() {
		return memory.read<bool>(m_addr + 177);
	}
	float Get_killBoxDuration() {
		return memory.read<float>(m_addr + 180);
	}
	float Get_lockdownDuration() {
		return memory.read<float>(m_addr + 184);
	}
	float Get_killBoxResetDelay() {
		return memory.read<float>(m_addr + 188);
	}
	float Get_reductionTimeCap() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_reductionTimePenalty() {
		return memory.read<float>(m_addr + 196);
	}
	float Get_saveStateInterval() {
		return memory.read<float>(m_addr + 200);
	}
	float Get_gasEntranceTime() {
		return memory.read<float>(m_addr + 204);
	}
	UPrisonerBodyCondition_KillBoxGasPoisoning Get_gasPoisoningCondition() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return UPrisonerBodyCondition_KillBoxGasPoisoning(ptr_addr);
	}
	float Get_panicModeTimeCut() {
		return memory.read<float>(m_addr + 216);
	}
	float Get_laserEntranceTime() {
		return memory.read<float>(m_addr + 220);
	}
	float Get_finaleEntranceCloseTime() {
		return memory.read<float>(m_addr + 224);
	}
	float Get_difficultyCalibrationTime() {
		return memory.read<float>(m_addr + 228);
	}
	int32_t Get_calibrationPrisonerThreshold() {
		return memory.read<int32_t>(m_addr + 232);
	}
	float Get_zapperDamageModifierPerPrisoner() {
		return memory.read<float>(m_addr + 236);
	}
	float Get_maxZapperDamageModifier() {
		return memory.read<float>(m_addr + 240);
	}
	struct TArray<struct FRoomDifficultyConfiguration> Get_availableDifficultyConfigurations() {
		return memory.read<struct TArray<struct FRoomDifficultyConfiguration>>(m_addr + 248);
	}
	int32_t Get_maxSpawnedZombies() {
		return memory.read<int32_t>(m_addr + 264);
	}
	int32_t Get_maxSpawnedZombiesPerMistake() {
		return memory.read<int32_t>(m_addr + 268);
	}
	int32_t Get_prisonerNumPerGoldDoorZapper() {
		return memory.read<int32_t>(m_addr + 272);
	}
	int32_t Get_maxGoldDoorZappers() {
		return memory.read<int32_t>(m_addr + 276);
	}
	float Get_specialPauseCountdownDuration() {
		return memory.read<float>(m_addr + 280);
	}
	int32_t Get_pauseMaxPrisonerCount() {
		return memory.read<int32_t>(m_addr + 284);
	}
	int32_t Get_spawnMinPrisonerCount() {
		return memory.read<int32_t>(m_addr + 288);
	}
	float Get_specialEventInterval() {
		return memory.read<float>(m_addr + 292);
	}
	float Get_laserQuoteTimeRemainingTrigger() {
		return memory.read<float>(m_addr + 296);
	}
	float Get_gasQuoteTimeRemainingTrigger() {
		return memory.read<float>(m_addr + 300);
	}
	float Get_randomQuoteInterval() {
		return memory.read<float>(m_addr + 304);
	}
	float Get_timedHostBlockTime() {
		return memory.read<float>(m_addr + 308);
	}
	struct TArray<struct UAkAudioEvent> Get_killBoxOpeningQuotes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_killBoxLaserAnnouncementQuotes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 328);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_killBoxDescriptionQuotes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 344);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_killBoxRandomnQuotes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 360);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_killBoxFailureQuotes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 376);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_killBoxGasAnnouncementQuotes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 392);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_killBoxZombieSpawnQuotes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 408);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_killBoxTimePauseQuotes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 424);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct UAkAudioEvent> Get_difficultyCalibrationQuote() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 440);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct UAkAudioEvent GetKillBoxMusicStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 456);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_killBoxMusicStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 464);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_killBoxGasSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 472);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetKillBox30SecondsMark() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 480);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetKillBox10SecondsMark() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 488);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetKillBox5SecondsMark() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 496);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetKillBox4SecondsMark() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 504);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetKillBox3SecondsMark() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 512);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetKillBox2SecondsMark() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 520);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetKillBox1SecondsMark() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 528);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetKillBoxBuzzerSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 536);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct ADoor Get_killBoxEntrance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct ADoor(ptr_addr);
	}
	struct AKillBoxDetectionField Get_detectionField() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct AKillBoxDetectionField(ptr_addr);
	}
	struct UMovableCollisionFieldComponent Get_laserComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UMovableCollisionFieldComponent(ptr_addr);
	}
	struct TArray<struct AKillBoxSpawnPoint> Get_spawnPoints() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct TArray<struct AKillBoxSpawnPoint>(ptr_addr);
	}
	struct TArray<struct AKillBoxSpawnPoint> Get_hardSpawnPoints() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct TArray<struct AKillBoxSpawnPoint>(ptr_addr);
	}
	struct TArray<struct AZombie2> Get_spawnedZombies() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct TArray<struct AZombie2>(ptr_addr);
	}
	struct UAkComponent Get_currentAudioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UAkComponent(ptr_addr);
	}
	struct UAkComponent Get_musicComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UAkComponent(ptr_addr);
	}
	float Get_remainingTime() {
		return memory.read<float>(m_addr + 632);
	}
	float Get_unlockFailureAssistanceBonus() {
		return memory.read<float>(m_addr + 636);
	}
	struct TArray<struct UAkAudioEvent> Get_queuedQuotes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct TArray<struct UAkAudioEvent>(ptr_addr);
	}
	struct TArray<struct ADoor> Get_electricalDoors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct TArray<struct ADoor>(ptr_addr);
	}
	struct TArray<struct FRoomDefinition> Get_roomDefinitions() {
		return memory.read<struct TArray<struct FRoomDefinition>>(m_addr + 768);
	}
	struct TArray<struct UKillBoxTimerWidget> Get_timerWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct TArray<struct UKillBoxTimerWidget>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> Get_gasEmitters() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct UParticleSystemComponent Get_gasMist() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct ASwitch Get_panicButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct ASwitch(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class APlaceableActorBlocker
{
public:
	APlaceableActorBlocker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPresetColorPickerButton
{
public:
	UPresetColorPickerButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher Get_displaySwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UImage Get_coloredPreviewUnhovered() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_coloredPreviewHovered() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_variableOpacityBorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKillBoxSpawnPoint
{
public:
	AKillBoxSpawnPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_openDelay() {
		return memory.read<float>(m_addr + 544);
	}
	float Get_closeDelay() {
		return memory.read<float>(m_addr + 548);
	}
	struct TArray<AZombie2> Get_zombieList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct TArray<AZombie2>(ptr_addr);
	}
	struct ADoor Get_door() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct ADoor(ptr_addr);
	}
	float Get_stableZombieProbability() {
		return memory.read<float>(m_addr + 600);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKillBoxTimerWidget
{
public:
	UKillBoxTimerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_remainingTimeMinutes1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_remainingTimeMinutes2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_remainingTimeSeconds1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_remainingTimeSeconds2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKillFeedNotification
{
public:
	UKillFeedNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKillFeedNotificationDescription
{
public:
	UKillFeedNotificationDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getprefix() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FString GetcharacterName() {
		return memory.read<struct FString>(m_addr + 80);
	}
	struct FString Getsuffix() {
		return memory.read<struct FString>(m_addr + 96);
	}
	bool Getping() {
		return memory.read<bool>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULadderMarkersComponent
{
public:
	ULadderMarkersComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLadderMarker> Get_ladderMarkers() {
		return memory.read<struct TArray<struct FLadderMarker>>(m_addr + 504);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_HeightenedSenses
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_HeightenedSenses(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodySymptom_HeightenedSenses Get_symptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodySymptom_HeightenedSenses(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_HeightenedSenses Get_symptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPrisonerBodySymptomCause_HeightenedSenses(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_intensityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALadderMarkersRegistry
{
public:
	ALadderMarkersRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class APlayerDrone
{
public:
	APlayerDrone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_movementInertiaPlayer() {
		return memory.read<float>(m_addr + 2232);
	}
	struct UCameraComponent Get_firstPersonCameraComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2240);
		return struct UCameraComponent(ptr_addr);
	}
	struct UCameraComponent Get_thirdPersonCameraComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2248);
		return struct UCameraComponent(ptr_addr);
	}
	struct USpringArmComponent Get_springArmComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2256);
		return struct USpringArmComponent(ptr_addr);
	}
	struct UCharacterItemDragComponent Get_itemDragComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2264);
		return struct UCharacterItemDragComponent(ptr_addr);
	}
	struct UMaterialInterface Get_nightVisionMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2272);
		return struct UMaterialInterface(ptr_addr);
	}
	float Get_interactionDistance() {
		return memory.read<float>(m_addr + 2280);
	}
	struct UMaterialInstance Get_itemPlacingMaterialAllowed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2288);
		return struct UMaterialInstance(ptr_addr);
	}
	struct UMaterialInstance Get_itemPlacingMaterialDisallowed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2296);
		return struct UMaterialInstance(ptr_addr);
	}
	struct FLinearColor Get_colorTintWhenInvisible() {
		return memory.read<struct FLinearColor>(m_addr + 2304);
	}
	struct FLinearColor Get_colorTintWhenHidden() {
		return memory.read<struct FLinearColor>(m_addr + 2320);
	}
	struct UActionProgressWidget Get_progressWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2656);
		return struct UActionProgressWidget(ptr_addr);
	}
	struct TWeakObjectPtr<UObject> Get_currentlyDroppingItem() {
		return memory.read<struct TWeakObjectPtr<UObject>>(m_addr + 2668);
	}
	struct UDoorUpgradeWidget Get_doorUpgradeWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2712);
		return struct UDoorUpgradeWidget(ptr_addr);
	}
	uint8_t  Get_droneVisibility() {
		return memory.read<uint8_t >(m_addr + 2720);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALadderMarkersReplicator
{
public:
	ALadderMarkersReplicator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULandingEffects
{
public:
	ULandingEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinImpactSpeedForLightEffects() {
		return memory.read<float>(m_addr + 48);
	}
	float GetMinImpactSpeedForMediumEffects() {
		return memory.read<float>(m_addr + 52);
	}
	float GetMinImpactSpeedForHeavyEffects() {
		return memory.read<float>(m_addr + 56);
	}
	struct UAkAudioEvent GetImpactAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FLandingEffectDataPerPhysicalSurface GetDefault() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 72);
	}
	struct FLandingEffectDataPerPhysicalSurface Getgrass() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 120);
	}
	struct FLandingEffectDataPerPhysicalSurface GetForrestGroundCoastal() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 168);
	}
	struct FLandingEffectDataPerPhysicalSurface GetForrestGroundContinental() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 216);
	}
	struct FLandingEffectDataPerPhysicalSurface GetRock() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 264);
	}
	struct FLandingEffectDataPerPhysicalSurface GetStone() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 312);
	}
	struct FLandingEffectDataPerPhysicalSurface GetGravel() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 360);
	}
	struct FLandingEffectDataPerPhysicalSurface GetGravelBeach() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 408);
	}
	struct FLandingEffectDataPerPhysicalSurface GetPebbles() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 456);
	}
	struct FLandingEffectDataPerPhysicalSurface GetSnow() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 504);
	}
	struct FLandingEffectDataPerPhysicalSurface GetIce() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 552);
	}
	struct FLandingEffectDataPerPhysicalSurface GetSand() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 600);
	}
	struct FLandingEffectDataPerPhysicalSurface GetAsphalt() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 648);
	}
	struct FLandingEffectDataPerPhysicalSurface GetDirt() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 696);
	}
	struct FLandingEffectDataPerPhysicalSurface GetWater() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 744);
	}
	struct FLandingEffectDataPerPhysicalSurface GetWaterOcean() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 792);
	}
	struct FLandingEffectDataPerPhysicalSurface GetCloth() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 840);
	}
	struct FLandingEffectDataPerPhysicalSurface GetMetal() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 888);
	}
	struct FLandingEffectDataPerPhysicalSurface GetAluminium() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 936);
	}
	struct FLandingEffectDataPerPhysicalSurface GetConcrete() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 984);
	}
	struct FLandingEffectDataPerPhysicalSurface GetBrick() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1032);
	}
	struct FLandingEffectDataPerPhysicalSurface GetWood() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1080);
	}
	struct FLandingEffectDataPerPhysicalSurface GetPlastic() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1128);
	}
	struct FLandingEffectDataPerPhysicalSurface GetRubber() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1176);
	}
	struct FLandingEffectDataPerPhysicalSurface GetGlass() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1224);
	}
	struct FLandingEffectDataPerPhysicalSurface GetFolliage() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1272);
	}
	struct FLandingEffectDataPerPhysicalSurface GetBark() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1320);
	}
	struct FLandingEffectDataPerPhysicalSurface GetFlesh() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1368);
	}
	struct FLandingEffectDataPerPhysicalSurface GetRoofTile() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1416);
	}
	struct FLandingEffectDataPerPhysicalSurface GetCeramicsTiles() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1464);
	}
	struct FLandingEffectDataPerPhysicalSurface GetScrap() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1512);
	}
	struct FLandingEffectDataPerPhysicalSurface GetTrunk() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1560);
	}
	struct FLandingEffectDataPerPhysicalSurface GetLeaves() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1608);
	}
	struct FLandingEffectDataPerPhysicalSurface GetPlaster() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1656);
	}
	struct FLandingEffectDataPerPhysicalSurface GetKevlar() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1704);
	}
	struct FLandingEffectDataPerPhysicalSurface GetForceField() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1752);
	}
	struct FLandingEffectDataPerPhysicalSurface GetNoEffect() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1800);
	}
	struct FLandingEffectDataPerPhysicalSurface GetWhiteGravel() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1848);
	}
	struct FLandingEffectDataPerPhysicalSurface GetMud() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1896);
	}
	struct FLandingEffectDataPerPhysicalSurface GetRiverSand() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1944);
	}
	struct FLandingEffectDataPerPhysicalSurface GetGrassContinental() {
		return memory.read<struct FLandingEffectDataPerPhysicalSurface>(m_addr + 1992);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULaserTriggerComponent
{
public:
	ULaserTriggerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBoxComponent GetBoxCollisionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1232);
		return struct UBoxComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetVisualizationMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1240);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct FVector Get_laserDirection() {
		return memory.read<struct FVector>(m_addr + 1248);
	}
	float Get_maxLaserLength() {
		return memory.read<float>(m_addr + 1260);
	}
	float Get_laserThickness() {
		return memory.read<float>(m_addr + 1264);
	}
	float Get_laserHeight() {
		return memory.read<float>(m_addr + 1268);
	}
	struct UStaticMesh Get_visualizationMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return struct UStaticMesh(ptr_addr);
	}
	struct FTransform Get_laserMeshTransform() {
		return memory.read<struct FTransform>(m_addr + 1280);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALevelMarkers
{
public:
	ALevelMarkers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLadderMarker> GetLadderMarkers() {
		return memory.read<struct TArray<struct FLadderMarker>>(m_addr + 544);
	}
	struct TArray<struct FWindowMarker> GetWindowMarkers() {
		return memory.read<struct TArray<struct FWindowMarker>>(m_addr + 560);
	}

private:
	std::uint64_t m_addr = 0;
};


class ARecastNavMesh_LargeAnimals
{
public:
	ARecastNavMesh_LargeAnimals(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ALevelRadiationSource
{
public:
	ALevelRadiationSource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent Get_root() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USceneComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_epicenter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_extents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_falloff() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct FVector Get_epicenterLocation() {
		return memory.read<struct FVector>(m_addr + 576);
	}
	float Get_epicenterRadius() {
		return memory.read<float>(m_addr + 588);
	}
	float Get_maxRadiationAmountIncreaseRate() {
		return memory.read<float>(m_addr + 592);
	}
	float Get_radiationAmountIncreaseRateFalloffExponent() {
		return memory.read<float>(m_addr + 596);
	}
	float Get_radiationNoiseAmountScale() {
		return memory.read<float>(m_addr + 600);
	}
	float Get_radiationNoiseLocationScale() {
		return memory.read<float>(m_addr + 604);
	}
	bool Get_shouldDrawEpicenter() {
		return memory.read<bool>(m_addr + 608);
	}
	bool Get_shouldDrawExtents() {
		return memory.read<bool>(m_addr + 609);
	}
	bool Get_shouldDrawRadiationFalloffVisualization() {
		return memory.read<bool>(m_addr + 610);
	}
	float Get_radiationFalloffVisualizationZBias() {
		return memory.read<float>(m_addr + 612);
	}
	struct UMaterialInterface Get_radiationFalloffVisualizationMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMaterialInterface(ptr_addr);
	}
	bool Get_shouldDrawExtentBounds() {
		return memory.read<bool>(m_addr + 624);
	}
	struct UTextureRenderTarget2D Get_radiationLookupRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	struct UMaterialInterface Get_radiationLookupRenderMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialParameterCollection Get_radiationMaterialParamCollection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMaterialParameterCollection(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULevelUpNotification
{
public:
	ULevelUpNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULevelUpNotificationDescription
{
public:
	ULevelUpNotificationDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	USkill GetSkill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return USkill(ptr_addr);
	}
	uint8_t  GetskillLevel() {
		return memory.read<uint8_t >(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiftComponent
{
public:
	ULiftComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAerodynamicSurface> GetAerodynamicSurfaces() {
		return memory.read<struct TArray<struct FAerodynamicSurface>>(m_addr + 504);
	}
	struct FVector GetPropellerLocation() {
		return memory.read<struct FVector>(m_addr + 520);
	}
	float GetAirDensity() {
		return memory.read<float>(m_addr + 532);
	}
	float GetMaxForceMagnitude() {
		return memory.read<float>(m_addr + 536);
	}
	float GetWindInfluenceMultiplier() {
		return memory.read<float>(m_addr + 540);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_Test
{
public:
	UPrisonerBodyCondition_Test(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_severityVsElapsedTime() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 192);
	}
	bool Get_shouldBeRemovedWhenTimeElapses() {
		return memory.read<bool>(m_addr + 328);
	}
	float Get_elapsedTime() {
		return memory.read<float>(m_addr + 332);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULoadingIconWidget
{
public:
	ULoadingIconWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULoadingScreen
{
public:
	ULoadingScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponCrossbowAnimInstance
{
public:
	UWeaponCrossbowAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_isCocked() {
		return memory.read<bool>(m_addr + 776);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerUIDebugData
{
public:
	UPrisonerUIDebugData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ALocationMarker
{
public:
	ALocationMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ALocationObjective
{
public:
	ALocationObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<ALocationTrigger> Get_locationTrigger() {
		return memory.read<struct TSoftObjectPtr<ALocationTrigger>>(m_addr + 800);
	}
	ALocationMarker Get_locationMarkerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return ALocationMarker(ptr_addr);
	}
	bool Get_shouldRemoveObjectiveItem() {
		return memory.read<bool>(m_addr + 848);
	}
	AItem Get_objectiveItemToRemove() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return AItem(ptr_addr);
	}
	struct AActor Get_locationMarker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULockpickable
{
public:
	ULockpickable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ALockpickingMinigame
{
public:
	ALockpickingMinigame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent Get_outerRing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_movableRing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct USceneComponent Get_lockpickingSetAnchor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct USceneComponent(ptr_addr);
	}
	struct USceneComponent Get_lockpickManipulator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct USceneComponent(ptr_addr);
	}
	struct USceneComponent Get_lockpickAnchor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct USceneComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_lockpick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct USceneComponent Get_tensionToolManipulator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct USceneComponent(ptr_addr);
	}
	struct USceneComponent Get_tensionToolAnchor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct USceneComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_tensionTool() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct FVector Get_zoomStartLocation() {
		return memory.read<struct FVector>(m_addr + 832);
	}
	struct FVector Get_zoomEndLocation() {
		return memory.read<struct FVector>(m_addr + 844);
	}
	struct FTransform Get_protectionParticlesTransform() {
		return memory.read<struct FTransform>(m_addr + 864);
	}
	struct UCurveFloat Get_zoomCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_fadeCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_pickBreakingMultiplierForMediumDifficulty() {
		return memory.read<float>(m_addr + 928);
	}
	float Get_pickBreakingMultiplierForHardDifficulty() {
		return memory.read<float>(m_addr + 932);
	}
	struct UAkAudioEvent Get_lockpickingLockpickMovementStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 984);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_lockpickingLockpickMovementStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 992);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_lockpickingLockTensionStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_lockpickingLockTensionStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1008);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_lockpickingLockTurningStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_lockpickingLockTurningStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1024);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_lockpickingSuccessAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1032);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_lockpickingFailedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1040);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_lockpickingResetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1048);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_rotatingStartAngle() {
		return memory.read<float>(m_addr + 1060);
	}
	float Get_duration() {
		return memory.read<float>(m_addr + 1064);
	}
	float Get_angleTolerance() {
		return memory.read<float>(m_addr + 1068);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChangeWeaponFiringMode
{
public:
	UPrisonerActionChangeWeaponFiringMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UStandardLockMinigameConfiguration
{
public:
	UStandardLockMinigameConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionSpill
{
public:
	UPrisonerActionSpill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_PhoenixTearsPresence
{
public:
	UPrisonerBodySymptomUIData_PhoenixTearsPresence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULockData
{
public:
	ULockData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AMinigame GetLockMinigameClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return AMinigame(ptr_addr);
	}
	ULockpickingMinigameConfiguration GetLockMinigameConfigurationClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return ULockpickingMinigameConfiguration(ptr_addr);
	}
	UFailurePenalty GetFailurePenaltyClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return UFailurePenalty(ptr_addr);
	}
	bool GetAreFamePointsRequired() {
		return memory.read<bool>(m_addr + 64);
	}
	bool GetIgnoreLockProtection() {
		return memory.read<bool>(m_addr + 65);
	}
	bool GetCanBeForceUnlocked() {
		return memory.read<bool>(m_addr + 66);
	}
	float GetForceUnlockTime() {
		return memory.read<float>(m_addr + 68);
	}
	float GetTotalCrowbarDamage() {
		return memory.read<float>(m_addr + 72);
	}
	uint8_t  GetLockDifficulty() {
		return memory.read<uint8_t >(m_addr + 76);
	}
	float GetExperienceOnSuccess() {
		return memory.read<float>(m_addr + 80);
	}
	float GetExperienceOnFailure() {
		return memory.read<float>(m_addr + 84);
	}
	struct FText GetLockedMessage() {
		return memory.read<struct FText>(m_addr + 88);
	}
	struct FText GetLockpickMessage() {
		return memory.read<struct FText>(m_addr + 112);
	}
	int32_t GetNumberOfNeutralizationAttempts() {
		return memory.read<int32_t>(m_addr + 136);
	}
	int32_t GetNumRemainingNeutralizationAttempts() {
		return memory.read<int32_t>(m_addr + 140);
	}
	float GetlockHP() {
		return memory.read<float>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDialLockData
{
public:
	UDialLockData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNumberOfWheels() {
		return memory.read<int32_t>(m_addr + 176);
	}
	struct UStaticMesh GetLockBodyMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UStaticMesh(ptr_addr);
	}
	struct UStaticMesh GetLockClampMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UStaticMesh(ptr_addr);
	}
	struct TArray<struct UStaticMesh> GetLockDialMeshes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct UStaticMesh>(ptr_addr);
	}
	struct FVector GetWheelUpVector() {
		return memory.read<struct FVector>(m_addr + 216);
	}

private:
	std::uint64_t m_addr = 0;
};


class UUpgradeItemTag
{
public:
	UUpgradeItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPrice() {
		return memory.read<int32_t>(m_addr + 48);
	}
	bool GetAttachAsItem() {
		return memory.read<bool>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULockItemTag
{
public:
	ULockItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULockData GetLockData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct ULockData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULockProtectionTag
{
public:
	ULockProtectionTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem GetFailureParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent GetFailureAudio() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UParticleSystem GetFailureParticlesInWorld() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent GetFailureAudioInWorld() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FVector GetFailureParticlesScaleInWorld() {
		return memory.read<struct FVector>(m_addr + 88);
	}
	float Get_baseDamage() {
		return memory.read<float>(m_addr + 100);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlantSeedComponent
{
public:
	UPlantSeedComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPlantSpecies Get_speciesData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UPlantSpecies(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_Hypothermia
{
public:
	UPrisonerBodyCondition_Hypothermia(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_bodyTemperatureToDie() {
		return memory.read<float>(m_addr + 196);
	}
	float Get_bodyTemperatureToExist() {
		return memory.read<float>(m_addr + 200);
	}
	float Get_bodyTemperatureToRecover() {
		return memory.read<float>(m_addr + 204);
	}
	float Get_bodyTemperatureSampleInterval() {
		return memory.read<float>(m_addr + 212);
	}
	float Get_bodyTemperatureAtUntreatedStart() {
		return memory.read<float>(m_addr + 224);
	}
	float Get_bodyTemperatureAtStabilizationStart() {
		return memory.read<float>(m_addr + 228);
	}
	float Get_bodyTemperatureAtRecoveryStart() {
		return memory.read<float>(m_addr + 232);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 236);
	}
	float Get_severityRatio() {
		return memory.read<float>(m_addr + 244);
	}
	float Get_severityRatioAtUntreatedStart() {
		return memory.read<float>(m_addr + 248);
	}
	float Get_severityRatioAtRecoveryStart() {
		return memory.read<float>(m_addr + 252);
	}
	float Get_severityRatioInterpSpeed() {
		return memory.read<float>(m_addr + 260);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULockpickingTensionToolItemTag
{
public:
	ULockpickingTensionToolItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UStaticMesh(ptr_addr);
	}
	struct FTransform GetTensionToolTransform() {
		return memory.read<struct FTransform>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULockpickingWidget
{
public:
	ULockpickingWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULogoutMessageBox
{
public:
	ULogoutMessageBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionPullGrenadePinDescription
{
public:
	UPrisonerActionPullGrenadePinDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AMenuGameMode
{
public:
	AMenuGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AMainMenuGameMode
{
public:
	AMainMenuGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AMainMenuHUD
{
public:
	AMainMenuHUD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetBaseGameModeMenu() {
		return memory.read<uint8_t >(m_addr + 784);
	}
	struct UMasterMenu Get_masterMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UMasterMenu(ptr_addr);
	}
	UMasterMenu Get_masterMenuClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return UMasterMenu(ptr_addr);
	}
	struct UPrisonerCreationUIController Get_prisonerCreationUIController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UPrisonerCreationUIController(ptr_addr);
	}
	UPrisonerCreationUIController Get_prisonerCreationUIControllerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return UPrisonerCreationUIController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleMarkersRequest
{
public:
	UVehicleMarkersRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionPlantSeedDescription
{
public:
	UPrisonerActionPlantSeedDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_ForceUnmount
{
public:
	UPrisonerVehicleAction_ForceUnmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMasterMenu
{
public:
	UMasterMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher Get_menuSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct TMap<uint8_t , UBaseMenu> Get_menuClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct TMap<uint8_t , UBaseMenu>(ptr_addr);
	}
	uint8_t  Get_menuToPreview() {
		return memory.read<uint8_t >(m_addr + 744);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMathStatics
{
public:
	UMathStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_BlurredVision
{
public:
	UPrisonerBodySymptomCause_BlurredVision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMechanicInstallationService
{
public:
	UMechanicInstallationService(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AMechanoidsManager
{
public:
	AMechanoidsManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	ADrone Get_droneSpawnClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return ADrone(ptr_addr);
	}
	float Get_droneSpawnDistance() {
		return memory.read<float>(m_addr + 584);
	}
	float Get_droneSpawnHeight() {
		return memory.read<float>(m_addr + 588);
	}
	float Get_droneCheckForNearbyPlayerDistance() {
		return memory.read<float>(m_addr + 592);
	}
	struct FDroneVisitTimeData Get_droneInitialVisitTime() {
		return memory.read<struct FDroneVisitTimeData>(m_addr + 596);
	}
	float Get_droneVisitClusterRadius() {
		return memory.read<float>(m_addr + 604);
	}
	float Get_weightPerSightingMode[3]() {
		return memory.read<float>(m_addr + 608);
	}
	struct FDroneVisitTimeData Get_droneVisitTimeDataPerSightingMode[3]() {
		return memory.read<struct FDroneVisitTimeData>(m_addr + 620);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMedicalSkill
{
public:
	UMedicalSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMeleeCombatComponent
{
public:
	UMeleeCombatComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMeleeDetectHitCollisionCapsule
{
public:
	UMeleeDetectHitCollisionCapsule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetDetectHitCollisionType() {
		return memory.read<uint8_t >(m_addr + 1136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlaceableOnRackItemTag
{
public:
	UPlaceableOnRackItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMeleeInterface
{
public:
	UMeleeInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponAmmoDisplayWidget
{
public:
	UWeaponAmmoDisplayWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_ammoCountText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_ammoIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMeleeStatics
{
public:
	UMeleeStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMeleeWeaponItemTag
{
public:
	UMeleeWeaponItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCombatAnimationPlayRateModifier() {
		return memory.read<float>(m_addr + 48);
	}
	float GetStrengthBelowWhichCombatPerformanceBeginsToDrop() {
		return memory.read<float>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMenuButton
{
public:
	UMenuButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetPreviewSelectedState() {
		return memory.read<bool>(m_addr + 688);
	}
	struct UImage Get_backgroundFocusImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTextBlock(ptr_addr);
	}
	struct USizeBox Get_sizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct USizeBox(ptr_addr);
	}
	struct FText Get_initialTitle() {
		return memory.read<struct FText>(m_addr + 720);
	}
	struct FTabTextStyle Get_selectedTextStyle() {
		return memory.read<struct FTabTextStyle>(m_addr + 744);
	}
	struct FTabTextStyle Get_deselectedTextStyle() {
		return memory.read<struct FTabTextStyle>(m_addr + 896);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRepairVehicleDescription
{
public:
	UPrisonerActionRepairVehicleDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AMenuCameraController
{
public:
	AMenuCameraController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACineCameraActor Get_camera() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct ACineCameraActor(ptr_addr);
	}
	struct USplineComponent Get_positionSpline() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USplineComponent(ptr_addr);
	}
	struct USplineComponent Get_viewTargetSpline() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct USplineComponent(ptr_addr);
	}
	struct FVector2D Get_mouseBasedRotationIntensity() {
		return memory.read<struct FVector2D>(m_addr + 568);
	}
	struct FRuntimeFloatCurve Get_positionWeightCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 576);
	}
	struct FRuntimeFloatCurve Get_viewTargetWeightCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 712);
	}
	float Get_interpolationSpeed() {
		return memory.read<float>(m_addr + 848);
	}
	float Get_mouseTrackingSpeed() {
		return memory.read<float>(m_addr + 852);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDrainVehicleFuelIntoItemDescription
{
public:
	UPrisonerActionDrainVehicleFuelIntoItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMenuHelpers
{
public:
	UMenuHelpers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UUserWidget GetMainMenuClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetServerBrowserClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetOptionsClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetAdvancedOptionsClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCharacterCreationClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCharacterSelectionClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetCharacterCreationSecondIterationClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMenuPlayerController
{
public:
	AMenuPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_ICU_GraphWidget_EKG
{
public:
	UMetabolism_ICU_GraphWidget_EKG(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetTimeStretchCurveCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 536);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetHeartbeatIrregularitiesCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_ICU_GraphWidget_ST
{
public:
	UMetabolism_ICU_GraphWidget_ST(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetTimeStretchCurveCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 536);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_Alternator
{
public:
	UVehicleAttachment_Alternator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVehicleAttachmentAlternatorSetup GetAlternatorSetup() {
		return memory.read<struct FVehicleAttachmentAlternatorSetup>(m_addr + 784);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_ICU_GraphWidget_TEMP
{
public:
	UMetabolism_ICU_GraphWidget_TEMP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_BCU_ICU_StatsPanel
{
public:
	UMetabolism_BCU_ICU_StatsPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolism_ICU_EKG_Stats GetStats_EKG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMetabolism_ICU_EKG_Stats(ptr_addr);
	}
	struct UMetabolism_ICU_ST_Stats GetStats_ST() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolism_ICU_ST_Stats(ptr_addr);
	}
	struct UMetabolism_ICU_SPO2_Stats GetStats_SPO2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMetabolism_ICU_SPO2_Stats(ptr_addr);
	}
	struct UMetabolism_ICU_RR_Stats GetStats_RR() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMetabolism_ICU_RR_Stats(ptr_addr);
	}
	struct UMetabolism_ICU_TEMP_Stats GetStats_TEMP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMetabolism_ICU_TEMP_Stats(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_BCU_ICU_Monitor
{
public:
	UMetabolism_BCU_ICU_Monitor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetTimeStretchCurveCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCheckBox Get_chbSwitchICUState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UCheckBox(ptr_addr);
	}
	struct UWidgetSwitcher Get_icu_Switcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UMetabolism_BCU_ICU_StatsPanel Get_icu_Collapsed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMetabolism_BCU_ICU_StatsPanel(ptr_addr);
	}
	struct UMetabolism_BCU_ICU_StatsPanel Get_icu_Expanded() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMetabolism_BCU_ICU_StatsPanel(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionEnterCombatMode
{
public:
	UPrisonerActionEnterCombatMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolism_ICU_ST_Stats
{
public:
	UMetabolism_ICU_ST_Stats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_bloodPressure_mmHg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_bloodPressure_kPa() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UZombieKamikazeComponent
{
public:
	UZombieKamikazeComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter Get_owningCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct AConZCharacter(ptr_addr);
	}
	float Get_beepingDistance() {
		return memory.read<float>(m_addr + 184);
	}
	float Get_explosionDistance() {
		return memory.read<float>(m_addr + 188);
	}
	float Get_autoExplosionTime() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_postMortemExplosionTime() {
		return memory.read<float>(m_addr + 196);
	}
	float Get_criticalPostMortemExplosionTime() {
		return memory.read<float>(m_addr + 200);
	}
	float Get_baseDamage() {
		return memory.read<float>(m_addr + 208);
	}
	float Get_minimumDamage() {
		return memory.read<float>(m_addr + 212);
	}
	float Get_damageInnerRadius() {
		return memory.read<float>(m_addr + 216);
	}
	float Get_damageOuterRadius() {
		return memory.read<float>(m_addr + 220);
	}
	float Get_damageFalloff() {
		return memory.read<float>(m_addr + 224);
	}
	struct FTargetTypeDamageMultiplier Get_targetTypeMultiplier() {
		return memory.read<struct FTargetTypeDamageMultiplier>(m_addr + 232);
	}
	float Get_netCullDistanceSquaredMeters() {
		return memory.read<float>(m_addr + 248);
	}
	struct UAkAudioEvent Get_explosionAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_beepingStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_beepingEndAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkComponent Get_beepingAudioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct UAkComponent(ptr_addr);
	}
	struct UParticleSystem Get_explosionPS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 288);
		return struct UParticleSystem(ptr_addr);
	}
	UMatineeCameraShake Get_explosionCameraShakeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return UMatineeCameraShake(ptr_addr);
	}
	struct UMaterialInterface Get_sootDecal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct UMaterialInterface(ptr_addr);
	}
	float Get_minSootDecalSize() {
		return memory.read<float>(m_addr + 312);
	}
	float Get_maxSootDecalSize() {
		return memory.read<float>(m_addr + 316);
	}
	float Get_minSootScalarParamValue() {
		return memory.read<float>(m_addr + 320);
	}
	float Get_maxSootScalarParamValue() {
		return memory.read<float>(m_addr + 324);
	}
	struct FName Get_sootScalarParameterValueName() {
		return memory.read<struct FName>(m_addr + 328);
	}
	float Get_decalsLifeSpan() {
		return memory.read<float>(m_addr + 336);
	}
	float Get_decalFadeFactor() {
		return memory.read<float>(m_addr + 340);
	}
	int32_t Get_maximumNumberOfChunksSpawned() {
		return memory.read<int32_t>(m_addr + 344);
	}
	float Get_minVelocityMagnitude() {
		return memory.read<float>(m_addr + 348);
	}
	float Get_maxVelocityMagnitude() {
		return memory.read<float>(m_addr + 352);
	}
	float Get_velocityHalfAngle() {
		return memory.read<float>(m_addr + 356);
	}
	float Get_timeAfterChunksAreDeleted() {
		return memory.read<float>(m_addr + 360);
	}
	struct TArray<struct UStaticMesh> Get_bodyPartChunks() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 368);
		return struct TArray<struct UStaticMesh>(ptr_addr);
	}
	AMinigame Get_minigameClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return AMinigame(ptr_addr);
	}
	UBaseItemTag Get_minigameToolTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 392);
		return UBaseItemTag(ptr_addr);
	}
	AZombieKamikazeDummyTrap Get_dummyTrapItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 400);
		return AZombieKamikazeDummyTrap(ptr_addr);
	}
	struct TArray<UItemSpawnerPreset> Get_spawnerPresets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 408);
		return struct TArray<UItemSpawnerPreset>(ptr_addr);
	}
	struct TArray<UItemSpawnerPreset2> Get_spawnerPresets2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 424);
		return struct TArray<UItemSpawnerPreset2>(ptr_addr);
	}
	bool Get_isCriticalPostMortemPhase() {
		return memory.read<bool>(m_addr + 450);
	}
	bool Get_isDisarmed() {
		return memory.read<bool>(m_addr + 451);
	}
	bool Get_shouldExplodeOnDeath() {
		return memory.read<bool>(m_addr + 480);
	}
	float Get_dummyTrapItemDestroyDelay() {
		return memory.read<float>(m_addr + 484);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateBowActive
{
public:
	UWeaponStateBowActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolismAdvancedProgressBar
{
public:
	UMetabolismAdvancedProgressBar(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetTitle() {
		return memory.read<struct FText>(m_addr + 608);
	}
	struct URetainerBox Get_progressBarEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct URetainerBox(ptr_addr);
	}
	struct UTextBlock Get_titleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_valueText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct USizeBox Get_apbSize() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct USizeBox(ptr_addr);
	}
	struct UImage Get_progressBarBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UImage(ptr_addr);
	}
	struct FText Get_defaultValue() {
		return memory.read<struct FText>(m_addr + 672);
	}
	struct FMetabolismAPBFontStyle Get_fontStyle() {
		return memory.read<struct FMetabolismAPBFontStyle>(m_addr + 696);
	}
	struct FMargin Get_progressBarPadding() {
		return memory.read<struct FMargin>(m_addr + 744);
	}
	struct FVector2D Get_size() {
		return memory.read<struct FVector2D>(m_addr + 760);
	}
	struct FSlateBrush Get_backgroundImageBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 768);
	}
	struct FDataTableRowHandle Get_normalBackgroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 904);
	}
	struct FDataTableRowHandle Get_normalForegroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 920);
	}
	struct FDataTableRowHandle Get_normalTextColorEmpty() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 936);
	}
	struct FDataTableRowHandle Get_normalTextColorFilled() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 952);
	}
	struct FDataTableRowHandle Get_alertedBackgroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 968);
	}
	struct FDataTableRowHandle Get_alertedForegroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 984);
	}
	struct FDataTableRowHandle Get_alertedTextColorEmpty() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 1000);
	}
	struct FDataTableRowHandle Get_alertedTextColorFilled() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 1016);
	}
	struct FDataTableRowHandle Get_badBackgroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 1032);
	}
	struct FDataTableRowHandle Get_badForegroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 1048);
	}
	struct FDataTableRowHandle Get_badTextColorEmpty() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 1064);
	}
	struct FDataTableRowHandle Get_badTextColorFilled() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 1080);
	}
	struct FDataTableRowHandle Get_goodBackgroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 1096);
	}
	struct FDataTableRowHandle Get_goodForegroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 1112);
	}
	struct FDataTableRowHandle Get_goodTextColorEmpty() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 1128);
	}
	struct FDataTableRowHandle Get_goodTextColorFilled() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 1144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismBasicInfoPanel
{
public:
	UMetabolismBasicInfoPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolismCurrentStatLight Get_stat_Age() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMetabolismCurrentStatLight(ptr_addr);
	}
	struct UMetabolismCurrentStatLight Get_stat_Teeth() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismCurrentStatLight(ptr_addr);
	}
	struct UMetabolismCurrentStatLight Get_stat_Lifetime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMetabolismCurrentStatLight(ptr_addr);
	}
	struct UMetabolismCurrentStatLight Get_stat_BloodType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMetabolismCurrentStatLight(ptr_addr);
	}
	struct UMetabolismCurrentStatLight Get_stat_Weight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMetabolismCurrentStatLight(ptr_addr);
	}
	struct UMetabolismCurrentStatLight Get_stat_BloodVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismCurrentStatLight(ptr_addr);
	}
	struct UMetabolismCurrentStatLight Get_stat_Health() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMetabolismCurrentStatLight(ptr_addr);
	}
	struct UMetabolismCurrentStatLight Get_stat_Temperature() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UMetabolismCurrentStatLight(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USpawnChoiceWidget
{
public:
	USpawnChoiceWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_progressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_progressMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UButton Get_choiceButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UButton(ptr_addr);
	}
	struct UTextBlock Get_optionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_prohibitedText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_priceText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetSelectionArrow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UImage(ptr_addr);
	}
	struct UBorder GetBorder_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UBorder(ptr_addr);
	}
	float Get_borderFill() {
		return memory.read<float>(m_addr + 688);
	}
	int32_t Get_price() {
		return memory.read<int32_t>(m_addr + 692);
	}
	uint8_t  Get_priceCurrency() {
		return memory.read<uint8_t >(m_addr + 696);
	}
	struct FText Get_optionTextBlockText() {
		return memory.read<struct FText>(m_addr + 704);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismBodyEffectProgressBar
{
public:
	UMetabolismBodyEffectProgressBar(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolismAdvancedProgressBar Get_apb() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	struct UWidget Get_lifeThreateningSymbol() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidget(ptr_addr);
	}
	struct UImage Get_infectedSymbol() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_circularProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UImage(ptr_addr);
	}
	struct UCheckBox Get_interactionButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UCheckBox(ptr_addr);
	}
	struct FDataTableRowHandle Get_circularProgressBarColorFront() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 688);
	}
	struct FDataTableRowHandle Get_circularProgressBarColorBack() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 704);
	}
	float Get_hoveredOpacity() {
		return memory.read<float>(m_addr + 720);
	}
	float Get_unhoveredOpacity() {
		return memory.read<float>(m_addr + 724);
	}
	float Get_otherIsSelectedUnhoveredOpacity() {
		return memory.read<float>(m_addr + 728);
	}
	float Get_otherIsSelectedHoveredOpacity() {
		return memory.read<float>(m_addr + 732);
	}
	float Get_infectedOpacity() {
		return memory.read<float>(m_addr + 736);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismBodyOverviewPanel
{
public:
	UMetabolismBodyOverviewPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScrollBox Get_symptomsScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UScrollBox(ptr_addr);
	}
	struct UMetabolismHumanBodyPanel Get_humanBodyPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismHumanBodyPanel(ptr_addr);
	}
	struct URichTextBlock Get_symptomsBreadcrumb() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct URichTextBlock(ptr_addr);
	}
	struct UMetabolismTissueGroupCheckbox Get_checkboxMuscles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMetabolismTissueGroupCheckbox(ptr_addr);
	}
	struct UMetabolismTissueGroupCheckbox Get_checkboxBones() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMetabolismTissueGroupCheckbox(ptr_addr);
	}
	struct UMetabolismTissueGroupCheckbox Get_checkboxOrgans() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismTissueGroupCheckbox(ptr_addr);
	}
	struct UMetabolismRadialProgressBar Get_rpb_Hitpoints() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMetabolismRadialProgressBar(ptr_addr);
	}
	struct UMetabolismRadialProgressBar Get_rpb_Blood() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UMetabolismRadialProgressBar(ptr_addr);
	}
	struct UOverlay Get_treatmentMainOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UOverlay(ptr_addr);
	}
	struct UButton Get_clearSelectionButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UButton(ptr_addr);
	}
	struct UOverlay Get_selectedItemsOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay Get_itemSelectionReminderOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UOverlay(ptr_addr);
	}
	struct UMetabolismLightItemDisplayPanel Get_selectedItemsPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UMetabolismLightItemDisplayPanel(ptr_addr);
	}
	struct UMetabolismBodyEffectProgressBar Get_activeConditionProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UMetabolismBodyEffectProgressBar(ptr_addr);
	}
	struct UButton Get_treatButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UButton(ptr_addr);
	}
	UMetabolismSymptomTitle Get_symptomWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return UMetabolismSymptomTitle(ptr_addr);
	}
	struct FMetabolismRadialProgressBarColorScheme Get_lowHPColorScheme() {
		return memory.read<struct FMetabolismRadialProgressBarColorScheme>(m_addr + 736);
	}
	struct FMetabolismRadialProgressBarColorScheme Get_midHPColorScheme() {
		return memory.read<struct FMetabolismRadialProgressBarColorScheme>(m_addr + 864);
	}
	struct FMetabolismRadialProgressBarColorScheme Get_highHPColorScheme() {
		return memory.read<struct FMetabolismRadialProgressBarColorScheme>(m_addr + 992);
	}
	struct FMetabolismRadialProgressBarColorScheme Get_lowBloodOxygenationColorScheme() {
		return memory.read<struct FMetabolismRadialProgressBarColorScheme>(m_addr + 1120);
	}
	struct FMetabolismRadialProgressBarColorScheme Get_highBloodOxygenationColorScheme() {
		return memory.read<struct FMetabolismRadialProgressBarColorScheme>(m_addr + 1248);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRussianRoulette
{
public:
	UPrisonerActionRussianRoulette(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolismBodyStatsPanel
{
public:
	UMetabolismBodyStatsPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolismTitleAndAPB Get_tapb_NutrientAbsorption_Protein() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}
	struct UMetabolismTitleAndAPB Get_tapb_NutrientAbsorption_Carbs() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}
	struct UMetabolismTitleAndAPB Get_tapb_NutrientAbsorption_Fat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}
	struct UMetabolismTitleAndAPB Get_tapb_NutrientAbsorption_Minerals() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}
	struct UMetabolismTitleAndAPB Get_tapb_NutrientAbsorption_Vitamins() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}
	struct UMetabolismTitleAndAPB Get_tapb_NutrientAbsorption_Water() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}
	struct UMetabolismTitleAndAPB Get_tapb_NutrientAbsorption_Alcohol() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}
	struct UMetabolismTitleAndAPB Get_tapb_BodyMassDistribution_Bones() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}
	struct UMetabolismTitleAndAPB Get_tapb_BodyMassDistribution_Blood() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}
	struct UMetabolismTitleAndAPB Get_tapb_BodyMassDistribution_Intestines() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}
	struct UMetabolismTitleAndAPB Get_tapb_BodyMassDistribution_Skin() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}
	struct UMetabolismTitleAndAPB Get_tapb_BodyMassDistribution_Organs() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}
	struct UMetabolismTitleAndAPB Get_tapb_BodyMassDistribution_Fat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}
	struct UMetabolismTitleAndAPB Get_tapb_BodyMassDistribution_Muscle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UMetabolismTitleAndAPB(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismContainerSetDisplayPanel
{
public:
	UMetabolismContainerSetDisplayPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTabGroup Get_containerButtons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTabGroup(ptr_addr);
	}
	struct UMetabolismLightItemDisplayPanel Get_containerContents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UMetabolismLightItemDisplayPanel(ptr_addr);
	}
	UContainerDisplay Get_containerButtonClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return UContainerDisplay(ptr_addr);
	}
	float Get_interChildDistrance() {
		return memory.read<float>(m_addr + 680);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismCurrentStatDark
{
public:
	UMetabolismCurrentStatDark(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetTitle() {
		return memory.read<struct FText>(m_addr + 608);
	}
	struct UImage Get_titleBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_valueBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_value() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct FDataTableRowHandle Get_titleBackgroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 664);
	}
	struct FDataTableRowHandle Get_titleForegroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 680);
	}
	struct FDataTableRowHandle Get_valueBackgroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 696);
	}
	struct FDataTableRowHandle Get_valueForegroundColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 712);
	}

private:
	std::uint64_t m_addr = 0;
};


class AZombieAIController2
{
public:
	AZombieAIController2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAISenseConfig_Sight Get_lyingSightSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UAISenseConfig_Sight(ptr_addr);
	}
	struct UAISenseConfig_Hearing Get_lyingHearingSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UAISenseConfig_Hearing(ptr_addr);
	}
	struct UAISenseConfig_Damage Get_lyingDamageSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UAISenseConfig_Damage(ptr_addr);
	}
	float Get_stateMachineTickIntervalWhenInRelaxedState() {
		return memory.read<float>(m_addr + 832);
	}
	bool Get_shouldWander() {
		return memory.read<bool>(m_addr + 836);
	}
	bool Get_shouldWanderAroundWanderOrigin() {
		return memory.read<bool>(m_addr + 837);
	}
	float Get_maxWanderingRadius() {
		return memory.read<float>(m_addr + 840);
	}
	float Get_minTimeToRestBeforeWandering() {
		return memory.read<float>(m_addr + 844);
	}
	float Get_maxTimeToRestBeforeWandering() {
		return memory.read<float>(m_addr + 848);
	}
	bool Get_shouldBecomeAlertedBySight() {
		return memory.read<bool>(m_addr + 852);
	}
	float Get_minLineOfSightDurationToBecomeAlerted() {
		return memory.read<float>(m_addr + 856);
	}
	float Get_maxLineOfSightDurationToBecomeAlerted() {
		return memory.read<float>(m_addr + 860);
	}
	bool Get_shouldBecomeAlertedByHearing() {
		return memory.read<bool>(m_addr + 864);
	}
	float Get_minDelayBeforeBecomingAlertedByHearing() {
		return memory.read<float>(m_addr + 868);
	}
	float Get_maxDelayBeforeBecomingAlertedByHearing() {
		return memory.read<float>(m_addr + 872);
	}
	struct UAISenseConfig_Sight Get_relaxedIdleSightSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UAISenseConfig_Sight(ptr_addr);
	}
	struct UAISenseConfig_Hearing Get_relaxedIdleHearingSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UAISenseConfig_Hearing(ptr_addr);
	}
	struct UAISenseConfig_Damage Get_relaxedIdleDamageSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UAISenseConfig_Damage(ptr_addr);
	}
	struct UAISenseConfig_Sight Get_relaxedWanderSightSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UAISenseConfig_Sight(ptr_addr);
	}
	struct UAISenseConfig_Hearing Get_relaxedWanderHearingSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UAISenseConfig_Hearing(ptr_addr);
	}
	struct UAISenseConfig_Damage Get_relaxedWanderDamageSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UAISenseConfig_Damage(ptr_addr);
	}
	float Get_stateMachineTickIntervalWhenInAlertedState() {
		return memory.read<float>(m_addr + 928);
	}
	float Get_minObservingForLineOfSightStartDelay() {
		return memory.read<float>(m_addr + 932);
	}
	float Get_maxObservingForLineOfSightStartDelay() {
		return memory.read<float>(m_addr + 936);
	}
	float Get_minInvestigateStimulusDelay() {
		return memory.read<float>(m_addr + 940);
	}
	float Get_maxInvestigateStimulusDelay() {
		return memory.read<float>(m_addr + 944);
	}
	float Get_minEnterCombatModeDelay() {
		return memory.read<float>(m_addr + 948);
	}
	float Get_maxEnterCombatModeDelay() {
		return memory.read<float>(m_addr + 952);
	}
	float Get_distanceAtWhichToIgnoreEnterCombatModeDelay() {
		return memory.read<float>(m_addr + 956);
	}
	struct UCurveVector Get_observingCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct UCurveVector(ptr_addr);
	}
	float Get_observingCurvePeriod() {
		return memory.read<float>(m_addr + 968);
	}
	float Get_observingCurveMaxYaw() {
		return memory.read<float>(m_addr + 972);
	}
	float Get_observingCurveMaxPitch() {
		return memory.read<float>(m_addr + 976);
	}
	struct UAISenseConfig_Sight Get_alertedSightSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 984);
		return struct UAISenseConfig_Sight(ptr_addr);
	}
	struct UAISenseConfig_Hearing Get_alertedHearingSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 992);
		return struct UAISenseConfig_Hearing(ptr_addr);
	}
	struct UAISenseConfig_Damage Get_alertedDamageSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct UAISenseConfig_Damage(ptr_addr);
	}
	float Get_stateMachineTickIntervalWhenInCombatState() {
		return memory.read<float>(m_addr + 1008);
	}
	bool Get_shouldAttack() {
		return memory.read<bool>(m_addr + 1012);
	}
	bool Get_shouldBackOffIfTooCloseToFoe() {
		return memory.read<bool>(m_addr + 1013);
	}
	bool Get_shouldPredictFoeLocation() {
		return memory.read<bool>(m_addr + 1014);
	}
	struct UCurveFloat Get_foeLocationPredictionStrengthVsDistanceToFoe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_attackDistance() {
		return memory.read<float>(m_addr + 1024);
	}
	int32_t Get_minNumConsecutiveInflictedMeleeHitsToIntimidate() {
		return memory.read<int32_t>(m_addr + 1028);
	}
	int32_t Get_maxNumConsecutiveInflictedMeleeHitsToIntimidate() {
		return memory.read<int32_t>(m_addr + 1032);
	}
	float Get_minTimeBeforeFoeIsConsideredUnreachable() {
		return memory.read<float>(m_addr + 1036);
	}
	float Get_maxTimeBeforeFoeIsConsideredUnreachable() {
		return memory.read<float>(m_addr + 1040);
	}
	float Get_minTimeSinceLastAttackWhileFoeIsInLineOfSightToIntimidate() {
		return memory.read<float>(m_addr + 1044);
	}
	float Get_maxTimeSinceLastAttackWhileFoeIsInLineOfSightToIntimidate() {
		return memory.read<float>(m_addr + 1048);
	}
	float Get_costOfJumpingInPathLength() {
		return memory.read<float>(m_addr + 1052);
	}
	float Get_minPathPointDistance() {
		return memory.read<float>(m_addr + 1056);
	}
	struct FDetectionDelayTimerData Get_detectionDelayTimerData() {
		return memory.read<struct FDetectionDelayTimerData>(m_addr + 1060);
	}
	struct AZombie2 Get_zombie() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1080);
		return struct AZombie2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerForeignSubstance_Toxins
{
public:
	UPrisonerForeignSubstance_Toxins(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWeaponAttachmentBayonet
{
public:
	AWeaponAttachmentBayonet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolismDigestionPanel
{
public:
	UMetabolismDigestionPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UUserWidget GetFoodWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return UUserWidget(ptr_addr);
	}
	struct UMetabolismRadialProgressBar Get_rpb_Stomach() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismRadialProgressBar(ptr_addr);
	}
	struct UMetabolismRadialProgressBar Get_rpb_Intestine() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMetabolismRadialProgressBar(ptr_addr);
	}
	struct UMetabolismRadialProgressBar Get_rpb_Colon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMetabolismRadialProgressBar(ptr_addr);
	}
	struct UMetabolismRadialProgressBar Get_rpb_Bladder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMetabolismRadialProgressBar(ptr_addr);
	}
	struct UWrapBox Get_foods() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWrapBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismLeftPanel
{
public:
	UMetabolismLeftPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTabGroup Get_tabRow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTabGroup(ptr_addr);
	}
	struct UWidgetSwitcher Get_mainTabSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UMetabolismStatsPanel Get_statsPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMetabolismStatsPanel(ptr_addr);
	}
	struct FText Get_statsName() {
		return memory.read<struct FText>(m_addr + 632);
	}
	struct UMetabolismHealthPanel Get_healthPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMetabolismHealthPanel(ptr_addr);
	}
	struct FText Get_healthName() {
		return memory.read<struct FText>(m_addr + 664);
	}
	UTabButtonAlertable Get_buttonWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return UTabButtonAlertable(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCraftItem
{
public:
	UPrisonerActionCraftItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolismLightItemDisplayPanel
{
public:
	UMetabolismLightItemDisplayPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPanelWidget Get_itemDisplayContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UPanelWidget(ptr_addr);
	}
	UItemLightDisplay Get_itemDisplayClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return UItemLightDisplay(ptr_addr);
	}
	float Get_interChildDistrance() {
		return memory.read<float>(m_addr + 648);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismMacronutrientReserve
{
public:
	UMetabolismMacronutrientReserve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetTitle() {
		return memory.read<struct FText>(m_addr + 608);
	}
	struct UTextBlock Get_title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_value() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UMetabolismSegmentedProgressBar Get_spb_ReservesBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismSegmentedProgressBar(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismMacronutrientReservesPanel
{
public:
	UMetabolismMacronutrientReservesPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolismMacronutrientReserve Get_reserve_Protein() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMetabolismMacronutrientReserve(ptr_addr);
	}
	struct UMetabolismMacronutrientReserve Get_reserve_Carbs() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismMacronutrientReserve(ptr_addr);
	}
	struct UMetabolismMacronutrientReserve Get_reserve_Fat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMetabolismMacronutrientReserve(ptr_addr);
	}
	struct UMetabolismMacronutrientReserve Get_reserve_Fiber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMetabolismMacronutrientReserve(ptr_addr);
	}
	struct UMetabolismMacronutrientReserve Get_reserve_Sugar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMetabolismMacronutrientReserve(ptr_addr);
	}
	struct UMetabolismMacronutrientReserve Get_reserve_SaturatedFat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismMacronutrientReserve(ptr_addr);
	}
	struct UMetabolismMacronutrientReserve Get_reserve_Alcohol() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMetabolismMacronutrientReserve(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimInstance_Fishing
{
public:
	UPrisonerAnimInstance_Fishing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_aimOffsetYaw() {
		return memory.read<float>(m_addr + 696);
	}
	float Get_aimOffsetPitch() {
		return memory.read<float>(m_addr + 700);
	}
	bool Get_isActivelyFishing() {
		return memory.read<bool>(m_addr + 704);
	}
	bool Get_castingFinished() {
		return memory.read<bool>(m_addr + 705);
	}
	bool Get_floaterHitWaterSurface() {
		return memory.read<bool>(m_addr + 706);
	}
	bool Get_fishIsHooked() {
		return memory.read<bool>(m_addr + 707);
	}
	uint8_t  Get_stance() {
		return memory.read<uint8_t >(m_addr + 708);
	}
	bool Get_isInFirstPersonView() {
		return memory.read<bool>(m_addr + 709);
	}
	struct FRotator Get_armsLagRotation() {
		return memory.read<struct FRotator>(m_addr + 712);
	}
	float Get_armsLagPitch() {
		return memory.read<float>(m_addr + 724);
	}
	float Get_armsLagYaw() {
		return memory.read<float>(m_addr + 728);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismMineralsPanel
{
public:
	UMetabolismMineralsPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolismVitaminAndMineralReserve Get_mineral_Ca() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_mineral_Fe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_mineral_Mg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_mineral_P() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_mineral_K() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_mineral_Zn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_mineral_Cu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_mineral_Mn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_mineral_Se() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_mineral_Na() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismNutritionPanel
{
public:
	UMetabolismNutritionPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolismRadialProgressBar Get_rpb_Calories() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMetabolismRadialProgressBar(ptr_addr);
	}
	struct UMetabolismRadialProgressBar Get_rpb_Water() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismRadialProgressBar(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_BleedingInjury
{
public:
	UPrisonerBodyConditionUIData_BleedingInjury(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWeaponAttachmentScopeRail
{
public:
	AWeaponAttachmentScopeRail(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetScopeSocketName() {
		return memory.read<struct FName>(m_addr + 2352);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismPerformanceDataPanel
{
public:
	UMetabolismPerformanceDataPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolismAdvancedProgressBar Get_apb_Stamina() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	struct UMetabolismAdvancedProgressBar Get_apb_WeightLoad() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	struct UMetabolismAdvancedProgressBar Get_apb_WalkSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	struct UMetabolismAdvancedProgressBar Get_apb_JogSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	struct UMetabolismAdvancedProgressBar Get_apb_RunSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	struct UMetabolismAdvancedProgressBar Get_apb_HealingSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	struct UMetabolismAdvancedProgressBar Get_apb_BloodRecoveryRate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	struct UMetabolismAdvancedProgressBar Get_apb_ImmuneSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	struct UMetabolismAdvancedProgressBar Get_apb_PerformanceScore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	struct UMetabolismAdvancedProgressBar Get_apb_StealthFactor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	struct UMetabolismAdvancedProgressBar Get_apb_MeleeDamage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}
	struct UMetabolismCurrentStatDark Get_csd_ConsumptionRecoveryResting() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UMetabolismCurrentStatDark(ptr_addr);
	}
	struct UMetabolismCurrentStatDark Get_csd_ConsumptionRecoveryIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UMetabolismCurrentStatDark(ptr_addr);
	}
	struct UMetabolismCurrentStatDark Get_csd_ConsumptionRecoveryEasy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UMetabolismCurrentStatDark(ptr_addr);
	}
	struct UMetabolismCurrentStatDark Get_csd_ConsumptionRecoveryDemanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UMetabolismCurrentStatDark(ptr_addr);
	}
	struct UMetabolismCurrentStatDark Get_csd_ConsumptionRecoveryVeryDemanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UMetabolismCurrentStatDark(ptr_addr);
	}
	struct UMetabolismCurrentStatDark Get_csd_ConsumptionRecoveryExtremelyDemanding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UMetabolismCurrentStatDark(ptr_addr);
	}
	struct UMetabolismCurrentStatDark Get_csd_OverloadPenaltyEnergy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UMetabolismCurrentStatDark(ptr_addr);
	}
	struct UMetabolismCurrentStatDark Get_csd_OverloadPenaltyWater() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UMetabolismCurrentStatDark(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismRadialProgressBar
{
public:
	UMetabolismRadialProgressBar(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetPreviewedAlertedState() {
		return memory.read<bool>(m_addr + 608);
	}
	float GetPrimaryPercentageMinDisplayedValue() {
		return memory.read<float>(m_addr + 612);
	}
	float GetPrimaryPercentageMaxDisplayedValue() {
		return memory.read<float>(m_addr + 616);
	}
	struct UScaleBox Get_scaleBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UScaleBox(ptr_addr);
	}
	struct UImage Get_coloredBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_radialProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UImage(ptr_addr);
	}
	struct URetainerBox Get_fontEffectPass1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct URetainerBox(ptr_addr);
	}
	struct URetainerBox Get_fontEffectPass2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct URetainerBox(ptr_addr);
	}
	struct URichTextBlock Get_percentage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct URichTextBlock(ptr_addr);
	}
	struct UTextBlock Get_value() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTextBlock(ptr_addr);
	}
	struct FMetabolismRadialProgressBarColorScheme Get_defaultColorScheme() {
		return memory.read<struct FMetabolismRadialProgressBarColorScheme>(m_addr + 704);
	}
	struct FMetabolismRadialProgressBarColorScheme Get_alertedColorScheme() {
		return memory.read<struct FMetabolismRadialProgressBarColorScheme>(m_addr + 832);
	}
	struct FMetabolismRadialProgressBarFontSettings Get_percentageFontSettings() {
		return memory.read<struct FMetabolismRadialProgressBarFontSettings>(m_addr + 960);
	}
	float Get_widgetScale() {
		return memory.read<float>(m_addr + 980);
	}
	bool Get_isTitleVisible() {
		return memory.read<bool>(m_addr + 984);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismRightPanel
{
public:
	UMetabolismRightPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolismNutritionPanel Get_nutritionPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMetabolismNutritionPanel(ptr_addr);
	}
	struct UMetabolismMacronutrientReservesPanel Get_macronutrientReservesPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismMacronutrientReservesPanel(ptr_addr);
	}
	struct UMetabolismBodyReservesPanel Get_bodyReservesPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMetabolismBodyReservesPanel(ptr_addr);
	}
	struct UMetabolismVitaminsPanel Get_vitaminsPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMetabolismVitaminsPanel(ptr_addr);
	}
	struct UMetabolismMineralsPanel Get_mineralsPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMetabolismMineralsPanel(ptr_addr);
	}
	struct UMetabolismDigestionPanel Get_digestionPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismDigestionPanel(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismSkillProgressionPanel
{
public:
	UMetabolismSkillProgressionPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UUserWidget GetSkillProgressBarWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return UUserWidget(ptr_addr);
	}
	struct UTabGroup Get_tabRow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTabGroup(ptr_addr);
	}
	UTabButton Get_tabButtonClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return UTabButton(ptr_addr);
	}
	struct UWidgetSwitcher Get_attributeSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UMetabolismSkillProgressionTab Get_STR_tab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMetabolismSkillProgressionTab(ptr_addr);
	}
	struct UMetabolismSkillProgressionTab Get_CON_tab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismSkillProgressionTab(ptr_addr);
	}
	struct UMetabolismSkillProgressionTab Get_DEX_tab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMetabolismSkillProgressionTab(ptr_addr);
	}
	struct UMetabolismSkillProgressionTab Get_INT_tab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UMetabolismSkillProgressionTab(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismStatics
{
public:
	UMetabolismStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolismStatsPanel
{
public:
	UMetabolismStatsPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolismRadialAttributeProgressBar Get_str_progressWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMetabolismRadialAttributeProgressBar(ptr_addr);
	}
	struct UMetabolismRadialAttributeProgressBar Get_con_progressWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismRadialAttributeProgressBar(ptr_addr);
	}
	struct UMetabolismRadialAttributeProgressBar Get_dex_progressWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMetabolismRadialAttributeProgressBar(ptr_addr);
	}
	struct UMetabolismRadialAttributeProgressBar Get_int_progressWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMetabolismRadialAttributeProgressBar(ptr_addr);
	}
	struct UMetabolismSkillProgressionPanel Get_skillProgressionPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMetabolismSkillProgressionPanel(ptr_addr);
	}
	struct UMetabolismBasicInfoPanel Get_basicInfoPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismBasicInfoPanel(ptr_addr);
	}
	struct UMetabolismPerformanceDataPanel Get_performanceDataPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMetabolismPerformanceDataPanel(ptr_addr);
	}
	struct UMetabolismBodyStatsPanel Get_bodyStatsPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UMetabolismBodyStatsPanel(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismSymptomTitle
{
public:
	UMetabolismSymptomTitle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlayerManagementActivePlayersList
{
public:
	UPlayerManagementActivePlayersList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMetabolismTissueGroupCheckbox
{
public:
	UMetabolismTissueGroupCheckbox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetTitle() {
		return memory.read<struct FText>(m_addr + 608);
	}
	bool GetIsCheckdByDefault() {
		return memory.read<bool>(m_addr + 632);
	}
	struct UTextBlock Get_title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UCheckBox Get_checkBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UCheckBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismTreatmentItemsPanel
{
public:
	UMetabolismTreatmentItemsPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolismLightItemDisplayPanel Get_inventoryItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMetabolismLightItemDisplayPanel(ptr_addr);
	}
	struct UMetabolismLightItemDisplayPanel Get_vicinityItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismLightItemDisplayPanel(ptr_addr);
	}
	struct UMetabolismContainerSetDisplayPanel Get_vicinityContainers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMetabolismContainerSetDisplayPanel(ptr_addr);
	}
	UTabButton Get_buttonWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return UTabButton(ptr_addr);
	}
	struct FString Get_inventoryName() {
		return memory.read<struct FString>(m_addr + 640);
	}
	struct FString Get_vicinityName() {
		return memory.read<struct FString>(m_addr + 656);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_Fatigue
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_Fatigue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodySymptom_Fatigue Get_symptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodySymptom_Fatigue(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Fatigue Get_symptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPrisonerBodySymptomCause_Fatigue(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_maxStaminaModifierVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismVitaminAndMineralReserve
{
public:
	UMetabolismVitaminAndMineralReserve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetTitle() {
		return memory.read<struct FText>(m_addr + 608);
	}
	struct UTextBlock Get_title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_value() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UMetabolismSegmentedProgressBar Get_spb_ReservesBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismSegmentedProgressBar(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMetabolismVitaminsPanel
{
public:
	UMetabolismVitaminsPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolismVitaminAndMineralReserve Get_vitamin_A() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_vitamin_B1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_vitamin_B2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_vitamin_B3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_vitamin_B4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_vitamin_B5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_vitamin_B6() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_vitamin_B9() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_vitamin_B12() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_vitamin_C() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_vitamin_D() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_vitamin_E() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}
	struct UMetabolismVitaminAndMineralReserve Get_vitamin_K() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UMetabolismVitaminAndMineralReserve(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateCheckAmmo
{
public:
	UWeaponStateCheckAmmo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ARabbit2
{
public:
	ARabbit2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UThermalSensorComponent
{
public:
	UThermalSensorComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_temperature() {
		return memory.read<float>(m_addr + 176);
	}
	float Get_emissivity() {
		return memory.read<float>(m_addr + 180);
	}
	float Get_radius() {
		return memory.read<float>(m_addr + 184);
	}
	float Get_mass() {
		return memory.read<float>(m_addr + 188);
	}
	float Get_specificHeatCapacity() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_thermalConductivity() {
		return memory.read<float>(m_addr + 196);
	}
	char Get_packedTemperature() {
		return memory.read<char>(m_addr + 232);
	}
	bool Get_temperatureReplicationEnabled() {
		return memory.read<bool>(m_addr + 240);
	}
	float Get_packTemperatureOffset() {
		return memory.read<float>(m_addr + 244);
	}
	float Get_packTemperatureScale() {
		return memory.read<float>(m_addr + 248);
	}
	float Get_packTemperatureGamma() {
		return memory.read<float>(m_addr + 252);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMetalDetector
{
public:
	AMetalDetector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBasicGameResourceContainerComponent Get_resourceContainerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct UBasicGameResourceContainerComponent(ptr_addr);
	}
	float Get_minDetectionRadius() {
		return memory.read<float>(m_addr + 2328);
	}
	float Get_maxDetectionRadius() {
		return memory.read<float>(m_addr + 2332);
	}
	float Get_updatePeriod() {
		return memory.read<float>(m_addr + 2336);
	}
	float Get_detectionFactor() {
		return memory.read<float>(m_addr + 2340);
	}
	struct UAkAudioEvent Get_startEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2344);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_stopEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FName Get_RTPCName() {
		return memory.read<struct FName>(m_addr + 2360);
	}
	int32_t Get_soundInterpolationTimeMs() {
		return memory.read<int32_t>(m_addr + 2368);
	}
	struct FName Get_detectionSourceSocketName() {
		return memory.read<struct FName>(m_addr + 2384);
	}

private:
	std::uint64_t m_addr = 0;
};


class AQuiver
{
public:
	AQuiver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetArrowsBoneName() {
		return memory.read<struct FName>(m_addr + 2488);
	}
	struct TArray<struct UStaticMeshComponent> Get_arrowMeshComponentsArray2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2496);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}
	float Get_containerDepth() {
		return memory.read<float>(m_addr + 2516);
	}

private:
	std::uint64_t m_addr = 0;
};


class USquadMemberPanel
{
public:
	USquadMemberPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetPlayerName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetFameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetFPText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetRankIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UButton GetHoverButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UButton(ptr_addr);
	}
	struct UButton GetMakeLeaderButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UButton(ptr_addr);
	}
	struct UButton GetPromoteButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UButton(ptr_addr);
	}
	struct UButton GetDemoteButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UButton(ptr_addr);
	}
	struct UButton GetKickButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UButton(ptr_addr);
	}
	struct UHorizontalBox GetCommandBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UHorizontalBox GetFamePointBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UHorizontalBox(ptr_addr);
	}
	struct TMap<uint8_t , struct UTexture2D> Get_memberTextures() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct TMap<uint8_t , struct UTexture2D>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMicInputIndicator
{
public:
	UMicInputIndicator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionMoveToLocation
{
public:
	UPrisonerActionMoveToLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMinigameValidationParams
{
public:
	UMinigameValidationParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDefusalMinigameValidationParams
{
public:
	UDefusalMinigameValidationParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMiscStatics
{
public:
	UMiscStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AMission
{
public:
	AMission(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AObjective Get_activeObjective() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct AObjective(ptr_addr);
	}
	struct TArray<AObjective> Get_missionObjectiveClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct TArray<AObjective>(ptr_addr);
	}
	struct TMap<struct FString, struct AObjective> Get_missionObjectiveAssets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct TMap<struct FString, struct AObjective>(ptr_addr);
	}
	struct TArray<struct AObjective> Get_missionObjectives() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct TArray<struct AObjective>(ptr_addr);
	}
	struct FText Get_missionName() {
		return memory.read<struct FText>(m_addr + 808);
	}
	struct FText Get_missionCategory() {
		return memory.read<struct FText>(m_addr + 832);
	}
	struct FText Get_missionDescription() {
		return memory.read<struct FText>(m_addr + 856);
	}
	uint8_t  Get_missionType() {
		return memory.read<uint8_t >(m_addr + 880);
	}
	int32_t Get_missionOrdinalNumber() {
		return memory.read<int32_t>(m_addr + 884);
	}
	uint8_t  Get_missionState() {
		return memory.read<uint8_t >(m_addr + 888);
	}
	uint8_t  Get_missionFaction() {
		return memory.read<uint8_t >(m_addr + 889);
	}
	struct TSoftObjectPtr<UWorld> Get_missionLevel() {
		return memory.read<struct TSoftObjectPtr<UWorld>>(m_addr + 896);
	}
	struct FMissionReward Get_missionRewards() {
		return memory.read<struct FMissionReward>(m_addr + 936);
	}
	struct UTexture2D Get_missionBannerImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct UTexture2D(ptr_addr);
	}
	struct TArray<struct TSoftObjectPtr<ALocationTrigger>> Get_missionStartingLocations() {
		return memory.read<struct TArray<struct TSoftObjectPtr<ALocationTrigger>>>(m_addr + 968);
	}
	int32_t Get_intendedNumberOfPlayers() {
		return memory.read<int32_t>(m_addr + 984);
	}
	float Get_missionCooldownTime() {
		return memory.read<float>(m_addr + 988);
	}
	AMissionItemSpawner Get_missionItemSpawnerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return AMissionItemSpawner(ptr_addr);
	}
	struct TArray<struct FDialogueInfo> Get_missionIntroDialogues() {
		return memory.read<struct TArray<struct FDialogueInfo>>(m_addr + 1008);
	}
	struct TArray<struct FDialogueInfo> Get_missionOutroSuccessDialogues() {
		return memory.read<struct TArray<struct FDialogueInfo>>(m_addr + 1024);
	}
	struct TArray<struct FDialogueInfo> Get_missionOutroFailDialogues() {
		return memory.read<struct TArray<struct FDialogueInfo>>(m_addr + 1040);
	}
	struct TArray<struct FDialogueInfo> Get_missionOutroBelatedDialogues() {
		return memory.read<struct TArray<struct FDialogueInfo>>(m_addr + 1056);
	}
	bool Get_canInterruptDialogue() {
		return memory.read<bool>(m_addr + 1072);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Thirst
{
public:
	UPrisonerBodySymptom_Thirst(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_severityVsHydrationRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWeaponAttachmentMagazine
{
public:
	AWeaponAttachmentMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagContainer GetAmmunitionTags() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 2352);
	}
	bool GetRequiresFullCapacityOnLoad() {
		return memory.read<bool>(m_addr + 2384);
	}
	AAmmunitionItem GetDefaultFillAmmo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2392);
		return AAmmunitionItem(ptr_addr);
	}
	int32_t GetInitialAmmo() {
		return memory.read<int32_t>(m_addr + 2400);
	}
	struct TArray<struct FAmmunitionData> Get_ammoData() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 2408);
	}
	struct TArray<struct FAmmunitionData> Get_ammoOwnerHelper() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 2424);
	}
	int32_t Get_capacity() {
		return memory.read<int32_t>(m_addr + 2444);
	}
	struct TArray<struct UStaticMeshComponent> Get_cartridgeMeshComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2456);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}
	struct USkeletalMeshComponent Get_skeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2472);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct TArray<UItemActionSequenceLoadMagazine> Get_loadAmmoSequences() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2480);
		return struct TArray<UItemActionSequenceLoadMagazine>(ptr_addr);
	}
	URangedWeaponsSkill Get_rangedWeaponsSkillClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2496);
		return URangedWeaponsSkill(ptr_addr);
	}
	float Get_loadMagazineActionSpeedMultiplier() {
		return memory.read<float>(m_addr + 2504);
	}
	struct UTexture2D Get_inventoryIconFull() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2512);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMissionContainerWidget
{
public:
	UMissionContainerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USizeBox Get_missionObjectivesSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct USizeBox(ptr_addr);
	}
	struct UTextBlock Get_missionName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UVerticalBox Get_objectivesWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UVerticalBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMissionDialogueManager
{
public:
	AMissionDialogueManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_lineDurationModifier() {
		return memory.read<float>(m_addr + 572);
	}
	float Get_delayBetweenDialogues() {
		return memory.read<float>(m_addr + 576);
	}
	struct UAkAudioEvent Get_missionStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URangedResourceConsumerEntityComponentSetupMultipleProviders
{
public:
	URangedResourceConsumerEntityComponentSetupMultipleProviders(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetAutoConnect() {
		return memory.read<bool>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMissionItemSpawner
{
public:
	AMissionItemSpawner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FMissionItemInfo> Get_missionItemsInfo() {
		return memory.read<struct TArray<struct FMissionItemInfo>>(m_addr + 544);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMissionItemWidget
{
public:
	UMissionItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_missionItemName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_missionItemCategory() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UOverlay Get_selectionBorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UOverlay(ptr_addr);
	}
	struct UImage Get_stateImageIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UImage(ptr_addr);
	}
	struct UButton Get_expandButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UButton(ptr_addr);
	}
	struct UOverlay Get_objectiveContentOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UOverlay(ptr_addr);
	}
	struct UVerticalBox Get_objectiveContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UVerticalBox(ptr_addr);
	}
	struct UTexture2D Get_availableMissionIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_startedMissionIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_completedMissionIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D Get_failedMissionIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UTexture2D(ptr_addr);
	}
	struct FLinearColor Get_widgetNormalColor() {
		return memory.read<struct FLinearColor>(m_addr + 744);
	}
	struct FLinearColor Get_widgetCompletedColor() {
		return memory.read<struct FLinearColor>(m_addr + 760);
	}
	float Get_activeTextFontSize() {
		return memory.read<float>(m_addr + 776);
	}
	float Get_inactiveTextFontSize() {
		return memory.read<float>(m_addr + 780);
	}
	struct UAkAudioEvent Get_expandButtonOpenSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_expandButtonClosedSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_menuButtonClickAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct TMap<struct FString, struct TWeakObjectPtr<UObjectiveItemWidget>> Get_objectiveItemWidgets() {
		return memory.read<struct TMap<struct FString, struct TWeakObjectPtr<UObjectiveItemWidget>>>(m_addr + 1008);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMissionLevelManager
{
public:
	AMissionLevelManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMissionPrompt
{
public:
	UMissionPrompt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_description() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyEffect_CoolingSwingItem
{
public:
	UPrisonerBodyEffect_CoolingSwingItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_InstallAttachmentDescription
{
public:
	UPrisonerVehicleAction_InstallAttachmentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffectUIData_HealingSpeedModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffectUIData_HealingSpeedModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UModularTooltip
{
public:
	UModularTooltip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UModularTooltipSection Get_sectionClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return UModularTooltipSection(ptr_addr);
	}
	struct UTextBlock Get_descriptionTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UVerticalBox Get_sectionsVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UVerticalBox(ptr_addr);
	}
	struct UTextBlock Get_advancedDisplayHintTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElement
{
public:
	UModularTooltipElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UModularTooltipElementData Get_data() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UModularTooltipElementData(ptr_addr);
	}
	struct FDataTableRowHandle Get_neutralDispositionColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 616);
	}
	struct FDataTableRowHandle Get_goodDispositionColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 632);
	}
	struct FDataTableRowHandle Get_badDispositionColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 648);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElement_Value
{
public:
	UModularTooltipElement_Value(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_nameTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_valueTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElement_Timer
{
public:
	UModularTooltipElement_Timer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMetabolismAdvancedProgressBar Get_remainingTimeProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElement_Modifier
{
public:
	UModularTooltipElement_Modifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_modifierTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UTextBlock(ptr_addr);
	}
	struct UMetabolismAdvancedProgressBar Get_remainingTimeProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UMetabolismAdvancedProgressBar(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElement_AffectedBy
{
public:
	UModularTooltipElement_AffectedBy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_sourceTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UTextBlock(ptr_addr);
	}
	struct UOverlay Get_affectElementOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UOverlay(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElement_Affects
{
public:
	UModularTooltipElement_Affects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_targetTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UTextBlock(ptr_addr);
	}
	struct UOverlay Get_affectElementOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UOverlay(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElementData_Modifier
{
public:
	UModularTooltipElementData_Modifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElementData_ValueWithModifier
{
public:
	UModularTooltipElementData_ValueWithModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_EyePressure
{
public:
	UPrisonerBodySymptomCause_EyePressure(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UUPrisonerActionWashClothDescription
{
public:
	UUPrisonerActionWashClothDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipElementData_ValueWithModifier_Large
{
public:
	UModularTooltipElementData_ValueWithModifier_Large(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UModularTooltipSection
{
public:
	UModularTooltipSection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMargin Get_sectionElementsPadding() {
		return memory.read<struct FMargin>(m_addr + 608);
	}
	struct UImage Get_sectionSeparatorImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_sectionNameTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UVerticalBox Get_sectionElementsVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UVerticalBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionClean
{
public:
	UPrisonerActionClean(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class APrisonerHallucinationIllusion_SeeOtherPlayersWithWeirdMasks
{
public:
	APrisonerHallucinationIllusion_SeeOtherPlayersWithWeirdMasks(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UStaticMesh> Get_maskMeshes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct TArray<struct UStaticMesh>(ptr_addr);
	}
	struct TArray<struct UCharacterMesh> Get_maskCharacterMeshes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct TArray<struct UCharacterMesh>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMountable
{
public:
	UMountable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionUrinateDescription
{
public:
	UPrisonerActionUrinateDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UResourceLockingManager
{
public:
	UResourceLockingManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMountee
{
public:
	UMountee(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateRevolverActive
{
public:
	UWeaponStateRevolverActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMountPath
{
public:
	UMountPath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetPathTag() {
		return memory.read<struct FGameplayTag>(m_addr + 40);
	}
	struct UAnimMontage GetMountingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAnimMontage(ptr_addr);
	}
	float GetFallbackMountTime() {
		return memory.read<float>(m_addr + 56);
	}
	uint8_t  GetMountingMotionIntensity() {
		return memory.read<uint8_t >(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_Drunkenness
{
public:
	UPrisonerBodyCondition_Drunkenness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_severityVsAbsorbedAlcoholRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 192);
	}
	float Get_alcoholAbsorptionAtRecoveryStart() {
		return memory.read<float>(m_addr + 328);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 332);
	}
	float Get_vomitCheckInterval() {
		return memory.read<float>(m_addr + 348);
	}
	float Get_alcoholInStomachRatioVomitThreshold() {
		return memory.read<float>(m_addr + 352);
	}
	struct FRuntimeFloatCurve Get_vomitProbabilityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 360);
	}

private:
	std::uint64_t m_addr = 0;
};


class UServerPriceCache
{
public:
	UServerPriceCache(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_IntelligenceModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_IntelligenceModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UExternalMountPath
{
public:
	UExternalMountPath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetDestinationTransform() {
		return memory.read<struct FTransform>(m_addr + 64);
	}
	bool GetOverrideDestinationAcceptanceRadius() {
		return memory.read<bool>(m_addr + 112);
	}
	float GetDestinationAcceptanceRadius() {
		return memory.read<float>(m_addr + 116);
	}
	float GetAccesibilityCheck_MountSocketVerticalCorrection() {
		return memory.read<float>(m_addr + 120);
	}
	float GetAccesibilityCheck_CapsuleRadius() {
		return memory.read<float>(m_addr + 124);
	}
	float GetAccesibilityCheck_SweepCapsuleHalfHeight() {
		return memory.read<float>(m_addr + 128);
	}
	float GetAccesibilityCheck_OverlapCapsuleHalfHeight() {
		return memory.read<float>(m_addr + 132);
	}
	struct UAnimMontage GetUnmountingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UAnimMontage(ptr_addr);
	}
	float GetFallbackUnmountTime() {
		return memory.read<float>(m_addr + 144);
	}
	uint8_t  GetUnmountingMotionIntensity() {
		return memory.read<uint8_t >(m_addr + 148);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyEffect_Death
{
public:
	UPrisonerBodyEffect_Death(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlantSpecies
{
public:
	UPlantSpecies(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetSpeciesName() {
		return memory.read<struct FText>(m_addr + 48);
	}
	struct FFloatInterval GetSeedsOptimaltemperature() {
		return memory.read<struct FFloatInterval>(m_addr + 72);
	}
	struct FFloatInterval GetGrowthOptimalTemperature() {
		return memory.read<struct FFloatInterval>(m_addr + 80);
	}
	float GetStageGrowthTimeGameHours() {
		return memory.read<float>(m_addr + 88);
	}
	uint8_t  GetLastStage() {
		return memory.read<uint8_t >(m_addr + 92);
	}
	float GetLastStageLifetime() {
		return memory.read<float>(m_addr + 96);
	}
	float GetLastStageDeathStartPercent() {
		return memory.read<float>(m_addr + 100);
	}
	struct TArray<struct UPlantPestSpecies> GetPests() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct TArray<struct UPlantPestSpecies>(ptr_addr);
	}
	struct TArray<struct UPlantDiseaseSpecies> GetDiseases() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct TArray<struct UPlantDiseaseSpecies>(ptr_addr);
	}
	AItem GetSeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return AItem(ptr_addr);
	}
	struct FPlantMeshData GetPlantMesh() {
		return memory.read<struct FPlantMeshData>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMountPathBlocker
{
public:
	UMountPathBlocker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMountSlot
{
public:
	UMountSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMovableCollisionFieldComponent
{
public:
	UMovableCollisionFieldComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_collisionCheckInterval() {
		return memory.read<float>(m_addr + 176);
	}
	struct FMovableCollisionFieldState Get_currentState() {
		return memory.read<struct FMovableCollisionFieldState>(m_addr + 180);
	}
	struct FMovableCollisionFieldMoveInfo Get_moveInfo[2]() {
		return memory.read<struct FMovableCollisionFieldMoveInfo>(m_addr + 208);
	}
	struct FVector Get_startRelativeLocation() {
		return memory.read<struct FVector>(m_addr + 224);
	}
	struct FVector Get_endRelativeLocation() {
		return memory.read<struct FVector>(m_addr + 236);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScopeableItemComponentState
{
public:
	UScopeableItemComponentState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCurrentZoomLevel() {
		return memory.read<int32_t>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMusicPlayerDisplayWidget
{
public:
	UMusicPlayerDisplayWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_shuffleImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_repeatImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_previousImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_pauseImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_playImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_nextImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_songTitleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	float Get_inactiveOpacity() {
		return memory.read<float>(m_addr + 664);
	}
	float Get_iconActivityDuration() {
		return memory.read<float>(m_addr + 668);
	}
	float Get_trackNameDuration() {
		return memory.read<float>(m_addr + 672);
	}
	float Get_radioStationNameDuration() {
		return memory.read<float>(m_addr + 676);
	}
	float Get_trackNameOffsetStep() {
		return memory.read<float>(m_addr + 680);
	}
	float Get_trackNameOffsetPadding() {
		return memory.read<float>(m_addr + 684);
	}
	float Get_trackNameWaitingDuration() {
		return memory.read<float>(m_addr + 688);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNameableItemComponentState
{
public:
	UNameableItemComponentState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNetworkPredictionComponent
{
public:
	UNetworkPredictionComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_interpolationBackTime() {
		return memory.read<float>(m_addr + 240);
	}
	float Get_timeSmoothing() {
		return memory.read<float>(m_addr + 244);
	}
	float Get_positionLerpSpeed() {
		return memory.read<float>(m_addr + 248);
	}
	float Get_rotationLerpSpeed() {
		return memory.read<float>(m_addr + 252);
	}
	uint8_t  Get_syncPosition() {
		return memory.read<uint8_t >(m_addr + 256);
	}
	uint8_t  Get_syncRotation() {
		return memory.read<uint8_t >(m_addr + 257);
	}
	uint8_t  Get_syncVelocity() {
		return memory.read<uint8_t >(m_addr + 258);
	}
	uint8_t  Get_syncAngularVelocity() {
		return memory.read<uint8_t >(m_addr + 259);
	}
	bool Get_isPositionCompressed() {
		return memory.read<bool>(m_addr + 260);
	}
	bool Get_isRotationCompressed() {
		return memory.read<bool>(m_addr + 261);
	}
	bool Get_isVelocityCompressed() {
		return memory.read<bool>(m_addr + 262);
	}
	bool Get_isAngularVelocityCompressed() {
		return memory.read<bool>(m_addr + 263);
	}
	float Get_sendRate() {
		return memory.read<float>(m_addr + 264);
	}
	float Get_restSendRate() {
		return memory.read<float>(m_addr + 268);
	}
	float Get_atRestPositionThreshold() {
		return memory.read<float>(m_addr + 372);
	}
	float Get_atRestRotationThreshold() {
		return memory.read<float>(m_addr + 376);
	}
	float Get_atRestDeltaTimeThreshold() {
		return memory.read<float>(m_addr + 380);
	}
	float Get_distanceThresholdToSnap() {
		return memory.read<float>(m_addr + 384);
	}
	float Get_minTimeToCoverPosition() {
		return memory.read<float>(m_addr + 464);
	}
	float Get_maxTimeToCoverPosition() {
		return memory.read<float>(m_addr + 468);
	}
	float Get_minTimeToCoverRotation() {
		return memory.read<float>(m_addr + 472);
	}
	float Get_maxTimeToCoverRotation() {
		return memory.read<float>(m_addr + 476);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNetworkStatics
{
public:
	UNetworkStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ANightVisionGogglesItem
{
public:
	ANightVisionGogglesItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetActivatedSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2488);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetDeactivatedSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2496);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FMulticastInlineDelegate GetActivatedChanged() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 2504);
	}
	struct UBasicGameResourceContainerComponent Get_resourceContainerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2528);
		return struct UBasicGameResourceContainerComponent(ptr_addr);
	}
	struct FGameplayTag Get_nightVisionGogglesOnTag() {
		return memory.read<struct FGameplayTag>(m_addr + 2536);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNotificationPanelWidget
{
public:
	UNotificationPanelWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVerticalBox Get_notificationBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UVerticalBox(ptr_addr);
	}
	struct UBorder Get_nextEventBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UBorder(ptr_addr);
	}
	struct UTextBlock Get_nextEventCountdown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_nextEventLocation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UBorder Get_eventCancelBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UBorder(ptr_addr);
	}
	struct UTextBlock Get_eventCancelTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UBorder Get_eventTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UBorder(ptr_addr);
	}
	struct UTextBlock Get_eventTimeText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URestAssetData
{
public:
	URestAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetRestingMode() {
		return memory.read<uint8_t >(m_addr + 48);
	}
	struct UAnimSequenceBase GetRestingAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct TArray<struct FVector> GetAdditionalEndRestLocations() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class ANotificationsManager
{
public:
	ANotificationsManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FDbIntegerId, struct UNotificationDescription> Get_queuedNotifications() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct TMap<struct FDbIntegerId, struct UNotificationDescription>(ptr_addr);
	}
	struct TArray<struct UNotificationChain> Get_queuedNotificationChains() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct TArray<struct UNotificationChain>(ptr_addr);
	}
	int64_t Get_notificationTimeout() {
		return memory.read<int64_t>(m_addr + 720);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNotificationWidget
{
public:
	UNotificationWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USizeBox Get_notificationSize() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct USizeBox(ptr_addr);
	}
	struct UImage Get_icon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetAnimation Get_increaseToMaxSize() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UOpenItemAction
{
public:
	UOpenItemAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UObjectCondition
{
public:
	UObjectCondition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UObjectiveItemWidget
{
public:
	UObjectiveItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_objectiveItemText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_bullet() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_bulletCompleted() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct FLinearColor Get_objectiveActiveColor() {
		return memory.read<struct FLinearColor>(m_addr + 632);
	}
	struct FLinearColor Get_objectiveCompletedColor() {
		return memory.read<struct FLinearColor>(m_addr + 648);
	}
	struct FLinearColor Get_objectiveFailedColor() {
		return memory.read<struct FLinearColor>(m_addr + 664);
	}

private:
	std::uint64_t m_addr = 0;
};


class UObjectivesWidget
{
public:
	UObjectivesWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_objectiveDescription() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UHorizontalBox Get_amountTracker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UTextBlock Get_currentAmount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_totalAmount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct FLinearColor GetactiveObjectiveFontColor() {
		return memory.read<struct FLinearColor>(m_addr + 640);
	}
	struct FLinearColor GetinctiveObjectiveFontColor() {
		return memory.read<struct FLinearColor>(m_addr + 656);
	}
	int32_t GetactiveObjectiveFontSize() {
		return memory.read<int32_t>(m_addr + 672);
	}
	int32_t GetinactiveObjectiveFontSize() {
		return memory.read<int32_t>(m_addr + 676);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPaddleItemTag
{
public:
	UPaddleItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBlendSpace GetPaddlingLHandAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace GetPaddlingRHandAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UBlendSpace(ptr_addr);
	}
	struct UAnimSequence GetPaddlingLToRAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence GetPaddlingRToLAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAnimSequence(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UParachuteItemTag
{
public:
	UParachuteItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPauseMenu
{
public:
	UPauseMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UConZStandardButton Get_resume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_clientSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_serverSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_addToFavourites() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_commitSuicide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_statistics() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_mainMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_quitGame() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UVerticalBox Get_messageBoxPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UVerticalBox(ptr_addr);
	}
	struct UPanelWidget Get_mainPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UPanelWidget(ptr_addr);
	}
	struct UTextBlock Get_suicideTimeCooldown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UTextBlock(ptr_addr);
	}
	UTextOnlyTooltip Get_serverSettingsLockedTooltipClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return UTextOnlyTooltip(ptr_addr);
	}
	struct UTextOnlyTooltip Get_serverSettingsLockedTooltip() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UTextOnlyTooltip(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPauseMenuUIController
{
public:
	UPauseMenuUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent Get_resumeAllSounds() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_stopAllSounds() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_pauseAllSounds() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPhoenixTearsComponent
{
public:
	UPhoenixTearsComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage Get_itemInjectionMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPhotoModeMainPanel
{
public:
	UPhotoModeMainPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPanelWidget Get_mainPanelContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UPanelWidget(ptr_addr);
	}
	struct UTabGroup Get_coreMenuTabButtons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTabGroup(ptr_addr);
	}
	struct UWidgetSwitcher Get_coreMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UOverlay Get_inputLegend() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UOverlay(ptr_addr);
	}
	struct UImage Get_gridLine0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_gridLine1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_gridLine2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_gridLine3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_frameDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_logoDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UImage(ptr_addr);
	}
	struct FText Get_cameraTabTitle() {
		return memory.read<struct FText>(m_addr + 688);
	}
	struct FText Get_effectsTabTitle() {
		return memory.read<struct FText>(m_addr + 712);
	}
	struct FText Get_frameTabTitle() {
		return memory.read<struct FText>(m_addr + 736);
	}
	struct FText Get_bodyTabTitle() {
		return memory.read<struct FText>(m_addr + 760);
	}
	struct TArray<struct TSoftObjectPtr<UTexture>> Get_frames() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UTexture>>>(m_addr + 784);
	}
	UTabButton Get_buttonClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return UTabButton(ptr_addr);
	}
	struct UCarouselWithLabel Get_cameraMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UCarouselWithLabel(ptr_addr);
	}
	struct USliderWithLabelAndNumber Get_cameraTilt() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct USliderWithLabelAndNumber(ptr_addr);
	}
	struct USliderWithLabelAndNumber Get_fieldOfView() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct USliderWithLabelAndNumber(ptr_addr);
	}
	struct USliderWithLabelAndNumber Get_depthOfField() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct USliderWithLabelAndNumber(ptr_addr);
	}
	struct USliderWithLabelAndNumber Get_focusDistance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct USliderWithLabelAndNumber(ptr_addr);
	}
	struct USliderWithLabelAndNumber Get_selfieLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct USliderWithLabelAndNumber(ptr_addr);
	}
	struct USliderWithLabelAndNumber Get_exposure() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct USliderWithLabelAndNumber(ptr_addr);
	}
	struct USliderWithLabelAndNumber Get_contrast() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct USliderWithLabelAndNumber(ptr_addr);
	}
	struct USliderWithLabelAndNumber Get_vignette() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct USliderWithLabelAndNumber(ptr_addr);
	}
	struct USliderWithLabelAndNumber Get_chromaticAberration() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct USliderWithLabelAndNumber(ptr_addr);
	}
	struct USliderWithLabelAndNumber Get_grain() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct USliderWithLabelAndNumber(ptr_addr);
	}
	struct USliderWithLabelAndNumber Get_time() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct USliderWithLabelAndNumber(ptr_addr);
	}
	struct UCarouselWithLabel Get_frame() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UCarouselWithLabel(ptr_addr);
	}
	struct UCarouselWithLabel Get_logo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UCarouselWithLabel(ptr_addr);
	}
	struct UCarouselWithLabel Get_aspectRatio() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UCarouselWithLabel(ptr_addr);
	}
	struct UCarouselWithLabel Get_lookAtCamera() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UCarouselWithLabel(ptr_addr);
	}
	struct UCarouselWithLabel Get_upperBodyPose() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct UCarouselWithLabel(ptr_addr);
	}
	struct UCarouselWithLabel Get_lowerBodyPose() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 952);
		return struct UCarouselWithLabel(ptr_addr);
	}
	struct UCarouselWithLabel Get_facialExpression() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct UCarouselWithLabel(ptr_addr);
	}
	struct UTextBlock Get_selfieModeNote() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_bodyPoseNote() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 976);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_facialExpressionNote() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 984);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class APhotoModePawn
{
public:
	APhotoModePawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPhotoModeMainPanel GetHudWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return UPhotoModeMainPanel(ptr_addr);
	}
	UPrisonerPhotoModeAnimInstance GetAnimInstanceClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return UPrisonerPhotoModeAnimInstance(ptr_addr);
	}
	struct UCineCameraComponent Get_camera() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UCineCameraComponent(ptr_addr);
	}
	struct USpotLightComponent Get_light() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct USpotLightComponent(ptr_addr);
	}
	struct UVisionEffectsComponent Get_visionEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UVisionEffectsComponent(ptr_addr);
	}
	struct UAkAudioEvent Get_shutterSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_maxFocusDistance() {
		return memory.read<float>(m_addr + 712);
	}
	float Get_collisionSphereRadius() {
		return memory.read<float>(m_addr + 716);
	}
	float Get_minOrbitingDistance() {
		return memory.read<float>(m_addr + 720);
	}
	float Get_maxDistanceFromTarget() {
		return memory.read<float>(m_addr + 724);
	}
	float Get_desiredOrbitDistance() {
		return memory.read<float>(m_addr + 728);
	}
	float Get_maxMultiplayerCameraHeightDifference() {
		return memory.read<float>(m_addr + 732);
	}
	float Get_maxMultiplayerExposureValue() {
		return memory.read<float>(m_addr + 736);
	}
	float Get_maxMultiplayerCameraFOV() {
		return memory.read<float>(m_addr + 740);
	}
	float Get_keyInputCameraSpeed() {
		return memory.read<float>(m_addr + 744);
	}
	float Get_timeDilationInterpSpeed() {
		return memory.read<float>(m_addr + 748);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimInstance_Airplane
{
public:
	UPrisonerAnimInstance_Airplane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_isDriver() {
		return memory.read<bool>(m_addr + 696);
	}
	float Get_pitchAmount() {
		return memory.read<float>(m_addr + 700);
	}
	float Get_rollAmount() {
		return memory.read<float>(m_addr + 704);
	}
	float Get_yawAmount() {
		return memory.read<float>(m_addr + 708);
	}
	struct FTransform Get_throttleTransform() {
		return memory.read<struct FTransform>(m_addr + 720);
	}
	struct FTransform Get_leftPedalTransform() {
		return memory.read<struct FTransform>(m_addr + 768);
	}
	struct FTransform Get_rightPedalTransform() {
		return memory.read<struct FTransform>(m_addr + 816);
	}
	struct FTransform Get_stickTransform() {
		return memory.read<struct FTransform>(m_addr + 864);
	}
	struct UBlendSpace Get_driverIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace Get_passengerIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UBlendSpace(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPhysicsStatics
{
public:
	UPhysicsStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPickupItemAction
{
public:
	UPickupItemAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URequestMinigameToolsResponse
{
public:
	URequestMinigameToolsResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionExtinguishFire
{
public:
	UPrisonerActionExtinguishFire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlaceableActorBaseReplicatedState
{
public:
	UPlaceableActorBaseReplicatedState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlaceableActorBaseBuildingReplicatedState
{
public:
	UPlaceableActorBaseBuildingReplicatedState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class APlaceableActorBaseBuilding
{
public:
	APlaceableActorBaseBuilding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_maxNumberOfTiles() {
		return memory.read<int32_t>(m_addr + 1256);
	}
	float Get_maxHeightDifferenceForTiling() {
		return memory.read<float>(m_addr + 1260);
	}
	float Get_maxTileHeightAdjustionUp() {
		return memory.read<float>(m_addr + 1264);
	}
	float Get_maxTileHeightAdjustionDown() {
		return memory.read<float>(m_addr + 1268);
	}
	float Get_tileSnappingAngle() {
		return memory.read<float>(m_addr + 1272);
	}
	float Get_sizeVariatedTilesMaxHeightDifference() {
		return memory.read<float>(m_addr + 1276);
	}
	float Get_maxGroundPointDistance() {
		return memory.read<float>(m_addr + 1280);
	}
	float Get_groundPointsTraceHeight() {
		return memory.read<float>(m_addr + 1284);
	}
	float Get_groundPointsTraceDepth() {
		return memory.read<float>(m_addr + 1288);
	}
	float Get_maxPlacementLengthForSizeVariatedTiles() {
		return memory.read<float>(m_addr + 1292);
	}
	struct FTilesData Get_tilesData() {
		return memory.read<struct FTilesData>(m_addr + 1352);
	}
	struct UStaticMeshComponent Get_flagAreaMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1376);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_primaryMaterialFriendlyFlag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1384);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct FVector Get_replicatedFirstPointLocation() {
		return memory.read<struct FVector>(m_addr + 1392);
	}
	struct FRotator Get_replicatedFirstPointRotation() {
		return memory.read<struct FRotator>(m_addr + 1404);
	}
	uint8_t  Get_placementSubState() {
		return memory.read<uint8_t >(m_addr + 1416);
	}
	uint8_t  Get_stateFlags() {
		return memory.read<uint8_t >(m_addr + 1417);
	}
	struct TArray<struct FSizeVariatedTilesData> Get_sizeVariationData() {
		return memory.read<struct TArray<struct FSizeVariatedTilesData>>(m_addr + 1472);
	}

private:
	std::uint64_t m_addr = 0;
};


class APlaceableActorBaseUpgrade
{
public:
	APlaceableActorBaseUpgrade(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FConZBaseElementIdentifier Get_elementToBeUpgraded() {
		return memory.read<struct FConZBaseElementIdentifier>(m_addr + 1256);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_RadiationPresence
{
public:
	UPrisonerBodyConditionUIData_RadiationPresence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class APlaceableActorFortifications
{
public:
	APlaceableActorFortifications(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCauseUIData_Fatigue
{
public:
	UPrisonerBodySymptomCauseUIData_Fatigue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class APlaceableActorGarden
{
public:
	APlaceableActorGarden(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_gardenPlacementState() {
		return memory.read<uint8_t >(m_addr + 1256);
	}
	struct TArray<struct UStaticMeshComponent> Get_staticMeshComponents_Main() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1312);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}
	struct TArray<struct UStaticMeshComponent> Get_staticMeshComponents_Outline() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1328);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}
	struct TArray<struct UStaticMeshComponent> Get_staticMeshComponents_Depth() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1344);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}
	struct TArray<struct UStaticMeshComponent> Get_directionIndicatorStaticMeshComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1360);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}
	struct FBox2D Get_replicatedGardenSize() {
		return memory.read<struct FBox2D>(m_addr + 1376);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlaceableOnRackLargeItemTag
{
public:
	UPlaceableOnRackLargeItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionUnequipWeaponDescription
{
public:
	UPrisonerActionUnequipWeaponDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlacedPlaceableWidget
{
public:
	UPlacedPlaceableWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVerticalBox Get_container() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UVerticalBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class APlantGrowthDisplay
{
public:
	APlantGrowthDisplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPlantSpecies Get_plantSpecies() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UPlantSpecies(ptr_addr);
	}
	bool Get_animateGrowth() {
		return memory.read<bool>(m_addr + 552);
	}
	float Get_growthSpeed() {
		return memory.read<float>(m_addr + 556);
	}
	float Get_growthPercentage() {
		return memory.read<float>(m_addr + 560);
	}
	float Get_dehydration() {
		return memory.read<float>(m_addr + 564);
	}
	float Get_pestsIntensity() {
		return memory.read<float>(m_addr + 568);
	}
	float Get_diseasesIntensity() {
		return memory.read<float>(m_addr + 572);
	}
	struct FString Get_stageText() {
		return memory.read<struct FString>(m_addr + 576);
	}
	struct UNiagaraSystem Get_pestsParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct UNiagaraSystem(ptr_addr);
	}
	struct UNiagaraComponent Get_pestsParticleComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct UNiagaraComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlantingPanel
{
public:
	UPlantingPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImageSlotWidget Get_seedSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImageSlotWidget(ptr_addr);
	}
	struct UImageSlotWidget Get_fertilizerSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImageSlotWidget(ptr_addr);
	}
	struct FSlateBrush Get_organicFertilizerIcon() {
		return memory.read<struct FSlateBrush>(m_addr + 632);
	}
	struct FSlateBrush Get_industrialFertilizerIcon() {
		return memory.read<struct FSlateBrush>(m_addr + 768);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFillVehicleFuelWithItemDescription
{
public:
	UPrisonerActionFillVehicleFuelWithItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlantingPanelUIController
{
public:
	UPlantingPanelUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlantPestSpecies
{
public:
	UPlantPestSpecies(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetSpeciesName() {
		return memory.read<struct FText>(m_addr + 48);
	}
	float GetHarvestingReductionPercentage() {
		return memory.read<float>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPowerCableMeshSet
{
public:
	UPowerCableMeshSet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPowerCableMeshInfo> GetMeshes() {
		return memory.read<struct TArray<struct FPowerCableMeshInfo>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlantDiseaseSpecies
{
public:
	UPlantDiseaseSpecies(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetSpeciesName() {
		return memory.read<struct FText>(m_addr + 48);
	}
	float GetHarvestingReductionPercentage() {
		return memory.read<float>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlantStatusIndicatorWidget
{
public:
	UPlantStatusIndicatorWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_speciesNameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_growthStageText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_sunEnergyRateText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_waterAmountText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_fertilizerText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UVerticalBox Get_conditionVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UVerticalBox(ptr_addr);
	}
	struct UHorizontalBox Get_pestHorizontalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UImage Get_pestStatusIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_pestStatusText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct UHorizontalBox Get_diseaseHorizontalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UImage Get_diseaseStatusIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_diseaseStatusText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTextBlock(ptr_addr);
	}
	struct UHorizontalBox Get_weedsHorizontalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UImage Get_weedsStatusIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_weedsStatusText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UTextBlock(ptr_addr);
	}
	struct FSlateBrush Get_pestIconBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 728);
	}
	struct FSlateBrush Get_diseaseIconBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 864);
	}
	struct FSlateBrush Get_weedsIconBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 1000);
	}
	struct FSlateBrush Get_treatmentIconBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 1136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlantStatusIndicatorUIController
{
public:
	UPlantStatusIndicatorUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTradeableDiscountCondition
{
public:
	UTradeableDiscountCondition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleGroupSpawningPreset
{
public:
	UVehicleGroupSpawningPreset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UVehiclePreset> GetVehiclePresets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct UVehiclePreset>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlasticSurgeryDiscountCondition
{
public:
	UPlasticSurgeryDiscountCondition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlasticSurgeryMenuWidget
{
public:
	UPlasticSurgeryMenuWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UOverlay Get_overlayMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UOverlay(ptr_addr);
	}
	struct UWidgetSwitcher Get_pageSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTrashNamedCarouselWidget Get_carouselGender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTrashNamedCarouselWidget(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderHead() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UCCGameUpgradeConditionDisplayWidget Get_appearanceUpgradeConditionDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UCCGameUpgradeConditionDisplayWidget(ptr_addr);
	}
	struct UPresetColorPicker Get_presetColorPickerSkinTone() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UPresetColorPicker(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderAge() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UTrashNamedCarouselWidget Get_carouselConcealedMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTrashNamedCarouselWidget(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderPenisBreastSize() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UTrashNamedCarouselWidget Get_carouselTattoos() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTrashNamedCarouselWidget(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderTattooStyle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UCCGameUpgradeConditionDisplayWidget Get_tattooUpgradeConditionDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UCCGameUpgradeConditionDisplayWidget(ptr_addr);
	}
	struct UConZStandardButton Get_buttonRandomizeCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonNextToFace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderFaceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UPresetColorPicker Get_presetColorPickerEyeColor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UPresetColorPicker(ptr_addr);
	}
	struct UTrashNamedSliderWidget Get_sliderIrisType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UTrashNamedSliderWidget(ptr_addr);
	}
	struct UConZStandardButton Get_buttonBackToCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonRandomizeFace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonApplyPlasticSurgery() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UOverlay Get_overlayPlasticSurgeryConfirmation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UOverlay(ptr_addr);
	}
	struct UConZStandardButton Get_buttonCancelConfirmation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonContinueConfirmation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UScrollBox Get_faceOptionsScrollbox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UScrollBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateBowFire
{
public:
	UWeaponStateBowFire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlasticSurgeryMugshot
{
public:
	UPlasticSurgeryMugshot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_imgSelection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UImage(ptr_addr);
	}
	struct UWidgetSwitcher Get_mugshotGenderSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher Get_maleMugshotSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher Get_femaleMugshotSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UWidgetSwitcher(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class APrisonerHallucinationIllusion_SpawnCompanionCrow
{
public:
	APrisonerHallucinationIllusion_SpawnCompanionCrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	ACompanionCrow Get_crowClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return ACompanionCrow(ptr_addr);
	}
	struct FName Get_crowAttachSocketName() {
		return memory.read<struct FName>(m_addr + 552);
	}
	struct FTransform Get_attachedCrowRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 560);
	}
	struct FFloatInterval Get_responseIdleInitialInterval() {
		return memory.read<struct FFloatInterval>(m_addr + 608);
	}
	struct FFloatInterval Get_responseIdleInterval() {
		return memory.read<struct FFloatInterval>(m_addr + 616);
	}
	struct TArray<struct UAnimMontage> Get_responseIdleMontages() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct TArray<struct UAnimMontage>(ptr_addr);
	}
	struct FVector Get_flyoffDirection() {
		return memory.read<struct FVector>(m_addr + 640);
	}
	struct FRuntimeFloatCurve Get_flyoffSpeedVsTime() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 656);
	}
	struct UAkAudioEvent Get_flyoffAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_cruisingSpeedVsTime() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 800);
	}
	struct FRuntimeFloatCurve Get_cruisingRotationRateVsTime() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 936);
	}
	struct FRuntimeFloatCurve Get_rollVsSteerRate() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1072);
	}
	float Get_landingDuration() {
		return memory.read<float>(m_addr + 1208);
	}
	struct UAkAudioEvent Get_landingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1216);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_landedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1224);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAnimMontage Get_landedMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1232);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlasticSurgeryService
{
public:
	UPlasticSurgeryService(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayerManagementActivePlayer
{
public:
	UPlayerManagementActivePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayerManagementMenu
{
public:
	UPlayerManagementMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton Get_buttonBack() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_buttonApply() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlayerManagementUIController
{
public:
	UPlayerManagementUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFillVehicleFuelWithReplenishableResourceDescription
{
public:
	UPrisonerActionFillVehicleFuelWithReplenishableResourceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayerRpcChannel
{
public:
	UPlayerRpcChannel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPossibleCookingIngredientWidget
{
public:
	UPossibleCookingIngredientWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_ingredientIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_titleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPostItemsSpawnedActions_SetCashAmount
{
public:
	UPostItemsSpawnedActions_SetCashAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_useAbsoluteAmount() {
		return memory.read<bool>(m_addr + 40);
	}
	struct FInt32Interval Get_absoluteAmount() {
		return memory.read<struct FInt32Interval>(m_addr + 44);
	}
	bool Get_useAmountRatio() {
		return memory.read<bool>(m_addr + 52);
	}
	struct FFloatInterval Get_amountRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class APracticeTrapItem
{
public:
	APracticeTrapItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCheckTime
{
public:
	UPrisonerActionCheckTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFixTire
{
public:
	UPrisonerActionFixTire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPresetColorPicker
{
public:
	UPresetColorPicker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPanelWidget Get_container() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UPanelWidget(ptr_addr);
	}
	struct UTextBlock Get_name() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct USelectionOverlayWidget Get_focusBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct USelectionOverlayWidget(ptr_addr);
	}
	struct FText Get_mainLabel() {
		return memory.read<struct FText>(m_addr + 656);
	}
	struct FSlateFontInfo Get_defaultFont() {
		return memory.read<struct FSlateFontInfo>(m_addr + 680);
	}
	UPresetColorPickerButton Get_buttonClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return UPresetColorPickerButton(ptr_addr);
	}
	struct FMargin Get_buttonPadding() {
		return memory.read<struct FMargin>(m_addr + 776);
	}
	struct TArray<struct FLinearColor> Get_palette() {
		return memory.read<struct TArray<struct FLinearColor>>(m_addr + 792);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPreviousNextSwitchWidget
{
public:
	UPreviousNextSwitchWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetIndexChanged() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 608);
	}
	struct UButton GetPreviousButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UButton(ptr_addr);
	}
	struct UButton GetNextButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UButton(ptr_addr);
	}
	int32_t Get_index() {
		return memory.read<int32_t>(m_addr + 648);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_Gearbox
{
public:
	UVehicleAttachment_Gearbox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVehicleAttachmentGearboxSetup GetGearboxSetup() {
		return memory.read<struct FVehicleAttachmentGearboxSetup>(m_addr + 784);
	}
	struct FVehicleAttachmentGearboxSimulationData Get_simulationData() {
		return memory.read<struct FVehicleAttachmentGearboxSimulationData>(m_addr + 832);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAction
{
public:
	UPrisonerAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionAddFertilizerDescription
{
public:
	UPrisonerActionAddFertilizerDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffectUIData_StrengthModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffectUIData_StrengthModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFillGameResourceContainer
{
public:
	UPrisonerActionFillGameResourceContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionAddWeaponAttachment
{
public:
	UPrisonerActionAddWeaponAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionAlignTransform
{
public:
	UPrisonerActionAlignTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionAnalyzeAnimalTrackDescription
{
public:
	UPrisonerActionAnalyzeAnimalTrackDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionApplyPesticide
{
public:
	UPrisonerActionApplyPesticide(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionAttachItem
{
public:
	UPrisonerActionAttachItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URadioProgram
{
public:
	URadioProgram(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<URadioCategory> GetCategoryClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<URadioCategory>(ptr_addr);
	}
	struct TArray<struct URadioCategory> GetCategories() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct URadioCategory>(ptr_addr);
	}
	int32_t Get_categoryIndex() {
		return memory.read<int32_t>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionBlowAir
{
public:
	UPrisonerActionBlowAir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionBlowAirDescription
{
public:
	UPrisonerActionBlowAirDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionBury
{
public:
	UPrisonerActionBury(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionBuryDescription
{
public:
	UPrisonerActionBuryDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChangeStance
{
public:
	UPrisonerActionChangeStance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDestroyItemDescription
{
public:
	UPrisonerActionDestroyItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChangeStanceWaitEndOnOwningClientDescription
{
public:
	UPrisonerActionChangeStanceWaitEndOnOwningClientDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_StomachGrowling
{
public:
	UPrisonerBodySymptomCause_StomachGrowling(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChangeVehicleWeaponAimingStance
{
public:
	UPrisonerActionChangeVehicleWeaponAimingStance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDrinkFromReplenishableResourceDescription
{
public:
	UPrisonerActionDrinkFromReplenishableResourceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameResourceContainerProxyForReplenishableResource GetProxyForReplenishableResource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UGameResourceContainerProxyForReplenishableResource(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionMoveToLocationDescription
{
public:
	UPrisonerActionMoveToLocationDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCheckChainsawFuelStatus
{
public:
	UPrisonerActionCheckChainsawFuelStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCheckChainsawFuelStatusDescription
{
public:
	UPrisonerActionCheckChainsawFuelStatusDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCheckThermalSensorDescription
{
public:
	UPrisonerActionCheckThermalSensorDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCheckTimeDescription
{
public:
	UPrisonerActionCheckTimeDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFixTireDescription
{
public:
	UPrisonerActionFixTireDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCheckWeaponAmmo
{
public:
	UPrisonerActionCheckWeaponAmmo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponBowAnimInstance
{
public:
	UWeaponBowAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_armsShakeValue() {
		return memory.read<float>(m_addr + 776);
	}
	bool Get_useArrowLookAt() {
		return memory.read<bool>(m_addr + 780);
	}
	struct UAnimSequenceBase Get_aimingDownTheSightsAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_aimingDownTheSightsStillAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCheckWeaponFiringMode
{
public:
	UPrisonerActionCheckWeaponFiringMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAsepsisItemTag
{
public:
	UAsepsisItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAsepsis() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChopBaseElement
{
public:
	UPrisonerActionChopBaseElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionChopItem
{
public:
	UPrisonerActionChopItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_ForeignSubstancePoisoning
{
public:
	UPrisonerBodyCondition_ForeignSubstancePoisoning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_severityVsForeignSubstanceAmountRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 192);
	}
	float Get_foreignSubstanceAmountRatioToExist() {
		return memory.read<float>(m_addr + 328);
	}
	float Get_foreignSubstanceAmountAtRecoveryStart() {
		return memory.read<float>(m_addr + 332);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 336);
	}
	struct FPrisonerBodyBoneGroupsVsSeverity Get_affectedBodyBoneGroupsVsSeverity() {
		return memory.read<struct FPrisonerBodyBoneGroupsVsSeverity>(m_addr + 344);
	}
	struct FPrisonerBodyMuscleGroupsVsSeverity Get_affectedBodyMuscleGroupsVsSeverity() {
		return memory.read<struct FPrisonerBodyMuscleGroupsVsSeverity>(m_addr + 360);
	}
	struct FPrisonerBodyOrganGroupsVsSeverity Get_affectedBodyOrganGroupsVsSeverity() {
		return memory.read<struct FPrisonerBodyOrganGroupsVsSeverity>(m_addr + 376);
	}
	UForeignSubstance Get_foreignSubstanceClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 392);
		return UForeignSubstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponAccuracyGroup
{
public:
	UWeaponAccuracyGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNormalStandFrom() {
		return memory.read<float>(m_addr + 48);
	}
	float GetNormalStandTo() {
		return memory.read<float>(m_addr + 52);
	}
	float GetNormalCrouchFrom() {
		return memory.read<float>(m_addr + 56);
	}
	float GetNormalCrouchTo() {
		return memory.read<float>(m_addr + 60);
	}
	float GetNormalProneFrom() {
		return memory.read<float>(m_addr + 64);
	}
	float GetNormalProneTo() {
		return memory.read<float>(m_addr + 68);
	}
	float GetScopedStandFrom() {
		return memory.read<float>(m_addr + 72);
	}
	float GetScopedStandTo() {
		return memory.read<float>(m_addr + 76);
	}
	float GetScopedCrouchFrom() {
		return memory.read<float>(m_addr + 80);
	}
	float GetScopedCrouchTo() {
		return memory.read<float>(m_addr + 84);
	}
	float GetScopedProneFrom() {
		return memory.read<float>(m_addr + 88);
	}
	float GetScopedProneTo() {
		return memory.read<float>(m_addr + 92);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionClaimKillDescription
{
public:
	UPrisonerActionClaimKillDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDefecateDescription
{
public:
	UPrisonerActionDefecateDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionClearWeaponMalfunction
{
public:
	UPrisonerActionClearWeaponMalfunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Bleeding
{
public:
	UPrisonerBodySymptom_Bleeding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_vignetteEffectIntensityVsSeverityRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 184);
	}
	struct FRuntimeFloatCurve Get_vignetteEffectPulsationFrequencyVsSeverityRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 320);
	}
	struct FRuntimeFloatCurve Get_vignetteEffectSeverityRatioMultiplierVsHealthRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 456);
	}
	float Get_vignetteEffectIntensityInterpSpeed() {
		return memory.read<float>(m_addr + 592);
	}
	float Get_vignetteEffectFrequencyInterpSpeed() {
		return memory.read<float>(m_addr + 600);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_WetFeet
{
public:
	UPrisonerBodySymptomUIData_WetFeet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionClimbOntoLadder
{
public:
	UPrisonerActionClimbOntoLadder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateFiringAutomatic
{
public:
	UWeaponStateFiringAutomatic(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionClimbOntoLadderDescription
{
public:
	UPrisonerActionClimbOntoLadderDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerConsumableDigestionHandler_FoodDisgustAntidote
{
public:
	UPrisonerConsumableDigestionHandler_FoodDisgustAntidote(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCollectSeeds
{
public:
	UPrisonerActionCollectSeeds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_BoostOfEnergy
{
public:
	UPrisonerBodySymptomUIData_BoostOfEnergy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCommitSuicide
{
public:
	UPrisonerActionCommitSuicide(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCommitSuicideDescription
{
public:
	UPrisonerActionCommitSuicideDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCraftItemDescription
{
public:
	UPrisonerActionCraftItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerDebugUI_BodyEffectItem
{
public:
	UPrisonerDebugUI_BodyEffectItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionCutHairDescription
{
public:
	UPrisonerActionCutHairDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDecontaminateWithReplenishableResource
{
public:
	UPrisonerActionDecontaminateWithReplenishableResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponActionSequence
{
public:
	UWeaponActionSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBodyWeaponAnimation GetAnimations() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 64);
	}
	bool GetCanBeInterrupted() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDefecate
{
public:
	UPrisonerActionDefecate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDrinkInteraction
{
public:
	UPrisonerActionDrinkInteraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionDrinkInteractionDescription
{
public:
	UPrisonerActionDrinkInteractionDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionForceUnlockDescription
{
public:
	UPrisonerActionForceUnlockDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionEnterCombatModeDescription
{
public:
	UPrisonerActionEnterCombatModeDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionExecuteBodyConditionInteraction
{
public:
	UPrisonerActionExecuteBodyConditionInteraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionExecuteInteraction
{
public:
	UPrisonerActionExecuteInteraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionExecuteInteractionDescription
{
public:
	UPrisonerActionExecuteInteractionDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleCameraStabilizerComponent
{
public:
	UVehicleCameraStabilizerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Get_componentWorldOffset() {
		return memory.read<struct FVector>(m_addr + 508);
	}
	float Get_desiredDistance() {
		return memory.read<float>(m_addr + 520);
	}
	float Get_speedFallbackIntensity() {
		return memory.read<float>(m_addr + 524);
	}
	float Get_lateralMovementResponseIntensity() {
		return memory.read<float>(m_addr + 528);
	}
	float Get_lockedHorizontalDampeningFactor() {
		return memory.read<float>(m_addr + 532);
	}
	float Get_lockedHorizontalOscillationFactor() {
		return memory.read<float>(m_addr + 536);
	}
	float Get_lockedVerticalDampeningFactor() {
		return memory.read<float>(m_addr + 540);
	}
	float Get_lockedVerticalOscillationFactor() {
		return memory.read<float>(m_addr + 544);
	}
	float Get_maxFreeLookPitch() {
		return memory.read<float>(m_addr + 548);
	}
	float Get_freeHorizontalDampeningFactor() {
		return memory.read<float>(m_addr + 552);
	}
	float Get_freeHorizontalOscillationFactor() {
		return memory.read<float>(m_addr + 556);
	}
	float Get_freeVerticalDampeningFactor() {
		return memory.read<float>(m_addr + 560);
	}
	float Get_freeVerticalOscillationFactor() {
		return memory.read<float>(m_addr + 564);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFillGameResourceContainerWithInfiniteResourceDescription
{
public:
	UPrisonerActionFillGameResourceContainerWithInfiniteResourceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameResourceContainerProxyForInfiniteResource GetProxyForInfiniteResource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UGameResourceContainerProxyForInfiniteResource(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFillResourceContainerWithReplenishableResourcePaid
{
public:
	UPrisonerActionFillResourceContainerWithReplenishableResourcePaid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFillWater
{
public:
	UPrisonerActionFillWater(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFishing
{
public:
	UPrisonerActionFishing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_BloodshotEyes
{
public:
	UPrisonerBodySymptom_BloodshotEyes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFishingDescription
{
public:
	UPrisonerActionFishingDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFuelFire
{
public:
	UPrisonerActionFuelFire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_Damage
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_Damage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_damageVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 48);
	}
	struct FRuntimeFloatCurve Get_damageRatioVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 184);
	}
	bool Get_useBaseMaxHealthInsteadOfMaxHealthToComputeDamageRatio() {
		return memory.read<bool>(m_addr + 320);
	}
	bool Get_useSeverityToDetermineLifeThreateningStatus() {
		return memory.read<bool>(m_addr + 321);
	}
	struct FFloatRange Get_severityRangeToBeLifeThreatening() {
		return memory.read<struct FFloatRange>(m_addr + 324);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionFuelFireDescription
{
public:
	UPrisonerActionFuelFireDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionInjectSubstance
{
public:
	UPrisonerActionInjectSubstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URestorableMeshInstancesManager
{
public:
	URestorableMeshInstancesManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_actorsProcessingDelayOnStreamingLevelLoad() {
		return memory.read<float>(m_addr + 448);
	}
	float Get_processingBudgetPerTick() {
		return memory.read<float>(m_addr + 452);
	}
	float Get_generateMeshInstancesToRestoreUpdateInterval() {
		return memory.read<float>(m_addr + 816);
	}
	float Get_minDistanceToPlayerPawnToRestoreMeshInstance() {
		return memory.read<float>(m_addr + 840);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionLightFire
{
public:
	UPrisonerActionLightFire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionLoadAmmoIntoMagazineDescription
{
public:
	UPrisonerActionLoadAmmoIntoMagazineDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASentry2
{
public:
	ASentry2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName Get_pelvisBoneName() {
		return memory.read<struct FName>(m_addr + 2032);
	}
	struct FName Get_eyesViewPointSocketName() {
		return memory.read<struct FName>(m_addr + 2040);
	}
	struct FName Get_longRangeWeaponSocketName() {
		return memory.read<struct FName>(m_addr + 2048);
	}
	struct TArray<struct FName> Get_longRangeWeaponMuzzleFlashBoneNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 2056);
	}
	struct FName Get_longRangeWeaponBoneName() {
		return memory.read<struct FName>(m_addr + 2072);
	}
	struct FName Get_highPrecisionWeaponSocketName() {
		return memory.read<struct FName>(m_addr + 2080);
	}
	struct FName Get_highPrecisionWeaponBoneName() {
		return memory.read<struct FName>(m_addr + 2088);
	}
	struct TArray<struct FName> Get_grenadeLauncherSocketNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 2096);
	}
	struct FName Get_highPrecisionWeaponChargingSocket() {
		return memory.read<struct FName>(m_addr + 2112);
	}
	struct FName Get_meleeAttackFailureGrenadeDropSocket() {
		return memory.read<struct FName>(m_addr + 2120);
	}
	float Get_sensorHeightOffset() {
		return memory.read<float>(m_addr + 2128);
	}
	struct TArray<struct FName> Get_damageParticlesSockets() {
		return memory.read<struct TArray<struct FName>>(m_addr + 2136);
	}
	struct UAkAudioEvent Get_fireBulletAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2152);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_startHighFireRateAttack() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2160);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_endHighFireRateAttack() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2168);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_reloadAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2176);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_highPrecisionWeaponFireShotAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2184);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_grenadeLaunchAudioEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2192);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_tearGasGrenadeLaunchAudioEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2200);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_stunGrenadeLaunchAudioEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2208);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_deathAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2216);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_freezeWarningAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2224);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_dropWeaponsRaiseHandsAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2232);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_walkAwayAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2240);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_beginCombatAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2248);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_startSearchCorpseAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2256);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_stopSearchCorpseAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2264);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_upperBodyRotationAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2272);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAnimMontage Get_normalAttackMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2280);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_reloadMontageLongRangeWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2288);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_deathMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2296);
		return struct UAnimMontage(ptr_addr);
	}
	struct TArray<struct FSentryMeleeAttackDescription> Get_meleeMontageDescriptions() {
		return memory.read<struct TArray<struct FSentryMeleeAttackDescription>>(m_addr + 2304);
	}
	struct UAnimMontage Get_highprecisionAttackMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage Get_enemySpottedMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2328);
		return struct UAnimMontage(ptr_addr);
	}
	bool Get_hasUpperBodyRotation() {
		return memory.read<bool>(m_addr + 2336);
	}
	float Get_upperBodyRotationMaxYawDegrees() {
		return memory.read<float>(m_addr + 2340);
	}
	float Get_upperBodyRotationHighPrecisionAttackMaxYawDegrees() {
		return memory.read<float>(m_addr + 2344);
	}
	float Get_upperBodyRotationFactor() {
		return memory.read<float>(m_addr + 2348);
	}
	float Get_upperBodyNetSmoothUpdateRotationTime() {
		return memory.read<float>(m_addr + 2352);
	}
	float Get_upperBodyRotationAngularVelocitySoundThreshold() {
		return memory.read<float>(m_addr + 2356);
	}
	struct FVector Get_upperBodyFocusLocation() {
		return memory.read<struct FVector>(m_addr + 2364);
	}
	bool Get_hasHighFireRateAttackAnimation() {
		return memory.read<bool>(m_addr + 2385);
	}
	float Get_gunsLerpFactor() {
		return memory.read<float>(m_addr + 2388);
	}
	AProjectile Get_projectileClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2392);
		return AProjectile(ptr_addr);
	}
	float Get_maxLongRangeWeaponHalfAngle() {
		return memory.read<float>(m_addr + 2400);
	}
	AProjectile Get_highPrecisonWeaponProjectileClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2416);
		return AProjectile(ptr_addr);
	}
	float Get_maxHighPrecisionWeaponHalfAngle() {
		return memory.read<float>(m_addr + 2424);
	}
	AProjectile Get_grenadeProjectileClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2440);
		return AProjectile(ptr_addr);
	}
	AItem Get_tearGasGrenadeItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2448);
		return AItem(ptr_addr);
	}
	AItem Get_stunGrenadeItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2456);
		return AItem(ptr_addr);
	}
	AItem Get_meleeAttackFailureGrenadeItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2464);
		return AItem(ptr_addr);
	}
	float Get_stunGreandeExplosionDelayAfterReachingGround() {
		return memory.read<float>(m_addr + 2472);
	}
	float Get_itemGreandeDirectionRandomizationAngle() {
		return memory.read<float>(m_addr + 2476);
	}
	struct USentryMovementComponent Get_sentryMovementComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2488);
		return struct USentryMovementComponent(ptr_addr);
	}
	struct UHitReactComponent Get_hitReactComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2496);
		return struct UHitReactComponent(ptr_addr);
	}
	struct FGameplayTag Get_hitReactTag() {
		return memory.read<struct FGameplayTag>(m_addr + 2504);
	}
	bool Get_isAlive() {
		return memory.read<bool>(m_addr + 2512);
	}
	float Get_maxHealth() {
		return memory.read<float>(m_addr + 2516);
	}
	float Get_healthStateThresholds[6]() {
		return memory.read<float>(m_addr + 2528);
	}
	float Get_armorDamageReductionExplosion() {
		return memory.read<float>(m_addr + 2552);
	}
	float Get_armorDamageReductionCollision() {
		return memory.read<float>(m_addr + 2556);
	}
	float Get_exlosionDamageHitReactThreshold() {
		return memory.read<float>(m_addr + 2560);
	}
	bool Get_isStunnedDuringHitReact() {
		return memory.read<bool>(m_addr + 2564);
	}
	float Get_longRangeWeaponFireRate() {
		return memory.read<float>(m_addr + 2568);
	}
	float Get_longRangeWeaponFireRateVariation() {
		return memory.read<float>(m_addr + 2572);
	}
	float Get_longRangeWeaponHalfAngleDegrees() {
		return memory.read<float>(m_addr + 2576);
	}
	int32_t Get_maxAmmunitionLongRangeWeapon() {
		return memory.read<int32_t>(m_addr + 2580);
	}
	int32_t Get_maxAmmunitionMediumRangeWeapon() {
		return memory.read<int32_t>(m_addr + 2588);
	}
	float Get_longRangeWeaponSpreadHalfAngle() {
		return memory.read<float>(m_addr + 2596);
	}
	float Get_mediumRangeWeaponFireRate() {
		return memory.read<float>(m_addr + 2600);
	}
	float Get_mediumRangeWeaponHalfAngleDegrees() {
		return memory.read<float>(m_addr + 2604);
	}
	float Get_mediumRangeWeaponActivationDistance() {
		return memory.read<float>(m_addr + 2608);
	}
	float Get_meleeAttackRate() {
		return memory.read<float>(m_addr + 2612);
	}
	float Get_meleeAttackActivationDistance() {
		return memory.read<float>(m_addr + 2616);
	}
	struct FVector Get_weaponOverrideAimLocationRep() {
		return memory.read<struct FVector>(m_addr + 2628);
	}
	struct TArray<struct FSentryPatrolPoint> Get_patrolPoints() {
		return memory.read<struct TArray<struct FSentryPatrolPoint>>(m_addr + 2680);
	}
	struct UParticleSystem Get_muzzlePS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2696);
		return struct UParticleSystem(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> Get_muzzlePSCs() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2704);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct UParticleSystem Get_highPrecisionWeaponMuzzlePS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2720);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystemComponent Get_highPrecisionWeaponMuzzlePSC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2728);
		return struct UParticleSystemComponent(ptr_addr);
	}
	float Get_muzzleEffectsScaleDistanceStart() {
		return memory.read<float>(m_addr + 2736);
	}
	float Get_muzzleEffectsScaleDistanceRange() {
		return memory.read<float>(m_addr + 2740);
	}
	float Get_muzzleEffectsScaleByDistanceFactor() {
		return memory.read<float>(m_addr + 2744);
	}
	struct UNiagaraSystem Get_highPrecisionWeaponChargingPS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2752);
		return struct UNiagaraSystem(ptr_addr);
	}
	struct UNiagaraComponent Get_highPrecisionWeaponChargingPSC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2760);
		return struct UNiagaraComponent(ptr_addr);
	}
	struct FName Get_lightMaterialSlotName() {
		return memory.read<struct FName>(m_addr + 2824);
	}
	struct TArray<struct FName> Get_additionalLightsMaterialSlotNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 2832);
	}
	struct FColor Get_normalLightColor() {
		return memory.read<struct FColor>(m_addr + 2848);
	}
	struct FColor Get_alertedLightColor() {
		return memory.read<struct FColor>(m_addr + 2852);
	}
	struct FColor Get_combatLightColor() {
		return memory.read<struct FColor>(m_addr + 2856);
	}
	struct FName Get_emissionColorParameterName() {
		return memory.read<struct FName>(m_addr + 2864);
	}
	float Get_spottingPercentage() {
		return memory.read<float>(m_addr + 2872);
	}
	struct FInt32Range Get_damageEffectsNumPerHealthStateData[6]() {
		return memory.read<struct FInt32Range>(m_addr + 2876);
	}
	struct TArray<struct FSentryDamageEffectData> Get_damageParticleEffectsPSData() {
		return memory.read<struct TArray<struct FSentryDamageEffectData>>(m_addr + 2976);
	}
	float Get_damageParticleIntensityPerHealthState[6]() {
		return memory.read<float>(m_addr + 3072);
	}
	float Get_stompShakeEffectRadius() {
		return memory.read<float>(m_addr + 3096);
	}
	float Get_stompShakeMaxEffectRadius() {
		return memory.read<float>(m_addr + 3100);
	}
	float Get_stompShakeEffectFalloffExponent() {
		return memory.read<float>(m_addr + 3104);
	}
	UMatineeCameraShake Get_stompCameraShake() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3112);
		return UMatineeCameraShake(ptr_addr);
	}
	struct UStaticMeshComponent Get_laserMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3120);
		return struct UStaticMeshComponent(ptr_addr);
	}
	bool Get_canEverDrawLaser() {
		return memory.read<bool>(m_addr + 3128);
	}
	float Get_walkSpeedMultiplier() {
		return memory.read<float>(m_addr + 3132);
	}
	float Get_walkSpeedMultiplierMin() {
		return memory.read<float>(m_addr + 3136);
	}
	float Get_walkSpeedMultiplierMax() {
		return memory.read<float>(m_addr + 3140);
	}
	float Get_corpseSearchDuration() {
		return memory.read<float>(m_addr + 3148);
	}
	char Get_packedGeneralData() {
		return memory.read<char>(m_addr + 3153);
	}
	uint16_t Get_packedCombatData() {
		return memory.read<uint16_t>(m_addr + 3154);
	}
	float Get_autoSaveInterval() {
		return memory.read<float>(m_addr + 3168);
	}
	bool Get_shouldSaveAndLoadSentry() {
		return memory.read<bool>(m_addr + 3176);
	}
	struct TWeakObjectPtr<APawn> Get_foe() {
		return memory.read<struct TWeakObjectPtr<APawn>>(m_addr + 3208);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionLootCorpse
{
public:
	UPrisonerActionLootCorpse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionLootCorpseDescription
{
public:
	UPrisonerActionLootCorpseDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionLootPrisonerDescription
{
public:
	UPrisonerActionLootPrisonerDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionPullGrenadePin
{
public:
	UPrisonerActionPullGrenadePin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionManipulateTrap
{
public:
	UPrisonerActionManipulateTrap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionMinigame
{
public:
	UPrisonerActionMinigame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerSoundComponent
{
public:
	UPrisonerSoundComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinBreathingRateToPostPeriodicInhaleExhaleAudioEvents() {
		return memory.read<float>(m_addr + 216);
	}
	float GetMaxDistanceToListenerToPostPeriodicInhaleExhaleAudioEvents() {
		return memory.read<float>(m_addr + 220);
	}
	struct UAkAudioEvent GetPeriodicInhaleAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetPeriodicExhaleAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetHoldBreathInhaleAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetHoldBreathExhaleAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetHoldBreathBreathlessExhaleAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetMinHeartRateToPostHeartbeatAudioEvent() {
		return memory.read<float>(m_addr + 264);
	}
	struct UAkAudioEvent GetHeartbeatAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetFootstepsAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetFootstepsEnhancerAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 288);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetMovingThroughFoliageGateDuration() {
		return memory.read<float>(m_addr + 296);
	}
	struct UAkAudioEvent GetStartGenericMovingThroughFoliageAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopGenericMovingThroughFoliageAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetGenericOneShotMovingThroughFoliageAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetGearNoiseAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 328);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetGearNoiseAudioEventWhenInWater() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 336);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetItemMotionNoiseTimeToLive() {
		return memory.read<float>(m_addr + 344);
	}
	struct UAkAudioEvent GetStartGenericEatItemAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 352);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopGenericEatItemAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 360);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStartGenericDrinkItemAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 368);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopGenericDrinkItemAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 376);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStartGenericDrinkWaterAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopGenericDrinkWaterAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 392);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStartGenericExamineObjectAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 400);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopGenericExamineObjectAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 408);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStartGenericCraftAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 416);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopGenericCraftAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 424);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStartGenericUncraftAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 432);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopGenericUncraftAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 440);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStartGenericVehicleRepairAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 448);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopGenericVehicleRepairAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 456);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStartWashClothAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 464);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopWashClothAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 472);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStartInGameAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 480);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopInGameAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 488);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetCalmStateAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 496);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetIntenseStateAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 504);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetCombatStateAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 512);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct USoundCue GetOutOfBoundsSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 520);
		return struct USoundCue(ptr_addr);
	}
	struct UAkAudioEvent GetChipExplosionSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 528);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct TArray<struct FActiveMovingThroughFoliageSounds> Get_activeMovingThroughFoliageSounds() {
		return memory.read<struct TArray<struct FActiveMovingThroughFoliageSounds>>(m_addr + 608);
	}
	int32_t Get_maxNumberOfFootstepsToPlayFootstepEnhancerSound() {
		return memory.read<int32_t>(m_addr + 652);
	}
	int32_t Get_minNumberOfFootstepsToPlayFootstepEnhancerSound() {
		return memory.read<int32_t>(m_addr + 656);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionMinigameDescription
{
public:
	UPrisonerActionMinigameDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMinigameConfiguration GetMinigameConfiguration() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UMinigameConfiguration(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AVehicleCorpse
{
public:
	AVehicleCorpse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent Get_mesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UParticleSystem Get_explosionParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UParticleSystem(ptr_addr);
	}
	struct FTransform Get_explosionParticlesTransform() {
		return memory.read<struct FTransform>(m_addr + 576);
	}
	struct UAkAudioEvent Get_explosionAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_explosionForceMagnitude() {
		return memory.read<float>(m_addr + 632);
	}
	struct TArray<struct FVehicleCorpseBurningParticles> Get_burningParticles() {
		return memory.read<struct TArray<struct FVehicleCorpseBurningParticles>>(m_addr + 640);
	}
	struct UAkAudioEvent Get_burningAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_endOfLifeFadingTime() {
		return memory.read<float>(m_addr + 664);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionOpenItem
{
public:
	UPrisonerActionOpenItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionOpenItemDescription
{
public:
	UPrisonerActionOpenItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionOperateBondageDescription
{
public:
	UPrisonerActionOperateBondageDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionPickUpVehicle2W
{
public:
	UPrisonerActionPickUpVehicle2W(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerSkillComponentUIController
{
public:
	UPrisonerSkillComponentUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionPickUpVehicle2WDescription
{
public:
	UPrisonerActionPickUpVehicle2WDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_ColonFull
{
public:
	UPrisonerBodyCondition_ColonFull(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_colonFullnessToExist() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_colonFullnessToForceDefecate() {
		return memory.read<float>(m_addr + 196);
	}
	UPrisonerBodySymptom_NeedToDefecate Get_needToDefecateSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return UPrisonerBodySymptom_NeedToDefecate(ptr_addr);
	}
	struct UPrisonerBodySymptomCause Get_needToDefecateSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UPrisonerBodySymptomCause(ptr_addr);
	}
	float Get_colonFullnessAtWhichFartingStarts() {
		return memory.read<float>(m_addr + 216);
	}
	float Get_fartingInterval() {
		return memory.read<float>(m_addr + 220);
	}
	UPrisonerBodySymptom_Farting Get_fartingSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return UPrisonerBodySymptom_Farting(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Farting Get_fartingSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UPrisonerBodySymptomCause_Farting(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionPlaceItemOnRackDescription
{
public:
	UPrisonerActionPlaceItemOnRackDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionPlantSeed
{
public:
	UPrisonerActionPlantSeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateRocketLauncherActiveArmed
{
public:
	UWeaponStateRocketLauncherActiveArmed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRussianRouletteDescription
{
public:
	UPrisonerActionRussianRouletteDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionReloadWeapon
{
public:
	UPrisonerActionReloadWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRepair
{
public:
	UPrisonerActionRepair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionReloadWeaponDescription
{
public:
	UPrisonerActionReloadWeaponDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRemoveItemFromHands
{
public:
	UPrisonerActionRemoveItemFromHands(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionTreatPatient
{
public:
	UPrisonerActionTreatPatient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRemoveWeed
{
public:
	UPrisonerActionRemoveWeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRepairDescription
{
public:
	UPrisonerActionRepairDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWetnessManager
{
public:
	AWetnessManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMaxNumberOfActiveWettables() {
		return memory.read<int32_t>(m_addr + 544);
	}
	float GetMaxWettableLifeTime() {
		return memory.read<float>(m_addr + 548);
	}
	float GetWeatherAndWettableObjectParametersUpdateInterval() {
		return memory.read<float>(m_addr + 552);
	}
	struct UCurveFloat GetWettingRateFromRainVsRainIntensity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UCurveFloat(ptr_addr);
	}
	float GetWettingRateFromWaterImmersion() {
		return memory.read<float>(m_addr + 568);
	}
	float GetWettingRateFromWetSurfaces() {
		return memory.read<float>(m_addr + 572);
	}
	float GetDryingRate() {
		return memory.read<float>(m_addr + 576);
	}
	struct UCurveFloat GetDryingRateModifierVsTemperature() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetDryingRateModifierVsRelativeHumidity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct UCurveFloat(ptr_addr);
	}
	float GetAirTemperatureModifierWhenNotExposedToSunlight() {
		return memory.read<float>(m_addr + 600);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRepairBaseElementDescription
{
public:
	UPrisonerActionRepairBaseElementDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRepairItem
{
public:
	UPrisonerActionRepairItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionResuscitateDescription
{
public:
	UPrisonerActionResuscitateDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWeaponAttachmentGhillie
{
public:
	AWeaponAttachmentGhillie(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetEquippedSkeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct TMap<AWeapon, struct FMeshMaterialPair> GetWeaponToSkeletalMeshMapping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2360);
		return struct TMap<AWeapon, struct FMeshMaterialPair>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionRollRevolverDrumDescription
{
public:
	UPrisonerActionRollRevolverDrumDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionSearchGround
{
public:
	UPrisonerActionSearchGround(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionSearchPrisonerDescription
{
public:
	UPrisonerActionSearchPrisonerDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionSpillDescription
{
public:
	UPrisonerActionSpillDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionSpillAtLocation
{
public:
	UPrisonerActionSpillAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionSpillAtLocationDescription
{
public:
	UPrisonerActionSpillAtLocationDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionStartCarryingItemDescription
{
public:
	UPrisonerActionStartCarryingItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionStartChainsawEngine
{
public:
	UPrisonerActionStartChainsawEngine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionStartResting
{
public:
	UPrisonerActionStartResting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerConsumableDigestionHandler_FoodDisgust
{
public:
	UPrisonerConsumableDigestionHandler_FoodDisgust(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_disgustAmountPerMassInStomach() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionThrowItemDescription
{
public:
	UPrisonerActionThrowItemDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionCauseUIData
{
public:
	UPrisonerBodyConditionCauseUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionTriggerRemoteKey
{
public:
	UPrisonerActionTriggerRemoteKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionTriggerRemoteKeyDescription
{
public:
	UPrisonerActionTriggerRemoteKeyDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyEffect_InfectionController
{
public:
	UPrisonerBodyEffect_InfectionController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_passiveContaminationIncreaseRateVsContaminationRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 64);
	}
	float Get_contaminationSuppressionRate() {
		return memory.read<float>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionUncraftItem
{
public:
	UPrisonerActionUncraftItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionUnequipWeapon
{
public:
	UPrisonerActionUnequipWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleWithDashboard
{
public:
	UVehicleWithDashboard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionUnloadAmmoFromWeapon
{
public:
	UPrisonerActionUnloadAmmoFromWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionUnloadAmmoFromWeaponDescription
{
public:
	UPrisonerActionUnloadAmmoFromWeaponDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_FeelingHot
{
public:
	UPrisonerBodySymptomUIData_FeelingHot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionUrinate
{
public:
	UPrisonerActionUrinate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionVoiceline
{
public:
	UPrisonerActionVoiceline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionWashCloth
{
public:
	UPrisonerActionWashCloth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionWashEyes
{
public:
	UPrisonerActionWashEyes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionWashEyesWithReplenishableResourceDescription
{
public:
	UPrisonerActionWashEyesWithReplenishableResourceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameResourceContainerProxyForReplenishableResource GetProxyForReplenishableResource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UGameResourceContainerProxyForReplenishableResource(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionWashWithReplenishableResource
{
public:
	UPrisonerActionWashWithReplenishableResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionWhistle
{
public:
	UPrisonerActionWhistle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerActionWhistleDescription
{
public:
	UPrisonerActionWhistleDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimInstance_Aerial
{
public:
	UPrisonerAnimInstance_Aerial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_upcomingPose() {
		return memory.read<uint8_t >(m_addr + 696);
	}
	uint8_t  Get_previousPose() {
		return memory.read<uint8_t >(m_addr + 697);
	}
	struct UAnimSequence Get_blendAnimationOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UAnimSequence(ptr_addr);
	}
	float Get_blendAnimationOverrideTime() {
		return memory.read<float>(m_addr + 712);
	}
	float Get_poseBlendWeight() {
		return memory.read<float>(m_addr + 716);
	}
	struct FVector2D Get_fallingControl() {
		return memory.read<struct FVector2D>(m_addr + 720);
	}
	float Get_fallSpeed() {
		return memory.read<float>(m_addr + 728);
	}
	float Get_yawRotationRate() {
		return memory.read<float>(m_addr + 732);
	}
	bool Get_isInFirstPersonView() {
		return memory.read<bool>(m_addr + 736);
	}
	bool Get_hasHandBondage() {
		return memory.read<bool>(m_addr + 737);
	}
	bool Get_jumpingAfterApex() {
		return memory.read<bool>(m_addr + 738);
	}
	bool Get_shouldUsePoseSnapshot() {
		return memory.read<bool>(m_addr + 739);
	}
	struct UAnimSequenceBase Get_handsBoundIdleFPAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_handsBoundIdleTPAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float Get_distanceToJumpApexNormalized() {
		return memory.read<float>(m_addr + 760);
	}
	float Get_legsPoseBeforeJump() {
		return memory.read<float>(m_addr + 764);
	}
	uint8_t  Get_movementPaceBeforeJump() {
		return memory.read<uint8_t >(m_addr + 768);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimInstance_Boat
{
public:
	UPrisonerAnimInstance_Boat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_vehicleSpeed() {
		return memory.read<float>(m_addr + 696);
	}
	float Get_vehicleSpeedKph() {
		return memory.read<float>(m_addr + 700);
	}
	bool Get_isVehicleDriver() {
		return memory.read<bool>(m_addr + 704);
	}
	bool Get_isRowing() {
		return memory.read<bool>(m_addr + 705);
	}
	bool Get_isPaddling() {
		return memory.read<bool>(m_addr + 706);
	}
	bool Get_isMotorPropelled() {
		return memory.read<bool>(m_addr + 707);
	}
	bool Get_isSailing() {
		return memory.read<bool>(m_addr + 708);
	}
	float Get_sailsDeployAmount() {
		return memory.read<float>(m_addr + 712);
	}
	float Get_sailsSteerAmount() {
		return memory.read<float>(m_addr + 716);
	}
	float Get_sailsTurnAmount() {
		return memory.read<float>(m_addr + 720);
	}
	int32_t Get_paddleCounter() {
		return memory.read<int32_t>(m_addr + 724);
	}
	float Get_vehicleThrottleAmount() {
		return memory.read<float>(m_addr + 728);
	}
	float Get_vehicleBrakeAmount() {
		return memory.read<float>(m_addr + 732);
	}
	float Get_vehicleSteerAmount() {
		return memory.read<float>(m_addr + 736);
	}
	int32_t Get_numPaddleSwingsInOneHand() {
		return memory.read<int32_t>(m_addr + 740);
	}
	struct UBlendSpace Get_vehicleDriverForwardIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace Get_vehiclePassengerIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace Get_boatDriverPaddleLAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace Get_boatDriverPaddleRAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UBlendSpace(ptr_addr);
	}
	struct UAnimSequence Get_boatDriverPaddleLToRAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_boatDriverPaddleRToLAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UAnimSequence(ptr_addr);
	}
	float Get_paddleInHand() {
		return memory.read<float>(m_addr + 792);
	}
	struct FTransform Get_motorHandleSocketTransform() {
		return memory.read<struct FTransform>(m_addr + 800);
	}
	struct FTransform Get_sailsHandleSocketTransform() {
		return memory.read<struct FTransform>(m_addr + 848);
	}
	struct FTransform Get_rudderSocketTransform() {
		return memory.read<struct FTransform>(m_addr + 896);
	}
	float Get_maxSpineLeanAngle() {
		return memory.read<float>(m_addr + 944);
	}
	float Get_spineLeanAmountForHandlingMotor() {
		return memory.read<float>(m_addr + 948);
	}
	uint8_t  Get_movementPace() {
		return memory.read<uint8_t >(m_addr + 952);
	}
	float Get_normalizedMovementPace() {
		return memory.read<float>(m_addr + 956);
	}
	float Get_playRateFromMovementPace() {
		return memory.read<float>(m_addr + 960);
	}
	uint8_t  Get_engineState() {
		return memory.read<uint8_t >(m_addr + 964);
	}
	bool Get_useVehicleWAPLowerBodyIdleTP() {
		return memory.read<bool>(m_addr + 965);
	}
	struct UAnimSequenceBase Get_vehicleWAPLowerBodyIdleAimingTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_vehicleWAPLowerBodyIdleRelaxedTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 976);
		return struct UAnimSequenceBase(ptr_addr);
	}
	bool Get_isInCombatMode() {
		return memory.read<bool>(m_addr + 984);
	}
	struct UAnimSequence Get_startEngineStartAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 992);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineLongLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1008);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_startEngineEndAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct UAnimSequence(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimInstance_FemaleCorrections
{
public:
	UPrisonerAnimInstance_FemaleCorrections(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName Get_correctionsDisabledCurveName() {
		return memory.read<struct FName>(m_addr + 696);
	}
	float Get_correctionsDisabledCurveValue() {
		return memory.read<float>(m_addr + 704);
	}
	float Get_correctionsDisabledCurveValueInverse() {
		return memory.read<float>(m_addr + 708);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVerificationStatics
{
public:
	UVerificationStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerDebugUI_SkillEntryWidget
{
public:
	UPrisonerDebugUI_SkillEntryWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_nameTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_QuickRepairAttachmentDescription
{
public:
	UPrisonerVehicleAction_QuickRepairAttachmentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimInstance_Grappled
{
public:
	UPrisonerAnimInstance_Grappled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequence Get_idleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UAnimSequence(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimInstance_Parachute
{
public:
	UPrisonerAnimInstance_Parachute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequence Get_defaultOpeningAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence Get_openingAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UAnimSequence(ptr_addr);
	}
	float Get_openingAnimationTime() {
		return memory.read<float>(m_addr + 712);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_BandagesTreatment
{
public:
	UPrisonerBodyCondition_BandagesTreatment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimInstance_VehicleBase
{
public:
	UPrisonerAnimInstance_VehicleBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_isDriver() {
		return memory.read<bool>(m_addr + 4432);
	}
	bool Get_isPushing() {
		return memory.read<bool>(m_addr + 4433);
	}
	struct UBlendSpace Get_mountedBlendspace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4440);
		return struct UBlendSpace(ptr_addr);
	}
	float Get_maxPushingSpeedKmh() {
		return memory.read<float>(m_addr + 4448);
	}
	struct FTransform Get_leftHandIKTransform() {
		return memory.read<struct FTransform>(m_addr + 4464);
	}
	struct FTransform Get_rightHandIKTransform() {
		return memory.read<struct FTransform>(m_addr + 4512);
	}
	bool Get_hasDashboard() {
		return memory.read<bool>(m_addr + 4560);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimInstance_WeightLoad
{
public:
	UPrisonerAnimInstance_WeightLoad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimInstance_WheelBarrow
{
public:
	UPrisonerAnimInstance_WheelBarrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_wheelBarrowSpeed() {
		return memory.read<float>(m_addr + 696);
	}
	float Get_wheelBarrowSpeedKph() {
		return memory.read<float>(m_addr + 700);
	}
	float Get_wheelBarrowBumpiness() {
		return memory.read<float>(m_addr + 704);
	}
	float Get_wheelBarrowRollAngleRelativeToDriver() {
		return memory.read<float>(m_addr + 708);
	}
	bool Get_isInCombatMode() {
		return memory.read<bool>(m_addr + 712);
	}
	bool Get_isLimping() {
		return memory.read<bool>(m_addr + 713);
	}
	bool Get_isDriver() {
		return memory.read<bool>(m_addr + 714);
	}
	struct UAnimSequenceBase Get_driverIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace Get_driverWalkJogAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace Get_driverWalkJogLimpingAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UBlendSpace(ptr_addr);
	}
	struct FTransform Get_driverLHandGripTransform() {
		return memory.read<struct FTransform>(m_addr + 752);
	}
	struct FTransform Get_driverRHandGripTransform() {
		return memory.read<struct FTransform>(m_addr + 800);
	}
	float Get_driverSpineBendAngle() {
		return memory.read<float>(m_addr + 848);
	}
	float Get_driverSpineBendScale() {
		return memory.read<float>(m_addr + 852);
	}
	float Get_driverSpineBendAngleInterpSpeed() {
		return memory.read<float>(m_addr + 856);
	}
	float Get_driverSpineLeanAngle() {
		return memory.read<float>(m_addr + 860);
	}
	float Get_driverSpineLeanScale() {
		return memory.read<float>(m_addr + 864);
	}
	float Get_driverSpineLeanAngleInterpSpeed() {
		return memory.read<float>(m_addr + 868);
	}
	bool Get_driverHasFloor() {
		return memory.read<bool>(m_addr + 872);
	}
	bool Get_isDriverMoving() {
		return memory.read<bool>(m_addr + 873);
	}
	float Get_driverSpeed() {
		return memory.read<float>(m_addr + 876);
	}
	float Get_driverCourseAngle() {
		return memory.read<float>(m_addr + 880);
	}
	struct UBlendSpace Get_passengerIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UBlendSpace(ptr_addr);
	}
	bool Get_useVehicleWAPLowerBodyIdleTP() {
		return memory.read<bool>(m_addr + 896);
	}
	struct UAnimSequenceBase Get_vehicleWAPLowerBodyIdleAimingTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase Get_vehicleWAPLowerBodyIdleRelaxedTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAnimNotify_PlayGearSound
{
public:
	UPrisonerAnimNotify_PlayGearSound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetmotionIntensity() {
		return memory.read<uint8_t >(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages
{
public:
	UPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetTreatmentDurationPerSeverityLevel() {
		return memory.read<struct TArray<float>>(m_addr + 80);
	}
	struct TArray<float> GetTreatmentDurationPerUsePerSeverityLevel() {
		return memory.read<struct TArray<float>>(m_addr + 96);
	}
	float GetStabilizationDurationReduction() {
		return memory.read<float>(m_addr + 112);
	}
	struct FPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages_PerSkillData GetSkillData[5]() {
		return memory.read<struct FPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages_PerSkillData>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAppearanceComponent
{
public:
	UPrisonerAppearanceComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t Get_repData() {
		return memory.read<uint32_t>(m_addr + 176);
	}
	uint64_t Get_femaleRepData() {
		return memory.read<uint64_t>(m_addr + 184);
	}
	struct FColor Get_eyeshadowColor() {
		return memory.read<struct FColor>(m_addr + 212);
	}
	struct FColor Get_eyelinerColor() {
		return memory.read<struct FColor>(m_addr + 216);
	}
	struct FColor Get_lipstickColor() {
		return memory.read<struct FColor>(m_addr + 220);
	}
	bool Get_overrideVisualParameters() {
		return memory.read<bool>(m_addr + 296);
	}
	struct TArray<struct FVisualParameter> Get_visualParameterOverrides() {
		return memory.read<struct TArray<struct FVisualParameter>>(m_addr + 304);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCompositionMorphsComputer
{
public:
	UPrisonerBodyCompositionMorphsComputer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVoteTopic_InitiateCargoDrop
{
public:
	UVoteTopic_InitiateCargoDrop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCompositionMorphsComputer_CharacterCreationOrMugshot
{
public:
	UPrisonerBodyCompositionMorphsComputer_CharacterCreationOrMugshot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AReplicatedExplosionEffectsActor
{
public:
	AReplicatedExplosionEffectsActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform Get_explosionParticlesTransform() {
		return memory.read<struct FTransform>(m_addr + 560);
	}
	struct UParticleSystem Get_defaultParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UParticleSystem(ptr_addr);
	}
	struct TMap<char EPhysicalSurface, struct UParticleSystem> Get_onImpactExplosionEffectsOverrides() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct TMap<char EPhysicalSurface, struct UParticleSystem>(ptr_addr);
	}
	struct UAkAudioEvent Get_explosionSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerAppearanceUIController
{
public:
	UPrisonerAppearanceUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffectUIData
{
public:
	UPrisonerBodyConditionOrSymptomSideEffectUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffectUIData_Damage
{
public:
	UPrisonerBodyConditionOrSymptomSideEffectUIData_Damage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_MaxMovementPace
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_MaxMovementPace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerMaxMovementPaceVsSeverity Get_maxMovementPaceVsSeverity() {
		return memory.read<struct FPrisonerMaxMovementPaceVsSeverity>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_PeriodicAffect
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_PeriodicAffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodySymptom_PeriodicAffect Get_symptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodySymptom_PeriodicAffect(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_PeriodicAffect Get_symptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPrisonerBodySymptomCause_PeriodicAffect(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_intervalVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 64);
	}
	struct FRuntimeFloatCurve Get_chanceVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 200);
	}
	struct FFloatInterval Get_durationVsConstitution() {
		return memory.read<struct FFloatInterval>(m_addr + 336);
	}
	struct FFloatInterval Get_intensityVsConstitution() {
		return memory.read<struct FFloatInterval>(m_addr + 344);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateEquipping
{
public:
	UWeaponStateEquipping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_AbstractModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_modifierVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffectUIData_AbstractModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ARadiationManager
{
public:
	ARadiationManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FRadiationSourceDescription> Get_levelRadiationSources() {
		return memory.read<struct TArray<struct FRadiationSourceDescription>>(m_addr + 568);
	}
	float Get_radiationDispersionRate() {
		return memory.read<float>(m_addr + 588);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_StrengthModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_StrengthModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerMakeoverUIController
{
public:
	UPrisonerMakeoverUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_ConstitutionModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_ConstitutionModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerFirstPersonVehicleAimingSubviewComponent
{
public:
	UPrisonerFirstPersonVehicleAimingSubviewComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffectUIData_ConstitutionModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffectUIData_ConstitutionModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URemoveMagazineInsertCartridge
{
public:
	URemoveMagazineInsertCartridge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_DexterityModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_DexterityModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffectUIData_DexterityModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffectUIData_DexterityModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_HealingSpeedModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_HealingSpeedModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffectUIData_ImmuneSystemEfficiencyModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffectUIData_ImmuneSystemEfficiencyModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_GroundMovementSpeedModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_GroundMovementSpeedModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_WaterMovementSpeedModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_WaterMovementSpeedModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_MaxStaminaModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_MaxStaminaModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffectUIData_MaxStaminaModifier
{
public:
	UPrisonerBodyConditionOrSymptomSideEffectUIData_MaxStaminaModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_ConstrainedWheel
{
public:
	UVehicleAttachment_ConstrainedWheel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVehicleAttachmentWheelSetup GetWheelSetup() {
		return memory.read<struct FVehicleAttachmentWheelSetup>(m_addr + 864);
	}
	struct FVehicleAttachmentMeshSetup GetVisualMeshSetup() {
		return memory.read<struct FVehicleAttachmentMeshSetup>(m_addr + 944);
	}
	struct FVehicleAttachmentMeshSetup GetSteeringMeshSetup() {
		return memory.read<struct FVehicleAttachmentMeshSetup>(m_addr + 1104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptom
{
public:
	UPrisonerBodyConditionOrSymptom(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodyConditionOrSymptomUIData Get_uiDataClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return UPrisonerBodyConditionOrSymptomUIData(ptr_addr);
	}
	bool Get_useSeverityToDetermineLifeThreateningStatus() {
		return memory.read<bool>(m_addr + 96);
	}
	struct FFloatRange Get_severityRangeToBeLifeThreatening() {
		return memory.read<struct FFloatRange>(m_addr + 100);
	}
	float Get_severityRatioChangeToReplicate() {
		return memory.read<float>(m_addr + 116);
	}
	float Get_clientSeverityRatioInterpSpeed() {
		return memory.read<float>(m_addr + 120);
	}
	struct TArray<struct UPrisonerBodyConditionOrSymptomSideEffect> Get_sideEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct TArray<struct UPrisonerBodyConditionOrSymptomSideEffect>(ptr_addr);
	}
	float Get_repSeverity() {
		return memory.read<float>(m_addr + 152);
	}
	float Get_repMaxSeverity() {
		return memory.read<float>(m_addr + 156);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition
{
public:
	UPrisonerBodyCondition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UPrisonerBodyConditionInteraction> Get_initialInteractions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct TArray<UPrisonerBodyConditionInteraction>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_Injury
{
public:
	UPrisonerBodyCondition_Injury(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_BasicInjury
{
public:
	UPrisonerBodyCondition_BasicInjury(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_severityVsDamageRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 192);
	}
	float Get_healingRate() {
		return memory.read<float>(m_addr + 328);
	}
	float Get_damage() {
		return memory.read<float>(m_addr + 332);
	}
	float Get_damageToRecover() {
		return memory.read<float>(m_addr + 336);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_ForceUnmountDescription
{
public:
	UPrisonerVehicleAction_ForceUnmountDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_Abrasions
{
public:
	UPrisonerBodyConditionUIData_Abrasions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScreenSpaceHealthWidget
{
public:
	UScreenSpaceHealthWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWindVane
{
public:
	AWindVane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent Get_column() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_body() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_propeller() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UStaticMeshComponent(ptr_addr);
	}
	float Get_bodyRotationRate() {
		return memory.read<float>(m_addr + 568);
	}
	float Get_propellerSpinRate() {
		return memory.read<float>(m_addr + 572);
	}
	struct FName Get_rotationRateRTPC() {
		return memory.read<struct FName>(m_addr + 576);
	}

private:
	std::uint64_t m_addr = 0;
};


class UQuartalPieProgressBar
{
public:
	UQuartalPieProgressBar(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSlateBrush> GetProgressIcons() {
		return memory.read<struct TArray<struct FSlateBrush>>(m_addr + 608);
	}
	struct UImage Get_displayedImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_AcuteRadiationSyndrome
{
public:
	UPrisonerBodyCondition_AcuteRadiationSyndrome(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_amount() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_maxAmount() {
		return memory.read<float>(m_addr + 196);
	}
	float Get_amountAtRecoveryStart() {
		return memory.read<float>(m_addr + 200);
	}
	struct FRuntimeFloatCurve Get_severityVsAmountRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 208);
	}
	struct FRuntimeFloatCurve Get_increaseRateVsEffectiveRadiationAmountRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 344);
	}
	struct FRuntimeFloatCurve Get_decreaseRateVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 480);
	}
	struct FFloatInterval Get_decreaseRateMultiplierVsConstitutionRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 616);
	}
	struct FFloatInterval Get_randomBleedingIntervalRange() {
		return memory.read<struct FFloatInterval>(m_addr + 624);
	}
	struct FRuntimeFloatCurve Get_randomBleedingChanceVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 632);
	}
	float Get_randomBleedingTimer() {
		return memory.read<float>(m_addr + 768);
	}
	float Get_chosenRandomBleedingInterval() {
		return memory.read<float>(m_addr + 772);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 776);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_Choking
{
public:
	UPrisonerBodyCondition_Choking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_oxygenSaturationToExist() {
		return memory.read<float>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_EnergyDeficiency
{
public:
	UPrisonerBodyConditionUIData_EnergyDeficiency(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_RepairAttachment
{
public:
	UPrisonerVehicleAction_RepairAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_Exhaustion
{
public:
	UPrisonerBodyCondition_Exhaustion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 192);
	}
	float Get_exhaustionAmount() {
		return memory.read<float>(m_addr + 200);
	}
	float Get_exhaustionAmountAtRecoveryStart() {
		return memory.read<float>(m_addr + 204);
	}
	struct FRuntimeFloatCurve Get_severityVsExhaustion() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 208);
	}
	float Get_severityToStartMaxStaminaReduction() {
		return memory.read<float>(m_addr + 344);
	}
	float Get_maxStaminaReduction() {
		return memory.read<float>(m_addr + 348);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_NeedToDefecate
{
public:
	UPrisonerBodySymptom_NeedToDefecate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_severityVsColonFullness() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_Exhaustion
{
public:
	UPrisonerBodyConditionUIData_Exhaustion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_FoodDisgust
{
public:
	UPrisonerBodyConditionUIData_FoodDisgust(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_FootAbrasions
{
public:
	UPrisonerBodyCondition_FootAbrasions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_ForeignSubstancePoisoning
{
public:
	UPrisonerBodyConditionUIData_ForeignSubstancePoisoning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_HandAbrasions
{
public:
	UPrisonerBodyCondition_HandAbrasions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_vehiclePropellingAbrasivenessMultiplier() {
		return memory.read<float>(m_addr + 1768);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_Hyperthermia
{
public:
	UPrisonerBodyConditionUIData_Hyperthermia(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_Hyperthermia
{
public:
	UPrisonerBodyCondition_Hyperthermia(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_bodyTemperatureToDie() {
		return memory.read<float>(m_addr + 196);
	}
	float Get_bodyTemperatureToExist() {
		return memory.read<float>(m_addr + 200);
	}
	float Get_bodyTemperatureToRecover() {
		return memory.read<float>(m_addr + 204);
	}
	float Get_bodyTemperatureSampleInterval() {
		return memory.read<float>(m_addr + 212);
	}
	float Get_bodyTemperatureAtUntreatedStart() {
		return memory.read<float>(m_addr + 220);
	}
	float Get_bodyTemperatureAtStabilizationStart() {
		return memory.read<float>(m_addr + 224);
	}
	float Get_bodyTemperatureAtRecoveryStart() {
		return memory.read<float>(m_addr + 228);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 232);
	}
	float Get_severityRatio() {
		return memory.read<float>(m_addr + 240);
	}
	float Get_severityRatioAtUntreatedStart() {
		return memory.read<float>(m_addr + 244);
	}
	float Get_severityRatioAtRecoveryStart() {
		return memory.read<float>(m_addr + 248);
	}
	float Get_severityRatioInterpSpeed() {
		return memory.read<float>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_Infection
{
public:
	UPrisonerBodyCondition_Infection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_maxContamination() {
		return memory.read<float>(m_addr + 196);
	}
	float Get_toleratedContamination() {
		return memory.read<float>(m_addr + 200);
	}
	UPrisonerBodyCondition_Sepsis Get_sepsisClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return UPrisonerBodyCondition_Sepsis(ptr_addr);
	}
	struct UPrisonerBodyConditionCause_Sepsis Get_sepsisCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UPrisonerBodyConditionCause_Sepsis(ptr_addr);
	}
	UNotificationDescription Get_infectedNotification() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return UNotificationDescription(ptr_addr);
	}
	float Get_infectedNotificationCooldown() {
		return memory.read<float>(m_addr + 232);
	}
	float Get_contamination() {
		return memory.read<float>(m_addr + 252);
	}
	float Get_contaminationAtRecoveryStart() {
		return memory.read<float>(m_addr + 256);
	}
	float Get_contaminationIncreaseRate() {
		return memory.read<float>(m_addr + 260);
	}
	float Get_contaminationDecreaseRate() {
		return memory.read<float>(m_addr + 272);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 284);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_KillBoxGasPoisoning
{
public:
	UPrisonerBodyCondition_KillBoxGasPoisoning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_poisoningDuration() {
		return memory.read<float>(m_addr + 196);
	}
	float Get_poisoningTriggerCooldown() {
		return memory.read<float>(m_addr + 200);
	}
	float Get_poisoningTriggerTimer() {
		return memory.read<float>(m_addr + 204);
	}
	float Get_recoveryDuration() {
		return memory.read<float>(m_addr + 208);
	}
	float Get_damagedEffectTriggerInterval() {
		return memory.read<float>(m_addr + 212);
	}
	float Get_damagedEffectDuration() {
		return memory.read<float>(m_addr + 216);
	}
	float Get_damagedEffectIntensity() {
		return memory.read<float>(m_addr + 220);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 228);
	}
	float Get_severityRatio() {
		return memory.read<float>(m_addr + 236);
	}
	float Get_severityRatioAtRecoveryStart() {
		return memory.read<float>(m_addr + 240);
	}
	float Get_drunkenness() {
		return memory.read<float>(m_addr + 244);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_KillBoxGasPoisoning
{
public:
	UPrisonerBodyConditionUIData_KillBoxGasPoisoning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionUIData_NutrientDeficiency
{
public:
	UPrisonerBodyConditionUIData_NutrientDeficiency(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetNutrientUnit() {
		return memory.read<uint8_t >(m_addr + 420);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_RadiationPresence
{
public:
	UPrisonerBodyCondition_RadiationPresence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_radiationAmount() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_radiationMaxAmount() {
		return memory.read<float>(m_addr + 196);
	}
	float Get_radiationAmountAtRecoveryStart() {
		return memory.read<float>(m_addr + 200);
	}
	float Get_baseRadiationDispersionRate() {
		return memory.read<float>(m_addr + 204);
	}
	struct FPrisonerActionDifficultyCurve Get_radiationDispersionRatePerActionDifficulty() {
		return memory.read<struct FPrisonerActionDifficultyCurve>(m_addr + 208);
	}
	float Get_radiationDispersionRateIncreaseWhileSwimming() {
		return memory.read<float>(m_addr + 232);
	}
	struct TMap<UForeignSubstance, struct FRuntimeFloatCurve> Get_effectiveRadiationAmountChangePerForeignSubstancePresence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct TMap<UForeignSubstance, struct FRuntimeFloatCurve>(ptr_addr);
	}
	float Get_radiationAmountDecreaseViaUrination() {
		return memory.read<float>(m_addr + 320);
	}
	float Get_radiationIncreaseRateToInstantlyDie() {
		return memory.read<float>(m_addr + 324);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 328);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionWithCauses
{
public:
	UPrisonerBodyConditionWithCauses(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AReportingManager
{
public:
	AReportingManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetPrisonerWhistled() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 904);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_StomachFull
{
public:
	UPrisonerBodyCondition_StomachFull(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_stomachFullnessToExist() {
		return memory.read<float>(m_addr + 192);
	}
	float Get_stomachFullnessToDie() {
		return memory.read<float>(m_addr + 196);
	}
	float Get_stomachFullnessToBeRecovered() {
		return memory.read<float>(m_addr + 200);
	}
	float Get_stomachFullnessAtWhichToAutoCancelConsumptionOnce() {
		return memory.read<float>(m_addr + 204);
	}
	float Get_stomachFullnessAtWhichToEnableAutoConsumptionCancelationAgain() {
		return memory.read<float>(m_addr + 208);
	}
	float Get_minMaxStaminaModifierForFatigueSymptom() {
		return memory.read<float>(m_addr + 212);
	}
	float Get_stomachFullnessAtWhichBurpingStarts() {
		return memory.read<float>(m_addr + 216);
	}
	float Get_burpingInterval() {
		return memory.read<float>(m_addr + 220);
	}
	UPrisonerBodySymptom_StomachFullness Get_stomachFullnessSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return UPrisonerBodySymptom_StomachFullness(ptr_addr);
	}
	struct UPrisonerBodySymptomCause Get_stomachFullnessSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UPrisonerBodySymptomCause(ptr_addr);
	}
	UPrisonerBodySymptom_Fatigue Get_fatigueSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return UPrisonerBodySymptom_Fatigue(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Fatigue Get_fatigueSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UPrisonerBodySymptomCause_Fatigue(ptr_addr);
	}
	UPrisonerBodySymptom_Burping Get_burpingSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return UPrisonerBodySymptom_Burping(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Burping Get_burpingSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UPrisonerBodySymptomCause_Burping(ptr_addr);
	}
	UNotificationDescription Get_stomachRuptureWarningNotificationClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return UNotificationDescription(ptr_addr);
	}
	UNotificationDescription Get_stomachRuptureNotificationClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return UNotificationDescription(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_TearGasExposure
{
public:
	UPrisonerBodyCondition_TearGasExposure(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_severityVsTime() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 192);
	}
	float Get_timeSinceExposure() {
		return memory.read<float>(m_addr + 328);
	}
	float Get_timeAtRecoveryStart() {
		return memory.read<float>(m_addr + 332);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyCondition_TrenchFoot
{
public:
	UPrisonerBodyCondition_TrenchFoot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_trenchnessIncreaseRateVsFeetWetness() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 192);
	}
	struct FFloatInterval Get_trenchnessIncreaseRateMultiplierVsConstitution() {
		return memory.read<struct FFloatInterval>(m_addr + 328);
	}
	struct FRuntimeFloatCurve Get_trenchnessIncreaseRateMultiplierVsAirTemperature() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 336);
	}
	struct FRuntimeFloatCurve Get_trenchnessDecreaseRateMultiplierVsAirTemperature() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 472);
	}
	struct FRuntimeFloatCurve Get_recoveryDurationMultiplierVsAirTemperature() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 608);
	}
	float Get_trenchnessFallRate() {
		return memory.read<float>(m_addr + 744);
	}
	struct FRuntimeFloatCurve Get_severityVsTrenchness() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 752);
	}
	float Get_trenchness() {
		return memory.read<float>(m_addr + 888);
	}
	float Get_trenchnessTreated() {
		return memory.read<float>(m_addr + 892);
	}
	float Get_trenchnessAtRecoveryStart() {
		return memory.read<float>(m_addr + 896);
	}
	struct FRuntimeFloatCurve Get_stabilizationDurationVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 904);
	}
	struct FRuntimeFloatCurve Get_recoveryDurationVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1040);
	}
	struct UAkAudioEvent Get_painGruntAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1176);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_painGruntIntervalVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1184);
	}
	UPrisonerBodySymptom_Pain Get_painSymptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1328);
		return UPrisonerBodySymptom_Pain(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_Pain Get_painSymptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1336);
		return struct UPrisonerBodySymptomCause_Pain(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_painSymptomOverallIntensityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1344);
	}
	struct FRuntimeFloatCurve Get_painSymptomLimpingIntensityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1480);
	}
	struct FPrisonerMaxMovementPaceVsSeverity Get_painSymptomMaxMovementPaceVsSeverity() {
		return memory.read<struct FPrisonerMaxMovementPaceVsSeverity>(m_addr + 1616);
	}
	struct FRuntimeFloatCurve Get_painSymptomMovementSpeedModifierVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1632);
	}
	uint8_t  Get_state() {
		return memory.read<uint8_t >(m_addr + 1768);
	}
	float Get_timerElapsedTime() {
		return memory.read<float>(m_addr + 1776);
	}
	float Get_timerDuration() {
		return memory.read<float>(m_addr + 1780);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionCause
{
public:
	UPrisonerBodyConditionCause(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_PeriodicAffect
{
public:
	UPrisonerBodySymptom_PeriodicAffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatInterval Get_affectIntervalDeviationRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 184);
	}
	struct FFloatInterval Get_affectDurationDeviationRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionInteraction_RemoveBandages
{
public:
	UPrisonerBodyConditionInteraction_RemoveBandages(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ARemoteSensorItem
{
public:
	ARemoteSensorItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBasicGameResourceContainerComponent Get_resourceContainerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2344);
		return struct UBasicGameResourceContainerComponent(ptr_addr);
	}
	int32_t Get_maxPairedDevices() {
		return memory.read<int32_t>(m_addr + 2352);
	}
	bool Get_hasAvailableSlots() {
		return memory.read<bool>(m_addr + 2356);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionInteractionItemTag
{
public:
	UPrisonerBodyConditionInteractionItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInteractionCaption() {
		return memory.read<struct FText>(m_addr + 48);
	}
	uint8_t  GetBeginInteractionMontage() {
		return memory.read<uint8_t >(m_addr + 72);
	}
	uint8_t  GetEndInteractionMontage() {
		return memory.read<uint8_t >(m_addr + 73);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPBCTIIT_ApplyBandagesOrDisinfect_Disinfect
{
public:
	UPBCTIIT_ApplyBandagesOrDisinfect_Disinfect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetTreatmentDurationPerSeverityLevel() {
		return memory.read<struct TArray<float>>(m_addr + 80);
	}
	struct TArray<float> GetTreatmentDurationPerUsePerSeverityLevel() {
		return memory.read<struct TArray<float>>(m_addr + 96);
	}
	struct FPBCTIIT_ApplyBandagesOrDisinfect_Disinfect_PerSkillData GetSkillData[5]() {
		return memory.read<struct FPBCTIIT_ApplyBandagesOrDisinfect_Disinfect_PerSkillData>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPBCIQR_ApplyBandagesOrDisinfect_Disinfect
{
public:
	UPBCIQR_ApplyBandagesOrDisinfect_Disinfect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionTreatInteraction
{
public:
	UPrisonerBodyConditionTreatInteraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyEffect_Coma
{
public:
	UPrisonerBodyEffect_Coma(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UExplosiveAmmunitionArrowSpawningParams
{
public:
	UExplosiveAmmunitionArrowSpawningParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char EPhysicalSurface GetHitPhysicalSurface() {
		return memory.read<char EPhysicalSurface>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyEffect_Limping
{
public:
	UPrisonerBodyEffect_Limping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_duration() {
		return memory.read<float>(m_addr + 64);
	}
	float Get_elapsedTime() {
		return memory.read<float>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyEffect_NotificationCooldown
{
public:
	UPrisonerBodyEffect_NotificationCooldown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UNotificationDescription Get_notificationClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return UNotificationDescription(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyMuscleGroupToInfectionClassMappings
{
public:
	UPrisonerBodyMuscleGroupToInfectionClassMappings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodyCondition_Infection Get_infectionClasses[19]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodyCondition_Infection(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USpawnDecalWhenParticleCollides
{
public:
	USpawnDecalWhenParticleCollides(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FParticleCollisionDecalData> GetDecals() {
		return memory.read<struct TArray<struct FParticleCollisionDecalData>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyInfectionStatics
{
public:
	UPrisonerBodyInfectionStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_Mount
{
public:
	UPrisonerVehicleAction_Mount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySimulationData
{
public:
	UPrisonerBodySimulationData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve GetMaxStrengthGainRateVsStrength() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 48);
	}
	float GetStrengthLossPerMissingProtein() {
		return memory.read<float>(m_addr + 184);
	}
	float GetMaxConstitutionGainRate() {
		return memory.read<float>(m_addr + 188);
	}
	float GetMaxConstitutionLossRate() {
		return memory.read<float>(m_addr + 192);
	}
	float GetDexterityChangePerStorageFatEnergy() {
		return memory.read<float>(m_addr + 196);
	}
	float GetMaxBleedingSeverity() {
		return memory.read<float>(m_addr + 200);
	}
	struct FFloatInterval GetBleedOutDurationVsBleedingSeverity() {
		return memory.read<struct FFloatInterval>(m_addr + 204);
	}
	struct FFloatInterval GetBleedOutDurationMultiplierVsConstitution() {
		return memory.read<struct FFloatInterval>(m_addr + 212);
	}
	struct FRuntimeFloatCurve GetDamageRatioVsBloodLossRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 224);
	}
	struct FFloatInterval GetHealingSpeedMultiplierVsConstitution() {
		return memory.read<struct FFloatInterval>(m_addr + 360);
	}
	struct FRuntimeFloatCurve GetHealingSpeedMultiplierVsActionDifficultyRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 368);
	}
	struct FFloatInterval GetImmuneSystemEfficiencyMultiplierVsConstitution() {
		return memory.read<struct FFloatInterval>(m_addr + 504);
	}
	struct FRuntimeFloatCurve GetImmuneSystemEfficiencyMultiplierVsActionDifficultyRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 512);
	}
	struct FPrisonerActionDifficultyCurve GetStaminaChangeRateVsActionDifficulty() {
		return memory.read<struct FPrisonerActionDifficultyCurve>(m_addr + 648);
	}
	float GetExhaustionIncrement() {
		return memory.read<float>(m_addr + 672);
	}
	float GetExhaustionFallRate() {
		return memory.read<float>(m_addr + 676);
	}
	float GetExhaustionFallRateMultiplierWhenLyingOnFurniture() {
		return memory.read<float>(m_addr + 680);
	}
	float GetExhaustionBonusModifierPerConsumedItem() {
		return memory.read<float>(m_addr + 684);
	}
	float GetExhaustionBonusMaxModifier() {
		return memory.read<float>(m_addr + 688);
	}
	float GetMaxStaminaReductionIncreaseMultiplier() {
		return memory.read<float>(m_addr + 692);
	}
	struct FPrisonerActionDifficultyCurve GetHeartRateRatioVsActionDifficulty() {
		return memory.read<struct FPrisonerActionDifficultyCurve>(m_addr + 696);
	}
	float GetHeartRateRaiseInterpSpeed() {
		return memory.read<float>(m_addr + 720);
	}
	float GetHeartRateFallRate() {
		return memory.read<float>(m_addr + 724);
	}
	float GetBreathingRateInterpSpeed() {
		return memory.read<float>(m_addr + 728);
	}
	struct FPrisonerActionDifficultyCurve GetOxygenSaturationRaiseRateVsActionDifficulty() {
		return memory.read<struct FPrisonerActionDifficultyCurve>(m_addr + 732);
	}
	struct FPrisonerActionDifficultyCurve GetOxygenSaturationFallRateVsActionDifficulty() {
		return memory.read<struct FPrisonerActionDifficultyCurve>(m_addr + 756);
	}
	float GetPreferredEnvironmentTemperatureWhenNaked() {
		return memory.read<float>(m_addr + 780);
	}
	struct FRuntimeFloatCurve GetPhoenixTearsDiscardRateVsAmount() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 784);
	}
	struct FRuntimeFloatCurve GetHealingSpeedMultiplierVsPhoenixTearsAmount() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 920);
	}
	struct FRuntimeFloatCurve GetImmuneSystemEfficiencyMultiplierVsPhoenixTearsAmount() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1056);
	}
	UMetabolism GetMetabolismClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1192);
		return UMetabolism(ptr_addr);
	}
	float GetMetabolismUpdateInterval() {
		return memory.read<float>(m_addr + 1200);
	}
	struct FRuntimeFloatCurve GetCaloriesConsumptionMultiplierVsHeartRateRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1208);
	}
	struct FRuntimeFloatCurve GetWaterConsumptionMultiplierVsHeartRateRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 1344);
	}
	struct FFloatInterval GetNutrientsConsumptionFactorVsConstitutionRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 1480);
	}
	float GetStomachFullnessToBeAbleToVomit() {
		return memory.read<float>(m_addr + 1488);
	}
	float GetBladderFullnessToBeAbleToUrinate() {
		return memory.read<float>(m_addr + 1492);
	}
	float GetColonFullnessToBeAbleToDefecate() {
		return memory.read<float>(m_addr + 1496);
	}
	float GetColonWaterContentRatioToHaveDiarrhea() {
		return memory.read<float>(m_addr + 1500);
	}
	struct FFloatInterval GetConsumptionDurationMultiplierVsEatingSpeed() {
		return memory.read<struct FFloatInterval>(m_addr + 1504);
	}
	struct TMap<struct FGameplayTag, float> GetConsumptionDurations() {
		return memory.read<struct TMap<struct FGameplayTag, float>>(m_addr + 1512);
	}
	struct FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges GetDigestionHandlersPerConsumableHealthRatios() {
		return memory.read<struct FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges>(m_addr + 1592);
	}
	struct FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges GetDigestionHandlersPerConsumableFatsContentRatios() {
		return memory.read<struct FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges>(m_addr + 1608);
	}
	struct TMap<uint8_t , struct FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges> GetDigestionHandlersPerConsumableNutrientContentRatios() {
		return memory.read<struct TMap<uint8_t , struct FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges>>(m_addr + 1624);
	}
	struct FPrisonerBodySimulationData_Effects GetEffects() {
		return memory.read<struct FPrisonerBodySimulationData_Effects>(m_addr + 1704);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySimulationSave
{
public:
	UPrisonerBodySimulationSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsDead() {
		return memory.read<bool>(m_addr + 40);
	}
	double GetBaseStrength() {
		return memory.read<double>(m_addr + 48);
	}
	double GetBaseConstitution() {
		return memory.read<double>(m_addr + 56);
	}
	double GetBaseDexterity() {
		return memory.read<double>(m_addr + 64);
	}
	double GetBaseIntelligence() {
		return memory.read<double>(m_addr + 72);
	}
	float GetInitialAge() {
		return memory.read<float>(m_addr + 80);
	}
	double GetLifeTimeSinceInitialization() {
		return memory.read<double>(m_addr + 88);
	}
	double GetLifeTimeSinceSpawn() {
		return memory.read<double>(m_addr + 96);
	}
	int64_t GetTimeOfDeath() {
		return memory.read<int64_t>(m_addr + 104);
	}
	int64_t GetTimeOfRevive() {
		return memory.read<int64_t>(m_addr + 112);
	}
	int64_t GetTimeOfComa() {
		return memory.read<int64_t>(m_addr + 120);
	}
	int64_t GetTimeOfComaWakeUp() {
		return memory.read<int64_t>(m_addr + 128);
	}
	float GetStamina() {
		return memory.read<float>(m_addr + 136);
	}
	float GetAccumulatedFatigue() {
		return memory.read<float>(m_addr + 140);
	}
	float GetHeartRate() {
		return memory.read<float>(m_addr + 144);
	}
	float GetBreathingRate() {
		return memory.read<float>(m_addr + 148);
	}
	float GetOxygenSaturation() {
		return memory.read<float>(m_addr + 152);
	}
	float GetBodyTemperature() {
		return memory.read<float>(m_addr + 156);
	}
	float GetPhoenixTearsAmount() {
		return memory.read<float>(m_addr + 160);
	}
	struct TArray<struct FPrisonerBodyEffectSave> GetBodyEffects() {
		return memory.read<struct TArray<struct FPrisonerBodyEffectSave>>(m_addr + 168);
	}
	struct TArray<char> GetMetabolism() {
		return memory.read<struct TArray<char>>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySimulationStatics
{
public:
	UPrisonerBodySimulationStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySimulationUIDataImpl
{
public:
	UPrisonerBodySimulationUIDataImpl(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UPrisonerBodyEffectUIData> GetBodyEffectsUIData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct TArray<struct UPrisonerBodyEffectUIData>(ptr_addr);
	}
	struct UPrisonerMetabolismUIData GetMetabolismUIData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UPrisonerMetabolismUIData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySimulationUIStatics
{
public:
	UPrisonerBodySimulationUIStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData
{
public:
	UPrisonerBodySymptomUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_shouldCreateTooltipElementForSeverity() {
		return memory.read<bool>(m_addr + 144);
	}
	struct TArray<struct UPrisonerBodySymptomCauseUIData> Get_causes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct TArray<struct UPrisonerBodySymptomCauseUIData>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_Bleeding
{
public:
	UPrisonerBodySymptomUIData_Bleeding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_BloodshotEyes
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_BloodshotEyes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodySymptom_BloodshotEyes Get_symptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodySymptom_BloodshotEyes(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_BloodshotEyes Get_symptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPrisonerBodySymptomCause_BloodshotEyes(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_intensityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_BlurredVision
{
public:
	UPrisonerBodySymptom_BlurredVision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_repOffset() {
		return memory.read<float>(m_addr + 196);
	}
	float Get_repFalloff() {
		return memory.read<float>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerFirstPersonSubviewComponent
{
public:
	UPrisonerFirstPersonSubviewComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetSubviewID() {
		return memory.read<uint8_t >(m_addr + 2008);
	}
	float GetWeaponFOV() {
		return memory.read<float>(m_addr + 2012);
	}
	struct FVector GetWeaponFoveationOffset() {
		return memory.read<struct FVector>(m_addr + 2016);
	}
	float GetMinViewPitch() {
		return memory.read<float>(m_addr + 2028);
	}
	float GetMaxViewPitch() {
		return memory.read<float>(m_addr + 2032);
	}
	float GetMinViewYaw() {
		return memory.read<float>(m_addr + 2036);
	}
	float GetMaxViewYaw() {
		return memory.read<float>(m_addr + 2040);
	}
	struct UCurveLinearColor GetMinMaxViewPitchByYawAndSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2048);
		return struct UCurveLinearColor(ptr_addr);
	}
	struct UCurveVector GetLocalSpaceOffsetByYaw() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2056);
		return struct UCurveVector(ptr_addr);
	}
	struct UCurveVector GetLocalSpaceOffsetByPitch() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2064);
		return struct UCurveVector(ptr_addr);
	}
	struct UCurveVector GetActorSpaceOffsetByYaw() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2072);
		return struct UCurveVector(ptr_addr);
	}
	struct UCurveVector GetActorSpaceOffsetByPitch() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2080);
		return struct UCurveVector(ptr_addr);
	}
	struct FName GetLockRotationToSocketAnimationCurveName() {
		return memory.read<struct FName>(m_addr + 2088);
	}
	struct FName GetLockRotationToSocketSocketName() {
		return memory.read<struct FName>(m_addr + 2096);
	}
	float GetProbeSize() {
		return memory.read<float>(m_addr + 2104);
	}
	char ECollisionChannel GetProbeChannel() {
		return memory.read<char ECollisionChannel>(m_addr + 2108);
	}
	bool GetDoCollisionTest() {
		return memory.read<bool>(m_addr + 2109);
	}
	struct FName GetAnimationBobbingTXCurveName() {
		return memory.read<struct FName>(m_addr + 2112);
	}
	struct FName GetAnimationBobbingTYCurveName() {
		return memory.read<struct FName>(m_addr + 2120);
	}
	struct FName GetAnimationBobbingTZCurveName() {
		return memory.read<struct FName>(m_addr + 2128);
	}
	struct FName GetAnimationBobbingRYCurveName() {
		return memory.read<struct FName>(m_addr + 2136);
	}
	struct FName GetAnimationBobbingRPCurveName() {
		return memory.read<struct FName>(m_addr + 2144);
	}
	struct FName GetAnimationBobbingRRCurveName() {
		return memory.read<struct FName>(m_addr + 2152);
	}
	float GetAnimationBobbingTScale() {
		return memory.read<float>(m_addr + 2160);
	}
	float GetAnimationBobbingRScale() {
		return memory.read<float>(m_addr + 2164);
	}
	struct FName GetAnimationCameraOffsetTXCurveName() {
		return memory.read<struct FName>(m_addr + 2168);
	}
	struct FName GetAnimationCameraOffsetTYCurveName() {
		return memory.read<struct FName>(m_addr + 2176);
	}
	struct FName GetAnimationCameraOffsetTZCurveName() {
		return memory.read<struct FName>(m_addr + 2184);
	}
	struct FName GetAnimationCameraOffsetRYCurveName() {
		return memory.read<struct FName>(m_addr + 2192);
	}
	struct FName GetAnimationCameraOffsetRPCurveName() {
		return memory.read<struct FName>(m_addr + 2200);
	}
	struct FName GetAnimationCameraOffsetRRCurveName() {
		return memory.read<struct FName>(m_addr + 2208);
	}
	float GetAnimationCameraOffsetTScale() {
		return memory.read<float>(m_addr + 2216);
	}
	float GetAnimationCameraOffsetRScale() {
		return memory.read<float>(m_addr + 2220);
	}
	float GetBlendInDuration() {
		return memory.read<float>(m_addr + 2224);
	}
	float GetBlendOutDuration() {
		return memory.read<float>(m_addr + 2228);
	}
	float Get_minFactorForPrisonerHiding() {
		return memory.read<float>(m_addr + 2232);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_BlurredVision
{
public:
	UPrisonerBodySymptomUIData_BlurredVision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleServiceItemComponent
{
public:
	UVehicleServiceItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	APortableVehicleServiceStation Get_serviceStationClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return APortableVehicleServiceStation(ptr_addr);
	}
	struct TArray<struct FGameplayTag> Get_supportedServiceTags() {
		return memory.read<struct TArray<struct FGameplayTag>>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_BoostOfEnergy
{
public:
	UPrisonerBodySymptom_BoostOfEnergy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_severityVsEnergyBoosterSubstanceAmountRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 184);
	}
	UForeignSubstance Get_energyBoosterSubstanceClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return UForeignSubstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_BreathingObstructed
{
public:
	UPrisonerBodySymptomUIData_BreathingObstructed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_PeriodicSound
{
public:
	UPrisonerBodySymptomCause_PeriodicSound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_FeelingCold
{
public:
	UPrisonerBodySymptomUIData_FeelingCold(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerPhotoModeAnimInstance
{
public:
	UPrisonerPhotoModeAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPoseBlendTime() {
		return memory.read<float>(m_addr + 696);
	}
	struct TArray<struct UAnimSequence> Get_unarmedPoses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct TArray<struct UAnimSequence>(ptr_addr);
	}
	struct TArray<struct UAnimSequence> Get_riflePoses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct TArray<struct UAnimSequence>(ptr_addr);
	}
	struct TArray<struct UAnimSequence> Get_handgunPoses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct TArray<struct UAnimSequence>(ptr_addr);
	}
	struct TArray<struct UAnimSequence> Get_meleePoses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct TArray<struct UAnimSequence>(ptr_addr);
	}
	struct TArray<struct UAnimSequence> Get_lowerBodyPoses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct TArray<struct UAnimSequence>(ptr_addr);
	}
	struct TArray<struct UAnimSequence> Get_facialExpressions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct TArray<struct UAnimSequence>(ptr_addr);
	}
	uint8_t  Get_poseGroup() {
		return memory.read<uint8_t >(m_addr + 800);
	}
	float Get_spineCurvature() {
		return memory.read<float>(m_addr + 804);
	}
	float Get_spineRotation() {
		return memory.read<float>(m_addr + 808);
	}
	int32_t Get_upperBodyPoseIndex() {
		return memory.read<int32_t>(m_addr + 812);
	}
	int32_t Get_lowerBodyPoseIndex() {
		return memory.read<int32_t>(m_addr + 816);
	}
	int32_t Get_lastUpperBodyPoseIndex() {
		return memory.read<int32_t>(m_addr + 820);
	}
	int32_t Get_lastLowerBodyPoseIndex() {
		return memory.read<int32_t>(m_addr + 824);
	}
	int32_t Get_facialExpressionIndex() {
		return memory.read<int32_t>(m_addr + 828);
	}
	int32_t Get_lastFacialExpressionIndex() {
		return memory.read<int32_t>(m_addr + 832);
	}
	struct UAnimSequenceBase Get_correctionPose() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float Get_upperBodyPoseBlendAlpha() {
		return memory.read<float>(m_addr + 848);
	}
	float Get_lowerBodyPoseBlendAlpha() {
		return memory.read<float>(m_addr + 852);
	}
	float Get_facialExpressionBlendAlpha() {
		return memory.read<float>(m_addr + 856);
	}
	bool Get_isFemale() {
		return memory.read<bool>(m_addr + 860);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_PeriodicSound
{
public:
	UPrisonerBodySymptom_PeriodicSound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent Get_sound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FFloatInterval Get_soundInitialDelay() {
		return memory.read<struct FFloatInterval>(m_addr + 192);
	}
	struct FFloatInterval Get_soundIntervalDeviationRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_PeriodicAffect
{
public:
	UPrisonerBodySymptomCause_PeriodicAffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class APrisonerHallucinationIllusion_SeeOtherPlayersExtremelyFatOrSkinny
{
public:
	APrisonerHallucinationIllusion_SeeOtherPlayersExtremelyFatOrSkinny(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Diarrhea
{
public:
	UPrisonerBodySymptom_Diarrhea(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Disorientation
{
public:
	UPrisonerBodySymptomCause_Disorientation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Dizziness
{
public:
	UPrisonerBodySymptomCause_Dizziness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Dizziness
{
public:
	UPrisonerBodySymptom_Dizziness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_blackoutIntensityVsElapsedTime() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 232);
	}
	float Get_unconsciousnessDelay() {
		return memory.read<float>(m_addr + 368);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodyConditionOrSymptomSideEffect_DoubleVision
{
public:
	UPrisonerBodyConditionOrSymptomSideEffect_DoubleVision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodySymptom_DoubleVision Get_symptomClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodySymptom_DoubleVision(ptr_addr);
	}
	struct UPrisonerBodySymptomCause_DoubleVision Get_symptomCause() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPrisonerBodySymptomCause_DoubleVision(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_intensityVsSeverity() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_EyePressure
{
public:
	UPrisonerBodySymptom_EyePressure(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Farting
{
public:
	UPrisonerBodySymptom_Farting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_Fatigue
{
public:
	UPrisonerBodySymptomUIData_Fatigue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCauseUIData
{
public:
	UPrisonerBodySymptomCauseUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_EngineBlock
{
public:
	UVehicleAttachment_EngineBlock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVehicleAttachmentEngineBlockSetup GetEngineSetup() {
		return memory.read<struct FVehicleAttachmentEngineBlockSetup>(m_addr + 784);
	}
	struct FVehicleAttachmentEngineBlockSimulationData Get_simulationData() {
		return memory.read<struct FVehicleAttachmentEngineBlockSimulationData>(m_addr + 1072);
	}
	struct TSoftClassPtr<UObject> Get_tradeableClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1120);
	}
	uint8_t  Get_repEngineBlockState() {
		return memory.read<uint8_t >(m_addr + 1160);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_FeelingHot
{
public:
	UPrisonerBodySymptom_FeelingHot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 184);
	}
	float Get_temperatureDeltaAtMaxSeverity() {
		return memory.read<float>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};


class URangedResourceProviderEntityComponentContinousAmountSave
{
public:
	URangedResourceProviderEntityComponentContinousAmountSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Hallucinations
{
public:
	UPrisonerBodySymptomCause_Hallucinations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerHallucinationEpisode
{
public:
	UPrisonerHallucinationEpisode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent Get_begunAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_endedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FRuntimeFloatCurve Get_visualEffectIntensityVsTime() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 56);
	}
	float Get_illusionsPreSpawnEffectsDelay() {
		return memory.read<float>(m_addr + 192);
	}
	struct UAkAudioEvent Get_illusionsPreSpawnAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_spawnIllusionsDelay() {
		return memory.read<float>(m_addr + 208);
	}
	struct TArray<UObject> Get_loadedIllusionClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct TArray<UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UThieverySkill
{
public:
	UThieverySkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat Get_lockpickingDurationModifierCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_lockpickingStartAngleModifierCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_lockpickingAngleModifierCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat Get_lockpickingDurabilityModifierCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Nausea
{
public:
	UPrisonerBodySymptom_Nausea(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_Nausea
{
public:
	UPrisonerBodySymptomUIData_Nausea(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_NeedToUrinate
{
public:
	UPrisonerBodySymptom_NeedToUrinate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve Get_severityVsBladderFullness() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Pain
{
public:
	UPrisonerBodySymptom_Pain(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 184);
	}
	struct FFloatInterval Get_painSuppressorsRatioForPainToBeSuppressedVsConstitution() {
		return memory.read<struct FFloatInterval>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_PhoenixTearsPresence
{
public:
	UPrisonerBodySymptomCause_PhoenixTearsPresence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomUIData_StomachFullness
{
public:
	UPrisonerBodySymptomUIData_StomachFullness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_StomachGrowling
{
public:
	UPrisonerBodySymptom_StomachGrowling(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Unconsciousness
{
public:
	UPrisonerBodySymptom_Unconsciousness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomCause_Weakness
{
public:
	UPrisonerBodySymptomCause_Weakness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptom_Weakness
{
public:
	UPrisonerBodySymptom_Weakness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxSeverity() {
		return memory.read<float>(m_addr + 184);
	}
	float Get_maxSeverityPerformanceScoreModifier() {
		return memory.read<float>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerBodySymptomNotifier
{
public:
	UPrisonerBodySymptomNotifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBasicPrisonerBodySymptomNotifier
{
public:
	UBasicPrisonerBodySymptomNotifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatInterval Get_triggerDelay() {
		return memory.read<struct FFloatInterval>(m_addr + 48);
	}
	bool Get_shouldDisplayNotificationOnChangeForWorse() {
		return memory.read<bool>(m_addr + 56);
	}
	bool Get_shouldResetNotificationTimerOnSeverityChange() {
		return memory.read<bool>(m_addr + 57);
	}
	struct TArray<struct FBasicPrisonerBodySymptomNotificationParameters> Get_notificationParameters() {
		return memory.read<struct TArray<struct FBasicPrisonerBodySymptomNotificationParameters>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerConsumableUserData
{
public:
	UPrisonerConsumableUserData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetConsumptionMethod() {
		return memory.read<uint8_t >(m_addr + 40);
	}
	AItem GetItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return AItem(ptr_addr);
	}
	UGameResourceType GetResourceTypeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return UGameResourceType(ptr_addr);
	}
	float GetRadiationAmount() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerDebugUI_SkillItem
{
public:
	UPrisonerDebugUI_SkillItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerDebugUI_BodyConditionItem
{
public:
	UPrisonerDebugUI_BodyConditionItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerDebugUI_BodyStateItem
{
public:
	UPrisonerDebugUI_BodyStateItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerDebugUI_MainWidget
{
public:
	UPrisonerDebugUI_MainWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UComboBoxString Get_prisonersComboBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UComboBoxString(ptr_addr);
	}
	struct UTextBlock Get_lifeTimeTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_strengthTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_constitutionTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_dexterityTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_intelligenceTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_healthTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_bodyTemperatureTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_apparentTemperatureTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_clothesTemperatureTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTextBlock(ptr_addr);
	}
	struct UListView Get_skillsListView() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UListView(ptr_addr);
	}
	struct UListView Get_bodyConditionsListView() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UListView(ptr_addr);
	}
	struct UPrisonerUIData Get_data() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UPrisonerUIData(ptr_addr);
	}
	struct UPrisonerUITooltipCache Get_tooltipCache() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UPrisonerUITooltipCache(ptr_addr);
	}
	float Get_dataRequestTimerInterval() {
		return memory.read<float>(m_addr + 732);
	}
	float Get_dataApplyTimerInterval() {
		return memory.read<float>(m_addr + 740);
	}
	struct UTextBlock Get_prisonerBodyEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerMetabolismUIData
{
public:
	UPrisonerMetabolismUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerEntitySetup
{
public:
	UPrisonerEntitySetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerExcretionUserData
{
public:
	UPrisonerExcretionUserData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerViewComponent
{
public:
	UPrisonerViewComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDefaultSubviewBlendDuration() {
		return memory.read<float>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerFirstPersonViewComponent
{
public:
	UPrisonerFirstPersonViewComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<uint8_t > GetSubviewBlendingPriorities() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 208);
	}
	struct TArray<struct FPrisonerFirstPersonSubviewBlendOverride> GetSubviewBlendOverrides() {
		return memory.read<struct TArray<struct FPrisonerFirstPersonSubviewBlendOverride>>(m_addr + 224);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerForeignSubstance
{
public:
	UPrisonerForeignSubstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_shouldConstitutionAffectAbsorptionCapacity() {
		return memory.read<bool>(m_addr + 168);
	}
	struct FRuntimeFloatCurve Get_absorptionCapacityModifierVsConstitutionRatio() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 176);
	}
	bool Get_shouldBeDiscardedWithPhoenixTears() {
		return memory.read<bool>(m_addr + 312);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerForeignSubstanceStatics
{
public:
	UPrisonerForeignSubstanceStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class APrisonerHallucinationIllusion
{
public:
	APrisonerHallucinationIllusion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class APrisonerHallucinationIllusion_SpawnMiniatureZombies
{
public:
	APrisonerHallucinationIllusion_SpawnMiniatureZombies(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<AZombie2> Get_zombieClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct TArray<AZombie2>(ptr_addr);
	}
	AZombieAIController2 Get_aiControllerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return AZombieAIController2(ptr_addr);
	}
	int32_t Get_zombieGroupSize() {
		return memory.read<int32_t>(m_addr + 568);
	}
	int32_t Get_maxZombiesToSpawnPerTick() {
		return memory.read<int32_t>(m_addr + 572);
	}
	int32_t Get_maxZombiesToDestroyPerTick() {
		return memory.read<int32_t>(m_addr + 576);
	}
	struct FFloatInterval Get_zombieGroupSpawnInterval() {
		return memory.read<struct FFloatInterval>(m_addr + 580);
	}
	struct FFloatInterval Get_zombieSpawnDistance() {
		return memory.read<struct FFloatInterval>(m_addr + 588);
	}
	float Get_maxZombieDistance() {
		return memory.read<float>(m_addr + 596);
	}
	float Get_maxTimeWithoutZombieLineOfSight() {
		return memory.read<float>(m_addr + 600);
	}
	float Get_zombieSoundAttenuationScalingFactor() {
		return memory.read<float>(m_addr + 604);
	}
	struct TArray<struct AController> Get_zombieControllers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct TArray<struct AController>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerSpawnEquipment
{
public:
	UPrisonerSpawnEquipment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagQuery GetCondition() {
		return memory.read<struct FGameplayTagQuery>(m_addr + 48);
	}
	struct TSoftClassPtr<UObject> GetItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 120);
	}
	uint8_t  GetEquipType() {
		return memory.read<uint8_t >(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerMeshManager
{
public:
	UPrisonerMeshManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagContainer Get_bodyPartVsCharacterMeshSlotMapping[c]() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 1136);
	}
	struct FGameplayTagContainer Get_wettablePartVsCharacterMeshSlotMapping[4]() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 1520);
	}
	struct FGameplayTagContainer Get_clothesPartVsCharacterMeshSlotMapping[b]() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 1648);
	}
	UCharacterMesh Get_characterBodyClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2000);
		return UCharacterMesh(ptr_addr);
	}
	UCharacterMesh Get_characterHairClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2008);
		return UCharacterMesh(ptr_addr);
	}
	UCharacterMesh Get_characterFacialHairClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2016);
		return UCharacterMesh(ptr_addr);
	}
	struct TArray<UCharacterMesh> Get_classesIgnoringFPVHiding() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2024);
		return struct TArray<UCharacterMesh>(ptr_addr);
	}
	struct FGameplayTag Get_highHeelsTag() {
		return memory.read<struct FGameplayTag>(m_addr + 2040);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerMovementComponent
{
public:
	UPrisonerMovementComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCapsuleHalfHeightWhenCrouched() {
		return memory.read<float>(m_addr + 3080);
	}
	float GetCapsuleHalfHeightWhenProne() {
		return memory.read<float>(m_addr + 3084);
	}
	float GetCapsuleHalfHeightWhenSwimming() {
		return memory.read<float>(m_addr + 3088);
	}
	bool GetUseCustomRotationRate() {
		return memory.read<bool>(m_addr + 3092);
	}
	bool GetRequestedPathMovesForwardOnly() {
		return memory.read<bool>(m_addr + 3093);
	}
	float GetRotationInterpolationSpeed() {
		return memory.read<float>(m_addr + 3096);
	}
	struct UCurveFloat GetMaxRotationRateCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3104);
		return struct UCurveFloat(ptr_addr);
	}
	float GetRotationRateMultiplierWhenStanding() {
		return memory.read<float>(m_addr + 3112);
	}
	float GetRotationRateMultiplierWhenCrouched() {
		return memory.read<float>(m_addr + 3116);
	}
	float GetRotationRateMultiplierWhenProne() {
		return memory.read<float>(m_addr + 3120);
	}
	float GetRotationRateMultiplierWhenSwimming() {
		return memory.read<float>(m_addr + 3124);
	}
	float GetRotationRateMultiplierWhenSwimmingAndDiving() {
		return memory.read<float>(m_addr + 3128);
	}
	float GetGroundSlopeAngleForSpeedScalingSmoothingRate() {
		return memory.read<float>(m_addr + 3132);
	}
	float GetGroundSlopeAngleSmoothingRate() {
		return memory.read<float>(m_addr + 3136);
	}
	bool GetUseSmoothedGroundSlopeAngleForPaceChecks() {
		return memory.read<bool>(m_addr + 3140);
	}
	float GetMinGroundSlopeAngleForJogging() {
		return memory.read<float>(m_addr + 3144);
	}
	float GetMaxGroundSlopeAngleForJogging() {
		return memory.read<float>(m_addr + 3148);
	}
	float GetMinGroundSlopeAngleForRunning() {
		return memory.read<float>(m_addr + 3152);
	}
	float GetMaxGroundSlopeAngleForRunning() {
		return memory.read<float>(m_addr + 3156);
	}
	float GetMinSpeedModifierWhenMovingUphill() {
		return memory.read<float>(m_addr + 3160);
	}
	float GetBaseJumpZVelocity() {
		return memory.read<float>(m_addr + 3164);
	}
	float GetMaxAbsoluteVelocityZAfterClimb() {
		return memory.read<float>(m_addr + 3224);
	}
	float GetStaminaUnitsToDrainOnJump() {
		return memory.read<float>(m_addr + 3228);
	}
	struct UCurveFloat GetJumpZVelocityMultiplierVsSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3232);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetJumpZVelocityMultiplierVsGroundSlopeAngle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3240);
		return struct UCurveFloat(ptr_addr);
	}
	struct TArray<struct FPrisonerClimbAnimationInfo> GetClimbAnimations() {
		return memory.read<struct TArray<struct FPrisonerClimbAnimationInfo>>(m_addr + 3248);
	}
	float GetClimbingStaminaDrainModifier() {
		return memory.read<float>(m_addr + 3264);
	}
	float GetClimbingPlayRateMultiplierWhenRequiredHandIsNotFree() {
		return memory.read<float>(m_addr + 3268);
	}
	bool GetClimbingDebuggingEnabled() {
		return memory.read<bool>(m_addr + 3272);
	}
	float GetClimbingDebuggingDrawTime() {
		return memory.read<float>(m_addr + 3276);
	}
	struct FVector GetLadderClimbingCapsuleBias() {
		return memory.read<struct FVector>(m_addr + 3280);
	}
	float GetLadderClimbingMaxSpeed() {
		return memory.read<float>(m_addr + 3292);
	}
	bool GetCanClimbOffLadderUpwardsAutomatically() {
		return memory.read<bool>(m_addr + 3296);
	}
	bool GetCanClimbOffLadderDownwardsAutomatically() {
		return memory.read<bool>(m_addr + 3297);
	}
	float GetMaxHorzDistanceToLadderForClimbing() {
		return memory.read<float>(m_addr + 3300);
	}
	int32_t GetNumberOfLadderPeekSteps() {
		return memory.read<int32_t>(m_addr + 3304);
	}
	struct FVector GetPostLadderClimbingLaunchVelocity() {
		return memory.read<struct FVector>(m_addr + 3308);
	}
	float GetMaxHeightToJumpOffLadderSafely() {
		return memory.read<float>(m_addr + 3320);
	}
	float GetMaxFallingSpeedAllowedForLadderClimbing() {
		return memory.read<float>(m_addr + 3324);
	}
	float GetMaxGroundSlopeAllowedForLadderClimbing() {
		return memory.read<float>(m_addr + 3328);
	}
	struct UCurveFloat GetMaxHorzDistanceToWindowForClimbingVsSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3336);
		return struct UCurveFloat(ptr_addr);
	}
	struct TArray<struct FWindowClimbingAnimationInfo> GetWindowClimbingAnimations() {
		return memory.read<struct TArray<struct FWindowClimbingAnimationInfo>>(m_addr + 3344);
	}
	float GetWaterImmersionToStartSwimming() {
		return memory.read<float>(m_addr + 3360);
	}
	float GetWaterImmersionToStopSwimming() {
		return memory.read<float>(m_addr + 3364);
	}
	float GetSwimmingToWalkingDepthTolerance() {
		return memory.read<float>(m_addr + 3368);
	}
	float GetSwimmingToWalkingCapsuleCollisionTolerance() {
		return memory.read<float>(m_addr + 3372);
	}
	float GetDesiredWaterImmersion() {
		return memory.read<float>(m_addr + 3376);
	}
	float GetDesiredWaterImmersionCorrectionAcceleration() {
		return memory.read<float>(m_addr + 3380);
	}
	struct UCurveFloat GetDesiredWaterImmersionCorrectionAccelerationCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3384);
		return struct UCurveFloat(ptr_addr);
	}
	float GetWaterResurfaceAcceleration() {
		return memory.read<float>(m_addr + 3392);
	}
	struct FVector2D GetOceanWavesAcceleration() {
		return memory.read<struct FVector2D>(m_addr + 3396);
	}
	float GetWaterImmersionAfterWhichRunningIsDisabled() {
		return memory.read<float>(m_addr + 3404);
	}
	float GetImmersionCorrectionDownMultiplier() {
		return memory.read<float>(m_addr + 3408);
	}
	float GetRotationRateMultiplierWhenImmersedInWater() {
		return memory.read<float>(m_addr + 3412);
	}
	float GetDiveInAccelerationScale() {
		return memory.read<float>(m_addr + 3416);
	}
	float GetDiveInAccelerationTimeout() {
		return memory.read<float>(m_addr + 3420);
	}
	float GetDiveInCollisionCheckOffset() {
		return memory.read<float>(m_addr + 3424);
	}
	float GetBuoyancyWhenDiving() {
		return memory.read<float>(m_addr + 3428);
	}
	float GetBuoyancyWhenNotDiving() {
		return memory.read<float>(m_addr + 3432);
	}
	float GetRotationRatePitchWhenDiving() {
		return memory.read<float>(m_addr + 3436);
	}
	float GetSurfaceTensionForce() {
		return memory.read<float>(m_addr + 3440);
	}
	float GetMaxWindSpeedForAerialDrag() {
		return memory.read<float>(m_addr + 3444);
	}
	float GetLongFallSpeedThreshold() {
		return memory.read<float>(m_addr + 3448);
	}
	float GetBodyRotationCorrectionRate() {
		return memory.read<float>(m_addr + 3452);
	}
	struct FVector GetBodyRotationDrag() {
		return memory.read<struct FVector>(m_addr + 3456);
	}
	struct FWaterForceWhenSwimmingParams GetWaterForceWhenSwimmingParams() {
		return memory.read<struct FWaterForceWhenSwimmingParams>(m_addr + 3468);
	}
	struct FVector_NetQuantizeNormal Get_repAccelerationNormal() {
		return memory.read<struct FVector_NetQuantizeNormal>(m_addr + 3488);
	}
	float Get_timeToSpendFallingBeforeHandsAreFree() {
		return memory.read<float>(m_addr + 3548);
	}
	float Get_maxLatencyForStanceCheckInterpolation() {
		return memory.read<float>(m_addr + 3552);
	}
	char Get_repBuoyancy() {
		return memory.read<char>(m_addr + 3856);
	}
	struct FLadderInfoRepData Get_ladderInfoRepData() {
		return memory.read<struct FLadderInfoRepData>(m_addr + 4320);
	}
	uint16_t Get_fallingPoseBlendRepData() {
		return memory.read<uint16_t>(m_addr + 4914);
	}
	char Get_fallingControlRepData() {
		return memory.read<char>(m_addr + 4916);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerMusicPlayerComponent
{
public:
	UPrisonerMusicPlayerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName Get_musicRootFolder() {
		return memory.read<struct FName>(m_addr + 192);
	}
	float Get_volumeChangeRate() {
		return memory.read<float>(m_addr + 200);
	}
	int64_t Get_fileSizeLimitInMB() {
		return memory.read<int64_t>(m_addr + 208);
	}
	struct UAkAudioEvent Get_turnOnAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_turnOffAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct URuntimeAudioImporterLibrary Get_importerLibrary() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct URuntimeAudioImporterLibrary(ptr_addr);
	}
	struct UAudioComponent Get_audioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UAudioComponent(ptr_addr);
	}
	struct URadioComponent Get_radioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct URadioComponent(ptr_addr);
	}
	struct TWeakObjectPtr<UImportedSoundWave> Get_playingSoundWave() {
		return memory.read<struct TWeakObjectPtr<UImportedSoundWave>>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerPrisonWalletComponent
{
public:
	UPrisonerPrisonWalletComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<AItem> Get_deluxeItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct TArray<AItem>(ptr_addr);
	}
	struct TArray<AItem> Get_milestoneEventItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct TArray<AItem>(ptr_addr);
	}
	uint8_t  Get_milestoneItemChoiceType() {
		return memory.read<uint8_t >(m_addr + 224);
	}
	int32_t Get_lastMilestone() {
		return memory.read<int32_t>(m_addr + 228);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerResponseIdle
{
public:
	UPrisonerResponseIdle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UAnimMontage> GetMontages() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<struct UAnimMontage>(ptr_addr);
	}
	float GetPreMontageDelay() {
		return memory.read<float>(m_addr + 56);
	}
	float GetPostMontageDelay() {
		return memory.read<float>(m_addr + 60);
	}
	float GetCooldownDuration() {
		return memory.read<float>(m_addr + 64);
	}
	bool GetCanBeUsedWhenItemIsInHands() {
		return memory.read<bool>(m_addr + 68);
	}
	struct TSet<uint8_t > GetCombatibleAnimationsSets() {
		return memory.read<struct TSet<uint8_t >>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class URichTextInlineTextDecorator
{
public:
	URichTextInlineTextDecorator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerRestingComponent
{
public:
	UPrisonerRestingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerRestingData Get_restingData() {
		return memory.read<struct FPrisonerRestingData>(m_addr + 192);
	}
	struct FPrisonerRestingDataAutonomous Get_restingDataAutonomous() {
		return memory.read<struct FPrisonerRestingDataAutonomous>(m_addr + 208);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleWithGearbox
{
public:
	UVehicleWithGearbox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTeleportUserData
{
public:
	UTeleportUserData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerTeleportUserData
{
public:
	UPrisonerTeleportUserData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerSkillsUIDataImpl
{
public:
	UPrisonerSkillsUIDataImpl(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UPrisonerSkillUIData> GetSkillsUIData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<struct UPrisonerSkillUIData>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerSubview
{
public:
	UPrisonerSubview(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerThirdPersonAerialSubviewComponent
{
public:
	UPrisonerThirdPersonAerialSubviewComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFieldOfView() {
		return memory.read<float>(m_addr + 512);
	}
	bool GetUseFieldOfViewForLOD() {
		return memory.read<bool>(m_addr + 516);
	}
	bool GetConstrainAspectRatio() {
		return memory.read<bool>(m_addr + 517);
	}
	float GetAspectRatio() {
		return memory.read<float>(m_addr + 520);
	}
	float GetMinViewYaw() {
		return memory.read<float>(m_addr + 524);
	}
	float GetMaxViewYaw() {
		return memory.read<float>(m_addr + 528);
	}
	float GetMinViewPitch() {
		return memory.read<float>(m_addr + 532);
	}
	float GetMaxViewPitch() {
		return memory.read<float>(m_addr + 536);
	}
	float GetPostProcessBlendWeight() {
		return memory.read<float>(m_addr + 540);
	}
	struct FPostProcessSettings GetPostProcessSettings() {
		return memory.read<struct FPostProcessSettings>(m_addr + 544);
	}
	float GetBlendInDuration() {
		return memory.read<float>(m_addr + 1920);
	}
	float GetBlendOutDuration() {
		return memory.read<float>(m_addr + 1924);
	}
	float GetBaseOrbitDistance() {
		return memory.read<float>(m_addr + 1928);
	}
	float GetSpeedOrbitDistanceIncreaseFactor() {
		return memory.read<float>(m_addr + 1932);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerThirdPersonViewComponent
{
public:
	UPrisonerThirdPersonViewComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<uint8_t > GetSubviewBlendingPriorities() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 208);
	}
	struct TArray<struct FPrisonerThirdPersonSubviewBlendOverride> GetSubviewBlendOverrides() {
		return memory.read<struct TArray<struct FPrisonerThirdPersonSubviewBlendOverride>>(m_addr + 224);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerThrowComponent
{
public:
	UPrisonerThrowComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_throwingState() {
		return memory.read<uint8_t >(m_addr + 192);
	}
	struct TWeakObjectPtr<AItem> Get_itemToThrow() {
		return memory.read<struct TWeakObjectPtr<AItem>>(m_addr + 196);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerTreatmentUIController
{
public:
	UPrisonerTreatmentUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerUIDataRequest
{
public:
	UPrisonerUIDataRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerUIDebugDataResponse
{
public:
	UPrisonerUIDebugDataResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerUIDebugData Get_payload() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UPrisonerUIDebugData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWetnessStatics
{
public:
	UWetnessStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWeaponAttachmentFlashlight
{
public:
	AWeaponAttachmentFlashlight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent Get_lightActivatedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FName Get_lightSocketName() {
		return memory.read<struct FName>(m_addr + 2360);
	}
	struct FName Get_materialEmissiveParameterName() {
		return memory.read<struct FName>(m_addr + 2368);
	}
	struct UBasicGameResourceContainerComponent Get_resourceContainerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2384);
		return struct UBasicGameResourceContainerComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_ForcePush
{
public:
	UPrisonerVehicleAction_ForcePush(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_ForcePushDescription
{
public:
	UPrisonerVehicleAction_ForcePushDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USpawnMenuWidget
{
public:
	USpawnMenuWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USpawnChoiceWidget Get_randomLocationButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct USpawnChoiceWidget(ptr_addr);
	}
	struct USpawnChoiceWidget Get_sectorLocationButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct USpawnChoiceWidget(ptr_addr);
	}
	struct USpawnChoiceWidget Get_shelterLocationButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct USpawnChoiceWidget(ptr_addr);
	}
	struct USpawnChoiceWidget Get_squadLocationButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct USpawnChoiceWidget(ptr_addr);
	}
	struct UVerticalBox Get_locationOptions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UVerticalBox(ptr_addr);
	}
	struct UBorder Get_respawnDisabledLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UBorder(ptr_addr);
	}
	struct UBorder Get_combatLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UBorder(ptr_addr);
	}
	struct UBorder Get_noAvailableLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UBorder(ptr_addr);
	}
	struct UBorder Get_limitExceededLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UBorder(ptr_addr);
	}
	struct UOverlay Get_deathTitlePanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay Get_comaTitlePanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay Get_timerPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UOverlay(ptr_addr);
	}
	struct UTextBlock Get_timerLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_timer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTextBlock(ptr_addr);
	}
	struct UOverlay Get_wakeUpPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UOverlay(ptr_addr);
	}
	struct UButton Get_wakeUpButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UButton(ptr_addr);
	}
	struct UTextBlock Get_healthCriticalLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UTextBlock(ptr_addr);
	}
	struct USpawnSectorSelectorWidget Get_spawnSectorSelector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct USpawnSectorSelectorWidget(ptr_addr);
	}
	struct FText Get_suddenDeathText() {
		return memory.read<struct FText>(m_addr + 752);
	}
	struct FText Get_permadeathText() {
		return memory.read<struct FText>(m_addr + 776);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_InstallAttachment
{
public:
	UPrisonerVehicleAction_InstallAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_OpenOrCloseDoor
{
public:
	UPrisonerVehicleAction_OpenOrCloseDoor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_OpenOrCloseDoorDescription
{
public:
	UPrisonerVehicleAction_OpenOrCloseDoorDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_QuickInstallAttachmentDescription
{
public:
	UPrisonerVehicleAction_QuickInstallAttachmentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_QuickRemoveAttachment
{
public:
	UPrisonerVehicleAction_QuickRemoveAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_QuickRepairAttachment
{
public:
	UPrisonerVehicleAction_QuickRepairAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_RemoveAttachment
{
public:
	UPrisonerVehicleAction_RemoveAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_RemoveAttachmentDescription
{
public:
	UPrisonerVehicleAction_RemoveAttachmentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_RepairAttachmentDescription
{
public:
	UPrisonerVehicleAction_RepairAttachmentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_SwitchMountSlot
{
public:
	UPrisonerVehicleAction_SwitchMountSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_SwitchMountSlotDescription
{
public:
	UPrisonerVehicleAction_SwitchMountSlotDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrisonerVehicleAction_UnmountDescription
{
public:
	UPrisonerVehicleAction_UnmountDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AProjectile
{
public:
	AProjectile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UStaticMeshComponent(ptr_addr);
	}
	bool GetRotationFollowsVelocity() {
		return memory.read<bool>(m_addr + 552);
	}
	bool GetAddImpulseOnHit() {
		return memory.read<bool>(m_addr + 553);
	}
	float GetImpulseMultiplier() {
		return memory.read<float>(m_addr + 556);
	}
	float GetMaxImpulse() {
		return memory.read<float>(m_addr + 560);
	}
	struct UProjectileImpactEffects GetImpactEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UProjectileImpactEffects(ptr_addr);
	}
	struct FProjectileData GetProjectileData() {
		return memory.read<struct FProjectileData>(m_addr + 576);
	}
	float GetMeshScaleStartLocal() {
		return memory.read<float>(m_addr + 672);
	}
	float GetMeshScaleRangeLocal() {
		return memory.read<float>(m_addr + 676);
	}
	float GetMeshScaleMinLocal() {
		return memory.read<float>(m_addr + 680);
	}
	float GetMeshScaleMaxLocal() {
		return memory.read<float>(m_addr + 684);
	}
	float GetMeshScaleStart() {
		return memory.read<float>(m_addr + 688);
	}
	float GetMeshScaleRange() {
		return memory.read<float>(m_addr + 692);
	}
	float GetMeshScaleMin() {
		return memory.read<float>(m_addr + 696);
	}
	float GetMeshScaleMax() {
		return memory.read<float>(m_addr + 700);
	}
	float GetTraceScaleMultiplier() {
		return memory.read<float>(m_addr + 704);
	}
	float GetGravityScale() {
		return memory.read<float>(m_addr + 708);
	}
	float GetSharpness() {
		return memory.read<float>(m_addr + 712);
	}
	struct UAkAudioEvent GetFlyByAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FName GetColorMaterialParameterName() {
		return memory.read<struct FName>(m_addr + 728);
	}
	struct FLinearColor GetInitialColor() {
		return memory.read<struct FLinearColor>(m_addr + 736);
	}
	struct FLinearColor GetFinalColor() {
		return memory.read<struct FLinearColor>(m_addr + 752);
	}
	int32_t GetMaxHitCount() {
		return memory.read<int32_t>(m_addr + 768);
	}
	float GetNoiseLoudnessOnHit() {
		return memory.read<float>(m_addr + 772);
	}
	bool GetIgnoreCallingWeaponsFiringEffects() {
		return memory.read<bool>(m_addr + 776);
	}
	float GetExperienceMultiplier() {
		return memory.read<float>(m_addr + 780);
	}
	bool GetShouldForceStopWhenNoVelocity() {
		return memory.read<bool>(m_addr + 784);
	}
	bool GetCanEverCollide() {
		return memory.read<bool>(m_addr + 785);
	}
	struct UNiagaraSystem GetTrailNiagaraSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UNiagaraSystem(ptr_addr);
	}
	struct UParticleSystem GetWaterSplashParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UParticleSystem(ptr_addr);
	}
	float Get_lifeSpanAfterStopping() {
		return memory.read<float>(m_addr + 832);
	}
	bool Get_useFixedTimestep() {
		return memory.read<bool>(m_addr + 836);
	}
	float Get_fixedTimestep() {
		return memory.read<float>(m_addr + 840);
	}
	int32_t Get_zeroRange() {
		return memory.read<int32_t>(m_addr + 868);
	}
	float Get_windage() {
		return memory.read<float>(m_addr + 872);
	}
	float Get_distanceTraveled() {
		return memory.read<float>(m_addr + 876);
	}
	float Get_meshScaleFactor() {
		return memory.read<float>(m_addr + 880);
	}
	float Get_offsetFromBarrel() {
		return memory.read<float>(m_addr + 916);
	}
	int32_t Get_randomSeed() {
		return memory.read<int32_t>(m_addr + 924);
	}
	struct UNiagaraComponent Get_trailNiagaraComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1008);
		return struct UNiagaraComponent(ptr_addr);
	}
	bool Get_doNotForceInitialReplication() {
		return memory.read<bool>(m_addr + 1016);
	}
	float Get_muzzleVelocity() {
		return memory.read<float>(m_addr + 1020);
	}
	bool Get_createdOnServer() {
		return memory.read<bool>(m_addr + 1024);
	}
	float Get_halfAngle() {
		return memory.read<float>(m_addr + 1028);
	}
	uint8_t  Get_weaponFiringModeWhenShot() {
		return memory.read<uint8_t >(m_addr + 1064);
	}
	struct FFiredShotDescriptionRep Get_firedShotDescriptionRep() {
		return memory.read<struct FFiredShotDescriptionRep>(m_addr + 1072);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAmmunitionArrowSpawningParams
{
public:
	UAmmunitionArrowSpawningParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetAmmunitionArrowClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UObject(ptr_addr);
	}
	float GetItemsHealth() {
		return memory.read<float>(m_addr + 48);
	}
	bool GetIsPartOfEvent() {
		return memory.read<bool>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};


class AProjectileArrow
{
public:
	AProjectileArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent Get_tempSceneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1080);
		return struct USceneComponent(ptr_addr);
	}
	struct USceneComponent Get_relativeRotationSceneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct USceneComponent(ptr_addr);
	}
	struct FProjectileArrowData Get_projectileArrowData() {
		return memory.read<struct FProjectileArrowData>(m_addr + 1096);
	}

private:
	std::uint64_t m_addr = 0;
};


class AProjectileFlare
{
public:
	AProjectileFlare(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystemComponent Get_particleSystemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1080);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UPointLightComponent Get_pointLightComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct UPointLightComponent(ptr_addr);
	}
	struct UAkComponent Get_akFlareComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct UAkComponent(ptr_addr);
	}
	bool Get_hasParachute() {
		return memory.read<bool>(m_addr + 1104);
	}
	float Get_parachuteGravityScale() {
		return memory.read<float>(m_addr + 1108);
	}
	float Get_parachuteEffectiveBallisticCoefficient() {
		return memory.read<float>(m_addr + 1112);
	}
	struct FVector Get_parachuteParticlesScale() {
		return memory.read<struct FVector>(m_addr + 1116);
	}
	float Get_parachuteParticlesScaleSpeed() {
		return memory.read<float>(m_addr + 1128);
	}
	struct UAkAudioEvent Get_burnStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1136);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_burnEnd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1144);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_burnTime() {
		return memory.read<float>(m_addr + 1152);
	}

private:
	std::uint64_t m_addr = 0;
};


class AProjectileGrenade
{
public:
	AProjectileGrenade(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateFiringBurst
{
public:
	UWeaponStateFiringBurst(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UProjectileImpactEffects
{
public:
	UProjectileImpactEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinDecalSize() {
		return memory.read<float>(m_addr + 48);
	}
	float GetMaxDecalSize() {
		return memory.read<float>(m_addr + 52);
	}
	float GetMinDecalLifetime() {
		return memory.read<float>(m_addr + 56);
	}
	float GetMaxDecalLifetime() {
		return memory.read<float>(m_addr + 60);
	}
	float GetDecalFadeFactor() {
		return memory.read<float>(m_addr + 64);
	}
	float GetParticleEffectsInitialScale() {
		return memory.read<float>(m_addr + 68);
	}
	float GetParticleEffectsScaleDistanceStart() {
		return memory.read<float>(m_addr + 72);
	}
	float GetParticleEffectsScaleDistanceRange() {
		return memory.read<float>(m_addr + 76);
	}
	float GetParticleEffectsScaleByDistanceFactor() {
		return memory.read<float>(m_addr + 80);
	}
	struct UParticleSystem GetBulletPenetrationExitParticlesDaytime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetBulletPenetrationExitParticlesNighttime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UParticleSystem(ptr_addr);
	}
	struct UMaterial GetDayTimePenetrationDecal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UMaterial(ptr_addr);
	}
	struct UMaterial GetNightTimePenetrationDecal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UMaterial(ptr_addr);
	}
	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FImpactEffectData GetDefault() {
		return memory.read<struct FImpactEffectData>(m_addr + 128);
	}
	struct FImpactEffectData Getgrass() {
		return memory.read<struct FImpactEffectData>(m_addr + 152);
	}
	struct FImpactEffectData GetForrestGroundCoastal() {
		return memory.read<struct FImpactEffectData>(m_addr + 176);
	}
	struct FImpactEffectData GetForrestGroundContinental() {
		return memory.read<struct FImpactEffectData>(m_addr + 200);
	}
	struct FImpactEffectData GetRock() {
		return memory.read<struct FImpactEffectData>(m_addr + 224);
	}
	struct FImpactEffectData GetStone() {
		return memory.read<struct FImpactEffectData>(m_addr + 248);
	}
	struct FImpactEffectData GetGravel() {
		return memory.read<struct FImpactEffectData>(m_addr + 272);
	}
	struct FImpactEffectData GetGravelBeach() {
		return memory.read<struct FImpactEffectData>(m_addr + 296);
	}
	struct FImpactEffectData GetPebbles() {
		return memory.read<struct FImpactEffectData>(m_addr + 320);
	}
	struct FImpactEffectData GetSnow() {
		return memory.read<struct FImpactEffectData>(m_addr + 344);
	}
	struct FImpactEffectData GetIce() {
		return memory.read<struct FImpactEffectData>(m_addr + 368);
	}
	struct FImpactEffectData GetSand() {
		return memory.read<struct FImpactEffectData>(m_addr + 392);
	}
	struct FImpactEffectData GetAsphalt() {
		return memory.read<struct FImpactEffectData>(m_addr + 416);
	}
	struct FImpactEffectData GetDirt() {
		return memory.read<struct FImpactEffectData>(m_addr + 440);
	}
	struct FImpactEffectData GetWater() {
		return memory.read<struct FImpactEffectData>(m_addr + 464);
	}
	struct FImpactEffectData GetWaterOcean() {
		return memory.read<struct FImpactEffectData>(m_addr + 488);
	}
	struct FImpactEffectData GetCloth() {
		return memory.read<struct FImpactEffectData>(m_addr + 512);
	}
	struct FImpactEffectData GetMetal() {
		return memory.read<struct FImpactEffectData>(m_addr + 536);
	}
	struct FImpactEffectData GetAluminium() {
		return memory.read<struct FImpactEffectData>(m_addr + 560);
	}
	struct FImpactEffectData GetConcrete() {
		return memory.read<struct FImpactEffectData>(m_addr + 584);
	}
	struct FImpactEffectData GetBrick() {
		return memory.read<struct FImpactEffectData>(m_addr + 608);
	}
	struct FImpactEffectData GetWood() {
		return memory.read<struct FImpactEffectData>(m_addr + 632);
	}
	struct FImpactEffectData GetPlastic() {
		return memory.read<struct FImpactEffectData>(m_addr + 656);
	}
	struct FImpactEffectData GetRubber() {
		return memory.read<struct FImpactEffectData>(m_addr + 680);
	}
	struct FImpactEffectData GetGlass() {
		return memory.read<struct FImpactEffectData>(m_addr + 704);
	}
	struct FImpactEffectData GetFolliage() {
		return memory.read<struct FImpactEffectData>(m_addr + 728);
	}
	struct FImpactEffectData GetBark() {
		return memory.read<struct FImpactEffectData>(m_addr + 752);
	}
	struct FImpactEffectData GetFlesh() {
		return memory.read<struct FImpactEffectData>(m_addr + 776);
	}
	struct FImpactEffectData GetRoofTile() {
		return memory.read<struct FImpactEffectData>(m_addr + 800);
	}
	struct FImpactEffectData GetCeramicsTiles() {
		return memory.read<struct FImpactEffectData>(m_addr + 824);
	}
	struct FImpactEffectData GetScrap() {
		return memory.read<struct FImpactEffectData>(m_addr + 848);
	}
	struct FImpactEffectData GetTrunk() {
		return memory.read<struct FImpactEffectData>(m_addr + 872);
	}
	struct FImpactEffectData GetLeaves() {
		return memory.read<struct FImpactEffectData>(m_addr + 896);
	}
	struct FImpactEffectData GetCardboard() {
		return memory.read<struct FImpactEffectData>(m_addr + 920);
	}
	struct FImpactEffectData GetPlaster() {
		return memory.read<struct FImpactEffectData>(m_addr + 944);
	}
	struct FImpactEffectData GetKevlar() {
		return memory.read<struct FImpactEffectData>(m_addr + 968);
	}
	struct FImpactEffectData GetForceField() {
		return memory.read<struct FImpactEffectData>(m_addr + 992);
	}
	struct FImpactEffectData GetNoEffect() {
		return memory.read<struct FImpactEffectData>(m_addr + 1016);
	}
	struct FImpactEffectData GetWhiteGravel() {
		return memory.read<struct FImpactEffectData>(m_addr + 1040);
	}
	struct FImpactEffectData GetMud() {
		return memory.read<struct FImpactEffectData>(m_addr + 1064);
	}
	struct FImpactEffectData GetRiverSand() {
		return memory.read<struct FImpactEffectData>(m_addr + 1088);
	}
	struct FImpactEffectData GetGrassContinental() {
		return memory.read<struct FImpactEffectData>(m_addr + 1112);
	}

private:
	std::uint64_t m_addr = 0;
};


class AProjectileRocket
{
public:
	AProjectileRocket(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_alternateMashDelay() {
		return memory.read<float>(m_addr + 1144);
	}
	struct UStaticMesh Get_alternateMash() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1152);
		return struct UStaticMesh(ptr_addr);
	}
	float Get_propulsionDelay() {
		return memory.read<float>(m_addr + 1160);
	}
	struct UParticleSystem Get_propulsionParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1168);
		return struct UParticleSystem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UReplenishableResourceComponent
{
public:
	UReplenishableResourceComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFillItemWithReplenishableResourceInteractionData Get_replenishableResourceFillItemInteractionData() {
		return memory.read<struct FFillItemWithReplenishableResourceInteractionData>(m_addr + 1568);
	}
	float GetQuantityPerDrink() {
		return memory.read<float>(m_addr + 1632);
	}
	float GetSalinity() {
		return memory.read<float>(m_addr + 1636);
	}
	struct UAkAudioEvent GetStartDrinkingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1640);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopDrinkingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1648);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetQuantityPerWash() {
		return memory.read<float>(m_addr + 1656);
	}
	float GetWashDuration() {
		return memory.read<float>(m_addr + 1660);
	}

private:
	std::uint64_t m_addr = 0;
};


class UServerInfoWidget
{
public:
	UServerInfoWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FServerInfo Get_serverInfo() {
		return memory.read<struct FServerInfo>(m_addr + 680);
	}
	int32_t GetFontSize() {
		return memory.read<int32_t>(m_addr + 760);
	}
	struct UAkAudioEvent GetClickSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UButton GetDeleteServerButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UButton(ptr_addr);
	}
	struct UTextBlock GetNameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetPingText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetPlayersText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetPasswordText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTimeText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetModeText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetVersionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetFriendsText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UTextBlock(ptr_addr);
	}
	struct UThrobber GetThrobber_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UThrobber(ptr_addr);
	}
	struct UImage GetImage_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_6() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_7() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_8() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AProjectileShotgun
{
public:
	AProjectileShotgun(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AProjectile GetprojectileClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1080);
		return AProjectile(ptr_addr);
	}
	int32_t GetShotsCount() {
		return memory.read<int32_t>(m_addr + 1088);
	}

private:
	std::uint64_t m_addr = 0;
};


class UProjectileStatics
{
public:
	UProjectileStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UQuickAccessItemWidget
{
public:
	UQuickAccessItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_imageWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	float GetDefaultWidth() {
		return memory.read<float>(m_addr + 640);
	}
	float GetDefaultHeight() {
		return memory.read<float>(m_addr + 644);
	}
	struct FVector2D GetDefaultPosition() {
		return memory.read<struct FVector2D>(m_addr + 648);
	}
	struct UImage Get_additionalIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_additionalText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct USizeBox Get_lowerLeftBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct USizeBox(ptr_addr);
	}
	struct USizeBox Get_additionalIconSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct USizeBox(ptr_addr);
	}
	struct FLinearColor GetTextColor() {
		return memory.read<struct FLinearColor>(m_addr + 856);
	}
	struct FText Get_itemSlotNumber() {
		return memory.read<struct FText>(m_addr + 872);
	}
	struct FLinearColor Get_alarmColor() {
		return memory.read<struct FLinearColor>(m_addr + 896);
	}
	struct UTextBlock GetTextBlockSlotNumber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UTextBlock(ptr_addr);
	}
	struct USizeBox GetSizeBox_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct USizeBox(ptr_addr);
	}
	struct UWidgetAnimation GetLowerLeftBoxFadeIn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetLowerLeftBoxFadeOut() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetBlinkingBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAdditionalIconFadeIn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 952);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAdditionalIconFadeOut() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetShowLowerLeftBoxAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetShowAdditionalIconAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 976);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UQuickAccessManager
{
public:
	UQuickAccessManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ARabbit2AIController
{
public:
	ARabbit2AIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMoveSegment() {
		return memory.read<float>(m_addr + 960);
	}
	float GetMovementPauseMinTime() {
		return memory.read<float>(m_addr + 964);
	}
	float GetMovementPauseMaxTime() {
		return memory.read<float>(m_addr + 968);
	}
	float GetAngleOffset() {
		return memory.read<float>(m_addr + 972);
	}

private:
	std::uint64_t m_addr = 0;
};


class URadioTrack
{
public:
	URadioTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent Getaudio() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 56);
	}
	struct FName GetTrackName() {
		return memory.read<struct FName>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};


class URadioCategoryShuffle
{
public:
	URadioCategoryShuffle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_canTracksRepeat() {
		return memory.read<bool>(m_addr + 64);
	}
	struct TArray<struct URadioTrack> Get_tracksAlreadyPlayed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct URadioTrack>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URainCollectionManager
{
public:
	URainCollectionManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URangedResourceConsumerComponent
{
public:
	URangedResourceConsumerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType Get_repResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return UGameResourceType(ptr_addr);
	}
	float Get_repResourceAmount() {
		return memory.read<float>(m_addr + 232);
	}
	float Get_repRequiredResourceAmount() {
		return memory.read<float>(m_addr + 236);
	}

private:
	std::uint64_t m_addr = 0;
};


class URangedResourceConsumerComponentMultipleProviders
{
public:
	URangedResourceConsumerComponentMultipleProviders(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVoteTopic_SetTimeOfDay
{
public:
	UVoteTopic_SetTimeOfDay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URangedResourceConsumerComponentSingleProvider
{
public:
	URangedResourceConsumerComponentSingleProvider(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URangedResourceConsumerEntityComponentSave
{
public:
	URangedResourceConsumerEntityComponentSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UGameResourceType(ptr_addr);
	}
	float GetResourceAmount() {
		return memory.read<float>(m_addr + 48);
	}
	float GetRequiredResourceAmount() {
		return memory.read<float>(m_addr + 52);
	}
	bool GetResourceUsageEnabled() {
		return memory.read<bool>(m_addr + 56);
	}
	struct FEntityComponentId GetResourceSupplierId() {
		return memory.read<struct FEntityComponentId>(m_addr + 64);
	}
	struct TArray<struct FEntityComponentId> GetRegisteredProviders() {
		return memory.read<struct TArray<struct FEntityComponentId>>(m_addr + 80);
	}
	struct TArray<struct FConnectionSaveData> GetConnections() {
		return memory.read<struct TArray<struct FConnectionSaveData>>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class URangedResourceConsumerEntityComponentStateSingleProvider
{
public:
	URangedResourceConsumerEntityComponentStateSingleProvider(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URangedResourceConsumerEntityComponentSetupSingleProvider
{
public:
	URangedResourceConsumerEntityComponentSetupSingleProvider(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URangedResourceProviderEntityComponentSave
{
public:
	URangedResourceProviderEntityComponentSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UGameResourceType(ptr_addr);
	}
	float GetResourceAmount() {
		return memory.read<float>(m_addr + 48);
	}
	float GetAvailableResourceAmount() {
		return memory.read<float>(m_addr + 52);
	}
	bool GetResourceUsageEnabled() {
		return memory.read<bool>(m_addr + 56);
	}
	struct FEntityComponentId GetResourceSupplierId() {
		return memory.read<struct FEntityComponentId>(m_addr + 64);
	}
	struct TArray<struct FConnectionSaveData> GetConnections() {
		return memory.read<struct TArray<struct FConnectionSaveData>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class URangedResourceProviderEntityComponentSetup
{
public:
	URangedResourceProviderEntityComponentSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return UGameResourceType(ptr_addr);
	}
	float GetResourceAmount() {
		return memory.read<float>(m_addr + 80);
	}
	bool GetAutoFindResourceSupplier() {
		return memory.read<bool>(m_addr + 84);
	}
	struct FName GetResourceSupplierName() {
		return memory.read<struct FName>(m_addr + 88);
	}
	bool GetMirrorResourceSupplierResources() {
		return memory.read<bool>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class URangedResourceProviderEntityComponentContinousAmountSetup
{
public:
	URangedResourceProviderEntityComponentContinousAmountSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ARecastNavMesh_Humanoids
{
public:
	ARecastNavMesh_Humanoids(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ARefrigeratorItem
{
public:
	ARefrigeratorItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URangedResourceConsumerComponentMultipleProviders Get_rangedResourceConsumerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2592);
		return struct URangedResourceConsumerComponentMultipleProviders(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ARegularDoorStatic
{
public:
	ARegularDoorStatic(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator Get_openRotation() {
		return memory.read<struct FRotator>(m_addr + 1256);
	}
	struct FRotator Get_closedRotation() {
		return memory.read<struct FRotator>(m_addr + 1268);
	}

private:
	std::uint64_t m_addr = 0;
};


class URemoteSensorItemState
{
public:
	URemoteSensorItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTraderForPlayerAndDepotItemResponse
{
public:
	UTraderForPlayerAndDepotItemResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ATrader Get_payload() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct ATrader(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URemoteSensorRegistry
{
public:
	URemoteSensorRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponActionUnloadAmmoSequence
{
public:
	UWeaponActionUnloadAmmoSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBodyWeaponAnimation GetAnimations() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 40);
	}
	bool GetCanBeInterrupted() {
		return memory.read<bool>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class URepairableItemTag
{
public:
	URepairableItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRepairableParams GetParams() {
		return memory.read<struct FRepairableParams>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class URepairStatics
{
public:
	URepairStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URepairToolItemTag
{
public:
	URepairToolItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRepairToolItemParams GetParams() {
		return memory.read<struct FRepairToolItemParams>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class AReplicatedEffectsActor
{
public:
	AReplicatedEffectsActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_lifeSpan() {
		return memory.read<float>(m_addr + 544);
	}

private:
	std::uint64_t m_addr = 0;
};


class URequestMinigameToolsRequest
{
public:
	URequestMinigameToolsRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UResourceIndicatorWidget
{
public:
	UResourceIndicatorWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URespawnSettings
{
public:
	URespawnSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRespawnParameters Getparameters() {
		return memory.read<struct FRespawnParameters>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASentryAIController2
{
public:
	ASentryAIController2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_canHear() {
		return memory.read<bool>(m_addr + 992);
	}
	bool Get_canSee() {
		return memory.read<bool>(m_addr + 993);
	}
	struct UAISenseConfig_Sight Get_currentSightSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct UAISenseConfig_Sight(ptr_addr);
	}
	struct UAISenseConfig_Hearing Get_currentHearingSenseConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1008);
		return struct UAISenseConfig_Hearing(ptr_addr);
	}
	struct UAISenseConfig_Sight Get_sightSenseConfigPatrolling() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct UAISenseConfig_Sight(ptr_addr);
	}
	struct UAISenseConfig_Sight Get_sightSenseConfigAlerted() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1024);
		return struct UAISenseConfig_Sight(ptr_addr);
	}
	struct UAISenseConfig_Sight Get_sightSenseConfigCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1032);
		return struct UAISenseConfig_Sight(ptr_addr);
	}
	struct UAISenseConfig_Hearing Get_hearingSenseConfigPatrolling() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1040);
		return struct UAISenseConfig_Hearing(ptr_addr);
	}
	struct UAISenseConfig_Hearing Get_hearingSenseConfigAlerted() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1048);
		return struct UAISenseConfig_Hearing(ptr_addr);
	}
	struct UAISenseConfig_Hearing Get_hearingSenseConfigCombat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1056);
		return struct UAISenseConfig_Hearing(ptr_addr);
	}
	float Get_spottingTimeDecayMultiplier() {
		return memory.read<float>(m_addr + 1064);
	}
	float Get_forgetKnownEnemyTime() {
		return memory.read<float>(m_addr + 1068);
	}
	int32_t Get_noiseStimuliBeforeInstantlyLocatingCharacter() {
		return memory.read<int32_t>(m_addr + 1072);
	}
	struct TArray<struct FName> Get_specialNoiseTags() {
		return memory.read<struct TArray<struct FName>>(m_addr + 1080);
	}
	float Get_timeUntilNoiseStimuliCounterReset() {
		return memory.read<float>(m_addr + 1096);
	}
	float Get_threatLevelAccumulationMultiplier() {
		return memory.read<float>(m_addr + 1112);
	}
	float Get_onHearNoiseThreatLevelIncrease() {
		return memory.read<float>(m_addr + 1116);
	}
	float Get_onDamageTakeThreatLevelIncrease() {
		return memory.read<float>(m_addr + 1120);
	}
	float Get_switchTargetCharacterTime() {
		return memory.read<float>(m_addr + 1128);
	}
	struct FDetectionDelayTimerData Get_detectionDelayTimerData() {
		return memory.read<struct FDetectionDelayTimerData>(m_addr + 1132);
	}
	float Get_distanceWhenConsideredCharacterEnteredHotZone() {
		return memory.read<float>(m_addr + 1148);
	}
	float Get_maxDistanceWhenTemporaryPointIsConsideredTooClose() {
		return memory.read<float>(m_addr + 1152);
	}
	int32_t Get_temporaryPatrolPointVisitsUntilDeleted() {
		return memory.read<int32_t>(m_addr + 1156);
	}
	float Get_checkSurroundingsTime() {
		return memory.read<float>(m_addr + 1164);
	}
	bool Get_shouldRotateDuringCheck() {
		return memory.read<bool>(m_addr + 1172);
	}
	float Get_checkSurroundingsAngle() {
		return memory.read<float>(m_addr + 1176);
	}
	float Get_investigatingLocationOverallTime() {
		return memory.read<float>(m_addr + 1192);
	}
	float Get_investigatingLocationTime() {
		return memory.read<float>(m_addr + 1200);
	}
	float Get_investigatingBuildingTime() {
		return memory.read<float>(m_addr + 1208);
	}
	float Get_guardLocationTime() {
		return memory.read<float>(m_addr + 1248);
	}
	float Get_guardLocationSwitchFocusTime() {
		return memory.read<float>(m_addr + 1256);
	}
	float Get_enemySpottedWarningTime() {
		return memory.read<float>(m_addr + 1296);
	}
	float Get_maxTolerance() {
		return memory.read<float>(m_addr + 1304);
	}
	float Get_enemySpottedOutOfSightTimeLimit() {
		return memory.read<float>(m_addr + 1312);
	}
	float Get_distanceWhenConsideredCharacterLeavingHotZone() {
		return memory.read<float>(m_addr + 1324);
	}
	float Get_freezeCheckTime() {
		return memory.read<float>(m_addr + 1328);
	}
	float Get_freezeCheckToleranceDrainMultiplier() {
		return memory.read<float>(m_addr + 1332);
	}
	int32_t Get_numberOfWarningShots() {
		return memory.read<int32_t>(m_addr + 1336);
	}
	float Get_raiseHandsCheckTime() {
		return memory.read<float>(m_addr + 1344);
	}
	float Get_raiseHandsCheckToleranceDrainMultiplier() {
		return memory.read<float>(m_addr + 1348);
	}
	float Get_walkAwayCheckToleranceDrainMultiplier() {
		return memory.read<float>(m_addr + 1352);
	}
	float Get_movingToHotZoneToleranceDrainMultiplier() {
		return memory.read<float>(m_addr + 1356);
	}
	float Get_minMovingToHotZoneRange() {
		return memory.read<float>(m_addr + 1360);
	}
	float Get_otherToleranceDrainMultiplier() {
		return memory.read<float>(m_addr + 1364);
	}
	float Get_minimumAlertedTime() {
		return memory.read<float>(m_addr + 1368);
	}
	float Get_observeEnemyMovementTime() {
		return memory.read<float>(m_addr + 1376);
	}
	float Get_observeEnemyMovementThreatLevelIncreasePerStateEntry() {
		return memory.read<float>(m_addr + 1384);
	}
	float Get_observeEnemyMovementOpenFireThreshold() {
		return memory.read<float>(m_addr + 1388);
	}
	float Get_beginShootingTime() {
		return memory.read<float>(m_addr + 1404);
	}
	struct TArray<struct FSentryCombatBehaviorMode> Get_sentryCombatBehaviorModes() {
		return memory.read<struct TArray<struct FSentryCombatBehaviorMode>>(m_addr + 1416);
	}
	float Get_combatBehaviorModeIncreaseTime() {
		return memory.read<float>(m_addr + 1436);
	}
	float Get_combatBehaviorModeTimeIncreasePerDamageTaken() {
		return memory.read<float>(m_addr + 1444);
	}
	float Get_combatBehaviorModeDecreaseTime() {
		return memory.read<float>(m_addr + 1448);
	}
	float Get_combatSwitchVariationTimeMin() {
		return memory.read<float>(m_addr + 1456);
	}
	float Get_combatSwitchVariationTimeMax() {
		return memory.read<float>(m_addr + 1460);
	}
	float Get_combatModeOnEnterCombatSwitchVariationTimeElapsedTimePercentage() {
		return memory.read<float>(m_addr + 1472);
	}
	float Get_maxFireRateTime() {
		return memory.read<float>(m_addr + 1476);
	}
	float Get_fireRateAccumulationSpeed() {
		return memory.read<float>(m_addr + 1484);
	}
	float Get_startingHighFireRate() {
		return memory.read<float>(m_addr + 1488);
	}
	float Get_highFireRateSpreadMultiplier() {
		return memory.read<float>(m_addr + 1492);
	}
	float Get_highFireRateInitialAttackDelay() {
		return memory.read<float>(m_addr + 1496);
	}
	float Get_highPrecisionShotAimTime() {
		return memory.read<float>(m_addr + 1504);
	}
	float Get_highPrecisionShotCooldownTime() {
		return memory.read<float>(m_addr + 1508);
	}
	float Get_grenadeLaunchMinDistance() {
		return memory.read<float>(m_addr + 1512);
	}
	float Get_grenadeLaunchPredictionVariationMin() {
		return memory.read<float>(m_addr + 1516);
	}
	float Get_grenadeLaunchPredictionVariationMax() {
		return memory.read<float>(m_addr + 1520);
	}
	float Get_grenadeLaunchAimTime() {
		return memory.read<float>(m_addr + 1524);
	}
	int32_t Get_grenadeLaunchAmountMax() {
		return memory.read<int32_t>(m_addr + 1528);
	}
	float Get_grenadeLaunchPauseBetweenShotsTime() {
		return memory.read<float>(m_addr + 1536);
	}
	float Get_grenadeLaunchCooldownTime() {
		return memory.read<float>(m_addr + 1544);
	}
	float Get_combatMoveCloserDistance() {
		return memory.read<float>(m_addr + 1552);
	}
	float Get_combatDistance() {
		return memory.read<float>(m_addr + 1556);
	}
	int32_t Get_consecutiveMeleeAttacksNeededToDropGrenade() {
		return memory.read<int32_t>(m_addr + 1572);
	}
	float Get_combatNoSightTime() {
		return memory.read<float>(m_addr + 1580);
	}
	float Get_searchForEnemyAfterLostStimulusTime() {
		return memory.read<float>(m_addr + 1584);
	}
	float Get_combatLostSightInvestigateLocationTime() {
		return memory.read<float>(m_addr + 1588);
	}
	float Get_distanceFromActorWhenInvestigationLocationIsChanged() {
		return memory.read<float>(m_addr + 1596);
	}
	float Get_relocatingAngle() {
		return memory.read<float>(m_addr + 1600);
	}
	float Get_relocatingRadius() {
		return memory.read<float>(m_addr + 1604);
	}
	float Get_destroyingVehicleGiveUpTime() {
		return memory.read<float>(m_addr + 1608);
	}
	float Get_maximumOperatingRadius() {
		return memory.read<float>(m_addr + 1644);
	}
	float Get_movingAwayHalfAngleDegrees() {
		return memory.read<float>(m_addr + 1660);
	}
	float Get_movingTowardsHalfAngleDegrees() {
		return memory.read<float>(m_addr + 1664);
	}
	float Get_acceptanceRadius() {
		return memory.read<float>(m_addr + 1668);
	}
	float Get_timeToBeConsideredStuck() {
		return memory.read<float>(m_addr + 1688);
	}
	float Get_rotationAngleCosToStartWalking() {
		return memory.read<float>(m_addr + 1700);
	}

private:
	std::uint64_t m_addr = 0;
};


class URewardItemWidget
{
public:
	URewardItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_bulletImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_rewardItemText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URiflesSkill
{
public:
	URiflesSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USearchBox
{
public:
	USearchBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetPreviewSelectedState() {
		return memory.read<bool>(m_addr + 672);
	}
	struct UEditableText Get_editBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UEditableText(ptr_addr);
	}
	struct UWidgetSwitcher Get_backgroundSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UClearSearchButton Get_clearSearchButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UClearSearchButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USearchItemDataAsset
{
public:
	USearchItemDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetCaption() {
		return memory.read<struct FText>(m_addr + 48);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 72);
	}
	struct TArray<struct FSearchPerItemData> GetSearchData() {
		return memory.read<struct TArray<struct FSearchPerItemData>>(m_addr + 80);
	}
	struct UAkAudioEvent GetStartSearchAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopSearchAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UAkAudioEvent(ptr_addr);
	}
	uint8_t  GetnoiseLevel() {
		return memory.read<uint8_t >(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASearchGroundObjective
{
public:
	ASearchGroundObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<AItem> Get_itemToSearch() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct TArray<AItem>(ptr_addr);
	}
	int32_t Get_itemAmount() {
		return memory.read<int32_t>(m_addr + 816);
	}

private:
	std::uint64_t m_addr = 0;
};


class USedentaryNPCBackgroundInteraction
{
public:
	USedentaryNPCBackgroundInteraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_backgroundInteractionType() {
		return memory.read<uint8_t >(m_addr + 40);
	}
	int32_t Get_priority() {
		return memory.read<int32_t>(m_addr + 44);
	}
	float Get_cooldownTime() {
		return memory.read<float>(m_addr + 48);
	}
	bool Get_canEverTick() {
		return memory.read<bool>(m_addr + 52);
	}
	struct FFloatRange Get_newBackgroundInteractionInterval() {
		return memory.read<struct FFloatRange>(m_addr + 56);
	}
	struct TArray<struct FSedentaryNPCHeadAnimationAndAudio> Get_animationVariationsBegin() {
		return memory.read<struct TArray<struct FSedentaryNPCHeadAnimationAndAudio>>(m_addr + 88);
	}
	struct TArray<struct FSedentaryNPCHeadAnimationAndAudio> Get_animationVariationsTick() {
		return memory.read<struct TArray<struct FSedentaryNPCHeadAnimationAndAudio>>(m_addr + 104);
	}
	struct TArray<struct FSedentaryNPCHeadAnimationAndAudio> Get_animationVariationsEnd() {
		return memory.read<struct TArray<struct FSedentaryNPCHeadAnimationAndAudio>>(m_addr + 120);
	}
	struct TArray<struct FSedentaryNPCHeadAnimationAndAudio> Get_animationVariationsOneShot() {
		return memory.read<struct TArray<struct FSedentaryNPCHeadAnimationAndAudio>>(m_addr + 136);
	}
	struct UAkAudioEvent Get_stopOwningPawnAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USedentaryNPCHeadAnimInstance
{
public:
	USedentaryNPCHeadAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> Get_updateableBones() {
		return memory.read<struct TArray<struct FName>>(m_addr + 704);
	}
	struct TMap<struct FName, struct FTransform> Get_bonesWithUpdateableTransforms() {
		return memory.read<struct TMap<struct FName, struct FTransform>>(m_addr + 720);
	}
	struct UAnimSequenceBase Get_faceIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct FName Get_headBoneName() {
		return memory.read<struct FName>(m_addr + 808);
	}
	struct FRotator Get_headFollowingRotation() {
		return memory.read<struct FRotator>(m_addr + 816);
	}
	struct FVector Get_animationHeadScale() {
		return memory.read<struct FVector>(m_addr + 896);
	}
	float Get_eyesYawCurveValue() {
		return memory.read<float>(m_addr + 940);
	}
	float Get_eyesPitchCurveValue() {
		return memory.read<float>(m_addr + 944);
	}
	float Get_blinkCurveValue() {
		return memory.read<float>(m_addr + 1016);
	}

private:
	std::uint64_t m_addr = 0;
};


class USelectionOverlayWidget
{
public:
	USelectionOverlayWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_solidShown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_gradientShown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_solidSelected() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_gradientSelected() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UImage(ptr_addr);
	}
	struct FDataTableRowHandle Get_highlightColorRef() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 712);
	}
	float Get_solidWidth() {
		return memory.read<float>(m_addr + 728);
	}

private:
	std::uint64_t m_addr = 0;
};


class USentryMovementComponent
{
public:
	USentryMovementComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetMaxRotationRateCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3080);
		return struct UCurveFloat(ptr_addr);
	}
	float GetRotationInterpolationSpeed() {
		return memory.read<float>(m_addr + 3088);
	}
	bool GetCorrectServerReceivedZ() {
		return memory.read<bool>(m_addr + 3092);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASentrySpawner2
{
public:
	ASentrySpawner2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetActivationDistance() {
		return memory.read<float>(m_addr + 544);
	}
	ASentry2 GetSentryClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return ASentry2(ptr_addr);
	}
	struct TArray<struct FSentryPatrolPoint> GetPatrolPoints() {
		return memory.read<struct TArray<struct FSentryPatrolPoint>>(m_addr + 560);
	}
	struct UBillboardComponent GetSprite() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UBillboardComponent(ptr_addr);
	}
	float GetSentryOperatingRange() {
		return memory.read<float>(m_addr + 584);
	}
	bool GetForceUndergroundSentry() {
		return memory.read<bool>(m_addr + 588);
	}
	bool Get_shouldSaveAndLoadSentry() {
		return memory.read<bool>(m_addr + 628);
	}
	float Get_autoSaveTime() {
		return memory.read<float>(m_addr + 632);
	}

private:
	std::uint64_t m_addr = 0;
};


class USkydivingHUD
{
public:
	USkydivingHUD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USentryThirdPersonViewComponent
{
public:
	USentryThirdPersonViewComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetStandingSubviewName() {
		return memory.read<struct FName>(m_addr + 208);
	}
	struct FName GetStandingAimingSubviewName() {
		return memory.read<struct FName>(m_addr + 216);
	}

private:
	std::uint64_t m_addr = 0;
};


class USpawnSectorSelectorWidget
{
public:
	USpawnSectorSelectorWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_selectorImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_deathImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USerializationStatics
{
public:
	USerializationStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UServerBrowser
{
public:
	UServerBrowser(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVerticalBox GetPasswordPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UVerticalBox(ptr_addr);
	}
	struct UEditableTextBox GetPasswordPopupTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UVerticalBox GetMenuVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UVerticalBox(ptr_addr);
	}
	struct UConZStandardButton GetBack() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UEditableTextBox GetDirectConnectTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UVerticalBox GetMainVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UVerticalBox(ptr_addr);
	}
	struct UConZStandardButton GetPasswordPopupCancelButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton GetPasswordPopupOkButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton GetRefresh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UEditableTextBox GetSearchBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UOverlay GetServersCategoryOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UOverlay(ptr_addr);
	}
	struct USortByButton GetSortByFriends() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct USortByButton(ptr_addr);
	}
	struct USortByButton GetSortByHost() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct USortByButton(ptr_addr);
	}
	struct USortByButton GetSortByMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct USortByButton(ptr_addr);
	}
	struct USortByButton GetSortByPassword() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct USortByButton(ptr_addr);
	}
	struct USortByButton GetSortByPing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct USortByButton(ptr_addr);
	}
	struct USortByButton GetSortByPlayers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct USortByButton(ptr_addr);
	}
	struct USortByButton GetSortByTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct USortByButton(ptr_addr);
	}
	struct USortByButton GetSortByVersion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct USortByButton(ptr_addr);
	}
	struct UCursedScrollBar GetUI_ScrollBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UCursedScrollBar(ptr_addr);
	}
	struct UCarousel GetServersCategorySwitch2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UCarousel(ptr_addr);
	}
	struct UCircularThrobber GetCircularThrobber_53() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UCircularThrobber(ptr_addr);
	}
	struct UVerticalBox Get_messageBoxPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UVerticalBox(ptr_addr);
	}
	struct UServerInfoWidget GetSelectedServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UServerInfoWidget(ptr_addr);
	}
	struct UConZStandardButton Get_lastButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 952);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UWidget Get_lastWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct UWidget(ptr_addr);
	}
	struct UVerticalBox Get_serverList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct UVerticalBox(ptr_addr);
	}
	struct UConZStandardButton Get_connectButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 976);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UMessageBox Get_serverBrowserMessageBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct UMessageBox(ptr_addr);
	}
	UServerInfoWidget Get_serverInfoWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return UServerInfoWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UServerSettingsMenu
{
public:
	UServerSettingsMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USharpMeleeWeaponItemTag
{
public:
	USharpMeleeWeaponItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AShelterItem
{
public:
	AShelterItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_canBeAddedToInventory() {
		return memory.read<bool>(m_addr + 2320);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShotsFiredTrackerWidget
{
public:
	UShotsFiredTrackerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_widgetText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTraderSellPanel
{
public:
	UTraderSellPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTabContainer Get_cashOrCreditRadioBtn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTabContainer(ptr_addr);
	}
	struct UVerticalBox Get_sellList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UVerticalBox(ptr_addr);
	}
	struct UTextBlock Get_headerBannerPrisonerCashOnHand() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_headerBannerPrisonerCashInBank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_prisonerCashOnHand() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_prisonerCashInBank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_prisonerGoldInBank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_prisonerFamePoints() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_traderFunds() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_saleTotal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_warningMessage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_btnExit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_btnSell() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UButton(ptr_addr);
	}
	struct UVerticalBox Get_messageBoxPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UVerticalBox(ptr_addr);
	}
	UTraderSellListEntry Get_sellListEntryWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return UTraderSellListEntry(ptr_addr);
	}
	struct FText Get_partialPriceSellText() {
		return memory.read<struct FText>(m_addr + 760);
	}
	struct FText Get_worthlessPriceSellText() {
		return memory.read<struct FText>(m_addr + 784);
	}
	float Get_sellWarningPopupTextWidth() {
		return memory.read<float>(m_addr + 808);
	}
	struct UAkAudioEvent Get_soundOnButtonHovered() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_soundExitOnClick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UAkAudioEvent(ptr_addr);
	}
	int32_t Get_cashOrCreditFontSizeUnselected() {
		return memory.read<int32_t>(m_addr + 832);
	}
	int32_t Get_cashOrCreditFontSizeSelected() {
		return memory.read<int32_t>(m_addr + 836);
	}

private:
	std::uint64_t m_addr = 0;
};


class USimpleTextDropdownEntryWithCheckBox
{
public:
	USimpleTextDropdownEntryWithCheckBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USquareCheckbox Get_checkBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct USquareCheckbox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USkillEventHandler
{
public:
	USkillEventHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USmokableItemComponent
{
public:
	USmokableItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodyCondition_InhalationPoisoning Get_typeOfInhalationPoisoning() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 432);
		return UPrisonerBodyCondition_InhalationPoisoning(ptr_addr);
	}
	float Get_inhalableSubstanceAmount() {
		return memory.read<float>(m_addr + 440);
	}
	float Get_exhaustionRecoveryAmount() {
		return memory.read<float>(m_addr + 444);
	}
	struct UTexture2D Get_burningIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 448);
		return struct UTexture2D(ptr_addr);
	}
	float Get_minEmissivity() {
		return memory.read<float>(m_addr + 456);
	}
	float Get_maxEmissivity() {
		return memory.read<float>(m_addr + 460);
	}
	struct UMaterialInterface Get_burningMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 464);
		return struct UMaterialInterface(ptr_addr);
	}
	float Get_timeBetweenExhalation() {
		return memory.read<float>(m_addr + 472);
	}
	struct FName Get_itemInHandsSocketName() {
		return memory.read<struct FName>(m_addr + 476);
	}
	struct FName Get_itemEquippedSocketName() {
		return memory.read<struct FName>(m_addr + 484);
	}
	struct FTransform Get_offsetWhenEquipped() {
		return memory.read<struct FTransform>(m_addr + 512);
	}

private:
	std::uint64_t m_addr = 0;
};


class USnipingSkill
{
public:
	USnipingSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASoundEmitter
{
public:
	ASoundEmitter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USoundNotification
{
public:
	USoundNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASpline
{
public:
	ASpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetSceneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USceneComponent(ptr_addr);
	}
	struct USplineComponent GetSplineComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USplineComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASoundSpline
{
public:
	ASoundSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinCameraLocationDeltaForUpdate() {
		return memory.read<float>(m_addr + 560);
	}
	float GetWorldStreamedCheckInterval() {
		return memory.read<float>(m_addr + 564);
	}
	float GetMaxCameraDistance() {
		return memory.read<float>(m_addr + 568);
	}
	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetInsideSplineAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetOutsideSplineAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASplineSnagGeneratedActor
{
public:
	ASplineSnagGeneratedActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASplineZone
{
public:
	ASplineZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UZoneConfigurationDataAsset Getconfiguration() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UZoneConfigurationDataAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USquadEditor
{
public:
	USquadEditor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UDropdownMenuSelectionWidget Get_dropdownMenuTextureSelectionWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return UDropdownMenuSelectionWidget(ptr_addr);
	}
	UDropdownMenuSelectionWidget Get_dropdownMenuColorSelectionWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return UDropdownMenuSelectionWidget(ptr_addr);
	}
	struct UUniformGridPanel GetBackgroundGrid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UUniformGridPanel(ptr_addr);
	}
	struct UUniformGridPanel GetSymbolGrid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UUniformGridPanel(ptr_addr);
	}
	struct UUniformGridPanel GetColorGrid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UUniformGridPanel(ptr_addr);
	}
	struct UDropdownMenuTextureSelectionWidget GetBackgroundSelector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UDropdownMenuTextureSelectionWidget(ptr_addr);
	}
	struct UDropdownMenuWidget GetBackgroundDropdownMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UDropdownMenuWidget(ptr_addr);
	}
	struct UDropdownMenuTextureSelectionWidget GetSymbolSelector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UDropdownMenuTextureSelectionWidget(ptr_addr);
	}
	struct UDropdownMenuWidget GetSymbolDropdownMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UDropdownMenuWidget(ptr_addr);
	}
	struct UDropdownMenuColorSelectionWidget GetBackgroundPrimaryColorSelector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UDropdownMenuColorSelectionWidget(ptr_addr);
	}
	struct UDropdownMenuColorSelectionWidget GetBackgroundSecondaryColorSelector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UDropdownMenuColorSelectionWidget(ptr_addr);
	}
	struct UDropdownMenuColorSelectionWidget GetBackgroundTertiaryColorSelector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UDropdownMenuColorSelectionWidget(ptr_addr);
	}
	struct UDropdownMenuWidget GetColorDropdownMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UDropdownMenuWidget(ptr_addr);
	}
	struct UDropdownMenuColorSelectionWidget GetSymbolPrimaryColorSelector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UDropdownMenuColorSelectionWidget(ptr_addr);
	}
	struct UDropdownMenuColorSelectionWidget GetSymbolSecondaryColorSelector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UDropdownMenuColorSelectionWidget(ptr_addr);
	}
	struct UDropdownMenuColorSelectionWidget GetSymbolTertiaryColorSelector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UDropdownMenuColorSelectionWidget(ptr_addr);
	}
	struct USquadEmblemWidget GetUI_SquadEmblem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct USquadEmblemWidget(ptr_addr);
	}
	struct UEditableTextBox GetNameTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UMultiLineEditableText GetMessageTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UMultiLineEditableText(ptr_addr);
	}
	struct UMultiLineEditableText GetInformationTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UMultiLineEditableText(ptr_addr);
	}
	struct UVerticalBox GetInformationBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox GetMessageBoxBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox GetEmblemBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UVerticalBox(ptr_addr);
	}
	struct UButton GetAcceptButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UButton(ptr_addr);
	}
	struct UButton GetCancelButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UButton(ptr_addr);
	}
	struct UImage GetImage_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USquadEmblemWidget
{
public:
	USquadEmblemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_symbol() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_background() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UMaterialInterface Get_material() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USquadListing
{
public:
	USquadListing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetSquadName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetsquadRank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetSquadScore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetHighlight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UHorizontalBox GetContentBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UHorizontalBox GetSeparatorBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UHorizontalBox(ptr_addr);
	}
	USquadTooltip Get_squadTooltipClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return USquadTooltip(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USquadRightPanel
{
public:
	USquadRightPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVerticalBox GetRankingBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UVerticalBox(ptr_addr);
	}
	USquadListing Get_squadListingClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return USquadListing(ptr_addr);
	}
	struct USquadLeftPanel Get_squadLeftPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct USquadLeftPanel(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AStartLocationManager
{
public:
	AStartLocationManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FStartLocationDescription> Get_startLocationDescriptions() {
		return memory.read<struct TArray<struct FStartLocationDescription>>(m_addr + 544);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStaticDoorReplicator
{
public:
	UStaticDoorReplicator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AStaticRadioItem
{
public:
	AStaticRadioItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UStatisticsDetailsWidget
{
public:
	UStatisticsDetailsWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStatisticsSubcategoryTab Get_generalSubcategoryTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UStatisticsSubcategoryTab(ptr_addr);
	}
	struct UStatisticsSubcategoryTab Get_foodSubcategoryTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UStatisticsSubcategoryTab(ptr_addr);
	}
	struct UStatisticsSubcategoryTab Get_huntingSubcategoryTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UStatisticsSubcategoryTab(ptr_addr);
	}
	struct UStatisticsSubcategoryTab Get_fishingSubcategoryTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UStatisticsSubcategoryTab(ptr_addr);
	}
	struct UStatisticsSubcategoryTab Get_travelSubcategoryTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UStatisticsSubcategoryTab(ptr_addr);
	}
	struct UStatisticsSubcategoryTab Get_metabolismSubcategoryTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UStatisticsSubcategoryTab(ptr_addr);
	}
	struct UStatisticsSubcategoryTab Get_craftingSubcategoryTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UStatisticsSubcategoryTab(ptr_addr);
	}
	struct UStatisticsSubcategoryTab Get_combatSubcategoryTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UStatisticsSubcategoryTab(ptr_addr);
	}
	struct UStatisticsSubcategoryTab Get_eventsSubcategoryTab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UStatisticsSubcategoryTab(ptr_addr);
	}
	struct UWidgetSwitcher Get_subcategorySwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UStatisticsListWidget Get_generalStatisticsList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UStatisticsListWidget(ptr_addr);
	}
	struct UStatisticsListWidget Get_foodStatisticsList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UStatisticsListWidget(ptr_addr);
	}
	struct UStatisticsListWidget Get_huntingStatisticsList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UStatisticsListWidget(ptr_addr);
	}
	struct UStatisticsListWidget Get_fishingStatisticsList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UStatisticsListWidget(ptr_addr);
	}
	struct UStatisticsListWidget Get_travelStatisticsList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UStatisticsListWidget(ptr_addr);
	}
	struct UStatisticsListWidget Get_metabolismStatisticsList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UStatisticsListWidget(ptr_addr);
	}
	struct UStatisticsListWidget Get_craftingStatisticsList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UStatisticsListWidget(ptr_addr);
	}
	struct UStatisticsListWidget Get_combatStatisticsList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UStatisticsListWidget(ptr_addr);
	}
	struct UStatisticsListWidget Get_eventsStatisticsList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UStatisticsListWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStatisticsListRow
{
public:
	UStatisticsListRow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_statNameTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_statValueTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_statUnitTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStatisticsListWidget
{
public:
	UStatisticsListWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText Get_subcategoryName() {
		return memory.read<struct FText>(m_addr + 608);
	}
	struct UTextBlock Get_subcategoryTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UScrollBox Get_scrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UScrollBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStatisticsPanelWidget
{
public:
	UStatisticsPanelWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStatisticsDetailsWidget Get_survivalDetailsWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UStatisticsDetailsWidget(ptr_addr);
	}
	struct UConZStandardButton Get_backButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UConZStandardButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStatisticsSubcategoryTab
{
public:
	UStatisticsSubcategoryTab(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D Get_subcategoryIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTexture2D(ptr_addr);
	}
	struct UImage Get_tabSelectionImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_subcategoryImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct UTexture2D Get_selectedTabTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStealthSkill
{
public:
	UStealthSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWettable
{
public:
	UWettable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USubtitleWidget
{
public:
	USubtitleWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_subtitle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UOverlay Get_subtitleOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UOverlay(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USurfaceHardnessData
{
public:
	USurfaceHardnessData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDefaultSurfaceHardness() {
		return memory.read<float>(m_addr + 48);
	}
	struct TMap<char EPhysicalSurface, float> GetSurfaceHardnessMap() {
		return memory.read<struct TMap<char EPhysicalSurface, float>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class USurvivalSkill
{
public:
	USurvivalSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCompassSkillParametersPerSkillLevel GetNoSkillParameters() {
		return memory.read<struct FCompassSkillParametersPerSkillLevel>(m_addr + 176);
	}
	struct FCompassSkillParametersPerSkillLevel GetBasicSkillParameters() {
		return memory.read<struct FCompassSkillParametersPerSkillLevel>(m_addr + 177);
	}
	struct FCompassSkillParametersPerSkillLevel GetMediumSkillParameters() {
		return memory.read<struct FCompassSkillParametersPerSkillLevel>(m_addr + 178);
	}
	struct FCompassSkillParametersPerSkillLevel GetAdvancedSkillParameters() {
		return memory.read<struct FCompassSkillParametersPerSkillLevel>(m_addr + 179);
	}
	struct FCompassSkillParametersPerSkillLevel GetAboveAdvancedSkillParameters() {
		return memory.read<struct FCompassSkillParametersPerSkillLevel>(m_addr + 180);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASurvivalStatsHandler
{
public:
	ASurvivalStatsHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USwimmingSkill
{
public:
	USwimmingSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTabButtonAlertable
{
public:
	UTabButtonAlertable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDataTableRowHandle Get_alertedTextColorHandle() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 3160);
	}
	struct FDataTableRowHandle Get_alertedBackgroundColorHandle() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 3176);
	}
	float Get_blinkSpeed() {
		return memory.read<float>(m_addr + 3192);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTabContainer
{
public:
	UTabContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UNamedSlot Get_containerContent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UNamedSlot(ptr_addr);
	}
	uint8_t  Get_previous() {
		return memory.read<uint8_t >(m_addr + 664);
	}
	uint8_t  Get_next() {
		return memory.read<uint8_t >(m_addr + 665);
	}
	uint8_t  Get_in() {
		return memory.read<uint8_t >(m_addr + 666);
	}
	bool Get_canWrap() {
		return memory.read<bool>(m_addr + 667);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTabElement
{
public:
	UTabElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidget GetCategoryNameWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidget(ptr_addr);
	}
	char GetMaxIndex() {
		return memory.read<char>(m_addr + 616);
	}
	char GetIndex() {
		return memory.read<char>(m_addr + 617);
	}
	struct FVector2D Get_initialPosition() {
		return memory.read<struct FVector2D>(m_addr + 620);
	}
	struct FVector2D Get_oldPosition() {
		return memory.read<struct FVector2D>(m_addr + 628);
	}
	struct FVector2D Get_newPosition() {
		return memory.read<struct FVector2D>(m_addr + 636);
	}
	struct FVector2D Get_initialSize() {
		return memory.read<struct FVector2D>(m_addr + 644);
	}
	struct FVector2D Get_oldSize() {
		return memory.read<struct FVector2D>(m_addr + 652);
	}
	struct FVector2D Get_newSize() {
		return memory.read<struct FVector2D>(m_addr + 660);
	}
	float Get_oldAlpha() {
		return memory.read<float>(m_addr + 668);
	}
	float Get_newAlpha() {
		return memory.read<float>(m_addr + 672);
	}
	float Get_interpolationTime() {
		return memory.read<float>(m_addr + 676);
	}
	float Get_interpolationDuration() {
		return memory.read<float>(m_addr + 680);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTabMenuReborn
{
public:
	UTabMenuReborn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTabModeTabsContainer Get_tabModeTabsContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTabModeTabsContainer(ptr_addr);
	}
	struct UOverlay Get_centralSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay Get_leftSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay Get_rightSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UOverlay(ptr_addr);
	}
	struct UVerticalBox Get_messageBoxPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UVerticalBox(ptr_addr);
	}
	struct UInventoryPanelThirdIteration Get_inventoryLeftPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UInventoryPanelThirdIteration(ptr_addr);
	}
	struct UHandPanel3 Get_inventoryRightPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UHandPanel3(ptr_addr);
	}
	struct UInventoryCentralPanel Get_inventoryCentralPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UInventoryCentralPanel(ptr_addr);
	}
	struct UCraftingRecipeDescriptionPanel Get_craftingRecipeDescriptionPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UCraftingRecipeDescriptionPanel(ptr_addr);
	}
	struct UCraftingPanel Get_craftingPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UCraftingPanel(ptr_addr);
	}
	struct UBuildingPanel Get_buildingPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UBuildingPanel(ptr_addr);
	}
	struct UCentralBuildingPanel Get_centralBuildingPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UCentralBuildingPanel(ptr_addr);
	}
	struct UMetabolismLeftPanel Get_metabolismLeftPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UMetabolismLeftPanel(ptr_addr);
	}
	struct UMetabolismRightPanel Get_metabolismRightPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UMetabolismRightPanel(ptr_addr);
	}
	struct UMetabolismTreatmentItemsPanel Get_metabolismTreatmentItemsPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UMetabolismTreatmentItemsPanel(ptr_addr);
	}
	struct UJournalMissionPanel Get_journalMissionPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UJournalMissionPanel(ptr_addr);
	}
	struct UJournalObjectiveContainer Get_journalObjectiveContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UJournalObjectiveContainer(ptr_addr);
	}
	struct USquadLeftPanel Get_squadLeftPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct USquadLeftPanel(ptr_addr);
	}
	struct USquadRightPanel Get_squadRightPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct USquadRightPanel(ptr_addr);
	}
	struct UGameEventLeftPanel Get_gameEventLeftPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UGameEventLeftPanel(ptr_addr);
	}
	struct UGameEventRightPanel Get_gameEventRightPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UGameEventRightPanel(ptr_addr);
	}
	struct UCookingPanelWidget Get_cookingPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UCookingPanelWidget(ptr_addr);
	}
	struct USquadEditor Get_squadEditor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct USquadEditor(ptr_addr);
	}
	struct UMessageBox Get_messageBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UMessageBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTabModeTab
{
public:
	UTabModeTab(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USizeBox Get_mainSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct USizeBox(ptr_addr);
	}
	struct UImage Get_backgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UImage Get_icon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_titleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_hotkeyText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct FText Get_title() {
		return memory.read<struct FText>(m_addr + 672);
	}
	struct FText Get_hotkey() {
		return memory.read<struct FText>(m_addr + 696);
	}
	struct FSlateBrush Get_activeIcon() {
		return memory.read<struct FSlateBrush>(m_addr + 720);
	}
	struct FSlateBrush Get_inactiveIcon() {
		return memory.read<struct FSlateBrush>(m_addr + 856);
	}
	struct FSlateBrush Get_backgroundTextureActive() {
		return memory.read<struct FSlateBrush>(m_addr + 992);
	}
	struct FSlateBrush Get_backgroundTextureInactive() {
		return memory.read<struct FSlateBrush>(m_addr + 1128);
	}
	struct FLinearColor Get_inactiveUnalertedColor() {
		return memory.read<struct FLinearColor>(m_addr + 1264);
	}
	struct FLinearColor Get_inactiveAlertedColor() {
		return memory.read<struct FLinearColor>(m_addr + 1280);
	}
	float Get_alertBlinkTime() {
		return memory.read<float>(m_addr + 1296);
	}
	uint8_t  Get_tabMode() {
		return memory.read<uint8_t >(m_addr + 1302);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTacticsSkill
{
public:
	UTacticsSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_updateTime() {
		return memory.read<float>(m_addr + 256);
	}
	float Get_serverUpdateTime() {
		return memory.read<float>(m_addr + 260);
	}
	float Get_noSkillDetectionRange() {
		return memory.read<float>(m_addr + 264);
	}
	float Get_basicDetectionRange() {
		return memory.read<float>(m_addr + 268);
	}
	float Get_mediumDetectionRange() {
		return memory.read<float>(m_addr + 272);
	}
	float Get_advancedDetectionRange() {
		return memory.read<float>(m_addr + 276);
	}
	float Get_aboveAdvancedDetectionRange() {
		return memory.read<float>(m_addr + 280);
	}
	float Get_noSkillDetectionTime() {
		return memory.read<float>(m_addr + 284);
	}
	float Get_basicDetectionTime() {
		return memory.read<float>(m_addr + 288);
	}
	float Get_mediumDetectionTime() {
		return memory.read<float>(m_addr + 292);
	}
	float Get_advancedDetectionTime() {
		return memory.read<float>(m_addr + 296);
	}
	float Get_aboveAdvancedDetectionTime() {
		return memory.read<float>(m_addr + 300);
	}
	float Get_fadeOutTime() {
		return memory.read<float>(m_addr + 304);
	}
	struct UCurveFloat Get_detectionTimeDistanceScale() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct UCurveFloat(ptr_addr);
	}
	float Get_noSkillExperiencePerSecond() {
		return memory.read<float>(m_addr + 320);
	}
	float Get_basicExperiencePerSecond() {
		return memory.read<float>(m_addr + 324);
	}
	float Get_mediumExperiencePerSecond() {
		return memory.read<float>(m_addr + 328);
	}
	float Get_advancedExperiencePerSecond() {
		return memory.read<float>(m_addr + 332);
	}
	float Get_tacticsDetectionCurveCoefficient1() {
		return memory.read<float>(m_addr + 336);
	}
	float Get_tacticsDetectionCurveCoefficient2() {
		return memory.read<float>(m_addr + 340);
	}
	float Get_tacticsDetectionCurveCoefficient3() {
		return memory.read<float>(m_addr + 344);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATeamDeathmatchGameEvent
{
public:
	ATeamDeathmatchGameEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTeamDeathmatchParameters Get_teamDeathmatchParameters() {
		return memory.read<struct FTeamDeathmatchParameters>(m_addr + 1376);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATeamDeathmatchLocationMarker
{
public:
	ATeamDeathmatchLocationMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTeamDeathmatchParameters GetTeamDeathmatchParameters() {
		return memory.read<struct FTeamDeathmatchParameters>(m_addr + 1048);
	}
	struct FVector GetFocusOffset() {
		return memory.read<struct FVector>(m_addr + 1068);
	}
	float GetMinimalRadius() {
		return memory.read<float>(m_addr + 1080);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTeleportComponent
{
public:
	UTeleportComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTeleportRepData Get_repData() {
		return memory.read<struct FTeleportRepData>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTeleportComponentOwner
{
public:
	UTeleportComponentOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTeleportSubject
{
public:
	UTeleportSubject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ATempPlayerStart
{
public:
	ATempPlayerStart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTextInputWidget
{
public:
	UTextInputWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton GetMainButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UButton(ptr_addr);
	}
	struct UEditableTextBox GetTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UTextBlock GetTextBlock_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct USizeBox GetTitleSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct USizeBox(ptr_addr);
	}
	struct USizeBox GetInputSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct USizeBox(ptr_addr);
	}
	struct UImage GetInputImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}
	int32_t GetInputFontSize() {
		return memory.read<int32_t>(m_addr + 696);
	}
	int32_t GetTitleFontSize() {
		return memory.read<int32_t>(m_addr + 700);
	}
	int32_t GetTitleFontSizeHighlighted() {
		return memory.read<int32_t>(m_addr + 704);
	}
	float GetTitleWidth() {
		return memory.read<float>(m_addr + 708);
	}
	float GetInputWidth() {
		return memory.read<float>(m_addr + 712);
	}
	float GetHeight() {
		return memory.read<float>(m_addr + 716);
	}
	struct FText GetTitle() {
		return memory.read<struct FText>(m_addr + 720);
	}
	struct FText GetDefaultValue() {
		return memory.read<struct FText>(m_addr + 744);
	}
	float GetInputPadding() {
		return memory.read<float>(m_addr + 768);
	}
	char EHorizontalAlignment GetValueJustification() {
		return memory.read<char EHorizontalAlignment>(m_addr + 772);
	}
	struct FLinearColor GetInputBackgroundColor() {
		return memory.read<struct FLinearColor>(m_addr + 776);
	}
	char ETextInputType GetInputType() {
		return memory.read<char ETextInputType>(m_addr + 792);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTextOnlyTooltip
{
public:
	UTextOnlyTooltip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 608);
	}
	struct UTextBlock Get_textBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTexture2DStatics
{
public:
	UTexture2DStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AThermometer
{
public:
	AThermometer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UThermalSensorComponent Get_thermalSensorComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return struct UThermalSensorComponent(ptr_addr);
	}
	int32_t Get_thermometerFluidMaterialId() {
		return memory.read<int32_t>(m_addr + 2328);
	}

private:
	std::uint64_t m_addr = 0;
};


class UThrowingComponent
{
public:
	UThrowingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetItemThrowingBehavior() {
		return memory.read<uint8_t >(m_addr + 464);
	}
	float GetPierceMaxDensity() {
		return memory.read<float>(m_addr + 468);
	}
	float GetThrowEnergyMultiplier() {
		return memory.read<float>(m_addr + 472);
	}
	struct FRotator GetInitialRotation() {
		return memory.read<struct FRotator>(m_addr + 476);
	}
	struct FRotator GetUpdatedRotation() {
		return memory.read<struct FRotator>(m_addr + 488);
	}
	struct FRotator GetMinRandomImpactRotation() {
		return memory.read<struct FRotator>(m_addr + 500);
	}
	struct FRotator GetMaxRandomImpactRotation() {
		return memory.read<struct FRotator>(m_addr + 512);
	}
	float GetPenetrationDepth() {
		return memory.read<float>(m_addr + 524);
	}
	bool GetIsFloatable() {
		return memory.read<bool>(m_addr + 528);
	}
	uint8_t  GetMinStance() {
		return memory.read<uint8_t >(m_addr + 529);
	}
	struct UParticleSystem Get_splashParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5568);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent Get_splashAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5576);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UThrowingQuickAccessItemWidget
{
public:
	UThrowingQuickAccessItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetMaxWidth() {
		return memory.read<char>(m_addr + 608);
	}
	char GetMaxHeight() {
		return memory.read<char>(m_addr + 609);
	}
	struct UImage Get_imageWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	float GetDefaultWidth() {
		return memory.read<float>(m_addr + 632);
	}
	float GetDefaultHeight() {
		return memory.read<float>(m_addr + 636);
	}
	struct FVector2D GetDefaultPosition() {
		return memory.read<struct FVector2D>(m_addr + 640);
	}
	struct UWidget Get_itemWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidget(ptr_addr);
	}
	struct USizeBox GetSizeBox_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct USizeBox(ptr_addr);
	}
	struct UImage Get_additionalIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_additionalText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlockItemSlotNumber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UThrowingSkill
{
public:
	UThrowingSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_minPlayRate() {
		return memory.read<float>(m_addr + 180);
	}
	float Get_maxPlayRate() {
		return memory.read<float>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATimeControllableLight
{
public:
	ATimeControllableLight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_shouldExistOnDedicatedServer() {
		return memory.read<bool>(m_addr + 560);
	}
	struct UCurveFloat Get_intensityVsTimeOfDayCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UCurveFloat(ptr_addr);
	}
	struct UPointLightComponent Get_pointLightComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UPointLightComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATimeControllableSpotLight
{
public:
	ATimeControllableSpotLight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_shouldExistOnDedicatedServer() {
		return memory.read<bool>(m_addr + 560);
	}
	struct UCurveFloat Get_intensityVsTimeOfDayCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UCurveFloat(ptr_addr);
	}
	struct USpotLightComponent Get_pointLightComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct USpotLightComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponAnimInstance
{
public:
	UWeaponAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_owningPrisonerWeaponBreathFactor() {
		return memory.read<float>(m_addr + 720);
	}
	float Get_owningPrisonerWeaponAimDownTheSightsStillBlendFactor() {
		return memory.read<float>(m_addr + 724);
	}
	bool Get_isOwningPrisonerAimingDownTheSights() {
		return memory.read<bool>(m_addr + 728);
	}
	bool Get_isChamberOpened() {
		return memory.read<bool>(m_addr + 729);
	}
	int32_t Get_ammoCount() {
		return memory.read<int32_t>(m_addr + 732);
	}
	int32_t Get_loadedAmmoCount() {
		return memory.read<int32_t>(m_addr + 736);
	}
	bool Get_shouldPlayChamberOpenedIdle() {
		return memory.read<bool>(m_addr + 740);
	}
	bool Get_isInGameEvent() {
		return memory.read<bool>(m_addr + 741);
	}
	uint8_t  Get_malfunction() {
		return memory.read<uint8_t >(m_addr + 742);
	}
	bool Get_useFiringModeBoneRotation() {
		return memory.read<bool>(m_addr + 743);
	}
	struct FRotator Get_firingModeBoneRotation() {
		return memory.read<struct FRotator>(m_addr + 744);
	}
	float Get_hideBoneCurveValue() {
		return memory.read<float>(m_addr + 756);
	}
	float Get_zeroRange() {
		return memory.read<float>(m_addr + 760);
	}
	uint8_t  Get_aiminDownTheSightsMode() {
		return memory.read<uint8_t >(m_addr + 764);
	}
	bool Get_hasUnusedLoadedAmmo() {
		return memory.read<bool>(m_addr + 765);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTriggerComponentState
{
public:
	UTriggerComponentState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTimedTriggerComponent
{
public:
	UTimedTriggerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_countdownDuration() {
		return memory.read<float>(m_addr + 1232);
	}
	struct UAkAudioEvent Get_countdownStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1240);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_countdownStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1248);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_countdownRemainingTime() {
		return memory.read<float>(m_addr + 1256);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVoiceDecoder
{
public:
	UVoiceDecoder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UToggleCamouflageAction
{
public:
	UToggleCamouflageAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTooltipBase
{
public:
	UTooltipBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetBackgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage GetItemImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UVerticalBox GetItemImageBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UVerticalBox(ptr_addr);
	}
	struct UTextBlock GetNameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetDescriptionText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UProgressBar GetProgressBar_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UProgressBar(ptr_addr);
	}
	struct AItem Get_item() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATournament
{
public:
	ATournament(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetStartAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetSuddenDeathAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetEndAnnouncement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UAkAudioEvent(ptr_addr);
	}
	bool Get_inProgress() {
		return memory.read<bool>(m_addr + 584);
	}
	bool Get_inSuddenDeath() {
		return memory.read<bool>(m_addr + 585);
	}
	bool Get_hasEnded() {
		return memory.read<bool>(m_addr + 586);
	}
	struct TArray<struct FTournamentStats> Get_stats() {
		return memory.read<struct TArray<struct FTournamentStats>>(m_addr + 592);
	}
	struct UTournamentScoreboardWidget Get_scoreboardWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTournamentScoreboardWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTournamentScoreboardRowWidget
{
public:
	UTournamentScoreboardRowWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_rankText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_playerNameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_famePointsText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_killsText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage Get_deathIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTournamentScoreboardWidget
{
public:
	UTournamentScoreboardWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_instruction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UVerticalBox Get_table() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UVerticalBox(ptr_addr);
	}
	UTournamentScoreboardRowWidget Get_rowClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return UTournamentScoreboardRowWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATrackingMarker2
{
public:
	ATrackingMarker2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetSceneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USceneComponent(ptr_addr);
	}
	struct UArrowComponent GetDirectionArrow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UArrowComponent(ptr_addr);
	}
	struct UDecalComponent GetConeDecal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UDecalComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UParticleSystemComponent(ptr_addr);
	}
	float GetTickFrequency() {
		return memory.read<float>(m_addr + 584);
	}
	AAnimal2 GetAnimalClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return AAnimal2(ptr_addr);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 600);
	}
	struct FVector GetDirection() {
		return memory.read<struct FVector>(m_addr + 604);
	}
	float Gethealth() {
		return memory.read<float>(m_addr + 616);
	}
	uint8_t  GetBleedingSeverity() {
		return memory.read<uint8_t >(m_addr + 620);
	}
	bool GetShowBleedingInfo() {
		return memory.read<bool>(m_addr + 621);
	}
	bool GetShowWoundInfo() {
		return memory.read<bool>(m_addr + 622);
	}
	bool GetShowBasicWoundInfo() {
		return memory.read<bool>(m_addr + 623);
	}
	float GetMaxSevereBleedTime() {
		return memory.read<float>(m_addr + 624);
	}
	float GetMaxHeavyBleedTime() {
		return memory.read<float>(m_addr + 628);
	}
	float GetMaxModerateBleedTime() {
		return memory.read<float>(m_addr + 632);
	}
	float GetMaxLightBleedTime() {
		return memory.read<float>(m_addr + 636);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTradeable
{
public:
	UTradeable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UNPCInteractionBoxComponent
{
public:
	UNPCInteractionBoxComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsAreaForbidden() {
		return memory.read<bool>(m_addr + 1144);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATradeOutpostManager
{
public:
	ATradeOutpostManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBillboardComponent Get_sprite() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UBillboardComponent(ptr_addr);
	}
	struct UTradingOutpostDescriptionDataAsset Get_outpostDescription() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UTradingOutpostDescriptionDataAsset(ptr_addr);
	}
	uint8_t  Get_startingProsperityLevel() {
		return memory.read<uint8_t >(m_addr + 560);
	}
	struct TArray<struct ATradePost> Get_assignedTradePosts() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct TArray<struct ATradePost>(ptr_addr);
	}
	struct TArray<struct ATradeOutpostBuilding> Get_otherAssignedTradeOutpostBuildings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct TArray<struct ATradeOutpostBuilding>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleSpawnBoxComponent
{
public:
	UVehicleSpawnBoxComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSpawnPriority() {
		return memory.read<int32_t>(m_addr + 1144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTraderBuyPanel
{
public:
	UTraderBuyPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UTraderItemButton Get_traderItemButtonClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return UTraderItemButton(ptr_addr);
	}
	struct UTabContainer Get_cashOrCreditRadioBtn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTabContainer(ptr_addr);
	}
	struct UWidgetSwitcher Get_subpanelSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UPanelWidget Get_catResults() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UPanelWidget(ptr_addr);
	}
	struct UWrapBox Get_itemsOfChosenCategory() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UWrapBox(ptr_addr);
	}
	struct UTraderItemButton Get_chosenItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTraderItemButton(ptr_addr);
	}
	struct UWrapBox Get_relatedItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UWrapBox(ptr_addr);
	}
	struct USearchBox Get_itemSearchBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct USearchBox(ptr_addr);
	}
	struct UTraderDropdownMenu Get_itemCategoryDropdown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTraderDropdownMenu(ptr_addr);
	}
	struct UTraderDropdownMenu Get_itemSortingDropdown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTraderDropdownMenu(ptr_addr);
	}
	struct UTextBlock Get_categoryTitle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTextBlock(ptr_addr);
	}
	struct UTraderFilterFamePointsButton Get_btnFilterSufficientFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UTraderFilterFamePointsButton(ptr_addr);
	}
	struct UTraderFilterFamePointsButton Get_btnFilterInsufficientFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTraderFilterFamePointsButton(ptr_addr);
	}
	struct UTextBlock Get_warningMessage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_headerBannerPrisonerCashOnHand() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_headerBannerPrisonerCashInBank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_prisonerCashOnHand() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_prisonerCashInBank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_prisonerGoldInBank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_prisonerFamePoints() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_buyTotal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_buyTotalGold() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher Get_exitBackSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UButton Get_btnExit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_btnBack() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UButton(ptr_addr);
	}
	struct UWidgetSwitcher Get_cartBuySwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UButton Get_btnCart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_btnBuy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UButton(ptr_addr);
	}
	struct UAkAudioEvent Get_soundExitOnClick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_soundBackOnClick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_soundCartOnClick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_soundButtonOnHover() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UAkAudioEvent(ptr_addr);
	}
	int32_t Get_cashOrCreditFontSizeUnselected() {
		return memory.read<int32_t>(m_addr + 888);
	}
	int32_t Get_cashOrCreditFontSizeSelected() {
		return memory.read<int32_t>(m_addr + 892);
	}
	struct FSlateColor Get_buyTotalZeroColor() {
		return memory.read<struct FSlateColor>(m_addr + 1008);
	}
	struct FSlateColor Get_buyTotalNonZeroColor() {
		return memory.read<struct FSlateColor>(m_addr + 1048);
	}
	struct FSlateColor Get_noOwnedCardInInventoryColor() {
		return memory.read<struct FSlateColor>(m_addr + 1088);
	}
	struct TArray<struct FSlateBrush> Get_sortTypeBrushes() {
		return memory.read<struct TArray<struct FSlateBrush>>(m_addr + 1128);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTraderDepotPanel
{
public:
	UTraderDepotPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_prisonerCashOnHand() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_prisonerCashInBank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_prisonerGoldInBank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_btnExit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UButton(ptr_addr);
	}
	struct UItemInventoryDepotWidget2 Get_inventoryDepotWidget2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UItemInventoryDepotWidget2(ptr_addr);
	}
	struct UAkAudioEvent Get_soundExitOnClick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_soundButtonOnHover() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTraderFilterFamePointsButton
{
public:
	UTraderFilterFamePointsButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_lockImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}
	struct FSlateBrush Get_selectedLookBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 696);
	}
	struct FSlateBrush Get_deselectedLookBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 832);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTraderMainPanel
{
public:
	UTraderMainPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTabContainer Get_tabRow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTabContainer(ptr_addr);
	}
	struct UWidgetSwitcher Get_panelSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTraderBuyPanel Get_buyPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTraderBuyPanel(ptr_addr);
	}
	struct UTraderSellPanel Get_sellPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTraderSellPanel(ptr_addr);
	}
	struct UTraderDepotPanel Get_depotPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTraderDepotPanel(ptr_addr);
	}
	struct UPanelWidget Get_loadingScreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UPanelWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTraderSellListEntry
{
public:
	UTraderSellListEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_entryIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Get_entryCaption() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock Get_entryPrice() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_btnCancel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UButton(ptr_addr);
	}
	struct UTexture2D Get_missingTextureIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTraderSellUIController
{
public:
	UTraderSellUIController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEconomyManagerResponseData
{
public:
	UEconomyManagerResponseData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADepotItem Get_assignedDepotItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct ADepotItem(ptr_addr);
	}
	struct TArray<struct FTradeablesResponseData> Get_tradeables() {
		return memory.read<struct TArray<struct FTradeablesResponseData>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTradeStatics
{
public:
	UTradeStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTrapData
{
public:
	UTrapData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	USphereMotionTriggerComponent GetSphereMotionTriggerComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return USphereMotionTriggerComponent(ptr_addr);
	}
	UBoxMotionTriggerComponent GetBoxMotionTriggerComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return UBoxMotionTriggerComponent(ptr_addr);
	}
	ULaserTriggerComponent GetLaserTriggerComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return ULaserTriggerComponent(ptr_addr);
	}
	UTimedTriggerComponent GetTimedTriggerComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return UTimedTriggerComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTrapItemUserData
{
public:
	UTrapItemUserData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetOwnerUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 40);
	}
	bool GetIsOwnerUserProfileIdDirty() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTrapRefuelItemTag
{
public:
	UTrapRefuelItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetUsesOnRefuel() {
		return memory.read<int32_t>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTrashCarouselWidget
{
public:
	UTrashCarouselWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateBrush Get_leftArrowIcon() {
		return memory.read<struct FSlateBrush>(m_addr + 656);
	}
	struct FSlateBrush Get_rightArrowIcon() {
		return memory.read<struct FSlateBrush>(m_addr + 792);
	}
	struct FSlateBrush Get_disabledLeftArrowIcon() {
		return memory.read<struct FSlateBrush>(m_addr + 928);
	}
	struct FSlateBrush Get_disabledRightArrowIcon() {
		return memory.read<struct FSlateBrush>(m_addr + 1064);
	}
	struct UTextBlock Get_selectionDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1200);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton Get_leftArrow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1208);
		return struct UButton(ptr_addr);
	}
	struct UButton Get_rightArrow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1216);
		return struct UButton(ptr_addr);
	}
	struct FSlateFontInfo Get_font() {
		return memory.read<struct FSlateFontInfo>(m_addr + 1224);
	}
	struct TArray<struct FString> Get_possibleValues() {
		return memory.read<struct TArray<struct FString>>(m_addr + 1312);
	}
	struct TArray<struct FText> Get_carouselValues() {
		return memory.read<struct TArray<struct FText>>(m_addr + 1328);
	}
	bool Get_canWrap() {
		return memory.read<bool>(m_addr + 1344);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTrashNamedSliderWidget
{
public:
	UTrashNamedSliderWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetValueChangedTemp_DONOTUSE() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 656);
	}
	struct USizeBox Get_nameBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct USizeBox(ptr_addr);
	}
	struct UTextBlock Get_name() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTextBlock(ptr_addr);
	}
	struct USizeBox Get_valueDisplayBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct USizeBox(ptr_addr);
	}
	struct UTextBlock Get_valueDisplay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTextBlock(ptr_addr);
	}
	struct UTrashSliderWidget Get_slider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTrashSliderWidget(ptr_addr);
	}
	struct USelectionOverlayWidget Get_focusBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct USelectionOverlayWidget(ptr_addr);
	}
	struct FString Get_label() {
		return memory.read<struct FString>(m_addr + 720);
	}
	struct FText Get_mainLabel() {
		return memory.read<struct FText>(m_addr + 736);
	}
	struct FSlateFontInfo Get_defaultFont() {
		return memory.read<struct FSlateFontInfo>(m_addr + 760);
	}
	float Get_stepSpeedTreshold() {
		return memory.read<float>(m_addr + 936);
	}
	float Get_valueDisplayWidth() {
		return memory.read<float>(m_addr + 940);
	}
	float Get_minValue() {
		return memory.read<float>(m_addr + 944);
	}
	float Get_maxValue() {
		return memory.read<float>(m_addr + 948);
	}
	int32_t Get_stepCount() {
		return memory.read<int32_t>(m_addr + 952);
	}
	int32_t Get_decimalPlacesShown() {
		return memory.read<int32_t>(m_addr + 956);
	}
	float Get_nameBoxWidth() {
		return memory.read<float>(m_addr + 988);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTrashSliderWidget
{
public:
	UTrashSliderWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetValueChangedTemp_DONOTUSE() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 656);
	}
	struct FSlateBrush Get_emptySlider() {
		return memory.read<struct FSlateBrush>(m_addr + 672);
	}
	struct FSlateBrush Get_filledSlider() {
		return memory.read<struct FSlateBrush>(m_addr + 808);
	}
	struct FSlateBrush Get_selectedSlider() {
		return memory.read<struct FSlateBrush>(m_addr + 944);
	}
	struct FSlateBrush Get_normalThumb() {
		return memory.read<struct FSlateBrush>(m_addr + 1352);
	}
	struct FSlateBrush Get_selectedThumb() {
		return memory.read<struct FSlateBrush>(m_addr + 1488);
	}
	struct USlider Get_slider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1760);
		return struct USlider(ptr_addr);
	}
	struct UProgressBar Get_progressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1768);
		return struct UProgressBar(ptr_addr);
	}
	struct FDataTableRowHandle Get_selectedColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 1776);
	}
	struct FDataTableRowHandle Get_disabledColor() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 1792);
	}
	float Get_minValue() {
		return memory.read<float>(m_addr + 1808);
	}
	float Get_maxValue() {
		return memory.read<float>(m_addr + 1812);
	}
	int32_t Get_stepCount() {
		return memory.read<int32_t>(m_addr + 1816);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTriggerFailurePenalty
{
public:
	UTriggerFailurePenalty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTriggerItemTag
{
public:
	UTriggerItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetTriggerType() {
		return memory.read<uint8_t >(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UUIStatics
{
public:
	UUIStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UUnarmedCombatInputRedirector
{
public:
	UUnarmedCombatInputRedirector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AUnderwaterPostProcessVolume
{
public:
	AUnderwaterPostProcessVolume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UUpdateableNotificationDescription
{
public:
	UUpdateableNotificationDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetNotificationName() {
		return memory.read<struct FString>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class AUseItemObjective
{
public:
	AUseItemObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct TSoftObjectPtr<AActor>, struct FUsableObjectiveItem> Get_targetMeshes() {
		return memory.read<struct TMap<struct TSoftObjectPtr<AActor>, struct FUsableObjectiveItem>>(m_addr + 800);
	}

private:
	std::uint64_t m_addr = 0;
};


class UUserProfile
{
public:
	UUserProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USpamProtectionState Get_globalSpamProtectionState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct USpamProtectionState(ptr_addr);
	}
	struct USpamProtectionState Get_localSpamProtectionState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct USpamProtectionState(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UValueProviderString
{
public:
	UValueProviderString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleBaseSave
{
public:
	UVehicleBaseSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetLastAccessTime() {
		return memory.read<int64_t>(m_addr + 40);
	}
	float GetTimeUntilDestructionInSeconds() {
		return memory.read<float>(m_addr + 48);
	}
	uint64_t GetPackedSimulationState() {
		return memory.read<uint64_t>(m_addr + 56);
	}
	float GetMileage() {
		return memory.read<float>(m_addr + 64);
	}
	struct TArray<struct FVehicleAttachmentSave> GetVehicleAttachments() {
		return memory.read<struct TArray<struct FVehicleAttachmentSave>>(m_addr + 72);
	}
	struct FVector GetLastSteadyLocation() {
		return memory.read<struct FVector>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_Armor
{
public:
	UVehicleAttachment_Armor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_Battery
{
public:
	UVehicleAttachment_Battery(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVehicleAttachmentBatterySetup GetBatterySetup() {
		return memory.read<struct FVehicleAttachmentBatterySetup>(m_addr + 808);
	}
	struct FVehicleAttachmentBatterySimulationData Get_simulationData() {
		return memory.read<struct FVehicleAttachmentBatterySimulationData>(m_addr + 856);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_Door
{
public:
	UVehicleAttachment_Door(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVehicleAttachmentDoorSetup GetDoorSetup() {
		return memory.read<struct FVehicleAttachmentDoorSetup>(m_addr + 800);
	}
	uint8_t  Get_flags() {
		return memory.read<uint8_t >(m_addr + 896);
	}
	struct UObject Get_reservee() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UObject(ptr_addr);
	}
	struct TArray<struct FGameplayTag> Get_mountPathObstructionTags() {
		return memory.read<struct TArray<struct FGameplayTag>>(m_addr + 912);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleWithDoors
{
public:
	UVehicleWithDoors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_Lights
{
public:
	UVehicleAttachment_Lights(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_lightCategory() {
		return memory.read<uint8_t >(m_addr + 784);
	}
	struct TArray<struct FVehicleLightReference> Get_lightReferences() {
		return memory.read<struct TArray<struct FVehicleLightReference>>(m_addr + 792);
	}
	struct TArray<struct FVATMaterialParam> Get_materialParameters() {
		return memory.read<struct TArray<struct FVATMaterialParam>>(m_addr + 824);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleWithLights
{
public:
	UVehicleWithLights(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_Seat
{
public:
	UVehicleAttachment_Seat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UVehicleBaseMountSlot> Get_mountSlotClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct TArray<UVehicleBaseMountSlot>(ptr_addr);
	}
	struct TArray<struct UVehicleBaseMountSlot> Get_mountSlots() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct TArray<struct UVehicleBaseMountSlot>(ptr_addr);
	}
	float Get_minimalHealthPercentWhenMounted() {
		return memory.read<float>(m_addr + 824);
	}
	float Get_minimalHealthPercentToMounted() {
		return memory.read<float>(m_addr + 828);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_StaticPart
{
public:
	UVehicleAttachment_StaticPart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_Dashboard
{
public:
	UVehicleAttachment_Dashboard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachment_Wheel
{
public:
	UVehicleAttachment_Wheel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleWithWheels
{
public:
	UVehicleWithWheels(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachmentDashboardAnimInstance
{
public:
	UVehicleAttachmentDashboardAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator Get_steerRotator() {
		return memory.read<struct FRotator>(m_addr + 700);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachmentHealthWidget
{
public:
	UVehicleAttachmentHealthWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UProgressBar Get_progressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UProgressBar(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleAttachmentParent
{
public:
	UVehicleAttachmentParent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleSlotIdAssetData
{
public:
	UVehicleSlotIdAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMountableVehicleAttachment
{
public:
	UMountableVehicleAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleBaseAnimInstance
{
public:
	UVehicleBaseAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleBasePushMountSlot
{
public:
	UVehicleBasePushMountSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetLeftHandIKSocketName() {
		return memory.read<struct FName>(m_addr + 320);
	}
	struct FName GetRightHandIKSocketName() {
		return memory.read<struct FName>(m_addr + 328);
	}

private:
	std::uint64_t m_addr = 0;
};


class AVehicleCraftedItem
{
public:
	AVehicleCraftedItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor Get_vehicleClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2320);
		return AActor(ptr_addr);
	}
	struct FPrimaryAssetId Get_vehiclePrimaryAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 2328);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleEntitySetup
{
public:
	UVehicleEntitySetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleForcePushComponent
{
public:
	UVehicleForcePushComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVehicleForcePushParams> Get_forcePushParams() {
		return memory.read<struct TArray<struct FVehicleForcePushParams>>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleHitZoneManager
{
public:
	UVehicleHitZoneManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName Get_vehicleHitMeshName() {
		return memory.read<struct FName>(m_addr + 208);
	}
	struct TArray<struct UMaterialInterface> Get_engineBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct TArray<struct UMaterialInterface>(ptr_addr);
	}
	struct TArray<struct FVehicleHitZoneData> Get_doors() {
		return memory.read<struct TArray<struct FVehicleHitZoneData>>(m_addr + 232);
	}
	struct TArray<struct FVehicleHitZoneData> Get_doorWindows() {
		return memory.read<struct TArray<struct FVehicleHitZoneData>>(m_addr + 248);
	}
	struct TArray<struct FVehicleHitZoneData> Get_wheelTires() {
		return memory.read<struct TArray<struct FVehicleHitZoneData>>(m_addr + 264);
	}
	struct TArray<struct FAirplaneWingHitZoneData> Get_airplaneWings() {
		return memory.read<struct TArray<struct FAirplaneWingHitZoneData>>(m_addr + 280);
	}

private:
	std::uint64_t m_addr = 0;
};


class AVehicleItemContainer
{
public:
	AVehicleItemContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleMeshComponent
{
public:
	UVehicleMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_minCcdAdvanceCoefficient() {
		return memory.read<float>(m_addr + 3784);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleMountSlotIndicators
{
public:
	UVehicleMountSlotIndicators(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage Get_backgroundGradient() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UContentWidget Get_vehicleMountSlotsContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UContentWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleMountSlotWidget
{
public:
	UVehicleMountSlotWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher Get_slotStateSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock Get_keybindLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehiclePartDescriptionComponent
{
public:
	UVehiclePartDescriptionComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVehicleGearedEnginePowertrainComponent
{
public:
	UVehicleGearedEnginePowertrainComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_differentialRatio() {
		return memory.read<float>(m_addr + 208);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehiclePresetNode
{
public:
	UVehiclePresetNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrimaryAssetId> GetPossibleAttachmentAssetIds() {
		return memory.read<struct TArray<struct FPrimaryAssetId>>(m_addr + 40);
	}
	struct FPrimaryAssetId GetAttachmentAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 56);
	}
	bool GetIsFunctionalityAttachment() {
		return memory.read<bool>(m_addr + 72);
	}
	struct TArray<struct FVehicleAttachmentSpawnData> GetSpawnData() {
		return memory.read<struct TArray<struct FVehicleAttachmentSpawnData>>(m_addr + 80);
	}
	struct TArray<struct UVehiclePresetNode> GetChildren() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct TArray<struct UVehiclePresetNode>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehiclePreset
{
public:
	UVehiclePreset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetVehicleAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 48);
	}
	struct UCurveFloat GetMileageCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UCurveFloat(ptr_addr);
	}
	struct UVehiclePresetNode GetRootNode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UVehiclePresetNode(ptr_addr);
	}
	struct FFloatRange GetFuelAmountSpawnPercentageRange() {
		return memory.read<struct FFloatRange>(m_addr + 80);
	}
	struct FFloatRange GetBatteryChargeSpawnPercentageRange() {
		return memory.read<struct FFloatRange>(m_addr + 96);
	}
	struct TSoftClassPtr<UObject> GetLockClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 112);
	}
	float GetVerticalSpawnOffset() {
		return memory.read<float>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWashEyesAssetData
{
public:
	UWashEyesAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UGameResourceType(ptr_addr);
	}
	float GetQuantityPerWash() {
		return memory.read<float>(m_addr + 56);
	}
	float GetWashDuration() {
		return memory.read<float>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleQueryComponent
{
public:
	UVehicleQueryComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_isReady() {
		return memory.read<bool>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleServiceComponent
{
public:
	UVehicleServiceComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AVehicleServiceStation Get_serviceStation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct AVehicleServiceStation(ptr_addr);
	}
	struct FDbIntegerId Get_serviceInitiatorId() {
		return memory.read<struct FDbIntegerId>(m_addr + 184);
	}
	struct TWeakObjectPtr<UObject> Get_currentAction() {
		return memory.read<struct TWeakObjectPtr<UObject>>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleServiceStationSaveObject
{
public:
	UVehicleServiceStationSaveObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UStaticVehicleServiceStationSaveObject
{
public:
	UStaticVehicleServiceStationSaveObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetStaticId() {
		return memory.read<int64_t>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class AVehicleServiceStation
{
public:
	AVehicleServiceStation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag Get_serviceMode() {
		return memory.read<struct FGameplayTag>(m_addr + 544);
	}
	struct USkeletalMeshComponent Get_mesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct FText Get_displayName() {
		return memory.read<struct FText>(m_addr + 560);
	}
	struct FName Get_vehicleAttachSocketName() {
		return memory.read<struct FName>(m_addr + 584);
	}
	float Get_maxServiceDistanceSquared() {
		return memory.read<float>(m_addr + 592);
	}
	float Get_minUpAlignmentAngleDeg() {
		return memory.read<float>(m_addr + 596);
	}
	float Get_minForwardAbsAlignmentAngleDeg() {
		return memory.read<float>(m_addr + 600);
	}
	struct FVector Get_blockCheckBoxExtent() {
		return memory.read<struct FVector>(m_addr + 604);
	}
	struct UAkAudioEvent Get_movingStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_movingStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct ATradePost Get_assignedTradePost() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct ATradePost(ptr_addr);
	}
	struct AVehicleBase Get_servicedVehicle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct AVehicleBase(ptr_addr);
	}
	int64_t Get_staticId() {
		return memory.read<int64_t>(m_addr + 656);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPortableVehicleServiceStationSaveObject
{
public:
	UPortableVehicleServiceStationSaveObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 40);
	}
	struct FGameplayTag GetServiceMode() {
		return memory.read<struct FGameplayTag>(m_addr + 56);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 76);
	}
	struct TSoftClassPtr<UObject> GetOriginalItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 88);
	}
	float GetHealthRatio() {
		return memory.read<float>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class APortableVehicleServiceStation
{
public:
	APortableVehicleServiceStation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag Get_serviceModeRep() {
		return memory.read<struct FGameplayTag>(m_addr + 672);
	}
	struct TMap<struct FGameplayTag, struct UAnimSequenceBase> Get_poseVsSericeModeMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct TMap<struct FGameplayTag, struct UAnimSequenceBase>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleServiceToolTag
{
public:
	UVehicleServiceToolTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetGameplayTag() {
		return memory.read<struct FGameplayTag>(m_addr + 48);
	}
	int32_t GetUsesPerService() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleWeaponAimingParameters
{
public:
	UVehicleWeaponAimingParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<uint8_t > GetSupportedStance() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 40);
	}
	struct FVehicleWeaponAimingStanceData GetStanceData[2]() {
		return memory.read<struct FVehicleWeaponAimingStanceData>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class AVehicleSpawner
{
public:
	AVehicleSpawner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVehicleSpawnerComponent GetSpawnerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UVehicleSpawnerComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleSpawnerComponent
{
public:
	UVehicleSpawnerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVehicleSpawnerMarker> GetSpawnerMarkers() {
		return memory.read<struct TArray<struct FVehicleSpawnerMarker>>(m_addr + 504);
	}

private:
	std::uint64_t m_addr = 0;
};


class AVehicleSpawningManager2
{
public:
	AVehicleSpawningManager2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_maxAllowedTimeInForbiddenZones() {
		return memory.read<float>(m_addr + 544);
	}
	float Get_forbiddenZoneCheckInterval() {
		return memory.read<float>(m_addr + 548);
	}
	float Get_relevantSpawnerGroupsUpdateTimeElapsed() {
		return memory.read<float>(m_addr + 556);
	}
	float Get_minPlayerLocationDeltaToUpdateRelevantSpawners() {
		return memory.read<float>(m_addr + 564);
	}
	float Get_relevantSpawnerGroupsUpdateTimeBudget() {
		return memory.read<float>(m_addr + 568);
	}
	float Get_defaultSpawnerNetCullDistance() {
		return memory.read<float>(m_addr + 572);
	}
	bool Get_alwaysUseDefaultSpawnerNetCullDistance() {
		return memory.read<bool>(m_addr + 576);
	}
	float Get_numDaysToKeepSpawnerAliveIfVehicleIsInactive() {
		return memory.read<float>(m_addr + 580);
	}
	float Get_spawnerTasksProcessingTimeElapsed() {
		return memory.read<float>(m_addr + 584);
	}
	float Get_spawnerTasksProcessingTimeBudget() {
		return memory.read<float>(m_addr + 592);
	}
	float Get_addSpawnerUpdateInterval() {
		return memory.read<float>(m_addr + 596);
	}
	float Get_relevantSpawnersUpdateInterval() {
		return memory.read<float>(m_addr + 604);
	}
	float Get_autoSaveCheckIntervalForMovingVehicles() {
		return memory.read<float>(m_addr + 612);
	}
	float Get_autoSaveIntervalForMovingVehicles() {
		return memory.read<float>(m_addr + 620);
	}
	float Get_autoSaveCheckIntervalForStationaryVehicles() {
		return memory.read<float>(m_addr + 624);
	}
	float Get_autoSaveIntervalForStationaryVehicles() {
		return memory.read<float>(m_addr + 632);
	}
	struct TMap<struct FPrimaryAssetId, struct FVehicleManualSpawnPresetArray> Get_manualSpawnPresetsMap() {
		return memory.read<struct TMap<struct FPrimaryAssetId, struct FVehicleManualSpawnPresetArray>>(m_addr + 640);
	}
	struct TMap<struct FPrimaryAssetId, struct UVehiclePreset> Get_purchaseSpawnPresetsMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct TMap<struct FPrimaryAssetId, struct UVehiclePreset>(ptr_addr);
	}
	struct FGameplayTag Get_spawnGroupParentTag() {
		return memory.read<struct FGameplayTag>(m_addr + 880);
	}
	int32_t Get_defaultMaxNumSpawnersPerSpawnGroup() {
		return memory.read<int32_t>(m_addr + 888);
	}
	float Get_minDistanceBetweenVisitorAndSpawnLocation() {
		return memory.read<float>(m_addr + 1136);
	}
	float Get_spawnPointsSearchExtension() {
		return memory.read<float>(m_addr + 1140);
	}
	float Get_preferredDistanceBetweenSpawners() {
		return memory.read<float>(m_addr + 1144);
	}
	float Get_preferredDistanceBetweenSpawnersOfSameType() {
		return memory.read<float>(m_addr + 1148);
	}
	struct TArray<struct FVehicleSpawnPointData> Get_vehicleSpawnPoints() {
		return memory.read<struct TArray<struct FVehicleSpawnPointData>>(m_addr + 1152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVehicleUIDataController
{
public:
	UVehicleUIDataController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVerticalScrollBoxDropdownContent
{
public:
	UVerticalScrollBoxDropdownContent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScrollBox Get_entriesScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UScrollBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVicinityContainerRowItemWidget
{
public:
	UVicinityContainerRowItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_caption() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1360);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetImage_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1368);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1376);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_10() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1384);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetTextBlock_21() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1392);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetUpperLeftIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1400);
		return struct UImage(ptr_addr);
	}
	struct UProgressBar GetProgressBarLeftFirst() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1408);
		return struct UProgressBar(ptr_addr);
	}
	struct UProgressBar GetProgressBarLeftSecond() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1416);
		return struct UProgressBar(ptr_addr);
	}
	struct USizeBox GetSizeBox_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1424);
		return struct USizeBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVisionEffectsComponent
{
public:
	UVisionEffectsComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPostProcessPriority() {
		return memory.read<float>(m_addr + 232);
	}
	struct UMaterialInterface GetFadeOutMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetLowLightVisionMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetNightVisionMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UMaterialInterface(ptr_addr);
	}
	float GetNightVisionBlendInDuration() {
		return memory.read<float>(m_addr + 264);
	}
	float GetNightVisionBlendOutDuration() {
		return memory.read<float>(m_addr + 268);
	}
	struct UMaterialParameterCollection GetAnimalEyesMaterialParameterCollection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct FName GetAnimalEyesEmissiveMaterialName() {
		return memory.read<struct FName>(m_addr + 280);
	}
	float GetAnimalEyesEmissiveValueWhenNightVisionIsEnabled() {
		return memory.read<float>(m_addr + 288);
	}
	struct UMaterialInterface GetFlashbangEffectMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetFallingBlurMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetTakenDamageMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialParameterCollection GetTakenDamageMaterialParameterCollection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct FName GetTakenDamageBlurIntensityParameterName() {
		return memory.read<struct FName>(m_addr + 328);
	}
	struct FName GetTakenDamageStainsIntensityParameterName() {
		return memory.read<struct FName>(m_addr + 336);
	}
	struct FName GetTakenDamageVignetteIntensityParameterName() {
		return memory.read<struct FName>(m_addr + 344);
	}
	struct UCurveFloat GetTakenDamageBlurShapeCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 352);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetTakenDamageBlurIntensityCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 360);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetTakenDamageBlurDurationCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 368);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetTakenDamageStainsShapeCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 376);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetTakenDamageStainsIntensityCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetTakenDamageStainsDurationCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 392);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetTakenDamageVignetteShapeCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 400);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetTakenDamageVignetteIntensityCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 408);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetTakenDamageVignetteDurationCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 416);
		return struct UCurveFloat(ptr_addr);
	}
	float GetTakenDamageMaxChromaticAberration() {
		return memory.read<float>(m_addr + 424);
	}
	UMatineeCameraShake GetTakenDamageCameraShakeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 432);
		return UMatineeCameraShake(ptr_addr);
	}
	struct UCurveFloat GetTakenDamageCameraShakeScaleCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 440);
		return struct UCurveFloat(ptr_addr);
	}
	struct UMaterialInterface GetTacticsEffectMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 448);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetFocusModeMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 456);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetDoubleVisionMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 464);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FName GetDoubleVisionIntensityParameterName() {
		return memory.read<struct FName>(m_addr + 472);
	}
	struct UMaterialInterface GetUnderwaterBlurMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 480);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetPhotoModeTransitionMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 488);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetScopeZoomMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 496);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FName GetScopeZoomBlendPPParameterName() {
		return memory.read<struct FName>(m_addr + 504);
	}
	struct FName GetScopeZoomBlackoutDensityParameterName() {
		return memory.read<struct FName>(m_addr + 512);
	}
	struct FName GetScopeZoomChromaticAberrationDampeningParameterName() {
		return memory.read<struct FName>(m_addr + 520);
	}
	struct FName GetScopeZoomCrosshairBaseScaleParameterName() {
		return memory.read<struct FName>(m_addr + 528);
	}
	struct FName GetScopeZoomCrosshairDepthOffsetMultiplierParameterName() {
		return memory.read<struct FName>(m_addr + 536);
	}
	struct FName GetScopeZoomCrosshairScaleMultiplierParameterName() {
		return memory.read<struct FName>(m_addr + 544);
	}
	struct FName GetScopeZoomDistortionPowerParameterName() {
		return memory.read<struct FName>(m_addr + 552);
	}
	struct FName GetScopeZoomDistortionScaleParameterName() {
		return memory.read<struct FName>(m_addr + 560);
	}
	struct FName GetScopeZoomEyeDistanceBlackoutMultiplierParameterName() {
		return memory.read<struct FName>(m_addr + 568);
	}
	struct FName GetScopeZoomGlowIntensityAtNightParameterName() {
		return memory.read<struct FName>(m_addr + 576);
	}
	struct FName GetScopeZoomLensDepthOffsetMultiplierParameterName() {
		return memory.read<struct FName>(m_addr + 584);
	}
	struct FName GetScopeZoomLensScaleParameterName() {
		return memory.read<struct FName>(m_addr + 592);
	}
	struct FName GetScopeZoomLensUIScaleParameterName() {
		return memory.read<struct FName>(m_addr + 600);
	}
	struct FName GetScopeZoomLensZoomParameterName() {
		return memory.read<struct FName>(m_addr + 608);
	}
	struct FName GetScopeZoomOptimalEyeDistanceParameterName() {
		return memory.read<struct FName>(m_addr + 616);
	}
	struct FName GetScopeZoomCrosshairCenterScreenOffsetParameterName() {
		return memory.read<struct FName>(m_addr + 624);
	}
	struct FName GetScopeZoomLensCenterScreenOffsetParameterName() {
		return memory.read<struct FName>(m_addr + 632);
	}
	struct FName GetScopeZoomCrosshairParameterName() {
		return memory.read<struct FName>(m_addr + 640);
	}
	struct FName GetScopeZoomCrosshairColorParameterName() {
		return memory.read<struct FName>(m_addr + 648);
	}
	struct FName GetScopeZoomCrosshairColorAtNightParameterName() {
		return memory.read<struct FName>(m_addr + 656);
	}
	struct FName GetScopeZoomCrosshairGlowColorParameterName() {
		return memory.read<struct FName>(m_addr + 664);
	}
	struct FName GetScopeZoomDirtMaskParameterName() {
		return memory.read<struct FName>(m_addr + 672);
	}
	struct FName GetScopeZoomDirtinessParameterName() {
		return memory.read<struct FName>(m_addr + 680);
	}
	struct FName GetScopeZoomDarkeningParameterName() {
		return memory.read<struct FName>(m_addr + 688);
	}
	struct FName GetScopeZoomLensNormalMapParameterName() {
		return memory.read<struct FName>(m_addr + 696);
	}
	struct FName GetScopeZoomLensUIParameterName() {
		return memory.read<struct FName>(m_addr + 704);
	}
	struct UMaterialInterface GetInjuryMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetTraumaMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetBulletHitMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetSickMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetColdMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetHotMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetFatigueMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetHallucinationMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetEyePressureMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetBloodyEyesMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetRadiationMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetBlackoutMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetBlurredVisionMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetDepthOfFieldMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetPhoenixTearsMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FVector4 GetHeightenedSensesSaturationColor() {
		return memory.read<struct FVector4>(m_addr + 832);
	}
	struct FPostProcessSettings Get_postProcessSettings() {
		return memory.read<struct FPostProcessSettings>(m_addr + 848);
	}
	struct UMaterialInstanceDynamic Get_doubleVisionIntensityMaterialInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3720);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInterface Get_headgearOverlayMaterialInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3728);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_scopeZoomMaterialInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3736);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_fallingBlurMaterialInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3744);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInterface Get_underwaterPostProcessingCurrent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3752);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface Get_underwaterPostProcessingLast() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3760);
		return struct UMaterialInterface(ptr_addr);
	}
	float Get_underwaterPostProcessingBlendTime() {
		return memory.read<float>(m_addr + 3768);
	}
	float Get_DOFBlurTime() {
		return memory.read<float>(m_addr + 3780);
	}
	float Get_DOFClearBlurTime() {
		return memory.read<float>(m_addr + 3784);
	}
	float Get_DOFScopingBlurTime() {
		return memory.read<float>(m_addr + 3788);
	}
	float Get_DOFBlurDistanceADS() {
		return memory.read<float>(m_addr + 3792);
	}
	float Get_DOFFstopADS() {
		return memory.read<float>(m_addr + 3796);
	}
	struct UMaterialInstanceDynamic Get_injuryMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3800);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_traumaMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3816);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_hallucinationMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3832);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_eyePressureMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3848);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_bloodyEyesMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3864);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_bulletHitMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3880);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_sickMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3896);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_coldMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3912);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_hotMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3928);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_fatigueMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3944);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_radiationMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3960);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_blackoutMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3976);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_blurredVisionMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3992);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_depthOfFieldMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4008);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic Get_phoenixTearsMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4024);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVisualOverlayItemTag
{
public:
	UVisualOverlayItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetOverlayMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UMaterialInterface(ptr_addr);
	}
	int32_t GetPriority() {
		return memory.read<int32_t>(m_addr + 56);
	}
	bool GetShouldBeVisibleInFirstPersonView() {
		return memory.read<bool>(m_addr + 60);
	}
	bool GetShouldBeVisibleInThirdPersonView() {
		return memory.read<bool>(m_addr + 61);
	}

private:
	std::uint64_t m_addr = 0;
};


class AVolumeZone
{
public:
	AVolumeZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UZoneConfigurationDataAsset Getconfiguration() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct UZoneConfigurationDataAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AVoteSystemManager
{
public:
	AVoteSystemManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UVoteTopic> GetVoteTopics() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct TArray<UVoteTopic>(ptr_addr);
	}
	struct UUpdateableNotificationDescription Get_activeTopicDesc() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UUpdateableNotificationDescription(ptr_addr);
	}
	struct UVoteTopic Get_activeTopic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UVoteTopic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVoteTopic
{
public:
	UVoteTopic(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWarning
{
public:
	UWarning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FMessageStruct> GetMessageQueue() {
		return memory.read<struct TArray<struct FMessageStruct>>(m_addr + 608);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWarningNotificationDescription
{
public:
	UWarningNotificationDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 64);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 80);
	}
	struct FColor GetColor() {
		return memory.read<struct FColor>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWarningSignWidget
{
public:
	UWarningSignWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Get_type() {
		return memory.read<uint8_t >(m_addr + 608);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponRevolverAnimInstance
{
public:
	UWeaponRevolverAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_useDrumRotation() {
		return memory.read<bool>(m_addr + 776);
	}
	float Get_drumRotation() {
		return memory.read<float>(m_addr + 780);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWaterSurfaceAssetData
{
public:
	UWaterSurfaceAssetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWaypointScreenWidget
{
public:
	UWaypointScreenWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UWaypointWidgetBase GetWaypointClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return UWaypointWidgetBase(ptr_addr);
	}
	struct TArray<struct UWaypointWidgetBase> Get_waypoints() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct TArray<struct UWaypointWidgetBase>(ptr_addr);
	}
	struct UCanvasPanel GetWaypointPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UCanvasPanel(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWaypointWidget
{
public:
	UWaypointWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetEmphasis() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UImage(ptr_addr);
	}
	struct UImage GetBarBG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UImage(ptr_addr);
	}
	struct UImage GetBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UImage(ptr_addr);
	}
	struct UImage GetBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UImage(ptr_addr);
	}
	struct UImage GetBigPointer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UImage(ptr_addr);
	}
	struct UImage GetSmallPointer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UImage(ptr_addr);
	}
	struct UImage GetIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UImage(ptr_addr);
	}
	struct UImage GetAccent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetLabel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetDistance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UTextBlock(ptr_addr);
	}
	struct UMaterialInterface Get_barBrushMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemWeaponState
{
public:
	UItemWeaponState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetZeroRange() {
		return memory.read<int32_t>(m_addr + 256);
	}
	uint8_t  GetFiringMode() {
		return memory.read<uint8_t >(m_addr + 260);
	}
	uint8_t  Getmalfunction() {
		return memory.read<uint8_t >(m_addr + 261);
	}
	struct TArray<struct FAmmunitionData> GetLoadedAmmoData() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 264);
	}
	struct TArray<struct FAmmunitionData> GetInternalMagazineAmmoData() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 280);
	}
	UObject GetLoadedAmmunitionItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return UObject(ptr_addr);
	}
	struct TArray<struct FEntityId> GetWeaponAttachments() {
		return memory.read<struct TArray<struct FEntityId>>(m_addr + 304);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponActionRocketLauncherArmSequence
{
public:
	UWeaponActionRocketLauncherArmSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponActionRocketLauncherUnarmSequence
{
public:
	UWeaponActionRocketLauncherUnarmSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponActionWornOutFiringConditions
{
public:
	UWeaponActionWornOutFiringConditions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponAmmoDisplayContainerWidget
{
public:
	UWeaponAmmoDisplayContainerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UUserWidget Get_ammoDisplayWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return UUserWidget(ptr_addr);
	}
	struct UVerticalBox Get_displayList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox Get_displayListCentered() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UVerticalBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponAttachmentState
{
public:
	UWeaponAttachmentState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponAttachmentMagazineState
{
public:
	UWeaponAttachmentMagazineState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAmmunitionData> GetammoData() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWeaponAttachmentSight
{
public:
	AWeaponAttachmentSight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWeaponSightItemComponent Get_weaponSightItemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2352);
		return struct UWeaponSightItemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWeaponAttachmentScope
{
public:
	AWeaponAttachmentScope(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWeaponScopeItemComponent Get_weaponScopeItemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2360);
		return struct UWeaponScopeItemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWorldDoorOwnershipManager
{
public:
	UWorldDoorOwnershipManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWeaponAttachmentSuppressor
{
public:
	AWeaponAttachmentSuppressor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMuzzleSocketName() {
		return memory.read<struct FName>(m_addr + 2352);
	}
	float GetNoiseMultiplier() {
		return memory.read<float>(m_addr + 2360);
	}
	bool GetIsImprovised() {
		return memory.read<bool>(m_addr + 2364);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWeaponAttachmentUniversalFlashlight
{
public:
	AWeaponAttachmentUniversalFlashlight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<AWeapon, struct UStaticMesh*> GetWeaponToStaticMeshMapping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2392);
		return struct TMap<AWeapon, struct UStaticMesh*>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWeaponAutoCrossbow
{
public:
	AWeaponAutoCrossbow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWeaponStateFiring GetFireState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12128);
		return struct UWeaponStateFiring(ptr_addr);
	}
	float Get_muzzleVelocity() {
		return memory.read<float>(m_addr + 12136);
	}
	float Get_probabilityForLaughingSoundEffect() {
		return memory.read<float>(m_addr + 12140);
	}
	struct FCharacterAndItemAnimation Get_autoCrossbowFireAnimation() {
		return memory.read<struct FCharacterAndItemAnimation>(m_addr + 12144);
	}
	struct UAkAudioEvent Get_autoCrossbowLaughingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12160);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UWeaponState Get_autoCrossbowActiveState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12168);
		return struct UWeaponState(ptr_addr);
	}
	UGameResourceType Get_fuelType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 17200);
		return UGameResourceType(ptr_addr);
	}
	struct FGameplayTagContainer Get_inFuelingSocketTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 17208);
	}
	float Get_maxFuelAmount() {
		return memory.read<float>(m_addr + 17240);
	}
	float Get_fuelUsagePerHour() {
		return memory.read<float>(m_addr + 17244);
	}
	float Get_fuelUsagePerHourWhenDamaged() {
		return memory.read<float>(m_addr + 17248);
	}
	float Get_fuelFillingDurationPerAmountFilled() {
		return memory.read<float>(m_addr + 17252);
	}
	float Get_fuelFillingDurationPerAmountFilledWhenDamaged() {
		return memory.read<float>(m_addr + 17256);
	}
	float Get_fuelFillingExperiencePerAmount() {
		return memory.read<float>(m_addr + 17260);
	}
	float Get_currentFuelAmount() {
		return memory.read<float>(m_addr + 17264);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWeaponBow
{
public:
	AWeaponBow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBodyWeaponAnimation GetInsertArrowAnimations() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 12120);
	}
	struct FBodyWeaponAnimation GetRemoveArrowAnimations() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 12136);
	}
	struct FBodyWeaponAnimation GetUnableToDrawAnimations() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 12152);
	}
	struct FBodyWeaponAnimation GetDrawAnimations2[3]() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 12168);
	}
	struct FBodyWeaponAnimation GetDrawWhileAnticipatingDrawAnimations2[3]() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 12216);
	}
	struct FBodyWeaponAnimation GetCancelDrawAnimations2[3]() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 12264);
	}
	struct FBodyWeaponAnimation GetLooseAnimations2[3]() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 12312);
	}
	struct FBodyWeaponAnimation GetLooseLastShotAnimations2[3]() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 12360);
	}
	struct FWeaponBowAimOffsets GetAimOffsets[7]() {
		return memory.read<struct FWeaponBowAimOffsets>(m_addr + 12408);
	}
	struct FWeaponBowArmsShake GetArmsShakeAnimamtion[4]() {
		return memory.read<struct FWeaponBowArmsShake>(m_addr + 12576);
	}
	struct FBodyWeaponAnimation GetDrawAnimations() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 12768);
	}
	struct FBodyWeaponAnimation GetDrawWhileAnticipatingDrawAnimations() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 12784);
	}
	struct FBodyWeaponAnimation GetCancelDrawAnimations() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 12800);
	}
	struct FBodyWeaponAnimation GetLooseAnimations() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 12816);
	}
	struct FBodyWeaponAnimation GetLooseLastShotAnimations() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 12832);
	}
	struct UAnimSequenceBase GetWeaponAimingDownTheSightsAnimationPose() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12848);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetWeaponAimingDownTheSightsStillAnimationPose() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12856);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UWeaponState GetAnticipateDrawState2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12864);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponState GetDrawState3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12872);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponState GetCancelFiringState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12880);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponState GetAnticipateFiringState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12888);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponState GetFireState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12896);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponState GetFireAndInsertArrowState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12904);
		return struct UWeaponState(ptr_addr);
	}
	struct UAkAudioEvent Get_fireNoArrowAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12912);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FName Get_arrowSocketName() {
		return memory.read<struct FName>(m_addr + 12920);
	}
	float Get_muzzleVelocity() {
		return memory.read<float>(m_addr + 12928);
	}
	float Get_drawWeight() {
		return memory.read<float>(m_addr + 12932);
	}
	float Get_compoundBowFullDrawHoldTime() {
		return memory.read<float>(m_addr + 12936);
	}
	float Get_armShakeTimerDecreaseRate() {
		return memory.read<float>(m_addr + 12940);
	}
	float Get_damageOnUsage() {
		return memory.read<float>(m_addr + 12944);
	}
	struct UWeaponState Get_bowActiveState2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12952);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponState Get_bowInsertArrowState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12960);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponState Get_bowRemoveArrowState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12968);
		return struct UWeaponState(ptr_addr);
	}
	struct UWeaponStateFiring Get_bowFiringState2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12976);
		return struct UWeaponStateFiring(ptr_addr);
	}
	uint8_t  Get_bowState() {
		return memory.read<uint8_t >(m_addr + 13032);
	}
	struct FWeaponBowStateDataReplicated Get_weaponBowStateDataReplicated() {
		return memory.read<struct FWeaponBowStateDataReplicated>(m_addr + 13036);
	}
	struct UStaticMeshComponent Get_arrowMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 13048);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct FProjectileArrowData Get_projectileArrowData() {
		return memory.read<struct FProjectileArrowData>(m_addr + 13056);
	}
	bool Get_isCompound() {
		return memory.read<bool>(m_addr + 13168);
	}
	struct UStaticMeshComponent Get_handTriggerMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 13176);
		return struct UStaticMeshComponent(ptr_addr);
	}
	bool Get_ignoreArrowStiffness() {
		return memory.read<bool>(m_addr + 13184);
	}
	float Get_letOff() {
		return memory.read<float>(m_addr + 13188);
	}
	struct FName Get_handTriggerBoneName() {
		return memory.read<struct FName>(m_addr + 13192);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWeaponCrossbow
{
public:
	AWeaponCrossbow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWeaponStateFiring GetFireState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12120);
		return struct UWeaponStateFiring(ptr_addr);
	}
	struct UWeaponState GetFireAndInsertArrowState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12128);
		return struct UWeaponState(ptr_addr);
	}
	float Get_muzzleVelocity() {
		return memory.read<float>(m_addr + 12136);
	}
	struct FCharacterAndItemAnimation Get_crossbowFireAnimation() {
		return memory.read<struct FCharacterAndItemAnimation>(m_addr + 12144);
	}
	struct UAkAudioEvent Get_crossbowFireAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12160);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_crossbowDryFireAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12168);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UWeaponState Get_crossbowActiveState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12176);
		return struct UWeaponState(ptr_addr);
	}
	bool Get_isCocked() {
		return memory.read<bool>(m_addr + 12184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponDisassemblyToolItemTag
{
public:
	UWeaponDisassemblyToolItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWeaponHolsterItem
{
public:
	AWeaponHolsterItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon Get_holsteredWeaponRep() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2496);
		return struct AWeapon(ptr_addr);
	}
	struct FName Get_maxLocationSocketName() {
		return memory.read<struct FName>(m_addr + 2504);
	}
	struct FName Get_minLocationSocketName() {
		return memory.read<struct FName>(m_addr + 2512);
	}
	struct FName Get_fatLocationSocketName() {
		return memory.read<struct FName>(m_addr + 2520);
	}
	struct FName Get_muscleLocationSocketName() {
		return memory.read<struct FName>(m_addr + 2528);
	}
	struct FName Get_leanLocationSocketName() {
		return memory.read<struct FName>(m_addr + 2536);
	}
	struct FName Get_staticMeshSocketName() {
		return memory.read<struct FName>(m_addr + 2544);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponItemEntitySetup
{
public:
	UWeaponItemEntitySetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWeaponRevolver
{
public:
	AWeaponRevolver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWeaponStateFiring GetFireState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12120);
		return struct UWeaponStateFiring(ptr_addr);
	}
	struct UWeaponState Get_revolverActiveState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12128);
		return struct UWeaponState(ptr_addr);
	}
	struct FCharacterAndItemAnimation Get_fireAnimation() {
		return memory.read<struct FCharacterAndItemAnimation>(m_addr + 12136);
	}
	struct FCharacterAndItemAnimation Get_dryFireAnimation() {
		return memory.read<struct FCharacterAndItemAnimation>(m_addr + 12152);
	}
	struct FCharacterAndItemAnimation Get_rollDrumAnimation() {
		return memory.read<struct FCharacterAndItemAnimation>(m_addr + 12168);
	}
	struct UAnimMontage Get_russianRouletteMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 12184);
		return struct UAnimMontage(ptr_addr);
	}
	float Get_drumRotationOffset() {
		return memory.read<float>(m_addr + 12192);
	}
	int32_t Get_firingIndex() {
		return memory.read<int32_t>(m_addr + 12196);
	}
	float Get_drumRotationInterpolatorSpeed() {
		return memory.read<float>(m_addr + 12216);
	}
	uint8_t  Get_drumRotationDirection() {
		return memory.read<uint8_t >(m_addr + 12220);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponRocketLauncherAnimInstance
{
public:
	UWeaponRocketLauncherAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Get_isArmed() {
		return memory.read<bool>(m_addr + 776);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponScopeItemComponent
{
public:
	UWeaponScopeItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetScopeViewOffset() {
		return memory.read<struct FVector>(m_addr + 288);
	}
	struct UMaterialInterface GetScopeLensPostProcess() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FName GetLensZoomParameterName() {
		return memory.read<struct FName>(m_addr + 312);
	}
	bool GetFrontFocalPlane() {
		return memory.read<bool>(m_addr + 320);
	}
	bool GetHasCrosshairParallax() {
		return memory.read<bool>(m_addr + 321);
	}
	struct UStaticMesh GetScopeViewMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 328);
		return struct UStaticMesh(ptr_addr);
	}
	struct UStaticMesh GetScopeViewLensMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 336);
		return struct UStaticMesh(ptr_addr);
	}
	bool Get_canToggleDownTheSightsMode() {
		return memory.read<bool>(m_addr + 344);
	}
	struct UTextureRenderTarget2D GetTextRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 352);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	int32_t GetWindageInitialOffset() {
		return memory.read<int32_t>(m_addr + 360);
	}
	struct UAkAudioEvent GetWindageClickAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 368);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UStaticMeshComponent Get_scopeViewMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 376);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent Get_scopeViewLensMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return struct UStaticMeshComponent(ptr_addr);
	}
	float Get_fakeGlassMinOpacity() {
		return memory.read<float>(m_addr + 392);
	}
	float Get_displayBrightnessMultiplier() {
		return memory.read<float>(m_addr + 492);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponScopeWidget
{
public:
	UWeaponScopeWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetReticleTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTexture2D(ptr_addr);
	}
	struct UTextureRenderTarget2D GetTextRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	float GetFadeFactor() {
		return memory.read<float>(m_addr + 624);
	}
	float GetOnHideDelay() {
		return memory.read<float>(m_addr + 628);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponFirstPersonAnimationsDataAsset
{
public:
	UWeaponFirstPersonAnimationsDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FItemFirstPersonUpperBodyAnimationsData GetUpperBodyAimingHip() {
		return memory.read<struct FItemFirstPersonUpperBodyAnimationsData>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponSightItemComponent
{
public:
	UWeaponSightItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetViewCenterSocketName() {
		return memory.read<struct FName>(m_addr + 200);
	}
	struct FVector GetAimingDownTheSightsLocationOffset() {
		return memory.read<struct FVector>(m_addr + 208);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponState
{
public:
	UWeaponState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateActive
{
public:
	UWeaponStateActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateActiveManualFiring
{
public:
	UWeaponStateActiveManualFiring(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateAutoCrossbowActive
{
public:
	UWeaponStateAutoCrossbowActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateAutoCrossbowFire
{
public:
	UWeaponStateAutoCrossbowFire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateBowAnticipateDraw
{
public:
	UWeaponStateBowAnticipateDraw(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateBowAnticipateFiring
{
public:
	UWeaponStateBowAnticipateFiring(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateBowCancelFiring
{
public:
	UWeaponStateBowCancelFiring(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateBowFireAndInsertArrow
{
public:
	UWeaponStateBowFireAndInsertArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateBowFiring
{
public:
	UWeaponStateBowFiring(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateBowInsertArrow
{
public:
	UWeaponStateBowInsertArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateBowRemoveArrow
{
public:
	UWeaponStateBowRemoveArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateClearMalfunction
{
public:
	UWeaponStateClearMalfunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateCrossbowActive
{
public:
	UWeaponStateCrossbowActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateCrossbowFire
{
public:
	UWeaponStateCrossbowFire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateCrossbowFireAndInsertArrow
{
public:
	UWeaponStateCrossbowFireAndInsertArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateFiringManual
{
public:
	UWeaponStateFiringManual(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateFiringSemiAutomatic
{
public:
	UWeaponStateFiringSemiAutomatic(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateInactive
{
public:
	UWeaponStateInactive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateReload
{
public:
	UWeaponStateReload(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWeaponActionReloadSequence Get_currentReloadActionSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UWeaponActionReloadSequence(ptr_addr);
	}
	struct FWeaponReloadData Get_reloadData() {
		return memory.read<struct FWeaponReloadData>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateRevolverFire
{
public:
	UWeaponStateRevolverFire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateRocketLauncherActiveUnarmed
{
public:
	UWeaponStateRocketLauncherActiveUnarmed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeaponStateUnEquipping
{
public:
	UWeaponStateUnEquipping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWeedRemovalToolItemTag
{
public:
	UWeedRemovalToolItemTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWheelBarrow
{
public:
	AWheelBarrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_driverCapsuleMaxDepenetrationVelocity() {
		return memory.read<float>(m_addr + 2808);
	}
	struct FVector Get_driverCapsuleRelativeLocation() {
		return memory.read<struct FVector>(m_addr + 2812);
	}
	float Get_driverCapsuleMass() {
		return memory.read<float>(m_addr + 2824);
	}
	float Get_driverCapsuleLinearDamping() {
		return memory.read<float>(m_addr + 2828);
	}
	float Get_driverCapsuleAngularDamping() {
		return memory.read<float>(m_addr + 2832);
	}
	struct FVector Get_driverCapsuleConstraintRelativeLocation() {
		return memory.read<struct FVector>(m_addr + 2836);
	}
	float Get_driverCapsuleConstraintSwingLimit() {
		return memory.read<float>(m_addr + 2848);
	}
	float Get_driverCapsuleConstraintTwistLimit() {
		return memory.read<float>(m_addr + 2852);
	}
	struct FTransform Get_driverTransformRelativeToCapsule() {
		return memory.read<struct FTransform>(m_addr + 2864);
	}
	struct FRuntimeFloatCurve Get_driverActionDifficultyVsSpeed() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 2912);
	}
	struct FRuntimeFloatCurve Get_driverActionDifficultyVsSpeedWhenLimping() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3048);
	}
	struct FRuntimeFloatCurve Get_driverBaseConstitutionChangeRateModifierVsSpeed() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3184);
	}
	struct FRuntimeFloatCurve Get_driverBaseConstitutionChangeRateModifierVsSpeedWhenLimping() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3320);
	}
	struct FRuntimeFloatCurve Get_driverStrengthGainSpeedInfluenceVsSpeed() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3456);
	}
	struct FRuntimeFloatCurve Get_driverStrengthGainSpeedInfluenceVsSpeedWhenLimping() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3592);
	}
	struct FFloatInterval Get_loadModifierInterpedWithDriverStrength() {
		return memory.read<struct FFloatInterval>(m_addr + 3728);
	}
	struct FWheelBarrowParametersPerMovementPace Get_parametersPerMovementPace[4]() {
		return memory.read<struct FWheelBarrowParametersPerMovementPace>(m_addr + 3736);
	}
	struct FFloatInterval Get_maxSpeedModifierInterpedWithDriverDexterity() {
		return memory.read<struct FFloatInterval>(m_addr + 3864);
	}
	struct FRuntimeFloatCurve Get_weightLoadFactorVsFloorSlopeAngle() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 3872);
	}
	float Get_forwardDriveForceMagnitude() {
		return memory.read<float>(m_addr + 4008);
	}
	float Get_reverseDriveForceMagnitude() {
		return memory.read<float>(m_addr + 4012);
	}
	float Get_steerForceMagnitude() {
		return memory.read<float>(m_addr + 4016);
	}
	float Get_steerForceMagnitudeWhenLimping() {
		return memory.read<float>(m_addr + 4020);
	}
	float Get_steerRollTorqueMagnitude() {
		return memory.read<float>(m_addr + 4024);
	}
	float Get_meshBrakeForceScale() {
		return memory.read<float>(m_addr + 4028);
	}
	float Get_meshBrakeForceMagnitudeWhenCloseToMaxSpeed() {
		return memory.read<float>(m_addr + 4032);
	}
	float Get_meshSidewaysBrakeForceScale() {
		return memory.read<float>(m_addr + 4036);
	}
	float Get_driverCapsuleBrakeForceScale() {
		return memory.read<float>(m_addr + 4040);
	}
	float Get_driverCapsuleBrakeForceMagnitudeWhenCloseToMaxSpeed() {
		return memory.read<float>(m_addr + 4044);
	}
	float Get_driverCapsuleSidewaysBrakeForceScale() {
		return memory.read<float>(m_addr + 4048);
	}
	float Get_physicsMaterialFrictionWhenDriven() {
		return memory.read<float>(m_addr + 4052);
	}
	float Get_physicsMaterialRestitutionWhenDriven() {
		return memory.read<float>(m_addr + 4056);
	}
	bool Get_stickyFrictionEnabled() {
		return memory.read<bool>(m_addr + 4060);
	}
	float Get_stickyFrictionSpeedThreshold() {
		return memory.read<float>(m_addr + 4064);
	}
	float Get_stickyFriction() {
		return memory.read<float>(m_addr + 4068);
	}
	float Get_healthDrainPerSpeed() {
		return memory.read<float>(m_addr + 4072);
	}
	float Get_healthDrainPerLoad() {
		return memory.read<float>(m_addr + 4076);
	}
	float Get_healthDrainUpdateInterval() {
		return memory.read<float>(m_addr + 4080);
	}
	float Get_speedThresholdToEvictAllMountees() {
		return memory.read<float>(m_addr + 4088);
	}
	float Get_vertSpeedThresholdToEvictAllMountees() {
		return memory.read<float>(m_addr + 4092);
	}
	struct UAkAudioEvent Get_startedMovingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4096);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_stoppedMovingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4104);
		return struct UAkAudioEvent(ptr_addr);
	}
	float Get_sendStateFrequency() {
		return memory.read<float>(m_addr + 4116);
	}
	struct UPhysicsConstraintComponent Get_driverPhysicsConstraintComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4120);
		return struct UPhysicsConstraintComponent(ptr_addr);
	}
	struct UPhysicalMaterial Get_physicsMaterialWhenDriven() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4136);
		return struct UPhysicalMaterial(ptr_addr);
	}
	struct UWheelBarrowDriverCapsuleComponent Get_driverPhysicsCapsuleComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4536);
		return struct UWheelBarrowDriverCapsuleComponent(ptr_addr);
	}
	struct TArray<struct TWeakObjectPtr<UVehicleAttachment_Wheel>> Get_attachedWheels() {
		return memory.read<struct TArray<struct TWeakObjectPtr<UVehicleAttachment_Wheel>>>(m_addr + 4544);
	}
	struct UStaticMeshComponent Get_wheelMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4624);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWheelBarrowMountSlot
{
public:
	UWheelBarrowMountSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWheelBarrowDriverMountSlot
{
public:
	UWheelBarrowDriverMountSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBlendSpace Get_walkJogLimpingAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct UBlendSpace(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWheeledVehicle2W
{
public:
	AWheeledVehicle2W(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Get_leanForcePosition() {
		return memory.read<struct FVector>(m_addr + 3512);
	}
	float Get_leanForceStrength() {
		return memory.read<float>(m_addr + 3524);
	}
	float Get_xCOMOffset() {
		return memory.read<float>(m_addr + 3528);
	}
	float Get_zCOMOffset() {
		return memory.read<float>(m_addr + 3532);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWheeledVehicleBaseAnimInstance
{
public:
	UWheeledVehicleBaseAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWheeledVehicleBase Get_vehicleBase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2624);
		return struct AWheeledVehicleBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWheeledVehicle4W
{
public:
	AWheeledVehicle4W(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AZombieCorpse
{
public:
	AZombieCorpse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMesh GetStrippedMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct USkeletalMesh(ptr_addr);
	}
	bool Get_isSearched() {
		return memory.read<bool>(m_addr + 952);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWheeledVehicle4WAnimInstance
{
public:
	UWheeledVehicle4WAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWorldCraftingMarkerWidget
{
public:
	UWorldCraftingMarkerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCraftingInfoWidget Get_craftingInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UCraftingInfoWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWorldEventManager
{
public:
	AWorldEventManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<AWorldEvent> GetEventTypes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct TArray<AWorldEvent>(ptr_addr);
	}
	float GetTimeBetweenEventsMin() {
		return memory.read<float>(m_addr + 560);
	}
	float GetTimeBetweenEventsMax() {
		return memory.read<float>(m_addr + 564);
	}
	struct TArray<struct AWorldEvent> Get_events() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct TArray<struct AWorldEvent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWorldItemSpawner
{
public:
	AWorldItemSpawner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWorldItemSpawnerComponent Get_spawnerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UWorldItemSpawnerComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWorldItemSpawnerComponent
{
public:
	UWorldItemSpawnerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> Get_item() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1128);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWorldStatics
{
public:
	UWorldStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UXMLStatics
{
public:
	UXMLStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UYesNoDialog
{
public:
	UYesNoDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock Get_textDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UConZStandardButton Get_buttonYes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UConZStandardButton(ptr_addr);
	}
	struct UConZStandardButton Get_buttonNo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UConZStandardButton(ptr_addr);
	}
	struct FText Get_dialogMessage() {
		return memory.read<struct FText>(m_addr + 680);
	}

private:
	std::uint64_t m_addr = 0;
};


class UZombieAnimInstance2
{
public:
	UZombieAnimInstance2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetHasOwnerBegunPlay() {
		return memory.read<bool>(m_addr + 696);
	}
	bool GetIsAlive() {
		return memory.read<bool>(m_addr + 697);
	}
	bool GetIsInRagdoll() {
		return memory.read<bool>(m_addr + 698);
	}
	bool GetIsDeadAndCompletelyInRagdoll() {
		return memory.read<bool>(m_addr + 699);
	}
	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 700);
	}
	bool GetIsStanceRelaxed() {
		return memory.read<bool>(m_addr + 701);
	}
	bool GetIsStanceLying() {
		return memory.read<bool>(m_addr + 702);
	}
	bool GetIsStanceAlerted() {
		return memory.read<bool>(m_addr + 703);
	}
	bool GetIsStanceCombat() {
		return memory.read<bool>(m_addr + 704);
	}
	int32_t GetNumRelaxedIdleVariations() {
		return memory.read<int32_t>(m_addr + 708);
	}
	int32_t GetRelaxedIdleVariationIndex() {
		return memory.read<int32_t>(m_addr + 712);
	}
	struct FVector GetAcceleration() {
		return memory.read<struct FVector>(m_addr + 716);
	}
	bool GetWantsToMove() {
		return memory.read<bool>(m_addr + 728);
	}
	struct FVector GetVelocity() {
		return memory.read<struct FVector>(m_addr + 732);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 744);
	}
	float GetSpeedXY() {
		return memory.read<float>(m_addr + 748);
	}
	float GetWalkStoppingDistance() {
		return memory.read<float>(m_addr + 752);
	}
	float GetWalkStoppingTime() {
		return memory.read<float>(m_addr + 756);
	}
	bool GetIsFalling() {
		return memory.read<bool>(m_addr + 760);
	}
	bool GetIsJumping() {
		return memory.read<bool>(m_addr + 761);
	}
	float GetJumpApex() {
		return memory.read<float>(m_addr + 764);
	}
	float GetJumpDuration() {
		return memory.read<float>(m_addr + 768);
	}
	struct FRotator GetAimOffset() {
		return memory.read<struct FRotator>(m_addr + 772);
	}
	bool GetCanStartGoToLoop() {
		return memory.read<bool>(m_addr + 784);
	}
	struct UAnimSequenceBase GetRelaxedWalkLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetRelaxedWalkLoopAnimationPlayRate() {
		return memory.read<float>(m_addr + 800);
	}
	struct UAnimSequenceBase GetCombatRunStartAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetCombatRunStartAnimationPlayRate() {
		return memory.read<float>(m_addr + 816);
	}
	struct UAnimSequenceBase GetCombatRunLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetCombatRunLoopAnimationPlayRate() {
		return memory.read<float>(m_addr + 832);
	}
	struct UAnimSequenceBase GetCombatRunStopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetCombatRunStopAnimationStartTime() {
		return memory.read<float>(m_addr + 848);
	}
	float GetCombatRunStopAnimationPlayRate() {
		return memory.read<float>(m_addr + 852);
	}
	float GetMinUpperBodyBlendWeight() {
		return memory.read<float>(m_addr + 856);
	}
	float GetUpperBodyBlendMaxSpeedXY() {
		return memory.read<float>(m_addr + 860);
	}
	float GetUpperBodyBlendWeight() {
		return memory.read<float>(m_addr + 864);
	}

private:
	std::uint64_t m_addr = 0;
};


class AZombieKamikazeDummyTrap
{
public:
	AZombieKamikazeDummyTrap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UZombieKamikazeComponent> Get_owningComponent() {
		return memory.read<struct TWeakObjectPtr<UZombieKamikazeComponent>>(m_addr + 2656);
	}

private:
	std::uint64_t m_addr = 0;
};


class UZombieMovementComponent2
{
public:
	UZombieMovementComponent2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UZombieSoundComponent2
{
public:
	UZombieSoundComponent2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetRelaxedStanceEnteredAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetAlertedStanceEnteredAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetCombatStanceEnteredAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetFootstepAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopAllAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetDeathAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStartSearchCorpseAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopSearchCorpseAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UZoneConfigurationDataAsset
{
public:
	UZoneConfigurationDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FZoneConfiguration Getconfiguration() {
		return memory.read<struct FZoneConfiguration>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


