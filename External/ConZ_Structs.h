#pragma once 
#include <SDK_Engine_Objects.h> 
 
 
class FChooseItemObstructionSide
{
public:
	FChooseItemObstructionSide(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACharacter(ptr_addr);
	}
	float GetexistingSide() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddStack
{
public:
	FAddStack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TScriptInterface<IInventoryNode> GetItem() {
		return memory.read<struct TScriptInterface<IInventoryNode>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGearboxHandlingParameters
{
public:
	FGearboxHandlingParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetGearChangeDelayMultiplier() {
		return memory.read<float>(m_addr + 0);
	}
	float GetGearUpRatioMultiplier() {
		return memory.read<float>(m_addr + 4);
	}
	float GetGearDownRatioMultiplier() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDropOperation
{
public:
	FOnDropOperation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDragDropOperation GetOperation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDragDropOperation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_PlayMontage
{
public:
	FServer_PlayMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRangedWeaponsSkill
{
public:
	FGetRangedWeaponsSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URangedWeaponsSkill GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct URangedWeaponsSkill(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTargetCrouchStage
{
public:
	FGetTargetCrouchStage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisoner_GetComaDuration
{
public:
	FPrisoner_GetComaDuration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_UpdateTraderData
{
public:
	FClient_UpdateTraderData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPriceUpdateData GetPriceUpdateData() {
		return memory.read<struct FPriceUpdateData>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFishingComponent
{
public:
	FGetFishingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerFishingComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerFishingComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBankAccountRegistryRequestData
{
public:
	FBankAccountRegistryRequestData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetWaterWeight
{
public:
	FGetWaterWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTakeItemInHandsOnServer
{
public:
	FTakeItemInHandsOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterLegsImpactSoundData
{
public:
	FCharacterLegsImpactSoundData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<uint8_t > GetImpactSourceCategories() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 0);
	}
	struct TArray<uint8_t > GetImpactTargetCategories() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 16);
	}
	struct FCharacterImpactSounds GetSounds() {
		return memory.read<struct FCharacterImpactSounds>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FAttachToCharacterHands
{
public:
	FAttachToCharacterHands(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAwardFamePointsToOnlineFlagOwners
{
public:
	FAwardFamePointsToOnlineFlagOwners(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetflagIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GettotalFlagInterval() {
		return memory.read<float>(m_addr + 4);
	}
	float GetfameInterval() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FContainerItemDescriptorData
{
public:
	FContainerItemDescriptorData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanAutoAddItem
{
public:
	FCanAutoAddItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	char Getcolumn() {
		return memory.read<char>(m_addr + 8);
	}
	char Getrow() {
		return memory.read<char>(m_addr + 9);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 10);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentSlot
{
public:
	FVehicleAttachmentSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrimaryAssetId> GetPossibleAttachmentAssetIds() {
		return memory.read<struct TArray<struct FPrimaryAssetId>>(m_addr + 0);
	}
	struct FGameplayTagContainer GetStateTags() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 16);
	}
	struct UMaterialInstanceDynamic GetServiceModeMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMeshComponent Get_previewMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWeightPerUse
{
public:
	FGetWeightPerUse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNoiseLoudnessWhenPickedUp
{
public:
	FGetNoiseLoudnessWhenPickedUp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_UnlockedAchievement
{
public:
	FServer_UnlockedAchievement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct FString GetAchievementID() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAutoAddItemToInventoryNode
{
public:
	FAutoAddItemToInventoryNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TScriptInterface<IInventoryNode> GetItem() {
		return memory.read<struct TScriptInterface<IInventoryNode>>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnActorItemDestroyed
{
public:
	FOnActorItemDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayerLoginInfo
{
public:
	FPlayerLoginInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetUserId() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 16);
	}
	struct FString GetUserProfileName() {
		return memory.read<struct FString>(m_addr + 24);
	}
	bool GetIsUserAdmin() {
		return memory.read<bool>(m_addr + 40);
	}
	bool GetIsUserServerSettingsAdmin() {
		return memory.read<bool>(m_addr + 41);
	}
	bool GetPlayAsDrone() {
		return memory.read<bool>(m_addr + 42);
	}
	struct FDeluxeVersion GetDeluxeVersion() {
		return memory.read<struct FDeluxeVersion>(m_addr + 43);
	}
	int32_t GetServerResponsePort() {
		return memory.read<int32_t>(m_addr + 48);
	}
	struct FDbIntegerId GetServerUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_TriggerDamagedEffect
{
public:
	FClient_TriggerDamagedEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDuration() {
		return memory.read<float>(m_addr + 0);
	}
	float GetIntensity() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FEventsRankingStats
{
public:
	FEventsRankingStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFamePoints() {
		return memory.read<float>(m_addr + 8);
	}
	int32_t GetFameLevel() {
		return memory.read<int32_t>(m_addr + 12);
	}
	float GetEventScore() {
		return memory.read<float>(m_addr + 16);
	}
	int32_t GetEventKills() {
		return memory.read<int32_t>(m_addr + 20);
	}
	int32_t GetEventTeamKills() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetEventDeaths() {
		return memory.read<int32_t>(m_addr + 28);
	}
	int32_t GetEventSuicides() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetEventAssists() {
		return memory.read<int32_t>(m_addr + 36);
	}
	int32_t GetEventHeadshots() {
		return memory.read<int32_t>(m_addr + 40);
	}
	bool GetIsBanned() {
		return memory.read<bool>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDestroyedEvent
{
public:
	FOnDestroyedEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetDestroyedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVisibilityReplication
{
public:
	FVisibilityReplication(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}
	int32_t GetRepHelper() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryItemComponentReplicatedPageData
{
public:
	FInventoryItemComponentReplicatedPageData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FInventoryItemComponentElement> GetElements() {
		return memory.read<struct TArray<struct FInventoryItemComponentElement>>(m_addr + 0);
	}
	int32_t GetVersion() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAliveInGameEvent
{
public:
	FIsAliveInGameEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiplierByClass
{
public:
	FMultiplierByClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetObjectClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	float GetMultiplier() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoolAttribute
{
public:
	FGetBoolAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FTurnAwayFromActor
{
public:
	FTurnAwayFromActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor Getfoe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDropAt
{
public:
	FDropAt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetdropLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetdropRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlink
{
public:
	FBlink(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDuration() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMotionIntensitySwitchName
{
public:
	FGetMotionIntensitySwitchName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanBeCraftedByCharactrer
{
public:
	FCanBeCraftedByCharactrer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACharacter(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWidgetDisplayInfo
{
public:
	FGetWidgetDisplayInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWidgetDisplayInfo GetReturnValue() {
		return memory.read<struct FWidgetDisplayInfo>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDescription
{
public:
	FGetDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeleeAttackCapsuleHitInfo
{
public:
	FMeleeAttackCapsuleHitInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMeleeAttackCapsule GetMeleeAttackCapsule() {
		return memory.read<struct FMeleeAttackCapsule>(m_addr + 0);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 128);
	}
	uint8_t  GetHitSeverity() {
		return memory.read<uint8_t >(m_addr + 264);
	}
	uint8_t  GetAttackType() {
		return memory.read<uint8_t >(m_addr + 265);
	}
	struct FVector_NetQuantize100 GetAttackerLocation() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 268);
	}
	struct FVector_NetQuantize100 GetVictimLocation() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 280);
	}

private:
	std::uint64_t m_addr = 0;
};class FEquip
{
public:
	FEquip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AFishingRod GetFishingRod() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AFishingRod(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanAddItem
{
public:
	FCanAddItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	bool GettryToJoinItems() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_AddAttachment
{
public:
	FServer_AddAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AFishingAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AFishingAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetActorDropLocationAndRotation
{
public:
	FNetMulticast_SetActorDropLocationAndRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddToSquadOnServer
{
public:
	FAddToSquadOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetsquadId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanInitiateLockpickingFor
{
public:
	FCanInitiateLockpickingFor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanBeDroppedBy
{
public:
	FCanBeDroppedBy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanBeMeleeWeapon
{
public:
	FCanBeMeleeWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_PlayTurnMontage
{
public:
	FServer_PlayTurnMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetturnMontage() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetturnAngle() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SpawnUrinationEffects
{
public:
	FNetMulticast_SpawnUrinationEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetisForced() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetObstructionTestCapsules
{
public:
	FGetObstructionTestCapsules(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FItemObstructionTestCapsule> Getcapsules() {
		return memory.read<struct TArray<struct FItemObstructionTestCapsule>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLadderMarkersReplicator
{
public:
	FGetLadderMarkersReplicator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ALadderMarkersReplicator GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ALadderMarkersReplicator(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanStack
{
public:
	FCanStack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSwitchToVehicleSeatIndex
{
public:
	FSwitchToVehicleSeatIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanStackWith
{
public:
	FCanStackWith(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGameResourceMixingRule
{
public:
	FGameResourceMixingRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetSource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UGameResourceType(ptr_addr);
	}
	UGameResourceType GetDestination() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UGameResourceType(ptr_addr);
	}
	UGameResourceType GetResult() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UGameResourceType(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOutsideInventoryIcon
{
public:
	FGetOutsideInventoryIcon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_InsertCartridgeIntoMagazine
{
public:
	FServer_InsertCartridgeIntoMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionItem Getammo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugTextChangedDelegate__DelegateSignature
{
public:
	FDebugTextChangedDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_PlayClueSound
{
public:
	FNetMulticast_PlayClueSound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UAkAudioEvent> GetclueAudioEvent() {
		return memory.read<struct TSoftObjectPtr<UAkAudioEvent>>(m_addr + 0);
	}
	struct FVector GetclueLocation() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	float GetclueHearingDistance() {
		return memory.read<float>(m_addr + 52);
	}
	float GetclueMinApparentDistance() {
		return memory.read<float>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZSquadEmblemElement
{
public:
	FConZSquadEmblemElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetShapeIndex() {
		return memory.read<char>(m_addr + 0);
	}
	char GetPrimaryColorIndex() {
		return memory.read<char>(m_addr + 1);
	}
	char GetSecondaryColorIndex() {
		return memory.read<char>(m_addr + 2);
	}
	char GetTertiaryColorIndex() {
		return memory.read<char>(m_addr + 3);
	}

private:
	std::uint64_t m_addr = 0;
};class FRepair
{
public:
	FRepair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GethealthToRepair() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SetGameEventCooldown
{
public:
	FClient_SetGameEventCooldown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getcooldown() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddAttachmentToWeapon
{
public:
	FAddAttachmentToWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetScreenPosition
{
public:
	FSetScreenPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D Getposition() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrop
{
public:
	FDrop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetwasThrown() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetdropDown() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FGameEventRewardPoints
{
public:
	FGameEventRewardPoints(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCash() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetScore() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetFamePoints() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDropAround
{
public:
	FDropAround(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAmmo
{
public:
	FGetAmmo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAmmunitionData> Getammo() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RemoveInventoryNode
{
public:
	FServer_RemoveInventoryNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UObject Getcontainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}
	struct FInventoryPositionDataRepHelper Getposition() {
		return memory.read<struct FInventoryPositionDataRepHelper>(m_addr + 16);
	}
	struct UObject GetTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayerUnsubscribeData
{
public:
	FPlayerUnsubscribeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FFindAnimationMontage
{
public:
	FFindAnimationMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetContext() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	uint8_t  GetprisonerMontageType() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	struct UAnimMontage GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCCSliderDeselected__DelegateSignature
{
public:
	FCCSliderDeselected__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCCSkillSliderWidget GetSlider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCCSkillSliderWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSizeY
{
public:
	FGetSizeY(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRespawnOptionTime
{
public:
	FGetRespawnOptionTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getoption() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZGerstnerWavesParameters
{
public:
	FConZGerstnerWavesParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getangle() {
		return memory.read<float>(m_addr + 0);
	}
	float GetHeight() {
		return memory.read<float>(m_addr + 4);
	}
	float GetLength() {
		return memory.read<float>(m_addr + 8);
	}
	float GetSteepness() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMuzzleLocation
{
public:
	FGetMuzzleLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInFishingMinigame
{
public:
	FIsInFishingMinigame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInDanger
{
public:
	FIsInDanger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDropItemOnClient
{
public:
	FDropItemOnClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsMalfunctionSupported
{
public:
	FIsMalfunctionSupported(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmalfunction() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdmin_Server_TeleportTo
{
public:
	FAdmin_Server_TeleportTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct FString GetteleportToUserId() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRoundTimeLeft
{
public:
	FGetRoundTimeLeft(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddTimerWidget
{
public:
	FAddTimerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKillBoxTimerWidget GettimerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UKillBoxTimerWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTextBoxTextChanged
{
public:
	FOnTextBoxTextChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponMalfunctionData
{
public:
	FWeaponMalfunctionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetUseCustomProbabilityCurve() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FRuntimeFloatCurve GetProbabilityCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 8);
	}
	UWeaponActionClearMalfunctionSequence GetClearMalfunctionSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return UWeaponActionClearMalfunctionSequence(ptr_addr);
	}
	struct TArray<UWeaponActionClearMalfunctionSequence> GetClearMalfunctionSequences() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct TArray<UWeaponActionClearMalfunctionSequence>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerActionDifficultyCurve
{
public:
	FPrisonerActionDifficultyCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_resting() {
		return memory.read<float>(m_addr + 0);
	}
	float Get_idle() {
		return memory.read<float>(m_addr + 4);
	}
	float Get_easy() {
		return memory.read<float>(m_addr + 8);
	}
	float Get_demanding() {
		return memory.read<float>(m_addr + 12);
	}
	float Get_veryDemanding() {
		return memory.read<float>(m_addr + 16);
	}
	float Get_extremelyDemanding() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrisonerAnimationSet
{
public:
	FGetPrisonerAnimationSet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeleeHitDetectionMarker
{
public:
	FMeleeHitDetectionMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct FTransform GetRootMotion() {
		return memory.read<struct FTransform>(m_addr + 64);
	}
	float GetDamageMultiplier() {
		return memory.read<float>(m_addr + 112);
	}
	float GetSelectionWeight() {
		return memory.read<float>(m_addr + 116);
	}

private:
	std::uint64_t m_addr = 0;
};class FCombinationLockUnlockAttemptRequestData
{
public:
	FCombinationLockUnlockAttemptRequestData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetTeamDeathmatchParameters
{
public:
	FSetTeamDeathmatchParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTeamDeathmatchParameters GetParams() {
		return memory.read<struct FTeamDeathmatchParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindCharacterAndItemAnimation
{
public:
	FFindCharacterAndItemAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetContext() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	uint8_t  GetprisonerMontageType() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	struct FCharacterAndItemAnimation GetReturnValue() {
		return memory.read<struct FCharacterAndItemAnimation>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FActiveHit
{
public:
	FActiveHit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetPrisonWalletComponent
{
public:
	FGetPrisonWalletComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerPrisonWalletComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerPrisonWalletComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterAndItemAnimation
{
public:
	FCharacterAndItemAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetCharacterMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetItemMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIsToolForSomething
{
public:
	FSetIsToolForSomething(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsTool() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_TeleportToNextOrPreviousPlayer
{
public:
	FServer_TeleportToNextOrPreviousPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetNext() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_Interact
{
public:
	FClient_Interact(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject Getinteractable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	uint8_t  GetinteractionType() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	struct FInteractionData GetInteractionData() {
		return memory.read<struct FInteractionData>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOverrideUseWeaponAnimationPose
{
public:
	FGetOverrideUseWeaponAnimationPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryStackData
{
public:
	FInventoryStackData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject Get_stackClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	float Get_approximateCount() {
		return memory.read<float>(m_addr + 8);
	}
	float Get_approximateMaxCount() {
		return memory.read<float>(m_addr + 12);
	}
	float Get_weight() {
		return memory.read<float>(m_addr + 16);
	}
	struct TArray<char> Get_data() {
		return memory.read<struct TArray<char>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAllContainedItems
{
public:
	FGetAllContainedItems(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getrecursive() {
		return memory.read<bool>(m_addr + 0);
	}
	struct TArray<struct AItem> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetupCharacter
{
public:
	FSetupCharacter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterSpawneeInfo GetspawneeInfo() {
		return memory.read<struct FCharacterSpawneeInfo>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FScopeZoomLevelSettings
{
public:
	FScopeZoomLevelSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMagnification() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDisplayedMagnification() {
		return memory.read<float>(m_addr + 4);
	}
	struct FPostProcessSettings GetPostProcessSettings() {
		return memory.read<struct FPostProcessSettings>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInventoryGridSizeY
{
public:
	FGetInventoryGridSizeY(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAimOffset
{
public:
	FGetAimOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCaption
{
public:
	FGetCaption(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_UpdateRespawnSettings
{
public:
	FClient_UpdateRespawnSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRespawnParameters Getparameters() {
		return memory.read<struct FRespawnParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnNumberDataChanged
{
public:
	FOnNumberDataChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterLegsImpactSoundsData
{
public:
	FCharacterLegsImpactSoundsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCharacterLegsImpactSoundData> GetSoundsData() {
		return memory.read<struct TArray<struct FCharacterLegsImpactSoundData>>(m_addr + 0);
	}
	struct FCharacterImpactSounds GetFallbackSounds() {
		return memory.read<struct FCharacterImpactSounds>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSlotsForPanel
{
public:
	FGetSlotsForPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGridSlot GetGridSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UGridSlot(ptr_addr);
	}
	int32_t GetWidth() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetHeight() {
		return memory.read<int32_t>(m_addr + 12);
	}
	struct TArray<struct UInventorySlotUserWidget> GetSlots() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct UInventorySlotUserWidget>(ptr_addr);
	}
	struct UGridPanel Getpanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UGridPanel(ptr_addr);
	}
	int32_t GetnumColumns() {
		return memory.read<int32_t>(m_addr + 40);
	}
	int32_t GetnumRows() {
		return memory.read<int32_t>(m_addr + 44);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMeshComponentForAttachmentToItem
{
public:
	FGetMeshComponentForAttachmentToItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	struct UMeshComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLastNetworkError
{
public:
	FGetLastNetworkError(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTextBoxTextCommitted
{
public:
	FOnTextBoxTextCommitted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	char ETextCommit GetCommitMethod() {
		return memory.read<char ETextCommit>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFreeLookEnabled
{
public:
	FSetFreeLookEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetContainerDamagePercentage
{
public:
	FGetContainerDamagePercentage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentHitReactType
{
public:
	FGetCurrentHitReactType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetReturnValue() {
		return memory.read<struct FGameplayTag>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRep_Stance
{
public:
	FOnRep_Stance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetoldValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsActorMeleeTargetCandidate
{
public:
	FIsActorMeleeTargetCandidate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultMaxHealth
{
public:
	FGetDefaultMaxHealth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RequestSquadRankingData
{
public:
	FServer_RequestSquadRankingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetID() {
		return memory.read<uint32_t>(m_addr + 0);
	}
	struct FDbIntegerId GetsquadId() {
		return memory.read<struct FDbIntegerId>(m_addr + 8);
	}
	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPossibleChoppingTools
{
public:
	FPossibleChoppingTools(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FChoppingTool2> GetPossibleTools() {
		return memory.read<struct TArray<struct FChoppingTool2>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHealth
{
public:
	FGetHealth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFoliageAIPerceptionData
{
public:
	FFoliageAIPerceptionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetCanCoverPrisoner() {
		return memory.read<bool>(m_addr + 0);
	}
	uint8_t  GetMaxUndetectedPrisonerStance() {
		return memory.read<uint8_t >(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_LoadAmmoIntoMagazine
{
public:
	FClient_LoadAmmoIntoMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachmentMagazine Getmagazine() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachmentMagazine(ptr_addr);
	}
	struct TArray<struct FAmmunitionData> GetammoData() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnPreLoadMap
{
public:
	FOnPreLoadMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetmapName() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerAppearance_Tattoo
{
public:
	FPrisonerAppearance_Tattoo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetRequiresGameUpgrade() {
		return memory.read<bool>(m_addr + 0);
	}
	uint8_t  GetGameUpgradeRequired() {
		return memory.read<uint8_t >(m_addr + 1);
	}
	struct TMap<struct FName, struct TSoftObjectPtr<UTexture2D>> GetTattooTextures() {
		return memory.read<struct TMap<struct FName, struct TSoftObjectPtr<UTexture2D>>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FProximityReplenishedResourceDescription
{
public:
	FProximityReplenishedResourceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReplenishChance() {
		return memory.read<float>(m_addr + 0);
	}
	struct FFloatInterval GetReplenishAmount() {
		return memory.read<struct FFloatInterval>(m_addr + 4);
	}
	float GetReplenishTimeout() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetHealthAndUsage
{
public:
	FSetHealthAndUsage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Gethealth() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetUsage() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMeshComponent
{
public:
	FGetMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMeshComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FChargeAttackData
{
public:
	FChargeAttackData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	float GetRegainControlDurationModifier() {
		return memory.read<float>(m_addr + 8);
	}
	float GetRange() {
		return memory.read<float>(m_addr + 12);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 16);
	}
	float GetHeight() {
		return memory.read<float>(m_addr + 20);
	}
	float GetlengthOverride() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIgnoreSupportingHandIK
{
public:
	FGetIgnoreSupportingHandIK(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMissionData
{
public:
	FMissionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetMissionName() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetMissionCategory() {
		return memory.read<struct FText>(m_addr + 24);
	}
	struct FText GetMissionDescription() {
		return memory.read<struct FText>(m_addr + 48);
	}
	uint8_t  GetMissionType() {
		return memory.read<uint8_t >(m_addr + 72);
	}
	int32_t GetMissionOrdinalNumber() {
		return memory.read<int32_t>(m_addr + 76);
	}
	uint8_t  GetMissionState() {
		return memory.read<uint8_t >(m_addr + 80);
	}
	uint8_t  GetMissionFaction() {
		return memory.read<uint8_t >(m_addr + 81);
	}
	struct TArray<struct TSoftObjectPtr<ALocationTrigger>> GetMissionStartingLocations() {
		return memory.read<struct TArray<struct TSoftObjectPtr<ALocationTrigger>>>(m_addr + 88);
	}
	int32_t GetIntendedNumberOfPlayers() {
		return memory.read<int32_t>(m_addr + 104);
	}
	float GetMissionCooldown() {
		return memory.read<float>(m_addr + 108);
	}
	struct FString GetMissionAssetId() {
		return memory.read<struct FString>(m_addr + 120);
	}
	struct TArray<struct FObjectiveData> GetObjectivesData() {
		return memory.read<struct TArray<struct FObjectiveData>>(m_addr + 136);
	}
	struct FMissionReward GetMissionReward() {
		return memory.read<struct FMissionReward>(m_addr + 152);
	}
	struct UTexture2D GetMissionBannerImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SyncWeaponState
{
public:
	FServer_SyncWeaponState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	struct FWeaponStateSyncData GetData() {
		return memory.read<struct FWeaponStateSyncData>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetVehicleWeaponAimingStance
{
public:
	FServer_SetVehicleWeaponAimingStance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInventoryGridSizeX
{
public:
	FGetInventoryGridSizeX(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrintSCUM
{
public:
	FPrintSCUM(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FColor GetColor() {
		return memory.read<struct FColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_InstrumentPlayTone
{
public:
	FServer_InstrumentPlayTone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Gettone() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GettimeOffset() {
		return memory.read<float>(m_addr + 4);
	}
	int32_t Getoctave() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCallSetToUpdateFromValue
{
public:
	FCallSetToUpdateFromValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxCountOnScreen() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMaxValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInventoryIcon
{
public:
	FGetInventoryIcon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInventoryIconInHands
{
public:
	FGetInventoryIconInHands(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetHUDMode
{
public:
	FSetHUDMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetNewMode() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateVisuals
{
public:
	FUpdateVisuals(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FInventoryNodeWidgetData> GetwidgetData() {
		return memory.read<struct TArray<struct FInventoryNodeWidgetData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDemoteSquadMemberOnServer
{
public:
	FDemoteSquadMemberOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBandage
{
public:
	FBandage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_ratio() {
		return memory.read<float>(m_addr + 0);
	}
	float Get_asepsis() {
		return memory.read<float>(m_addr + 4);
	}
	float Get_stabilizationDurationReduction() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ExecuteFlagOvertake
{
public:
	FNetMulticast_ExecuteFlagOvertake(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int64_t GetElementID() {
		return memory.read<int64_t>(m_addr + 8);
	}
	struct FVector GetelementLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FDbIntegerId GetPlayerId() {
		return memory.read<struct FDbIntegerId>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FDidGameEventRoundStarted
{
public:
	FDidGameEventRoundStarted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTradeableClassAndQuantity
{
public:
	FTradeableClassAndQuantity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetMaxHealth
{
public:
	FGetMaxHealth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsUserAdmin
{
public:
	FIsUserAdmin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetValue
{
public:
	FSetValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponReloadData
{
public:
	FWeaponReloadData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsQuick() {
		return memory.read<bool>(m_addr + 0);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}
	struct AItem GetItem2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AItem(ptr_addr);
	}
	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 24);
	}
	UObject GetReloadSequenceClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return UObject(ptr_addr);
	}
	float GetAnimationPlayRate() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateScoreboard
{
public:
	FNetMulticast_UpdateScoreboard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetvictimIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetkillerIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetIsHeadShot() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNormalizedHealth
{
public:
	FGetNormalizedHealth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMinutes
{
public:
	FSetMinutes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMinutes() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_OnNoiseInstigated
{
public:
	FClient_OnNoiseInstigated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetnoiseLevel() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRange
{
public:
	FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatRange GetValueRange() {
		return memory.read<struct FFloatRange>(m_addr + 0);
	}
	bool GetIsConstrainedByConsumptionMethod() {
		return memory.read<bool>(m_addr + 16);
	}
	uint8_t  GetConsumptionMethodConstraint() {
		return memory.read<uint8_t >(m_addr + 17);
	}
	struct TArray<struct UConsumableDigestionHandler> GetDigestionHandlers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<struct UConsumableDigestionHandler>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnCurrentInputTextChanged
{
public:
	FOnCurrentInputTextChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetProfileNames
{
public:
	FGetProfileNames(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNoiseLoudnessOnGroundImpact
{
public:
	FGetNoiseLoudnessOnGroundImpact(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetSwingSpeedLevel
{
public:
	FNetMulticast_SetSwingSpeedLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetshouldPlaySwingMontageEndSection() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWetness
{
public:
	FGetWetness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCommitSuicideOptionTime
{
public:
	FSetCommitSuicideOptionTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpamConsequences
{
public:
	FSpamConsequences(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimeout() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetPermanentTimeout() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNoiseLoudnessWhenDropped
{
public:
	FGetNoiseLoudnessWhenDropped(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGameEventCooldown
{
public:
	FSetGameEventCooldown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getcooldown() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_Throw
{
public:
	FMulticast_Throw(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetZeroBasedStartPosition() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetStartRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	struct FVector GetStartVelocity() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemSpawnerPreset_Node
{
public:
	FItemSpawnerPreset_Node(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagContainer GetNodes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 0);
	}
	uint8_t  GetRarity() {
		return memory.read<uint8_t >(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetColor
{
public:
	FSetColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNormalizedMaxHealth
{
public:
	FGetNormalizedMaxHealth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMetabolismConfiguration
{
public:
	FMetabolismConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInitialAbsorbedEnergyRatio() {
		return memory.read<float>(m_addr + 0);
	}
	float GetInitialAbsorbedWaterRatio() {
		return memory.read<float>(m_addr + 4);
	}
	float GetInitialAbsorbedVitaminsRatio() {
		return memory.read<float>(m_addr + 8);
	}
	float GetInitialAbsorbedMineralsRatio() {
		return memory.read<float>(m_addr + 12);
	}
	float GetInitialColonFullness() {
		return memory.read<float>(m_addr + 16);
	}
	float GetInitialBladderFullness() {
		return memory.read<float>(m_addr + 20);
	}
	float GetMaxStomachVolume() {
		return memory.read<float>(m_addr + 24);
	}
	float GetMaxIntestineVolume() {
		return memory.read<float>(m_addr + 28);
	}
	float GetMaxColonVolume() {
		return memory.read<float>(m_addr + 32);
	}
	float GetMaxBladderVolume() {
		return memory.read<float>(m_addr + 36);
	}
	float GetEnergyAbsorptionCapacityMultiplier() {
		return memory.read<float>(m_addr + 40);
	}
	float GetWaterAbsorptionCapacityMultiplier() {
		return memory.read<float>(m_addr + 44);
	}
	float GetAlcoholAbsorptionBaseCapacity() {
		return memory.read<float>(m_addr + 48);
	}
	float GetAbsorbedAlcoholDiscardRate() {
		return memory.read<float>(m_addr + 52);
	}
	float GetMaxEnergyToRecoverFromFatPerHour() {
		return memory.read<float>(m_addr + 56);
	}
	float GetMaxAbsorbedEnergyExcessToStoreAsFatPerHour() {
		return memory.read<float>(m_addr + 60);
	}
	struct FSubstancesData GetNutrientsAbsorptionRateModifier() {
		return memory.read<struct FSubstancesData>(m_addr + 64);
	}
	float GetMinSubstancesToAbsorbRatio() {
		return memory.read<float>(m_addr + 272);
	}
	struct FSubstancesData GetAbsorbedNonEnergyProvidingNutrientsExcessDiscardRateMultiplier() {
		return memory.read<struct FSubstancesData>(m_addr + 280);
	}
	struct FSubstancesData GetAdditionalRequiredWaterPerNutrientAbsorbed() {
		return memory.read<struct FSubstancesData>(m_addr + 488);
	}
	float GetIntestineToColonFecesTransferRate() {
		return memory.read<float>(m_addr + 696);
	}
	struct FSubstancesData GetNutrientAbsorptionWasteFecesRatios() {
		return memory.read<struct FSubstancesData>(m_addr + 704);
	}
	struct FSubstancesData GetNutrientAbsorptionWasteUrineRatios() {
		return memory.read<struct FSubstancesData>(m_addr + 912);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemObstructionTestCapsule
{
public:
	FItemObstructionTestCapsule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetVehicleDoorWindowHitMeshAttached
{
public:
	FSetVehicleDoorWindowHitMeshAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdoorIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterMeshManagerPerSlotData
{
public:
	FCharacterMeshManagerPerSlotData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UCharacterMesh> GetCharacterMeshLayers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<UCharacterMesh>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSizeX
{
public:
	FGetSizeX(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGameEventFriendlyFireCheck
{
public:
	FGameEventFriendlyFireCheck(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetOther() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCurrentInputText_BP
{
public:
	FSetCurrentInputText_BP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnEquipStolenClothesItemOnServer
{
public:
	FUnEquipStolenClothesItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetstolenPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct AClothesItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AClothesItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSentryDamageEffectData
{
public:
	FSentryDamageEffectData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UNiagaraSystem GetParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UNiagaraSystem(ptr_addr);
	}
	float GetEffectsScaleDistanceStart() {
		return memory.read<float>(m_addr + 8);
	}
	float GetEffectsScaleDistanceRange() {
		return memory.read<float>(m_addr + 12);
	}
	float GetEffectsScaleByDistanceFactor() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RemoveLockOnServer
{
public:
	FServer_RemoveLockOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetLockpickable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleLightsActive
{
public:
	FSetVehicleLightsActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterAction_EndHandle
{
public:
	FCharacterAction_EndHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCharacterAction GetAction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCharacterAction(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FWidgetDisplayInfo
{
public:
	FWidgetDisplayInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetDisplayType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	int32_t GetFirst() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetSecond() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIsChambering
{
public:
	FSetIsChambering(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateGameEvent
{
public:
	FCreateGameEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameEventBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGameEventBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInSuddenDeath
{
public:
	FIsInSuddenDeath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSkills
{
public:
	FGetSkills(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct USkill> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct USkill>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStacksCount
{
public:
	FGetStacksCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnElectricDoorsDefusedDelegate
{
public:
	FOnElectricDoorsDefusedDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsLimping
{
public:
	FIsLimping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCamouflageSkillParametersPerSkillLevel
{
public:
	FCamouflageSkillParametersPerSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetModifier() {
		return memory.read<float>(m_addr + 0);
	}
	float GetBonus() {
		return memory.read<float>(m_addr + 4);
	}
	float GetFoliageAIPerceptionOuterRadius() {
		return memory.read<float>(m_addr + 8);
	}
	float GetFoliageAIPerceptionInnerRadius() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FBankCardOwnershipPayloadData
{
public:
	FBankCardOwnershipPayloadData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetFamePointsRounded
{
public:
	FGetFamePointsRounded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseInteractionEvent
{
public:
	FBaseInteractionEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FServer_ReportClientReadyToFinishTeleport
{
public:
	FServer_ReportClientReadyToFinishTeleport(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetRequestID() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSupportingHandIKLocation
{
public:
	FGetSupportingHandIKLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDrawWeightDefaultsByStrength
{
public:
	FGetDrawWeightDefaultsByStrength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStrength() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTotalUses
{
public:
	FGetTotalUses(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEngineeringSkillExperienceAwards
{
public:
	FEngineeringSkillExperienceAwards(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRepairExperienceMultiplier() {
		return memory.read<float>(m_addr + 0);
	}
	float GetFillFuelExperienceMultiplier() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDrainFuelExperienceMultiplier() {
		return memory.read<float>(m_addr + 8);
	}
	float GetChargeBatteryExperienceMultiplier() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerCraftableItem
{
public:
	FServerCraftableItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetID() {
		return memory.read<uint32_t>(m_addr + 0);
	}
	AItem GetItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return AItem(ptr_addr);
	}
	int32_t GetCraftedItemCount() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct TArray<AItem> GetBonusItemClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<AItem>(ptr_addr);
	}
	struct TArray<struct FServerUsedItem> GetMandatoryItems() {
		return memory.read<struct TArray<struct FServerUsedItem>>(m_addr + 40);
	}
	struct TArray<struct FServerUsedItem> GetMandatoryParts() {
		return memory.read<struct TArray<struct FServerUsedItem>>(m_addr + 56);
	}
	struct TArray<struct FServerUsedItem> GetOptionalItems() {
		return memory.read<struct TArray<struct FServerUsedItem>>(m_addr + 72);
	}
	struct TArray<struct FServerUsedItem> GetOptionalParts() {
		return memory.read<struct TArray<struct FServerUsedItem>>(m_addr + 88);
	}
	struct TArray<struct FServerUsedItem> GetToolsNeeded() {
		return memory.read<struct TArray<struct FServerUsedItem>>(m_addr + 104);
	}
	struct UAnimMontage GetCustomCraftingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAkAudioEvent GetStartCraftingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopCraftingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTotalWeight
{
public:
	FGetTotalWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTypes
{
public:
	FGetTypes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UCraftingIngredientType> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<UCraftingIngredientType>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMovementSettings_Ground_Crouching_Walking
{
public:
	FPrisonerMovementSettings_Ground_Crouching_Walking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerGroundMovementParameters GetDefault() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 0);
	}
	struct FPrisonerGroundMovementParameters GetWeaponAiming() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 12);
	}
	struct FPrisonerGroundMovementParameters GetWeaponAimingDownTheSights() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemMotionNoise
{
public:
	FItemMotionNoise(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFishSpawnData
{
public:
	FFishSpawnData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFishSpeciesData GetFishSpeciesData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UFishSpeciesData(ptr_addr);
	}
	float GetSpawningWeight() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUsedMass
{
public:
	FGetUsedMass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FParameterVector
{
public:
	FParameterVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUsedSlots
{
public:
	FGetUsedSlots(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDesiredLeanAmount
{
public:
	FGetDesiredLeanAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWeight
{
public:
	FGetWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLadderMarkers
{
public:
	FGetLadderMarkers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLadderMarker> GetResult() {
		return memory.read<struct TArray<struct FLadderMarker>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWeightRemained
{
public:
	FGetWeightRemained(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTargetCrouchStage
{
public:
	FSetTargetCrouchStage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SpawnAmmunitionArrow
{
public:
	FServer_SpawnAmmunitionArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	struct FAmmunitionArrowSpawningParamsHelper GetAmmunitionArrowSpawningParamsHelper() {
		return memory.read<struct FAmmunitionArrowSpawningParamsHelper>(m_addr + 136);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 160);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 172);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SwapAttachments
{
public:
	FServer_SwapAttachments(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachment GetoldAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachment(ptr_addr);
	}
	struct AWeaponAttachment GetnewAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FParameterFloat
{
public:
	FParameterFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWeightUsed
{
public:
	FGetWeightUsed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsActivelyParticipatingInGameEvent
{
public:
	FIsActivelyParticipatingInGameEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAuthTokenForUser
{
public:
	FGetAuthTokenForUser(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UUser GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UUser(ptr_addr);
	}
	struct FString GetServerIp() {
		return memory.read<struct FString>(m_addr + 8);
	}
	int32_t GetServerResponsePort() {
		return memory.read<int32_t>(m_addr + 24);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FAttachmentSocketDataItem
{
public:
	FAttachmentSocketDataItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	UAttachmentSocketMountType GetMountType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UAttachmentSocketMountType(ptr_addr);
	}
	struct AActor GetMountedItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleHitZoneData
{
public:
	FVehicleHitZoneData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetHitMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMesh(ptr_addr);
	}
	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	struct UMaterialInterface GetHitZoneMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetDeactivatedHitZoneMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UMaterialInterface(ptr_addr);
	}
	bool GetIsHitMeshAttached() {
		return memory.read<bool>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RemoveAttachment
{
public:
	FServer_RemoveAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AFishingAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AFishingAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasPriorityForContainerItem
{
public:
	FHasPriorityForContainerItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetcontainerItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetPackedProjectileDamageEvent
{
public:
	FNetPackedProjectileDamageEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector_NetQuantize100 GetDealerLocation() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 176);
	}
	struct FVector_NetQuantize100 GetTargetLocation() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 188);
	}
	float GetProjectileMass() {
		return memory.read<float>(m_addr + 200);
	}
	float GetProjectileSpeed() {
		return memory.read<float>(m_addr + 204);
	}
	float GetProjectileMuzzleVelocity() {
		return memory.read<float>(m_addr + 208);
	}
	char GetSharpnessHardnessPacked() {
		return memory.read<char>(m_addr + 212);
	}
	char GetArmorPiercingFactorPacked() {
		return memory.read<char>(m_addr + 213);
	}
	char GetEventDataPacked() {
		return memory.read<char>(m_addr + 214);
	}
	AActor GetWeaponClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return AActor(ptr_addr);
	}
	struct UObject GetDamageDealer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct UObject(ptr_addr);
	}
	struct UVehicleAttachment GetDamageReceiverVehicleAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UVehicleAttachment(ptr_addr);
	}
	float GetDistanceTravelled() {
		return memory.read<float>(m_addr + 240);
	}
	float GetExperienceMultiplier() {
		return memory.read<float>(m_addr + 244);
	}
	bool GetIsVehicleCollision() {
		return memory.read<bool>(m_addr + 248);
	}
	int64_t GetBaseElementId() {
		return memory.read<int64_t>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDesiredPaceOnServer
{
public:
	FSetDesiredPaceOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetValue() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEventsRankingStatsItem
{
public:
	FEventsRankingStatsItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetRank() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FString GetPlayerName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FEventsRankingStats GetCharacterStats() {
		return memory.read<struct FEventsRankingStats>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ActivateGasParticles
{
public:
	FNetMulticast_ActivateGasParticles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetActivate() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_TurnPrisonerInPlace
{
public:
	FNetMulticast_TurnPrisonerInPlace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetturnAngle() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAttachedToItem
{
public:
	FOnAttachedToItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnContainedItemDestroyed
{
public:
	FOnContainedItemDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetcontainedItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FZombieTurnMontageDescription
{
public:
	FZombieTurnMontageDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontageL90() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetMontageL180() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetMontageR90() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetMontageR180() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UAnimMontage(ptr_addr);
	}
	struct FName GetTurnAngleCurveName() {
		return memory.read<struct FName>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveConfiguration
{
public:
	FRemoveConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetConfigurationIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCapacityX
{
public:
	FGetCapacityX(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMeleeTargetSelectionMode
{
public:
	FGetMeleeTargetSelectionMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetShakinessModifier
{
public:
	FGetShakinessModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGardenSlotArray
{
public:
	FGardenSlotArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FGardenSlot> Get_gardenSlots() {
		return memory.read<struct TArray<struct FGardenSlot>>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_CharacterActionAck
{
public:
	FNetMulticast_CharacterActionAck(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterActionAck Getack() {
		return memory.read<struct FCharacterActionAck>(m_addr + 0);
	}
	bool GetignoreAutonomousProxy() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDetachedFromItem
{
public:
	FOnDetachedFromItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlantGrowthStageData
{
public:
	FPlantGrowthStageData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinWaterMililiters() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMinSunHours() {
		return memory.read<float>(m_addr + 4);
	}
	struct FFloatInterval GetOptimalAvgTemperature() {
		return memory.read<struct FFloatInterval>(m_addr + 8);
	}
	float GetWaterDeficiencyGrowthExtendHours() {
		return memory.read<float>(m_addr + 16);
	}
	float GetWaterDeficiencyDeathTimeHours() {
		return memory.read<float>(m_addr + 20);
	}
	float GetTemperatureDeficiencyGrowthExtendHours() {
		return memory.read<float>(m_addr + 24);
	}
	float GetTemperatureDeficiencyDeathTimeHours() {
		return memory.read<float>(m_addr + 28);
	}
	float GetSunDeficiencyGrowthExtendHours() {
		return memory.read<float>(m_addr + 32);
	}
	float GetPlantPestGrowthExtendPercentage() {
		return memory.read<float>(m_addr + 36);
	}
	float GetDeathFromPlantPestTimeHours() {
		return memory.read<float>(m_addr + 40);
	}
	float GetPlantDiseaseGrowthExendPercentage() {
		return memory.read<float>(m_addr + 44);
	}
	float GetDeathFromPlantDiseaseTimeHours() {
		return memory.read<float>(m_addr + 48);
	}
	float GetWeedGrowthExtendPercentage() {
		return memory.read<float>(m_addr + 52);
	}
	float GetRecoveryTimeHours() {
		return memory.read<float>(m_addr + 56);
	}
	float GetWeedHarvestingReductionPercentage() {
		return memory.read<float>(m_addr + 60);
	}
	float GetOrganicFertilizerHarvestingIncreasePercentage() {
		return memory.read<float>(m_addr + 64);
	}
	float GetIndustrialFertilizerHarvestingIncreasePercentage() {
		return memory.read<float>(m_addr + 68);
	}
	float GetWaterDeficiencyHarvestingDecreasePercentage() {
		return memory.read<float>(m_addr + 72);
	}
	float GetTemperatureDeficiencyHarvestingDecreasePercentage() {
		return memory.read<float>(m_addr + 76);
	}
	float GetWaterDeficiencyHarvestingSearchTimeIncrease() {
		return memory.read<float>(m_addr + 80);
	}
	float GetTemperatureDeficiencyHarvestingSearchTimeIncrease() {
		return memory.read<float>(m_addr + 84);
	}
	float GetPlantHealthAtWhichProduceStartsDecaying() {
		return memory.read<float>(m_addr + 88);
	}
	float GetHarvestedProduceMinHealthPercentage() {
		return memory.read<float>(m_addr + 92);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerBodySimulationData_BodyPartMappingArray
{
public:
	FPrisonerBodySimulationData_BodyPartMappingArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<uint8_t > GetBodyParts() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReplenishableResourceSlotDescription
{
public:
	FReplenishableResourceSlotDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FOnProjectileStop
{
public:
	FOnProjectileStop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetImpactResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDivingDepth
{
public:
	FGetDivingDepth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowKillFeedMessage
{
public:
	FShowKillFeedMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getprefix() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetcharacterName() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString Getsuffix() {
		return memory.read<struct FString>(m_addr + 32);
	}
	bool Getping() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetInventoryIconInHands
{
public:
	FSetInventoryIconInHands(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrencyBalanceText
{
public:
	FGetCurrencyBalanceText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetCurrencyType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRadialDamageDescription
{
public:
	FRadialDamageDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRandomDamageMultiplier() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMinRandomMultiplierChance() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMaxRandomMultiplierChance() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetBlastDirection() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetBlastInnerAngle() {
		return memory.read<float>(m_addr + 24);
	}
	float GetBlastOuterAngle() {
		return memory.read<float>(m_addr + 28);
	}
	float GetBlastAngleDamageFalloff() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FAttackedByMeleeData
{
public:
	FAttackedByMeleeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<AActor> Getattacker() {
		return memory.read<struct TWeakObjectPtr<AActor>>(m_addr + 0);
	}
	struct TWeakObjectPtr<UAnimMontage> GetMontage() {
		return memory.read<struct TWeakObjectPtr<UAnimMontage>>(m_addr + 8);
	}
	float GetPlayRate() {
		return memory.read<float>(m_addr + 16);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FInteract
{
public:
	FInteract(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	uint8_t  GetinteractionType() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	struct FInteractionData GetInteractionData() {
		return memory.read<struct FInteractionData>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_DamageLockpickingTools
{
public:
	FServer_DamageLockpickingTools(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem Getlockpick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	struct AItem GettensionTool() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPickedUpStateDelegate__DelegateSignature
{
public:
	FPickedUpStateDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	bool GetpickedUp() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetProgress
{
public:
	FSetProgress(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getprogress() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHitSeveritySwitchValue
{
public:
	FGetHitSeveritySwitchValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetParticipantInfo
{
public:
	FGetParticipantInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FGameEventParticipantInfo> GetReturnValue() {
		return memory.read<struct TArray<struct FGameEventParticipantInfo>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsBuried
{
public:
	FIsBuried(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveStacks
{
public:
	FRemoveStacks(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetstacksToSplit() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TScriptInterface<IInventoryNode> GetReturnValue() {
		return memory.read<struct TScriptInterface<IInventoryNode>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RequestEventsRankingStats
{
public:
	FServer_RequestEventsRankingStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetID() {
		return memory.read<uint32_t>(m_addr + 0);
	}
	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 8);
	}
	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 16);
	}
	uint8_t  GetorderByField() {
		return memory.read<uint8_t >(m_addr + 20);
	}
	uint8_t  GetsortOrder() {
		return memory.read<uint8_t >(m_addr + 21);
	}

private:
	std::uint64_t m_addr = 0;
};class FInitEvent
{
public:
	FInitEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameEventLocationMarker Getmarker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGameEventLocationMarker(ptr_addr);
	}
	struct AGameEventManager Getmanager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AGameEventManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_RemoveNearbyFoliageInstances
{
public:
	FNetMulticast_RemoveNearbyFoliageInstances(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerNearbyFoliageInstanceInfoReplicated> GetreplicatedInstanceInfo() {
		return memory.read<struct TArray<struct FPrisonerNearbyFoliageInstanceInfoReplicated>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponStateSyncData
{
public:
	FWeaponStateSyncData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetZeroRange() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<struct FAmmunitionData> GetLoadedAmmoData() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 8);
	}
	struct TArray<struct FAmmunitionData> GetInternalMagazineAmmoData() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 24);
	}
	UObject GetLoadedAmmunitionItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UObject(ptr_addr);
	}
	AProjectile GetLoadedProjectileClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return AProjectile(ptr_addr);
	}
	uint8_t  GetFiringMode() {
		return memory.read<uint8_t >(m_addr + 56);
	}
	int32_t Getmalfunction() {
		return memory.read<int32_t>(m_addr + 60);
	}
	bool GetIsChamberOpened() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Throw
{
public:
	FServer_Throw(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetZeroBasedStartPosition() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetStartRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	struct FVector GetStartVelocity() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPartWaterWeight
{
public:
	FGetPartWaterWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getpart() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStance
{
public:
	FGetStance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCaption
{
public:
	FSetCaption(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMovementSettings_Ground
{
public:
	FPrisonerMovementSettings_Ground(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerMovementSettings_Ground_Standing GetStanding() {
		return memory.read<struct FPrisonerMovementSettings_Ground_Standing>(m_addr + 0);
	}
	struct FPrisonerMovementSettings_Ground_Crouching GetCrouching() {
		return memory.read<struct FPrisonerMovementSettings_Ground_Crouching>(m_addr + 180);
	}
	struct FPrisonerMovementSettings_Ground_Prone GetProne() {
		return memory.read<struct FPrisonerMovementSettings_Ground_Prone>(m_addr + 288);
	}
	struct FFloatInterval GetMaxSpeedMultiplierVsPerformanceRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 324);
	}
	struct FFloatInterval GetAccelerationMultiplierVsPerformanceRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 332);
	}
	struct FFloatInterval GetDecelerationMultiplierVsPerformanceRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 340);
	}
	struct FFloatInterval GetMaxSpeedWhenImmersedInWaterVsPerformanceRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 348);
	}
	float GetAccelerationMultiplierWhenImmersedInWater() {
		return memory.read<float>(m_addr + 356);
	}
	float GetDecelerationMultiplierWhenImmersedInWater() {
		return memory.read<float>(m_addr + 360);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAssists
{
public:
	FGetAssists(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetHealth
{
public:
	FSetHealth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Gethealth() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetInventoryIcon
{
public:
	FSetInventoryIcon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterArmsImpactSoundData
{
public:
	FCharacterArmsImpactSoundData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<uint8_t > GetImpactSourceCategories() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 0);
	}
	struct TArray<uint8_t > GetImpactTargetCategories() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 16);
	}
	struct FCharacterImpactSounds GetSounds() {
		return memory.read<struct FCharacterImpactSounds>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMaxHealth
{
public:
	FSetMaxHealth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMaxHealth() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConsumableDigestionHandlerSave
{
public:
	FConsumableDigestionHandlerSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetData() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInventoryNodeDescription
{
public:
	FGetInventoryNodeDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRegisterParticipant
{
public:
	FRegisterParticipant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	int32_t GetpreferredTeam() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnLocked__DelegateSignature
{
public:
	FOnLocked__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOutsideInventoryIcon
{
public:
	FSetOutsideInventoryIcon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_HandleFiringEffects
{
public:
	FMulticast_HandleFiringEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetshotFired() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetDetectionFactor
{
public:
	FServer_SetDetectionFactor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetnewDetectionFactor() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSquadForUserProfileId
{
public:
	FGetSquadForUserProfileId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetID() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	struct AConZSquad GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AConZSquad(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleHealth
{
public:
	FGetVehicleHealth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanAddServerToFavorites
{
public:
	FCanAddServerToFavorites(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWeight
{
public:
	FSetWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCooking_Server_BeginCooking
{
public:
	FCooking_Server_BeginCooking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSlotId() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APrisoner(ptr_addr);
	}
	struct UCookingRecipe Getrecipe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UCookingRecipe(ptr_addr);
	}
	struct TArray<struct AItem> GetMainIngredients() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<struct AItem>(ptr_addr);
	}
	struct TArray<struct AItem> GetOptionalIngredients() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<struct AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOpenTabMode
{
public:
	FOpenTabMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmode() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetShouldShortCast
{
public:
	FServer_SetShouldShortCast(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshChangedDelegate__DelegateSignature
{
public:
	FSkeletalMeshChangedDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FResourceLockingManager_Server_UnlockResource
{
public:
	FResourceLockingManager_Server_UnlockResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FResourceNetworkGUID GetResourceGUID() {
		return memory.read<struct FResourceNetworkGUID>(m_addr + 0);
	}
	int32_t GetResourceId() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FStateChangedDelegate__DelegateSignature
{
public:
	FStateChangedDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnActionChangedHandler
{
public:
	FOnActionChangedHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetCurrentAction() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	uint8_t  GetPrevAction() {
		return memory.read<uint8_t >(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FHuntingClueVisuals
{
public:
	FHuntingClueVisuals(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetWeight() {
		return memory.read<float>(m_addr + 0);
	}
	struct UStaticMesh GetClueStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UStaticMesh(ptr_addr);
	}
	struct UMaterialInstance GetClueStaticMeshMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UMaterialInstance(ptr_addr);
	}
	struct FTransform GetStaticMeshOverrideRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 32);
	}
	struct UMaterialInstance GetClueDecalMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UMaterialInstance(ptr_addr);
	}
	struct FTransform GetClueDecalOverrideRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 96);
	}
	bool GetShouldOverrideBoxDimensions() {
		return memory.read<bool>(m_addr + 144);
	}
	struct FVector GetClueDecalOverrideBoxDimensions() {
		return memory.read<struct FVector>(m_addr + 148);
	}

private:
	std::uint64_t m_addr = 0;
};class FSendSquadInvitationOnClient
{
public:
	FSendSquadInvitationOnClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner Getinvitor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct FString GetinvitorName() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticMeshChangedDelegate__DelegateSignature
{
public:
	FStaticMeshChangedDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGenitalsExposed
{
public:
	FGenitalsExposed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsEnabled
{
public:
	FIsEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZItemElementData
{
public:
	FConZItemElementData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSegmentExecutionThrowingDelegate__DelegateSignature
{
public:
	FSegmentExecutionThrowingDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ApplyDamageToBaseElement
{
public:
	FNetMulticast_ApplyDamageToBaseElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int64_t GetBaseId() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetElementID() {
		return memory.read<int64_t>(m_addr + 16);
	}
	struct FVector GetelementLocation() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	float GetdamageAmount() {
		return memory.read<float>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanMemberEditName
{
public:
	FCanMemberEditName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FUse
{
public:
	FUse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	int32_t GetUsage() {
		return memory.read<int32_t>(m_addr + 8);
	}
	float GetusageWeight() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetEat() {
		return memory.read<bool>(m_addr + 16);
	}
	float GetDamageMultiplier() {
		return memory.read<float>(m_addr + 20);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_ReceiveEventsRankingStats
{
public:
	FClient_ReceiveEventsRankingStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetID() {
		return memory.read<uint32_t>(m_addr + 0);
	}
	struct TArray<struct FEventsRankingStatsItem> Getstats() {
		return memory.read<struct TArray<struct FEventsRankingStatsItem>>(m_addr + 8);
	}
	int32_t GetplayerRank() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FCookingCategoryDropdownEntryData
{
public:
	FCookingCategoryDropdownEntryData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetCookingCategoryTag() {
		return memory.read<struct FGameplayTag>(m_addr + 0);
	}
	struct FGameplayTag GetNavigationTag() {
		return memory.read<struct FGameplayTag>(m_addr + 8);
	}
	struct TArray<struct FGameplayTag> GetNavigationHistory() {
		return memory.read<struct TArray<struct FGameplayTag>>(m_addr + 16);
	}
	struct FText GetDisplayName() {
		return memory.read<struct FText>(m_addr + 32);
	}
	int32_t GetIndentationLevel() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SetIsServerSettingsAdmin
{
public:
	FClient_SetIsServerSettingsAdmin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanEquipClothesItem
{
public:
	FCanEquipClothesItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AClothesItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AClothesItem(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnComponentActivated
{
public:
	FOnComponentActivated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UActorComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UActorComponent(ptr_addr);
	}
	bool GetwasReset() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_EndByteStream
{
public:
	FClient_EndByteStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetstreamId() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingPart
{
public:
	FCraftingPart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPackedEntitySetupAndId
{
public:
	FPackedEntitySetupAndId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint64_t Get_value() {
		return memory.read<uint64_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxPartWaterWeight
{
public:
	FGetMaxPartWaterWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getpart() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetFishingState
{
public:
	FServer_SetFishingState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetfishingState() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemStackData
{
public:
	FItemStackData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UItemStateBase> GetStacks() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UItemStateBase>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnUnlocked__DelegateSignature
{
public:
	FOnUnlocked__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_TestPingLockStuff
{
public:
	FClient_TestPingLockStuff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetaverageDelta() {
		return memory.read<float>(m_addr + 0);
	}
	float GetaveragePing() {
		return memory.read<float>(m_addr + 4);
	}
	float Getcounter() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ReleaseCastingObject
{
public:
	FNetMulticast_ReleaseCastingObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetDirection() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetcastingPower() {
		return memory.read<float>(m_addr + 24);
	}
	uint8_t  GetnextState() {
		return memory.read<uint8_t >(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FAttachmentSocketOffset
{
public:
	FAttachmentSocketOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FAchievements
{
public:
	FAchievements(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FAttachmentSocket
{
public:
	FAttachmentSocket(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAttachmentSocketDataItem> GetItems() {
		return memory.read<struct TArray<struct FAttachmentSocketDataItem>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomRollStage
{
public:
	FRandomRollStage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatInterval GetBaseValueRollInterval() {
		return memory.read<struct FFloatInterval>(m_addr + 0);
	}
	struct FRuntimeFloatCurve GetBaseValueTargetCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 8);
	}
	float GetBaseValueTargetInterpSpeed() {
		return memory.read<float>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZSquadMember
{
public:
	FConZSquadMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 16);
	}
	uint8_t  GetRank() {
		return memory.read<uint8_t >(m_addr + 24);
	}
	bool Getonline() {
		return memory.read<bool>(m_addr + 25);
	}
	bool GetInDanger() {
		return memory.read<bool>(m_addr + 26);
	}
	bool GetIsAlive() {
		return memory.read<bool>(m_addr + 27);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemLocation
{
public:
	FItemLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetCoastal() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetContinantal() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetMountain() {
		return memory.read<bool>(m_addr + 2);
	}
	bool GetUrban() {
		return memory.read<bool>(m_addr + 3);
	}
	bool GetRural() {
		return memory.read<bool>(m_addr + 4);
	}
	bool GetIndustrial() {
		return memory.read<bool>(m_addr + 5);
	}
	bool GetPolice() {
		return memory.read<bool>(m_addr + 6);
	}
	bool GetMilitaryBasic() {
		return memory.read<bool>(m_addr + 7);
	}
	bool GetMilitaryMedium() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetMilitaryAdvanced() {
		return memory.read<bool>(m_addr + 9);
	}
	bool GetMilitaryWW2() {
		return memory.read<bool>(m_addr + 10);
	}
	bool GetSport() {
		return memory.read<bool>(m_addr + 11);
	}
	bool GetMarket() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetGasStation() {
		return memory.read<bool>(m_addr + 13);
	}
	bool GetAirfield() {
		return memory.read<bool>(m_addr + 14);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetWindage
{
public:
	FServer_SetWindage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetWindage() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_UnlockAchievement
{
public:
	FClient_UnlockAchievement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct FString GetAchievementID() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnCharacterGroupInfo
{
public:
	FSpawnCharacterGroupInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<APawn> GetAvailablePawns() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<APawn>(ptr_addr);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	int32_t GetNumOfCharactersToSpawn() {
		return memory.read<int32_t>(m_addr + 64);
	}
	bool GetIgnoreLimit() {
		return memory.read<bool>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnCharactersAroundLocation
{
public:
	FSpawnCharactersAroundLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSpawnCharacterAroundInfo GetInfo() {
		return memory.read<struct FSpawnCharacterAroundInfo>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_BeginByteStream
{
public:
	FClient_BeginByteStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetstreamId() {
		return memory.read<int32_t>(m_addr + 0);
	}
	uint8_t  GetstreamType() {
		return memory.read<uint8_t >(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_EnableRespawnOption
{
public:
	FClient_EnableRespawnOption(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getoption() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInCombatMode
{
public:
	FIsInCombatMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_HasMountedActorBegunPlay
{
public:
	FClient_HasMountedActorBegunPlay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FZombieMeshVariation2
{
public:
	FZombieMeshVariation2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMesh GetDressedMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMesh(ptr_addr);
	}
	struct USkeletalMesh GetStrippedMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USkeletalMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNextMontageSectionFromPrevious
{
public:
	FSetNextMontageSectionFromPrevious(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetpreviousSection() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetNextSection() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnedItems
{
public:
	FSpawnedItems(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetID() {
		return memory.read<int32_t>(m_addr + 0);
	}
	uint8_t  GetOperation() {
		return memory.read<uint8_t >(m_addr + 4);
	}
	struct TArray<struct AItem> GetItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrisonerMovement
{
public:
	FGetPrisonerMovement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerMovementComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerMovementComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_HeartbeatRequest
{
public:
	FClient_HeartbeatRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t Getcode() {
		return memory.read<uint32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UnlockArea
{
public:
	FNetMulticast_UnlockArea(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FBox GetArea() {
		return memory.read<struct FBox>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMusicPlayerComponent
{
public:
	FGetMusicPlayerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerMusicPlayerComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerMusicPlayerComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FZombieCombatStanceVariation2
{
public:
	FZombieCombatStanceVariation2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FZombieCombatStanceAnimations GetAnimations() {
		return memory.read<struct FZombieCombatStanceAnimations>(m_addr + 0);
	}
	float GetRunAcceleration() {
		return memory.read<float>(m_addr + 24);
	}
	float GetRunDeceleration() {
		return memory.read<float>(m_addr + 28);
	}
	float GetRunSpeed() {
		return memory.read<float>(m_addr + 32);
	}
	float GetRunSpeedInAnimation() {
		return memory.read<float>(m_addr + 36);
	}
	float GetRunTurnRate() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetItemInHandsActualObstructionDepth
{
public:
	FServer_SetItemInHandsActualObstructionDepth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZSquadPendingMember
{
public:
	FConZSquadPendingMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_InitializeCharacterModificationTransaction
{
public:
	FClient_InitializeCharacterModificationTransaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GettransactionId() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FTransform GetroomTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_HandleGearMotion
{
public:
	FServer_HandleGearMotion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetmotionIntensity() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool GetshouldMakeNoise() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetItemVirtualizationManager
{
public:
	FGetItemVirtualizationManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItemVirtualizationManager GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItemVirtualizationManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInitFromCharacterTemplate
{
public:
	FInitFromCharacterTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterTemplate GetCharacterTemplate() {
		return memory.read<struct FCharacterTemplate>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCreationTemplate
{
public:
	FGetCreationTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterTemplate GetReturnValue() {
		return memory.read<struct FCharacterTemplate>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_Login
{
public:
	FClient_Login(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPlayerLoginInfo GetserverLoginInfo() {
		return memory.read<struct FPlayerLoginInfo>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RequestSquadMemberInfo
{
public:
	FServer_RequestSquadMemberInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetID() {
		return memory.read<uint32_t>(m_addr + 0);
	}
	struct FDbIntegerId GetsquadId() {
		return memory.read<struct FDbIntegerId>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDbIntegerId
{
public:
	FDbIntegerId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetValue() {
		return memory.read<int64_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetKey
{
public:
	FGetKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADropZoneKey GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADropZoneKey(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDeluxeVersion
{
public:
	FDeluxeVersion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FServer_TurnPrisonerInPlace
{
public:
	FServer_TurnPrisonerInPlace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetturnAngle() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRespawnParameters
{
public:
	FRespawnParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetRandomLocationPrice() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetSectorLocationPrice() {
		return memory.read<int32_t>(m_addr + 4);
	}
	uint8_t  GetSectorLocationPriceCurrency() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	int32_t GetShelterLocationPrice() {
		return memory.read<int32_t>(m_addr + 12);
	}
	uint8_t  GetShelterLocationPriceCurrency() {
		return memory.read<uint8_t >(m_addr + 16);
	}
	int32_t GetSquadLocationPrice() {
		return memory.read<int32_t>(m_addr + 20);
	}
	uint8_t  GetSquadLocationPriceCurrency() {
		return memory.read<uint8_t >(m_addr + 24);
	}
	int32_t GetPermadeathThreshold() {
		return memory.read<int32_t>(m_addr + 28);
	}
	uint8_t  GetPermadeathThresholdPriceCurrency() {
		return memory.read<uint8_t >(m_addr + 32);
	}
	float GetRandomPriceModifier() {
		return memory.read<float>(m_addr + 36);
	}
	float GetSectorPriceModifier() {
		return memory.read<float>(m_addr + 40);
	}
	float GetHomePriceModifier() {
		return memory.read<float>(m_addr + 44);
	}
	float GetRandomInitialTime() {
		return memory.read<float>(m_addr + 48);
	}
	float GetSectorInitialTime() {
		return memory.read<float>(m_addr + 52);
	}
	float GetShelterInitialTime() {
		return memory.read<float>(m_addr + 56);
	}
	float GetSquadInitialTime() {
		return memory.read<float>(m_addr + 60);
	}
	float GetRandomCooldownTime() {
		return memory.read<float>(m_addr + 64);
	}
	float GetSectorCooldownTime() {
		return memory.read<float>(m_addr + 68);
	}
	float GetShelterCooldownTime() {
		return memory.read<float>(m_addr + 72);
	}
	float GetSquadCooldownTime() {
		return memory.read<float>(m_addr + 76);
	}
	float GetRandomCooldownResetMultiplier() {
		return memory.read<float>(m_addr + 80);
	}
	float GetSectorCooldownResetMultiplier() {
		return memory.read<float>(m_addr + 84);
	}
	float GetShelterCooldownResetMultiplier() {
		return memory.read<float>(m_addr + 88);
	}
	float GetSquadCooldownResetMultiplier() {
		return memory.read<float>(m_addr + 92);
	}
	float GetCommitSuicideInitialTime() {
		return memory.read<float>(m_addr + 96);
	}
	float GetCommitSuicideCooldownTime() {
		return memory.read<float>(m_addr + 100);
	}
	float GetCommitSuicideCooldownResetMultiplier() {
		return memory.read<float>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_ReceiveBytesFromStream
{
public:
	FClient_ReceiveBytesFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetstreamId() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<char> Getbytes() {
		return memory.read<struct TArray<char>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWeapon
{
public:
	FGetWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetParticipantJoinLocation
{
public:
	FGetParticipantJoinLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFamePoints
{
public:
	FSetFamePoints(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCTFParameters
{
public:
	FCTFParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFlagResetDuration() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetAllowReturns() {
		return memory.read<bool>(m_addr + 4);
	}
	int32_t GetCaptureLimit() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct FGameEventRewardPoints GetPointsPerPickup() {
		return memory.read<struct FGameEventRewardPoints>(m_addr + 12);
	}
	struct FGameEventRewardPoints GetPointsPerCapture() {
		return memory.read<struct FGameEventRewardPoints>(m_addr + 24);
	}
	struct FGameEventRewardPoints GetPointsPerReturn() {
		return memory.read<struct FGameEventRewardPoints>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPelvisRotation
{
public:
	FGetPelvisRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_ReceiveSquadMemberInfo
{
public:
	FClient_ReceiveSquadMemberInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetID() {
		return memory.read<uint32_t>(m_addr + 0);
	}
	struct TArray<struct FDbIntegerId> GetuserProfileIds() {
		return memory.read<struct TArray<struct FDbIntegerId>>(m_addr + 8);
	}
	struct TArray<struct FString> Getnames() {
		return memory.read<struct TArray<struct FString>>(m_addr + 24);
	}
	struct TArray<uint8_t > Getranks() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 40);
	}
	struct TArray<float> GetFamePoints() {
		return memory.read<struct TArray<float>>(m_addr + 56);
	}
	struct TArray<bool> Getonline() {
		return memory.read<struct TArray<bool>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetState
{
public:
	FGetState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDropItemAtOnServer
{
public:
	FDropItemAtOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_ReceiveSquadRankingData
{
public:
	FClient_ReceiveSquadRankingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetID() {
		return memory.read<uint32_t>(m_addr + 0);
	}
	struct TArray<struct FString> Getnames() {
		return memory.read<struct TArray<struct FString>>(m_addr + 8);
	}
	struct TArray<struct FString> Getinformation() {
		return memory.read<struct TArray<struct FString>>(m_addr + 24);
	}
	struct TArray<uint64_t> Getemblems() {
		return memory.read<struct TArray<uint64_t>>(m_addr + 40);
	}
	struct TArray<float> Getscores() {
		return memory.read<struct TArray<float>>(m_addr + 56);
	}
	int32_t GetsquadRank() {
		return memory.read<int32_t>(m_addr + 72);
	}
	int32_t GetsquadIndex() {
		return memory.read<int32_t>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateThrowingComponent
{
public:
	FCreateThrowingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetitemToThrow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	uint8_t  GetanimationType() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	struct UPrisonerThrowComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrisonerThrowComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorBoundsCenter
{
public:
	FGetActorBoundsCenter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	bool GetonlyCollidingComponents() {
		return memory.read<bool>(m_addr + 8);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHoldBreathState
{
public:
	FGetHoldBreathState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_ReceiveSurvivalStats
{
public:
	FClient_ReceiveSurvivalStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetID() {
		return memory.read<uint32_t>(m_addr + 0);
	}
	struct FSurvivalStats Getstats() {
		return memory.read<struct FSurvivalStats>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentLocomotionState
{
public:
	FGetCurrentLocomotionState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSurvivalStats
{
public:
	FSurvivalStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetHighestPositiveFamePoints() {
		return memory.read<float>(m_addr + 8);
	}
	int32_t GetDoorsClaimed() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetAnimalsKilled() {
		return memory.read<int32_t>(m_addr + 16);
	}
	float GetMinutesSurvived() {
		return memory.read<float>(m_addr + 20);
	}
	int32_t GetKills() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetDeaths() {
		return memory.read<int32_t>(m_addr + 28);
	}
	int32_t GetLocksPicked() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetPuppetsKilled() {
		return memory.read<int32_t>(m_addr + 36);
	}
	int32_t GetGunsCrafted() {
		return memory.read<int32_t>(m_addr + 40);
	}
	int32_t GetAmmoCrafted() {
		return memory.read<int32_t>(m_addr + 44);
	}
	int32_t GetBulletsCrafted() {
		return memory.read<int32_t>(m_addr + 48);
	}
	int32_t GetArrowsCrafted() {
		return memory.read<int32_t>(m_addr + 52);
	}
	int32_t GetClothingCrafted() {
		return memory.read<int32_t>(m_addr + 56);
	}
	float GetLongestKillDistance() {
		return memory.read<float>(m_addr + 60);
	}
	int32_t GetMeleeKills() {
		return memory.read<int32_t>(m_addr + 64);
	}
	int32_t GetArcheryKills() {
		return memory.read<int32_t>(m_addr + 68);
	}
	int32_t GetPlayersKnockedOut() {
		return memory.read<int32_t>(m_addr + 72);
	}
	int32_t GetTotalDefecations() {
		return memory.read<int32_t>(m_addr + 76);
	}
	int32_t GetTotalUrinations() {
		return memory.read<int32_t>(m_addr + 80);
	}
	int32_t GetLightsFired() {
		return memory.read<int32_t>(m_addr + 84);
	}
	int32_t GetContainersLooted() {
		return memory.read<int32_t>(m_addr + 88);
	}
	int32_t GetItemsPutIntoContainers() {
		return memory.read<int32_t>(m_addr + 92);
	}
	int32_t GetDeathsByPrisoners() {
		return memory.read<int32_t>(m_addr + 96);
	}
	int32_t GetAnimalsSkinned() {
		return memory.read<int32_t>(m_addr + 100);
	}
	float GetFoodEaten() {
		return memory.read<float>(m_addr + 104);
	}
	float GetDistanceTravelledByFoot() {
		return memory.read<float>(m_addr + 108);
	}
	int32_t GetWoundsPatched() {
		return memory.read<int32_t>(m_addr + 112);
	}
	int32_t GetItemsPickedUp() {
		return memory.read<int32_t>(m_addr + 116);
	}
	float GetLiquidDrank() {
		return memory.read<float>(m_addr + 120);
	}
	int32_t GetTeethLost() {
		return memory.read<int32_t>(m_addr + 124);
	}
	int32_t GetTotalCaloriesIntake() {
		return memory.read<int32_t>(m_addr + 128);
	}
	int32_t GetShotsFired() {
		return memory.read<int32_t>(m_addr + 132);
	}
	int32_t GetShotsHit() {
		return memory.read<int32_t>(m_addr + 136);
	}
	float GetRangeWeaponAccuracy() {
		return memory.read<float>(m_addr + 140);
	}
	int32_t GetHeadshots() {
		return memory.read<int32_t>(m_addr + 144);
	}
	int32_t GetMeleeWeaponSwings() {
		return memory.read<int32_t>(m_addr + 148);
	}
	int32_t GetMeleeWeaponHits() {
		return memory.read<int32_t>(m_addr + 152);
	}
	float GetMeleeWeaponAccuracy() {
		return memory.read<float>(m_addr + 156);
	}
	int32_t GetMeleeWeaponsCrafted() {
		return memory.read<int32_t>(m_addr + 160);
	}
	int32_t GetDroneKills() {
		return memory.read<int32_t>(m_addr + 164);
	}
	int32_t GetSentryKills() {
		return memory.read<int32_t>(m_addr + 168);
	}
	int32_t GetPrisonerKills() {
		return memory.read<int32_t>(m_addr + 172);
	}
	int32_t GetPuppetsKnockedOut() {
		return memory.read<int32_t>(m_addr + 176);
	}
	int32_t GetDiarrheas() {
		return memory.read<int32_t>(m_addr + 180);
	}
	int32_t GetVomits() {
		return memory.read<int32_t>(m_addr + 184);
	}
	float GetDistanceTravelledInVehicle() {
		return memory.read<float>(m_addr + 188);
	}
	int32_t GetMushroomsEaten() {
		return memory.read<int32_t>(m_addr + 192);
	}
	float GetHighestMuscleMass() {
		return memory.read<float>(m_addr + 196);
	}
	float GetHighestFat() {
		return memory.read<float>(m_addr + 200);
	}
	int32_t GetHeartAttacks() {
		return memory.read<int32_t>(m_addr + 204);
	}
	int32_t GetOverdose() {
		return memory.read<int32_t>(m_addr + 208);
	}
	int32_t GetStarvation() {
		return memory.read<int32_t>(m_addr + 212);
	}
	float GetHighestDamageTaken() {
		return memory.read<float>(m_addr + 216);
	}
	float GetHighestWeightCarried() {
		return memory.read<float>(m_addr + 220);
	}
	int32_t GetEventsWon() {
		return memory.read<int32_t>(m_addr + 224);
	}
	int32_t GetEventsLost() {
		return memory.read<int32_t>(m_addr + 228);
	}
	float GetLowestNegativeFamePoints() {
		return memory.read<float>(m_addr + 232);
	}
	float GetDistanceTravelledSwimming() {
		return memory.read<float>(m_addr + 236);
	}
	int32_t GetEventsEnemyKills() {
		return memory.read<int32_t>(m_addr + 240);
	}
	int32_t GetEventsDeaths() {
		return memory.read<int32_t>(m_addr + 244);
	}
	int32_t GetFlagCaptures() {
		return memory.read<int32_t>(m_addr + 248);
	}
	int32_t GetCrowsKilled() {
		return memory.read<int32_t>(m_addr + 252);
	}
	int32_t GetSeagullsKilled() {
		return memory.read<int32_t>(m_addr + 256);
	}
	int32_t GetHorsesKilled() {
		return memory.read<int32_t>(m_addr + 260);
	}
	int32_t GetBoarsKilled() {
		return memory.read<int32_t>(m_addr + 264);
	}
	int32_t GetBearsKilled() {
		return memory.read<int32_t>(m_addr + 268);
	}
	int32_t GetGoatsKilled() {
		return memory.read<int32_t>(m_addr + 272);
	}
	int32_t GetDeersKilled() {
		return memory.read<int32_t>(m_addr + 276);
	}
	int32_t GetChickensKilled() {
		return memory.read<int32_t>(m_addr + 280);
	}
	int32_t GetRabbitsKilled() {
		return memory.read<int32_t>(m_addr + 284);
	}
	int32_t GetDonkeysKilled() {
		return memory.read<int32_t>(m_addr + 288);
	}
	int32_t GetWolvesKilled() {
		return memory.read<int32_t>(m_addr + 292);
	}
	int32_t GetTimesMauledByABear() {
		return memory.read<int32_t>(m_addr + 296);
	}
	float GetLongestAnimalKillDistance() {
		return memory.read<float>(m_addr + 300);
	}
	int32_t GetEventTeamKills() {
		return memory.read<int32_t>(m_addr + 304);
	}
	float GetKillDeathRatio() {
		return memory.read<float>(m_addr + 308);
	}
	float GetEventsKillDeathRatio() {
		return memory.read<float>(m_addr + 312);
	}
	float GetAlcoholDrank() {
		return memory.read<float>(m_addr + 316);
	}
	int32_t GetFoliageCut() {
		return memory.read<int32_t>(m_addr + 320);
	}
	struct FFishingStats GetFishingStats() {
		return memory.read<struct FFishingStats>(m_addr + 328);
	}
	float GetDistanceTravelledByBoat() {
		return memory.read<float>(m_addr + 368);
	}
	float GetDistanceSailed() {
		return memory.read<float>(m_addr + 372);
	}
	int32_t GetTimesCaughtByShark() {
		return memory.read<int32_t>(m_addr + 376);
	}
	int32_t GetTimesEscapedSharkBite() {
		return memory.read<int32_t>(m_addr + 380);
	}
	int32_t GetLastFamePointAwardConsecutiveDays() {
		return memory.read<int32_t>(m_addr + 384);
	}
	int32_t GetFirearmKills() {
		return memory.read<int32_t>(m_addr + 388);
	}
	int32_t GetBareHandedKills() {
		return memory.read<int32_t>(m_addr + 392);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMotionIntensity
{
public:
	FGetMotionIntensity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsActiveTalker
{
public:
	FGetIsActiveTalker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFishingStats
{
public:
	FFishingStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetFishCaught() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetFishKept() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetFishReleased() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetLinesBroken() {
		return memory.read<int32_t>(m_addr + 12);
	}
	float GetHeaviestFishCaught() {
		return memory.read<float>(m_addr + 16);
	}
	float GetLongestFishCaught() {
		return memory.read<float>(m_addr + 20);
	}
	struct TArray<struct FCaughtFishData> GetFishSpeciesCaught() {
		return memory.read<struct TArray<struct FCaughtFishData>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCharacterAction
{
public:
	FGetCharacterAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCharacterAction GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCharacterAction(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFiringMode
{
public:
	FSetFiringMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDuration
{
public:
	FGetDuration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCaughtFishData
{
public:
	FCaughtFishData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetFishSpecies() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	int32_t GetAmount() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMalfunction
{
public:
	FSetMalfunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetBehaviourMode
{
public:
	FServer_SetBehaviourMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmode() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SendPackedPlayerLocationsForMap
{
public:
	FClient_SendPackedPlayerLocationsForMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AConZPlayerState> GetplayerStates() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AConZPlayerState>(ptr_addr);
	}
	struct TArray<uint32_t> GetpackedMapLocations() {
		return memory.read<struct TArray<uint32_t>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDamageMultiplier
{
public:
	FDamageMultiplier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMultiplier() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerViolation
{
public:
	FPrisonerViolation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FClient_SetCommitSuicideOptionTime
{
public:
	FClient_SetCommitSuicideOptionTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMoveFocusDown
{
public:
	FMoveFocusDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetUINavigation() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct UWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTreeCanopyCapsule
{
public:
	FTreeCanopyCapsule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 24);
	}
	float GetLength() {
		return memory.read<float>(m_addr + 28);
	}
	float GetCanopyDensity() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SetIsAdmin
{
public:
	FClient_SetIsAdmin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_PickupCorpse
{
public:
	FServer_PickupCorpse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACorpse GetCorpse() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACorpse(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SetRespawnOptionTime
{
public:
	FClient_SetRespawnOptionTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getoption() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnResourceDestroyed
{
public:
	FOnResourceDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetResource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPenisSkeletalMeshComponent
{
public:
	FGetPenisSkeletalMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdatePerception
{
public:
	FUpdatePerception(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AActor> GetactorsPercepted() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMaxNumberOfCharacters
{
public:
	FSetMaxNumberOfCharacters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanMemberKickRank
{
public:
	FCanMemberKickRank(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	uint8_t  GetRank() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FRepairToolItemParams
{
public:
	FRepairToolItemParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagContainer GetRepairableItemTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 0);
	}
	struct UAkAudioEvent GetStartRepairSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopRepairSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAnimMontage GetStartRepairMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetStopRepairMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAnimMontage(ptr_addr);
	}
	float GetHealthGainPerUseMultiplier() {
		return memory.read<float>(m_addr + 64);
	}
	struct TArray<struct FRequiredRepairingItemTagParams> GetRequiredRepairingItemTagsParms() {
		return memory.read<struct TArray<struct FRequiredRepairingItemTagParams>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SetRespawnWaitTime
{
public:
	FClient_SetRespawnWaitTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSeconds() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticMeshMaterialPair
{
public:
	FStaticMeshMaterialPair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMesh(ptr_addr);
	}
	struct TArray<struct UMaterialInterface> GetMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UMaterialInterface>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FComputeFameLevel
{
public:
	FComputeFameLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFamePoints() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAkRTPCValue
{
public:
	FSetAkRTPCValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetRTPC() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 8);
	}
	int32_t GetInterpolationTimeMs() {
		return memory.read<int32_t>(m_addr + 12);
	}
	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FResourceLockingManager_Server_UnlockIntersectingAreas
{
public:
	FResourceLockingManager_Server_UnlockIntersectingAreas(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBox GetArea() {
		return memory.read<struct FBox>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUserProfile
{
public:
	FGetUserProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UUserProfile GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UUserProfile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMapHUDObject
{
public:
	FMapHUDObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Get_priority() {
		return memory.read<int32_t>(m_addr + 8);
	}
	bool Get_showText() {
		return memory.read<bool>(m_addr + 12);
	}
	bool Get_showMarkers() {
		return memory.read<bool>(m_addr + 13);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPostFreeLookControllerRotationBlendActive
{
public:
	FIsPostFreeLookControllerRotationBlendActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZMapLocationProperties
{
public:
	FConZMapLocationProperties(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetDesiredFallingPose
{
public:
	FNetMulticast_SetDesiredFallingPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetPose() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool Getforce() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAchievementsManagerClient
{
public:
	FGetAchievementsManagerClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAchievementsManagerClient GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAchievementsManagerClient(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLeanAmount
{
public:
	FGetLeanAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUseFuelUsagePerHourMultiplierWhenActive
{
public:
	FGetUseFuelUsagePerHourMultiplierWhenActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCameraManager
{
public:
	FGetCameraManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCameraManager GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCameraManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetItemContainer
{
public:
	FGetItemContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AVehicleItemContainer GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AVehicleItemContainer(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBurnPointDamageEvent
{
public:
	FBurnPointDamageEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetCommitSuicideOptionTimeLeft
{
public:
	FGetCommitSuicideOptionTimeLeft(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDialogueManager
{
public:
	FGetDialogueManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AMissionDialogueManager GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AMissionDialogueManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SendMissionInvitation
{
public:
	FClient_SendMissionInvitation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AMissionManager Getmanager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AMissionManager(ptr_addr);
	}
	struct AMission GetMission() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AMission(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFameLevel
{
public:
	FGetFameLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFameMultiplier
{
public:
	FGetFameMultiplier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RespawnAtCommonSpawnLocation
{
public:
	FServer_RespawnAtCommonSpawnLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetcommonSpawnLocation() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FSectorId GetSectorId() {
		return memory.read<struct FSectorId>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanOpenTabMode
{
public:
	FCanOpenTabMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmode() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FObjectiveDataGroup
{
public:
	FObjectiveDataGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TSoftClassPtr<UObject>> GetRewardItems() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 0);
	}
	float GetRewardFamePoints() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveStolenItemOnServer
{
public:
	FRemoveStolenItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetstolenPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFamePoints
{
public:
	FGetFamePoints(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBasicPrisonerBodySymptomNotificationParameters
{
public:
	FBasicPrisonerBodySymptomNotificationParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatRange GetSeverityRange() {
		return memory.read<struct FFloatRange>(m_addr + 0);
	}
	UNotificationDescription GetNotification() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UNotificationDescription(ptr_addr);
	}
	int32_t GetMaxNumTriggers() {
		return memory.read<int32_t>(m_addr + 24);
	}
	struct FFloatInterval GetTriggerInterval() {
		return memory.read<struct FFloatInterval>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FDropZoneParameters
{
public:
	FDropZoneParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetIntroAnnouncementDelay() {
		return memory.read<float>(m_addr + 0);
	}
	float GetWarmupPhaseDuration() {
		return memory.read<float>(m_addr + 4);
	}
	float GetCrateDropDuration() {
		return memory.read<float>(m_addr + 8);
	}
	float GetSearchPhaseTimeLimit() {
		return memory.read<float>(m_addr + 12);
	}
	float GetCargoDropDuration() {
		return memory.read<float>(m_addr + 16);
	}
	float GetCapturePhaseTimeLimit() {
		return memory.read<float>(m_addr + 20);
	}
	float GetCargoOpeningDuration() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetSkipKeyPhase() {
		return memory.read<bool>(m_addr + 28);
	}
	struct FGameEventRewardPoints GetPointsPerActivation() {
		return memory.read<struct FGameEventRewardPoints>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGameEventCooldown
{
public:
	FGetGameEventCooldown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUserProfileId
{
public:
	FGetUserProfileId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetReturnValue() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMissionDialogueManager
{
public:
	FGetMissionDialogueManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AMissionDialogueManager GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AMissionDialogueManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCutObjectOnServer
{
public:
	FCutObjectOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct UMeshComponent GetMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMeshComponent(ptr_addr);
	}
	struct FMeshInstanceId GetInstanceId() {
		return memory.read<struct FMeshInstanceId>(m_addr + 16);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	bool GetcollectOnly() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNoiseEmitterComponent
{
public:
	FGetNoiseEmitterComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPawnNoiseEmitterComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPawnNoiseEmitterComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBandages
{
public:
	FBandages(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_amount() {
		return memory.read<float>(m_addr + 0);
	}
	struct TArray<struct FBandage> Get_bandages() {
		return memory.read<struct TArray<struct FBandage>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayerRpcChannel
{
public:
	FGetPlayerRpcChannel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPlayerRpcChannel GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPlayerRpcChannel(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNightVisionEnabled
{
public:
	FSetNightVisionEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterHeadImpactSoundData
{
public:
	FCharacterHeadImpactSoundData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<uint8_t > GetImpactSourceCategories() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 0);
	}
	struct TArray<uint8_t > GetImpactTargetCategories() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 16);
	}
	struct FCharacterImpactSounds GetSounds() {
		return memory.read<struct FCharacterImpactSounds>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDesiredLeanAmount
{
public:
	FSetDesiredLeanAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxHairLength
{
public:
	FGetMaxHairLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetGender() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrisoner
{
public:
	FGetPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFiringMode
{
public:
	FGetFiringMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRespawnOptionTimeLeft
{
public:
	FGetRespawnOptionTimeLeft(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getoption() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanInterrupt
{
public:
	FCanInterrupt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRespawnWaitTime
{
public:
	FGetRespawnWaitTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetServerUserProfileId
{
public:
	FGetServerUserProfileId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetReturnValue() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReplenishableResourceDescription
{
public:
	FReplenishableResourceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UGameResourceType(ptr_addr);
	}
	struct FGameplayTagContainer GetInSocketTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 16);
	}
	struct FGameplayTagContainer GetOutSocketTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 48);
	}
	float GetPricePerUnit() {
		return memory.read<float>(m_addr + 80);
	}
	bool GetIsReplenishedPeriodically() {
		return memory.read<bool>(m_addr + 84);
	}
	struct FPeriodicallyReplenishedResourceDescription GetPeriodicReplenishment() {
		return memory.read<struct FPeriodicallyReplenishedResourceDescription>(m_addr + 88);
	}
	struct FProximityReplenishedResourceDescription GetProximityReplenishment() {
		return memory.read<struct FProximityReplenishedResourceDescription>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTeleportWorldStreamingLocationChangeDelay
{
public:
	FGetTeleportWorldStreamingLocationChangeDelay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSentryPatrolPoint
{
public:
	FSentryPatrolPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocationRelativeToSentry() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTotalDamage
{
public:
	FGetTotalDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUserId
{
public:
	FGetUserId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUserName2
{
public:
	FGetUserName2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUserProfileName
{
public:
	FGetUserProfileName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateMini
{
public:
	FCreateMini(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameEventBase GetgameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGameEventBase(ptr_addr);
	}
	UGameEventParticipantStatsWidget GetstatClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UGameEventParticipantStatsWidget(ptr_addr);
	}
	UGameEventTeamHeaderWidget GetteamHeaderClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UGameEventTeamHeaderWidget(ptr_addr);
	}
	struct UGameEventScoreboardWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UGameEventScoreboardWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRecipeSelectedDelegate__DelegateSignature
{
public:
	FRecipeSelectedDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCraftingRecipeWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCraftingRecipeWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInitializePathFollowingComponent
{
public:
	FInitializePathFollowingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMakeNoiseLoudness
{
public:
	FSetMakeNoiseLoudness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetItem
{
public:
	FGetItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_ApplyPointDamage
{
public:
	FServer_ApplyPointDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamage() {
		return memory.read<float>(m_addr + 0);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 4);
	}
	uint8_t  GetdamageChannel() {
		return memory.read<uint8_t >(m_addr + 140);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ForceDeluxePlayer
{
public:
	FNetMulticast_ForceDeluxePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetDeluxeVersion() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPushToTalkPressed
{
public:
	FIsPushToTalkPressed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTraderUnsubscribeData
{
public:
	FTraderUnsubscribeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetIsLanding
{
public:
	FGetIsLanding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSelectedIndex
{
public:
	FGetSelectedIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ReleaseReplenishableResourceSlot
{
public:
	FNetMulticast_ReleaseReplenishableResourceSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FPackedLocation GetID() {
		return memory.read<struct FPackedLocation>(m_addr + 8);
	}
	int32_t GetSlotIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsTeleportInProgress
{
public:
	FIsTeleportInProgress(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnBeingAttackedByMelee
{
public:
	FOnBeingAttackedByMelee(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FAttackedByMeleeData GetData() {
		return memory.read<struct FAttackedByMeleeData>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FJoinGameEvent
{
public:
	FJoinGameEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameEventBase GetgameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGameEventBase(ptr_addr);
	}
	int32_t GetpreferredTeam() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerSpawnedDelegate__DelegateSignature
{
public:
	FPrisonerSpawnedDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetspawnedPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRegisterRespawn
{
public:
	FRegisterRespawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getoption() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_PrisonWalletHandleItemSpawning
{
public:
	FServer_PrisonWalletHandleItemSpawning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSendHUDMessageToAll
{
public:
	FSendHUDMessageToAll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool Getbeep() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPartWetness
{
public:
	FGetPartWetness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getpart() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindParticipantIndex
{
public:
	FFindParticipantIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPartWaterWeight
{
public:
	FSetPartWaterWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getpart() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FEngineeringSkillParametersPerSkillLevel
{
public:
	FEngineeringSkillParametersPerSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRepairRadius() {
		return memory.read<float>(m_addr + 0);
	}
	float GetRepairTimeMultiplier() {
		return memory.read<float>(m_addr + 4);
	}
	float GetResultQuality() {
		return memory.read<float>(m_addr + 8);
	}
	float GetIngredientMultiplier() {
		return memory.read<float>(m_addr + 12);
	}
	float GetToolUsageMultiplier() {
		return memory.read<float>(m_addr + 16);
	}
	float GetFillFuelDurationMultiplier() {
		return memory.read<float>(m_addr + 20);
	}
	float GetDrainFuelDurationMultiplier() {
		return memory.read<float>(m_addr + 24);
	}
	float GetChargeBatteryDurationMultiplier() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FSendHUDMessageToClient
{
public:
	FSendHUDMessageToClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBurialInformation
{
public:
	FBurialInformation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetBurierUserId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	bool GetShouldBury() {
		return memory.read<bool>(m_addr + 8);
	}
	struct FVector GetBurialLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_HeartbeatResponse
{
public:
	FServer_HeartbeatResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t Getcode() {
		return memory.read<uint32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTriggeredEventData
{
public:
	FTriggeredEventData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetDesiredCoursePitchAngle
{
public:
	FGetDesiredCoursePitchAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCalculateRespawnPriceBasedOnSquadSize
{
public:
	FCalculateRespawnPriceBasedOnSquadSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdefaultPrice() {
		return memory.read<int32_t>(m_addr + 0);
	}
	uint8_t  GetSpawnLocation() {
		return memory.read<uint8_t >(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_JoinGameEvent
{
public:
	FServer_JoinGameEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameEventBase GetgameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGameEventBase(ptr_addr);
	}
	int32_t GetpreferredTeam() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_MountedActorHasBegunPlay
{
public:
	FServer_MountedActorHasBegunPlay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateDateVsGoldPriceMasterMultiplierMap
{
public:
	FNetMulticast_UpdateDateVsGoldPriceMasterMultiplierMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<struct FDateTime> Getdates() {
		return memory.read<struct TArray<struct FDateTime>>(m_addr + 8);
	}
	struct TArray<float> Getmultipliers() {
		return memory.read<struct TArray<float>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryComponent_ItemEquipped
{
public:
	FInventoryComponent_ItemEquipped(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerInventoryComponent Getsender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerInventoryComponent(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_ProcessCharacterModificationTransaction
{
public:
	FServer_ProcessCharacterModificationTransaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GettransactionId() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FCharacterTemplate GetCharacterTemplate() {
		return memory.read<struct FCharacterTemplate>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FHitReactDirectionData
{
public:
	FHitReactDirectionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FHitReactBodyPartDataItem> GetFrontHit() {
		return memory.read<struct TArray<struct FHitReactBodyPartDataItem>>(m_addr + 0);
	}
	struct TArray<struct FHitReactBodyPartDataItem> GetLeftHit() {
		return memory.read<struct TArray<struct FHitReactBodyPartDataItem>>(m_addr + 16);
	}
	struct TArray<struct FHitReactBodyPartDataItem> GetBackHit() {
		return memory.read<struct TArray<struct FHitReactBodyPartDataItem>>(m_addr + 32);
	}
	struct TArray<struct FHitReactBodyPartDataItem> GetRightHit() {
		return memory.read<struct TArray<struct FHitReactBodyPartDataItem>>(m_addr + 48);
	}
	float GetRegainControlDurationMultiplier() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterTemplate
{
public:
	FCharacterTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStrength() {
		return memory.read<float>(m_addr + 0);
	}
	float GetConstitution() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDexterity() {
		return memory.read<float>(m_addr + 8);
	}
	float GetIntelligence() {
		return memory.read<float>(m_addr + 12);
	}
	int32_t GetAge() {
		return memory.read<int32_t>(m_addr + 16);
	}
	uint8_t  GetGender() {
		return memory.read<uint8_t >(m_addr + 20);
	}
	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 24);
	}
	int32_t GetAppearanceIndex() {
		return memory.read<int32_t>(m_addr + 40);
	}
	int32_t GetTattooIndex() {
		return memory.read<int32_t>(m_addr + 44);
	}
	int32_t GetHairStyleIndex() {
		return memory.read<int32_t>(m_addr + 48);
	}
	int32_t GetFacialHairStyleIndex() {
		return memory.read<int32_t>(m_addr + 52);
	}
	float GetBreastSize() {
		return memory.read<float>(m_addr + 56);
	}
	float GetPenisSize() {
		return memory.read<float>(m_addr + 60);
	}
	bool GetGrowOverTime() {
		return memory.read<bool>(m_addr + 64);
	}
	int32_t GetTeamIndex() {
		return memory.read<int32_t>(m_addr + 68);
	}
	struct FString GetBirthDate() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetArrestDate() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct TArray<struct FSkillTemplate> GetSkills() {
		return memory.read<struct TArray<struct FSkillTemplate>>(m_addr + 104);
	}
	AItem GetItem0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return AItem(ptr_addr);
	}
	AItem GetItem1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return AItem(ptr_addr);
	}
	AItem GetItem2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return AItem(ptr_addr);
	}
	int32_t GetFaceTypeIndex() {
		return memory.read<int32_t>(m_addr + 144);
	}
	int32_t GetSkinToneIndex() {
		return memory.read<int32_t>(m_addr + 148);
	}
	int32_t GetHairColorId() {
		return memory.read<int32_t>(m_addr + 152);
	}
	int32_t GetFacialHairColorId() {
		return memory.read<int32_t>(m_addr + 156);
	}
	int32_t GetEyeColorIndex() {
		return memory.read<int32_t>(m_addr + 160);
	}
	int32_t GetIrisTypeIndex() {
		return memory.read<int32_t>(m_addr + 164);
	}
	struct FLinearColor GetEyeshadowColor() {
		return memory.read<struct FLinearColor>(m_addr + 168);
	}
	struct FLinearColor GetEyelinerColor() {
		return memory.read<struct FLinearColor>(m_addr + 184);
	}
	struct FLinearColor GetLipstickColor() {
		return memory.read<struct FLinearColor>(m_addr + 200);
	}
	char GetEyeMakeupMetalness() {
		return memory.read<char>(m_addr + 216);
	}
	char GetEyeMakeupIntensity() {
		return memory.read<char>(m_addr + 217);
	}
	char GetLipstickRoughness() {
		return memory.read<char>(m_addr + 218);
	}
	char GetLipstickIntensity() {
		return memory.read<char>(m_addr + 219);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTakeDamageHandler
{
public:
	FOnTakeDamageHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetdamageActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetDamage() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetHitLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct APawn GeteventInstigator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBlockToIdleBlendDuration
{
public:
	FGetBlockToIdleBlendDuration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotifyMissOnServer
{
public:
	FNotifyMissOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector_NetQuantizeNormal GetshootDirection() {
		return memory.read<struct FVector_NetQuantizeNormal>(m_addr + 0);
	}
	int32_t GetrandomSeed() {
		return memory.read<int32_t>(m_addr + 12);
	}
	float GetreticleSpread() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkillTemplate
{
public:
	FSkillTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetAttribute() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FText GetName() {
		return memory.read<struct FText>(m_addr + 8);
	}
	struct FString GetClassName() {
		return memory.read<struct FString>(m_addr + 32);
	}
	uint8_t  GetLevel() {
		return memory.read<uint8_t >(m_addr + 48);
	}
	float GetExperience() {
		return memory.read<float>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FRadioProgramData
{
public:
	FRadioProgramData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	URadioProgram GetProgramClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return URadioProgram(ptr_addr);
	}
	struct URadioProgram GetProgram() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct URadioProgram(ptr_addr);
	}
	float GetChance() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDraggedItemPreRotated
{
public:
	FOnDraggedItemPreRotated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemWidget2 GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UItemWidget2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RequestGameEventTeamChange
{
public:
	FServer_RequestGameEventTeamChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetpreferredTeam() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FActivateFacialExpressionOnGameThread
{
public:
	FActivateFacialExpressionOnGameThread(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetfacialExpression() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetBlendInDuration() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 8);
	}
	float GetBlendOutDuration() {
		return memory.read<float>(m_addr + 12);
	}
	float GetblendWeightMultiplier() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RequestSurvivalStats
{
public:
	FServer_RequestSurvivalStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetID() {
		return memory.read<uint32_t>(m_addr + 0);
	}
	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SelfKickFromGameSession
{
public:
	FServer_SelfKickFromGameSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getreason() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRandomPointWithinTwoCircles
{
public:
	FGetRandomPointWithinTwoCircles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetcenterA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetradiusA() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector2D GetcenterB() {
		return memory.read<struct FVector2D>(m_addr + 12);
	}
	float GetradiusB() {
		return memory.read<float>(m_addr + 20);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetRefreshPawnLocationForMap
{
public:
	FServer_SetRefreshPawnLocationForMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTime
{
public:
	FSetTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMinutes() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetSeconds() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerNearbyFoliageInstanceInfoReplicated
{
public:
	FPrisonerNearbyFoliageInstanceInfoReplicated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UInstancedStaticMeshComponent> GetInstancedMeshComponent() {
		return memory.read<struct TWeakObjectPtr<UInstancedStaticMeshComponent>>(m_addr + 0);
	}
	struct FPackedLocation GetPackedLocation() {
		return memory.read<struct FPackedLocation>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConsumableSave
{
public:
	FConsumableSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMassToConsume() {
		return memory.read<float>(m_addr + 0);
	}
	float GetConsumptionDuration() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDensity() {
		return memory.read<float>(m_addr + 8);
	}
	struct FSubstancesData GetSubstances() {
		return memory.read<struct FSubstancesData>(m_addr + 16);
	}
	struct TArray<struct FString> GetForeignSubstanceClasses() {
		return memory.read<struct TArray<struct FString>>(m_addr + 224);
	}
	struct TArray<char> GetUserData() {
		return memory.read<struct TArray<char>>(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHUDMode
{
public:
	FGetHUDMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCurrencyBalanceRep
{
public:
	FSetCurrencyBalanceRep(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetCurrencyType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	int64_t GetcurrencyBalance() {
		return memory.read<int64_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPushToTalkEnabled
{
public:
	FIsPushToTalkEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLastCorpse
{
public:
	FGetLastCorpse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACorpse GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACorpse(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPhysicalSurfaceVehicleTireParticleData
{
public:
	FPhysicalSurfaceVehicleTireParticleData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem GetParticleTrail() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetParticleWave() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UParticleSystem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRespawnOptionTime
{
public:
	FSetRespawnOptionTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getoption() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 4);
	}
	bool Getforce() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBankATMCarouselCardStateVisual
{
public:
	FBankATMCarouselCardStateVisual(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMargin GetPadding() {
		return memory.read<struct FMargin>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentWheelSetup
{
public:
	FVehicleAttachmentWheelSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRadius() {
		return memory.read<float>(m_addr + 0);
	}
	float GetSteeringAngle() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetApplyTorque() {
		return memory.read<bool>(m_addr + 8);
	}
	float GetBrakeStrengthMultiplier() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetApplyHandbrake() {
		return memory.read<bool>(m_addr + 16);
	}
	float GetSuspensionLength() {
		return memory.read<float>(m_addr + 20);
	}
	float GetSuspensionStrength() {
		return memory.read<float>(m_addr + 24);
	}
	float GetSuspensionDamping() {
		return memory.read<float>(m_addr + 28);
	}
	float GetSuspensionRestLength() {
		return memory.read<float>(m_addr + 32);
	}
	float GetSuspensionAngle() {
		return memory.read<float>(m_addr + 36);
	}
	struct FName GetSteeringBoneName() {
		return memory.read<struct FName>(m_addr + 40);
	}
	struct FName GetSuspensionBoneName() {
		return memory.read<struct FName>(m_addr + 48);
	}
	float GetMinWobbleAngleDeg() {
		return memory.read<float>(m_addr + 56);
	}
	float GetMaxWobbleAngleDeg() {
		return memory.read<float>(m_addr + 60);
	}
	bool GetShouldSpawnParticles() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FTargetTypeDamageMultiplier
{
public:
	FTargetTypeDamageMultiplier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FDamageMultiplier> Get_multipliers() {
		return memory.read<struct TArray<struct FDamageMultiplier>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTeleportWorldStreamingLocationChangeDelay
{
public:
	FSetTeleportWorldStreamingLocationChangeDelay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGoToRagdoll
{
public:
	FGoToRagdoll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FZombieRagdollAutoRecovery GetautoRecovery() {
		return memory.read<struct FZombieRagdollAutoRecovery>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDamageMultiplierTracker
{
public:
	FDamageMultiplierTracker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Get_baseDamage() {
		return memory.read<float>(m_addr + 0);
	}
	float Get_finalDamage() {
		return memory.read<float>(m_addr + 4);
	}
	struct TArray<struct FString> Get_appliedMultiplierNames() {
		return memory.read<struct TArray<struct FString>>(m_addr + 8);
	}
	struct TArray<float> Get_appliedMultiplierValues() {
		return memory.read<struct TArray<float>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerNearbyFoliageInfo
{
public:
	FPrisonerNearbyFoliageInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerNearbyFoliageInstanceInfo> GetInstancesInfo() {
		return memory.read<struct TArray<struct FPrisonerNearbyFoliageInstanceInfo>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAerodynamicSurfaceControlData
{
public:
	FAerodynamicSurfaceControlData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetIndices() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}
	float GetMaxHealth() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowKillFeedNotificationOnClient
{
public:
	FShowKillFeedNotificationOnClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getprefix() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetcharacterName() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString Getsuffix() {
		return memory.read<struct FString>(m_addr + 32);
	}
	bool Getping() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCardWidget
{
public:
	FGetCardWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameEventCardWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UGameEventCardWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseInteractionParams
{
public:
	FBaseInteractionParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetElementID() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBankTransactionRequestData
{
public:
	FBankTransactionRequestData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FShowLevelUpMessage
{
public:
	FShowLevelUpMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkill GetSkill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkill(ptr_addr);
	}
	uint8_t  GetskillLevel() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasHandBondage
{
public:
	FHasHandBondage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomZoneDisplayData
{
public:
	FCustomZoneDisplayData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FText GetName() {
		return memory.read<struct FText>(m_addr + 16);
	}
	struct FText GetDescription() {
		return memory.read<struct FText>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FSplineDescription
{
public:
	FSplineDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USplineComponent GetSplineComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USplineComponent(ptr_addr);
	}
	struct TArray<struct USplineMeshComponent> GetSplineMeshComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct USplineMeshComponent>(ptr_addr);
	}
	struct UStaticMeshComponent GetSplineStartConnector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetSplineEndConnector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowLevelUpMessageFromClass
{
public:
	FShowLevelUpMessageFromClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	USkill GetskillClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return USkill(ptr_addr);
	}
	uint8_t  GetskillLevel() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowWarningMessage
{
public:
	FShowWarningMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 0);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 16);
	}
	struct FLinearColor GetTextColor() {
		return memory.read<struct FLinearColor>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FElementQueryMarker
{
public:
	FElementQueryMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetInclude() {
		return memory.read<bool>(m_addr + 0);
	}
	UModularBaseBuildingSocketType GetSocketClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UModularBaseBuildingSocketType(ptr_addr);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnEquipClothesItemOnServer
{
public:
	FUnEquipClothesItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AClothesItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AClothesItem(ptr_addr);
	}
	bool GetplaceInInventory() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetshouldEverDrop() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetActiveParachute
{
public:
	FNetMulticast_SetActiveParachute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AClothesItem GetParachute() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AClothesItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnPlaceableDestroyed
{
public:
	FOnPlaceableDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTeleport
{
public:
	FTeleport(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerTeleportRequest Getrequest() {
		return memory.read<struct FPrisonerTeleportRequest>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHitReactBodyPartDataItem
{
public:
	FHitReactBodyPartDataItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontageToPlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFollowupMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}
	float GetRegainControlDurationMultiplier() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRangedWeaponSkillParametersPerSkillLevel
{
public:
	FRangedWeaponSkillParametersPerSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCrosshairHidingDuration() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClimbableObstacleInfo
{
public:
	FClimbableObstacleInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetEdgeLocationZero() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetEdgeHeight() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetHWallNormal() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FVector GetVWallNormal() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	struct FVector GetCapsuleLocationAtAnchorZero() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FRotator GetCapsuleRotationAtAnchor() {
		return memory.read<struct FRotator>(m_addr + 52);
	}
	struct TWeakObjectPtr<UPrimitiveComponent> GetBaseComponent() {
		return memory.read<struct TWeakObjectPtr<UPrimitiveComponent>>(m_addr + 64);
	}
	struct FPrisonerClimbAnimationInfo GetAnimationInfo() {
		return memory.read<struct FPrisonerClimbAnimationInfo>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FTeleportRequest
{
public:
	FTeleportRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<AActor> GetSubject() {
		return memory.read<struct TWeakObjectPtr<AActor>>(m_addr + 0);
	}
	struct FVector GetTargetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetTargetRotation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}
	struct TWeakObjectPtr<UTeleportUserData> GetUserData() {
		return memory.read<struct TWeakObjectPtr<UTeleportUserData>>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FRoomDefinition
{
public:
	FRoomDefinition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetRoomDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}
	struct UStaticMeshComponent GetLocker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct AKillBoxC4SpawnPoint GetC4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AKillBoxC4SpawnPoint(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBodySimulation
{
public:
	FGetBodySimulation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerBodySimulationComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerBodySimulationComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorHitCallback
{
public:
	FActorHitCallback(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct FVector GetNormalImpulse() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_RequestCharacterAction
{
public:
	FClient_RequestCharacterAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterActionReplicationHelper GetValue() {
		return memory.read<struct FCharacterActionReplicationHelper>(m_addr + 0);
	}
	bool GetcancelExecutingAction() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZDimensionRow
{
public:
	FConZDimensionRow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 8);
	}
	struct FString GetDescription() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FScopeableItemComponent_Server_SetCurrentZoomLevel
{
public:
	FScopeableItemComponent_Server_SetCurrentZoomLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScopeableItemComponent Getcomp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UScopeableItemComponent(ptr_addr);
	}
	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterActionReplicationHelper
{
public:
	FCharacterActionReplicationHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SpawnDefecationEffects
{
public:
	FNetMulticast_SpawnDefecationEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetshouldBeDiarrhea() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetisForced() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZPlacementQueryParams
{
public:
	FConZPlacementQueryParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsSnapping() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetMustBePlacedOnFoundations() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetCanEverBePlacedOnFoundations() {
		return memory.read<bool>(m_addr + 2);
	}
	bool GetCanBePlacedOnOtherBaseElements() {
		return memory.read<bool>(m_addr + 3);
	}
	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APrisoner(ptr_addr);
	}
	bool GetCanBePlacedWithoutFlag() {
		return memory.read<bool>(m_addr + 16);
	}
	bool GetCanBePlacedInBuilding() {
		return memory.read<bool>(m_addr + 17);
	}
	bool GetCanBePlacedInRestrictedArea() {
		return memory.read<bool>(m_addr + 18);
	}
	int32_t GetMaxInstancesPerFlagArea() {
		return memory.read<int32_t>(m_addr + 20);
	}
	UObject GetClassToSpawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return UObject(ptr_addr);
	}
	bool GetIgnoreDisabledBaseBuildingFlag() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterSpawnerData
{
public:
	FCharacterSpawnerData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<APawn> GetCharacterClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<APawn>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetComponentNetAddressable
{
public:
	FSetComponentNetAddressable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UActorComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBodyPartFromBoneName
{
public:
	FGetBodyPartFromBoneName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCollidingNearbyFoliageInfo
{
public:
	FGetCollidingNearbyFoliageInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerNearbyFoliageInfo GetReturnValue() {
		return memory.read<struct FPrisonerNearbyFoliageInfo>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEnvironmentDescription
{
public:
	FGetEnvironmentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FEnvironmentDescription GetReturnValue() {
		return memory.read<struct FEnvironmentDescription>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_RemoveAreaLocks
{
public:
	FNetMulticast_RemoveAreaLocks(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<struct FAreaResourceLockNetwork> GetLocks() {
		return memory.read<struct TArray<struct FAreaResourceLockNetwork>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotifications_RequestNotification
{
public:
	FNotifications_RequestNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FNotificationDescriptionReplicationHelper GetDescription() {
		return memory.read<struct FNotificationDescriptionReplicationHelper>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCorpseSkeletalMeshRepData
{
public:
	FCorpseSkeletalMeshRepData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetDisplayName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct USkeletalMesh GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USkeletalMesh(ptr_addr);
	}
	struct TArray<struct UMaterialInterface> GetMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct UMaterialInterface>(ptr_addr);
	}
	bool GetVisibility() {
		return memory.read<bool>(m_addr + 32);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	struct FName GetAttachSocket() {
		return memory.read<struct FName>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumVehicleDoorWindows
{
public:
	FGetNumVehicleDoorWindows(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseBuilding_Server_RequestElementStateUpdate
{
public:
	FBaseBuilding_Server_RequestElementStateUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetareaSize() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FEnvironmentDescription
{
public:
	FEnvironmentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetEnvironmentClass() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool GetIsUnderground() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetShouldBlockWeatherEffects() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FLegalTender
{
public:
	FLegalTender(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetAmount() {
		return memory.read<int32_t>(m_addr + 0);
	}
	uint8_t  GetCurrency() {
		return memory.read<uint8_t >(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildingsReplicationHelper
{
public:
	FBuildingsReplicationHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FBuildingData> GetBuildingsData() {
		return memory.read<struct TMap<struct FString, struct FBuildingData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetClampedDesiredPace
{
public:
	FGetClampedDesiredPace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMissionReward
{
public:
	FMissionReward(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<AItem> GetRewardItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<AItem>(ptr_addr);
	}
	float GetRewardFamePoints() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetRewardReceived() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGender
{
public:
	FGetGender(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UnregisterLadderMarker
{
public:
	FNetMulticast_UnregisterLadderMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FLadderMarker Getmarker() {
		return memory.read<struct FLadderMarker>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHitReactBodyPartFromBodyPart
{
public:
	FGetHitReactBodyPartFromBodyPart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FLadderMarker
{
public:
	FLadderMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetFirstStep() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FVector GetLastStep() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FTransform GetEdge() {
		return memory.read<struct FTransform>(m_addr + 64);
	}
	struct FVector GetCapsuleBias() {
		return memory.read<struct FVector>(m_addr + 112);
	}
	float GetStepHeight() {
		return memory.read<float>(m_addr + 124);
	}
	float GetStepWidth() {
		return memory.read<float>(m_addr + 128);
	}
	float GetHitDetectionExtraAboveLastStep() {
		return memory.read<float>(m_addr + 132);
	}
	float GetHitDetectionExtraBelowFirstStep() {
		return memory.read<float>(m_addr + 136);
	}
	float GetHitDetectionExtraOnTheSides() {
		return memory.read<float>(m_addr + 140);
	}
	bool GetHasEdge() {
		return memory.read<bool>(m_addr + 144);
	}
	bool GetIsNarrow() {
		return memory.read<bool>(m_addr + 145);
	}
	char EPhysicalSurface GetPhysicalSurfaceForSounds() {
		return memory.read<char EPhysicalSurface>(m_addr + 146);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxAllowedPace
{
public:
	FGetMaxAllowedPace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLastDirectConnectionAddress
{
public:
	FSetLastDirectConnectionAddress(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLiveAmmoCount
{
public:
	FGetLiveAmmoCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAlive
{
public:
	FIsAlive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWindowMarkerModifier
{
public:
	FWindowMarkerModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetIsVaultable() {
		return memory.read<bool>(m_addr + 4);
	}
	bool GetIsFortifiable() {
		return memory.read<bool>(m_addr + 5);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHitReactBodyPartFromHitResult
{
public:
	FGetHitReactBodyPartFromHitResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_ActivateIntroCinematic
{
public:
	FClient_ActivateIntroCinematic(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetinitialAltitude() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCombinationLockGetCombinationRequestData
{
public:
	FCombinationLockGetCombinationRequestData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetDesiredWidgetClass
{
public:
	FGetDesiredWidgetClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	UUserWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDetectLadderDisembarkLocation
{
public:
	FDetectLadderDisembarkLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLadderInfo GetLadderInfo() {
		return memory.read<struct FLadderInfo>(m_addr + 0);
	}
	struct FVector GetnewCapsuleLocation() {
		return memory.read<struct FVector>(m_addr + 176);
	}
	struct FRotator GetnewCapsuleRotation() {
		return memory.read<struct FRotator>(m_addr + 188);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrivingSkillEngineStallingParameters
{
public:
	FDrivingSkillEngineStallingParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetChance() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMinDuration() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMaxDuration() {
		return memory.read<float>(m_addr + 8);
	}
	float GetStopEngineChance() {
		return memory.read<float>(m_addr + 12);
	}
	struct UCurveFloat GetThrottleCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UCurveFloat(ptr_addr);
	}
	float GetThrottleCurveFrequencyMultiplier() {
		return memory.read<float>(m_addr + 24);
	}
	struct UCurveFloat GetBrakeCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UCurveFloat(ptr_addr);
	}
	float GetBrakeCurveFrequencyMultiplier() {
		return memory.read<float>(m_addr + 40);
	}
	float GetForceMagnitudeScale() {
		return memory.read<float>(m_addr + 44);
	}
	struct UCurveFloat GetForceMagnitudeScaleCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UCurveFloat(ptr_addr);
	}
	float GetForceMagnitudeScaleCurveFrequencyMultiplier() {
		return memory.read<float>(m_addr + 56);
	}
	float GetForceDirectionRandomizationAngle() {
		return memory.read<float>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSoundComponent
{
public:
	FGetSoundComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCharacterSoundComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCharacterSoundComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerRestingData
{
public:
	FPrisonerRestingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmode() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool GetIsRestingOnGround() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetHasChangedTransform() {
		return memory.read<bool>(m_addr + 2);
	}
	bool GetHasDisabledCapsuleCollision() {
		return memory.read<bool>(m_addr + 3);
	}
	struct TWeakObjectPtr<UAnimSequenceBase> GetRestingAnimation() {
		return memory.read<struct TWeakObjectPtr<UAnimSequenceBase>>(m_addr + 4);
	}
	float GetFeetIKOffset() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasCharacterAction
{
public:
	FHasCharacterAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnexamineItemOnServer
{
public:
	FUnexamineItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentCurrencyTextColorAndOpacity
{
public:
	FGetCurrentCurrencyTextColorAndOpacity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateColor GetReturnValue() {
		return memory.read<struct FSlateColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsConscious
{
public:
	FIsConscious(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMapHUDWorldEventsObject
{
public:
	FMapHUDWorldEventsObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FMetabolismAPBFontStyle
{
public:
	FMetabolismAPBFontStyle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFont GetFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UFont(ptr_addr);
	}
	int32_t GetFontSize() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct FMargin GetTitlePadding() {
		return memory.read<struct FMargin>(m_addr + 12);
	}
	struct FMargin GetValuePadding() {
		return memory.read<struct FMargin>(m_addr + 28);
	}
	char EVerticalAlignment GetTitleVerticalAlignment() {
		return memory.read<char EVerticalAlignment>(m_addr + 44);
	}
	char EHorizontalAlignment GetTitleHorizontalAlignment() {
		return memory.read<char EHorizontalAlignment>(m_addr + 45);
	}
	char EVerticalAlignment GetValueVerticalAlignment() {
		return memory.read<char EVerticalAlignment>(m_addr + 46);
	}
	char EHorizontalAlignment GetValueHorizontalAlignment() {
		return memory.read<char EHorizontalAlignment>(m_addr + 47);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetMalfunction
{
public:
	FServer_SetMalfunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBodyWeaponAnimation
{
public:
	FBodyWeaponAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetBody() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsCompletelyInitialized
{
public:
	FIsCompletelyInitialized(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetParticipantTeam
{
public:
	FGetParticipantTeam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumMountees
{
public:
	FGetNumMountees(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsHeadBone
{
public:
	FIsHeadBone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingRecipeCraftingItem
{
public:
	FCraftingRecipeCraftingItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AItem GetItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AItem(ptr_addr);
	}
	int32_t GetQuantity() {
		return memory.read<int32_t>(m_addr + 8);
	}
	bool GetIsOptional() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseInteractionComponent_OnBaseInteractionEvent
{
public:
	FBaseInteractionComponent_OnBaseInteractionEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBaseInteractionComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBaseInteractionComponent(ptr_addr);
	}
	struct FBaseInteractionEvent GetBaseInteractionEvent() {
		return memory.read<struct FBaseInteractionEvent>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLeaveCorpse
{
public:
	FLeaveCorpse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACorpse GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACorpse(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddAttachmentOnServer
{
public:
	FAddAttachmentOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FParachuteAnimParams
{
public:
	FParachuteAnimParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequence GetOpeningAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequence(ptr_addr);
	}
	struct FFloatInterval GetOpeningAnimationTimeRange() {
		return memory.read<struct FFloatInterval>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentSave
{
public:
	FVehicleAttachmentSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetData() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterActionAck
{
public:
	FCharacterActionAck(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetActionId() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetSubActionIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	uint8_t  GetEndState() {
		return memory.read<uint8_t >(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimalPaceSettings
{
public:
	FAnimalPaceSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRunSpeed() {
		return memory.read<float>(m_addr + 0);
	}
	float GetTrotSpeed() {
		return memory.read<float>(m_addr + 4);
	}
	float GetWalkSpeed() {
		return memory.read<float>(m_addr + 8);
	}
	float GetSneakSpeed() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSearchPerItemData
{
public:
	FSearchPerItemData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	struct TArray<struct UPhysicalMaterial> GetNeededMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<struct UPhysicalMaterial>(ptr_addr);
	}
	float GetProbability() {
		return memory.read<float>(m_addr + 56);
	}
	int32_t GetMinQuantity() {
		return memory.read<int32_t>(m_addr + 60);
	}
	int32_t GetMaxQuantity() {
		return memory.read<int32_t>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasItemOfClass
{
public:
	FHasItemOfClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanInteract
{
public:
	FCanInteract(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_HandleMeleeAttackCapsuleHit
{
public:
	FNetMulticast_HandleMeleeAttackCapsuleHit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter Getattacker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}
	struct FMeleeAttackCapsuleHitInfo GetHitInfo() {
		return memory.read<struct FMeleeAttackCapsuleHitInfo>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetParticipantAtRank
{
public:
	FGetParticipantAtRank(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetRank() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCookedFoodIngredientNetData
{
public:
	FCookedFoodIngredientNetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetResource() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 0);
	}
	float GetMass() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FClothesPartSet
{
public:
	FClothesPartSet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<uint8_t > GetClothesParts() {
		return memory.read<struct TSet<uint8_t >>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeleeAttackCapsule
{
public:
	FMeleeAttackCapsule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<AActor> GetAttachParent() {
		return memory.read<struct TWeakObjectPtr<AActor>>(m_addr + 0);
	}
	struct FGameplayTag GetAttachment() {
		return memory.read<struct FGameplayTag>(m_addr + 8);
	}
	struct FTransform GetRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	float GetUnscaledRadius() {
		return memory.read<float>(m_addr + 64);
	}
	float GetUnscaledHalfHeight() {
		return memory.read<float>(m_addr + 68);
	}
	struct FMeleeWeaponDesc GetWeaponDesc() {
		return memory.read<struct FMeleeWeaponDesc>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterSpawnerMarker
{
public:
	FCharacterSpawnerMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FCharacterSpawnerDataBasedOnPreset GetSpawner() {
		return memory.read<struct FCharacterSpawnerDataBasedOnPreset>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeleeWeaponDesc
{
public:
	FMeleeWeaponDesc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamage() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDamageInGameEvent() {
		return memory.read<float>(m_addr + 4);
	}
	struct FTargetTypeDamageMultiplier GetTargetTypeMultiplier() {
		return memory.read<struct FTargetTypeDamageMultiplier>(m_addr + 8);
	}
	float GetEnergy() {
		return memory.read<float>(m_addr + 24);
	}
	float GetSharpnessSlash() {
		return memory.read<float>(m_addr + 28);
	}
	float GetSharpnessPierce() {
		return memory.read<float>(m_addr + 32);
	}
	int32_t GetHitSeverityChange() {
		return memory.read<int32_t>(m_addr + 36);
	}
	uint8_t  GetImpactSoundCategory() {
		return memory.read<uint8_t >(m_addr + 40);
	}
	struct UProjectileImpactEffects GetImpactEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UProjectileImpactEffects(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_RequestCharacterAction
{
public:
	FNetMulticast_RequestCharacterAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterActionReplicationHelper GetValue() {
		return memory.read<struct FCharacterActionReplicationHelper>(m_addr + 0);
	}
	bool GetignoreAutonomousProxy() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetKnownCurveValueOnWorkerThread
{
public:
	FGetKnownCurveValueOnWorkerThread(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetCurve() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTextStyle
{
public:
	FSetTextStyle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTextBlockStyle GetStyle() {
		return memory.read<struct FTextBlockStyle>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRep_Gender
{
public:
	FOnRep_Gender(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetoldGender() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_RemoveActorLocks
{
public:
	FNetMulticast_RemoveActorLocks(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<struct FActorResourceLockNetwork> GetLocks() {
		return memory.read<struct TArray<struct FActorResourceLockNetwork>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGameEventNotificationUIData
{
public:
	FGameEventNotificationUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FAddAmmoSingleAtLocation
{
public:
	FAddAmmoSingleAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FAmmunitionData GetammoData() {
		return memory.read<struct FAmmunitionData>(m_addr + 0);
	}
	bool GetbackLocation() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FWindowClimbingAnimationInfo
{
public:
	FWindowClimbingAnimationInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetAnchorOffset() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct UAnimSequenceBase GetAnchoringAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetAnchoringAnimationTime() {
		return memory.read<float>(m_addr + 24);
	}
	float GetAnchoringDuration() {
		return memory.read<float>(m_addr + 28);
	}
	struct UAnimMontage GetClimbingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UAnimMontage(ptr_addr);
	}
	float GetMinWindowWidth() {
		return memory.read<float>(m_addr + 40);
	}
	float GetMinWindowHeight() {
		return memory.read<float>(m_addr + 44);
	}
	float GetMinSpacingToLeftWindowEdge() {
		return memory.read<float>(m_addr + 48);
	}
	float GetMinSpacingToRightWindowEdge() {
		return memory.read<float>(m_addr + 52);
	}
	float GetMinWindowDistanceToFloor() {
		return memory.read<float>(m_addr + 56);
	}
	float GetMaxWindowDistanceToFloor() {
		return memory.read<float>(m_addr + 60);
	}
	float GetStaminaDrain() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartObjectiveAnimation
{
public:
	FStartObjectiveAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetAnimationState() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnAndDropItemAtOnServer
{
public:
	FSpawnAndDropItemAtOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UContainerItemDescriptor GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UContainerItemDescriptor(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveBeginHit
{
public:
	FReceiveBeginHit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetMyComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOther() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	bool GetselfMoved() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FVector GetHitLocation() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	struct FVector GetHitNormal() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FVector GetNormalImpulse() {
		return memory.read<struct FVector>(m_addr + 52);
	}
	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnItemContainerLocked__DelegateSignature
{
public:
	FOnItemContainerLocked__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItemContainer GetItemContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItemContainer(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_CharacterActionAck
{
public:
	FServer_CharacterActionAck(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterActionAck Getack() {
		return memory.read<struct FCharacterActionAck>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerWaterMovementParameters
{
public:
	FPrisonerWaterMovementParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMaxSpeed() {
		return memory.read<float>(m_addr + 0);
	}
	float GetAcceleration() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDeceleration() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMeleeTargetSelectionMode
{
public:
	FSetMeleeTargetSelectionMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RequestCharacterAction
{
public:
	FServer_RequestCharacterAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterActionReplicationHelper GetValue() {
		return memory.read<struct FCharacterActionReplicationHelper>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_HandleMeleeAttackCapsuleHit
{
public:
	FServer_HandleMeleeAttackCapsuleHit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter Getattacker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}
	struct FMeleeAttackCapsuleHitInfo GetHitInfo() {
		return memory.read<struct FMeleeAttackCapsuleHitInfo>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FInit
{
public:
	FInit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	float GetonScreenDuration() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetdisplayOnCenter() {
		return memory.read<bool>(m_addr + 12);
	}
	struct UTexture2D GeticonOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZWaterSplineControlPoint
{
public:
	FConZWaterSplineControlPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getselected() {
		return memory.read<bool>(m_addr + 68);
	}
	float GetWidth() {
		return memory.read<float>(m_addr + 72);
	}
	float GetMaxDepth() {
		return memory.read<float>(m_addr + 76);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 80);
	}
	float GetOpacity() {
		return memory.read<float>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlaceItemInInventoryOrHolster
{
public:
	FPlaceItemInInventoryOrHolster(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	bool GettryToJoinItems() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetEnvironmentDescription
{
public:
	FServer_SetEnvironmentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FEnvironmentDescription GetValue() {
		return memory.read<struct FEnvironmentDescription>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEnvironmentDescription
{
public:
	FSetEnvironmentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FEnvironmentDescription GetValue() {
		return memory.read<struct FEnvironmentDescription>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleExhaustParticles
{
public:
	FVehicleExhaustParticles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetAttachSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UParticleSystem GetParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UParticleSystem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Activate
{
public:
	FServer_Activate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGender
{
public:
	FSetGender(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsMemberOfMySquad
{
public:
	FIsMemberOfMySquad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDesiredPace
{
public:
	FGetDesiredPace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHitEffects
{
public:
	FHitEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSpeedThreshold() {
		return memory.read<float>(m_addr + 0);
	}
	struct UParticleSystem GetParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UParticleSystem(ptr_addr);
	}
	struct FVector GetParticlesScale() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UAkAudioEvent(ptr_addr);
	}
	UMatineeCameraShake GetCameraShake() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UMatineeCameraShake(ptr_addr);
	}
	float GetCameraShakeScale() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FAcceptSquadInvitationOnServer
{
public:
	FAcceptSquadInvitationOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZSquad GetSquad() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZSquad(ptr_addr);
	}
	bool Getaccepted() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetUserFakeName
{
public:
	FNetMulticast_SetUserFakeName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetfakeName() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRotationTarget
{
public:
	FGetRotationTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddHandBondage
{
public:
	FAddHandBondage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetbondageItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRest
{
public:
	FRest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddWeaponAttachment
{
public:
	FAddWeaponAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPostAkEventAtLocation
{
public:
	FPostAkEventAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetakEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetOrientation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}
	struct FString GetEventName() {
		return memory.read<struct FString>(m_addr + 32);
	}
	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UObject(ptr_addr);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnLocationEnter
{
public:
	FOnLocationEnter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOverlapedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAreBreastsExposed
{
public:
	FAreBreastsExposed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBorderCrossingPenaltyChange__DelegateSignature
{
public:
	FBorderCrossingPenaltyChange__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner Getsender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	uint8_t  GetnewPenalty() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkillEventThrownItemHitTarget
{
public:
	FSkillEventThrownItemHitTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZBaseElementInteractionData
{
public:
	FConZBaseElementInteractionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetBaseElementId() {
		return memory.read<int64_t>(m_addr + 0);
	}
	struct FVector GetBaseElementLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetRepairValue() {
		return memory.read<float>(m_addr + 20);
	}
	int64_t GetInteractionTimestamp() {
		return memory.read<int64_t>(m_addr + 24);
	}
	int64_t GetIntegerData() {
		return memory.read<int64_t>(m_addr + 32);
	}
	struct UObject GetPointerData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCalculateAIPerceptionPercentage
{
public:
	FCalculateAIPerceptionPercentage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanEnterCombatMode
{
public:
	FCanEnterCombatMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomZoneRegion
{
public:
	FCustomZoneRegion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FVector2D GetLocation() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}
	struct FVector2D GetSize() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}
	uint8_t  GetShape() {
		return memory.read<uint8_t >(m_addr + 32);
	}
	int32_t GetConfigurationIndex() {
		return memory.read<int32_t>(m_addr + 36);
	}
	struct FName GetUniqueDefaultZoneName() {
		return memory.read<struct FName>(m_addr + 40);
	}
	uint8_t  GetDefaultZoneState() {
		return memory.read<uint8_t >(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMovementSettings_Ground_Crouching
{
public:
	FPrisonerMovementSettings_Ground_Crouching(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerMovementSettings_Ground_Crouching_Walking GetWalking() {
		return memory.read<struct FPrisonerMovementSettings_Ground_Crouching_Walking>(m_addr + 0);
	}
	struct FPrisonerMovementSettings_Ground_Crouching_Walking GetWalkingFaster() {
		return memory.read<struct FPrisonerMovementSettings_Ground_Crouching_Walking>(m_addr + 36);
	}
	struct FPrisonerMovementSettings_Ground_Crouching_Walking GetWalkLimping() {
		return memory.read<struct FPrisonerMovementSettings_Ground_Crouching_Walking>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnImageWidgetMouseButtonDown
{
public:
	FOnImageWidgetMouseButtonDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGeometry GetMyGeometry() {
		return memory.read<struct FGeometry>(m_addr + 0);
	}
	struct FPointerEvent GetMouseEvent() {
		return memory.read<struct FPointerEvent>(m_addr + 56);
	}
	struct FEventReply GetReturnValue() {
		return memory.read<struct FEventReply>(m_addr + 168);
	}

private:
	std::uint64_t m_addr = 0;
};class FFlashAllKeys
{
public:
	FFlashAllKeys(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FColor GetColor() {
		return memory.read<struct FColor>(m_addr + 0);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 4);
	}
	float GetInterval() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanEnterMeleeCombatMode
{
public:
	FCanEnterMeleeCombatMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanLeaveCombatMode
{
public:
	FCanLeaveCombatMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTabModeOpened__DelegateSignature
{
public:
	FTabModeOpened__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GettabMode() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FZombieAttackDescription
{
public:
	FZombieAttackDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	struct FFloatInterval GetPitchRange() {
		return memory.read<struct FFloatInterval>(m_addr + 8);
	}
	float GetMinDistance() {
		return memory.read<float>(m_addr + 16);
	}
	float GetMaxDistance() {
		return memory.read<float>(m_addr + 20);
	}
	float GetRegainControlMultiplier() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanTakeItemInHands
{
public:
	FCanTakeItemInHands(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnLockOwnerDestroyed
{
public:
	FOnLockOwnerDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetlockOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_LoadAmmoIntoMagazine
{
public:
	FServer_LoadAmmoIntoMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionItem GetAmmunitionItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionItem(ptr_addr);
	}
	struct AWeaponAttachmentMagazine Getmagazine() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AWeaponAttachmentMagazine(ptr_addr);
	}
	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCapsuleComponent_PhysicsVolumeChanged
{
public:
	FCapsuleComponent_PhysicsVolumeChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APhysicsVolume GetVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APhysicsVolume(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_JoinAmmo
{
public:
	FServer_JoinAmmo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionItem GetfinalItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionItem(ptr_addr);
	}
	struct AAmmunitionItem GetinitiatingItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AAmmunitionItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FEquippedNightVisionGoggles_ActivatedChanged
{
public:
	FEquippedNightVisionGoggles_ActivatedChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ANightVisionGogglesItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ANightVisionGogglesItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterImpactSounds
{
public:
	FCharacterImpactSounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShouldIgnoreHeadTurningAndLeaning
{
public:
	FSetShouldIgnoreHeadTurningAndLeaning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCarriedItemsVisibilityChanged__DelegateSignature
{
public:
	FCarriedItemsVisibilityChanged__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetVisible() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCarryItem
{
public:
	FCarryItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_DisplayNotification
{
public:
	FMulticast_DisplayNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSectorName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	float GetFallDuration() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFacialHairMeshComponent
{
public:
	FGetFacialHairMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FChangeSquadData
{
public:
	FChangeSquadData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString Getinformation() {
		return memory.read<struct FString>(m_addr + 32);
	}
	struct FConZSquadEmblem Getemblem() {
		return memory.read<struct FConZSquadEmblem>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZSquadEmblem
{
public:
	FConZSquadEmblem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FConZSquadEmblemElement GetBackground() {
		return memory.read<struct FConZSquadEmblemElement>(m_addr + 0);
	}
	struct FConZSquadEmblemElement GetSymbol() {
		return memory.read<struct FConZSquadEmblemElement>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnerConfiguration
{
public:
	FSpawnerConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UItemSpawnerPreset GetSpawner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UItemSpawnerPreset(ptr_addr);
	}
	UItemSpawnerPreset2 GetSpawnerPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UItemSpawnerPreset2(ptr_addr);
	}
	int32_t GetMinimumItemsCount() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetMaximumItemsCount() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnItemActorDestroyed
{
public:
	FOnItemActorDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FChooseFirstMeleeTarget
{
public:
	FChooseFirstMeleeTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAmmoReloadCapacity
{
public:
	FGetAmmoReloadCapacity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionItem Getammo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionItem(ptr_addr);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClearMalfunction
{
public:
	FClearMalfunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmalfunction() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetShadowIntensity
{
public:
	FServer_SetShadowIntensity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetValue() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBankATMBuyableCardStateVisual
{
public:
	FBankATMBuyableCardStateVisual(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetTransparentBackground() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetRenderOpacity() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetPlusCircleVisible() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_FadeInVision
{
public:
	FClient_FadeInVision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDuration() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnedPawnInfo
{
public:
	FSpawnedPawnInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FIsInteractable
{
public:
	FIsInteractable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInteractionData
{
public:
	FInteractionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetModifierPressed() {
		return memory.read<bool>(m_addr + 0);
	}
	int64_t GetIntegerData() {
		return memory.read<int64_t>(m_addr + 8);
	}
	struct UObject GetPointerData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UObject(ptr_addr);
	}
	bool GetBoolData() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FText GetTextData() {
		return memory.read<struct FText>(m_addr + 32);
	}
	struct FVector GetInteractionLocation() {
		return memory.read<struct FVector>(m_addr + 56);
	}
	struct FVector GetInteractionNormal() {
		return memory.read<struct FVector>(m_addr + 68);
	}
	struct FVector GetVectorData() {
		return memory.read<struct FVector>(m_addr + 80);
	}
	int64_t GetBaseElementId() {
		return memory.read<int64_t>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanRecoverFromRagdoll
{
public:
	FCanRecoverFromRagdoll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomZoneConfiguration
{
public:
	FCustomZoneConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	uint8_t  GetEventHandlingMethod[13]() {
		return memory.read<uint8_t >(m_addr + 16);
	}
	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 36);
	}
	struct FName GetUniqueDefaultZoneName() {
		return memory.read<struct FName>(m_addr + 52);
	}
	uint8_t  GetDefaultZoneState() {
		return memory.read<uint8_t >(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FTurnTowardActor
{
public:
	FTurnTowardActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor Getfoe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleSteerAmount
{
public:
	FGetVehicleSteerAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAmmunitionData
{
public:
	FAmmunitionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AAmmunitionItem GetAmmunitionItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AAmmunitionItem(ptr_addr);
	}
	float Gethealth() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMaxHealth() {
		return memory.read<float>(m_addr + 12);
	}
	float GetDefaultMaxHealth() {
		return memory.read<float>(m_addr + 16);
	}
	uint8_t  GetState() {
		return memory.read<uint8_t >(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemPickedUpStateChanged
{
public:
	FItemPickedUpStateChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	bool GetpickedUp() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDesiredPace
{
public:
	FSetDesiredPace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_OnAIDetectionTimerChanged
{
public:
	FClient_OnAIDetectionTimerChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetdetectionTimer() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetTargetCrouchStage
{
public:
	FServer_SetTargetCrouchStage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SpawnGiftSpawningPreludeEffects
{
public:
	FNetMulticast_SpawnGiftSpawningPreludeEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UParticleSystem GetParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UParticleSystem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_OnTakeDamage
{
public:
	FClient_OnTakeDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamage() {
		return memory.read<float>(m_addr + 0);
	}
	struct FDamageEvent GetDamageEvent() {
		return memory.read<struct FDamageEvent>(m_addr + 8);
	}
	struct AController GeteventInstigator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct AController(ptr_addr);
	}
	struct AActor GetdamageObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCombatMode
{
public:
	FGetCombatMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSlidingDoorPartInfo
{
public:
	FSlidingDoorPartInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetPrisonerHealthRatio
{
public:
	FGetPrisonerHealthRatio(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SetSavedSpawnLocation
{
public:
	FClient_SetSavedSpawnLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetActive() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FVector GetVelocity() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetDroneVisibility
{
public:
	FServer_SetDroneVisibility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_ShowSpawnScreen
{
public:
	FClient_ShowSpawnScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetloadoutMenu() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicle2_Server_SetPhysicsParameters
{
public:
	FVehicle2_Server_SetPhysicsParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AVehicleBase GetVehicleBase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AVehicleBase(ptr_addr);
	}
	struct FVector GetcomPosition() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetinertiaTensor() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetMass() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FCombustibleItemParams
{
public:
	FCombustibleItemParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDefaultTemp() {
		return memory.read<float>(m_addr + 0);
	}
	float GetBurningRate() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FBroadcastChatLine
{
public:
	FBroadcastChatLine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 8);
	}
	uint8_t  GetChatType() {
		return memory.read<uint8_t >(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FClosePanels
{
public:
	FClosePanels(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetswitchingTabs() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddGasMist
{
public:
	FAddGasMist(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystemComponent GetgasMist() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateFishingComponent
{
public:
	FCreateFishingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerFishingComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerFishingComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticipantEnter
{
public:
	FParticipantEnter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindNextOrPreviousMeleeTarget
{
public:
	FFindNextOrPreviousMeleeTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	bool GetNext() {
		return memory.read<bool>(m_addr + 8);
	}
	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAmmunitionArrowSpawningParamsHelper
{
public:
	FAmmunitionArrowSpawningParamsHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FCreateMusicPlayerComponent
{
public:
	FCreateMusicPlayerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerMusicPlayerComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerMusicPlayerComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlaceable_Server_FillWithItems
{
public:
	FPlaceable_Server_FillWithItems(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlaceableActorBase Getplaceable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlaceableActorBase(ptr_addr);
	}
	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APrisoner(ptr_addr);
	}
	struct TArray<struct AItem> GetItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInteractWithObjectOnServer
{
public:
	FInteractWithObjectOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject Getinteractable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APrisoner(ptr_addr);
	}
	uint8_t  GetinteractionType() {
		return memory.read<uint8_t >(m_addr + 16);
	}
	struct FInteractionData GetInteractionData() {
		return memory.read<struct FInteractionData>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreatePrisonWalletComponent
{
public:
	FCreatePrisonWalletComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerPrisonWalletComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerPrisonWalletComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseBuilding_Server_OnFlagAreaEntered
{
public:
	FBaseBuilding_Server_OnFlagAreaEntered(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetItem
{
public:
	FSetItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartTournament
{
public:
	FStartTournament(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTournamentParameters Getparameters() {
		return memory.read<struct FTournamentParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_InitiateCraftedUpgradePlacement
{
public:
	FServer_InitiateCraftedUpgradePlacement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FConZBaseElementIdentifier GetelementToBeUpgraded() {
		return memory.read<struct FConZBaseElementIdentifier>(m_addr + 0);
	}
	struct UPlaceableCraftableItem GetupgradeRecipe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UPlaceableCraftableItem(ptr_addr);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerFallingPoseTransitionParams
{
public:
	FPrisonerFallingPoseTransitionParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTransitionTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct UAnimSequence GetTransitionAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequence(ptr_addr);
	}
	struct FFloatInterval GetTransitionAnimationTimeRange() {
		return memory.read<struct FFloatInterval>(m_addr + 16);
	}
	struct UCurveFloat GetTransitionPitchBlendOverrideCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsLocationInDangerZone
{
public:
	FIsLocationInDangerZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FHuntingBiomeParameters
{
public:
	FHuntingBiomeParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBiomeData GetBiomeData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBiomeData(ptr_addr);
	}
	float GetAnimalSpawnChance() {
		return memory.read<float>(m_addr + 8);
	}
	float GetDaytimeSpawnMultiplier[4]() {
		return memory.read<float>(m_addr + 12);
	}
	float GetSpawnCheckCooldownMin() {
		return memory.read<float>(m_addr + 28);
	}
	float GetSpawnCheckCooldownMax() {
		return memory.read<float>(m_addr + 32);
	}
	int8_t GetMaxAnimalEncounters() {
		return memory.read<int8_t>(m_addr + 36);
	}
	int8_t GetMaxAnimalEncountersPerPlayer() {
		return memory.read<int8_t>(m_addr + 37);
	}
	int8_t GetMaxPlayerTriggers() {
		return memory.read<int8_t>(m_addr + 38);
	}
	bool GetPacksAllowed() {
		return memory.read<bool>(m_addr + 39);
	}
	char GetPriority() {
		return memory.read<char>(m_addr + 40);
	}
	float GetAnimalSoundCooldownMin() {
		return memory.read<float>(m_addr + 44);
	}
	float GetAnimalSoundCooldownMax() {
		return memory.read<float>(m_addr + 48);
	}
	float GetAnimalSoundPlayProbability() {
		return memory.read<float>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextBoxWithLabelStyle
{
public:
	FTextBoxWithLabelStyle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateBrush GetFocusBackgroundImage() {
		return memory.read<struct FSlateBrush>(m_addr + 0);
	}
	struct FTextBoxTextStyle GetLabelText() {
		return memory.read<struct FTextBoxTextStyle>(m_addr + 136);
	}
	struct FTextBoxTextStyle GetInputBoxText() {
		return memory.read<struct FTextBoxTextStyle>(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};class FDestroyPlaceable
{
public:
	FDestroyPlaceable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetID() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFoliageCanopyData
{
public:
	FFoliageCanopyData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetUseSphere() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FTreeCanopySphere GetSphere() {
		return memory.read<struct FTreeCanopySphere>(m_addr + 4);
	}
	bool GetUseCapsule() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FTreeCanopyCapsule GetCapsule() {
		return memory.read<struct FTreeCanopyCapsule>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPlayingGetUpMontage
{
public:
	FIsPlayingGetUpMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInv2021_InventoryElementRepHelper
{
public:
	FInv2021_InventoryElementRepHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetItemInHands
{
public:
	FGetItemInHands(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCompletionValues
{
public:
	FGetCompletionValues(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetResult() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDetonateHead
{
public:
	FDetonateHead(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetshouldDestroyHeadgear() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkillEventItemThrown
{
public:
	FSkillEventItemThrown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetVehicleWheelTireDeflated
{
public:
	FSetVehicleWheelTireDeflated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetWheelIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetisDeflated() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsShowingSpawnScreen
{
public:
	FIsShowingSpawnScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryComponent_ItemUnequipped
{
public:
	FInventoryComponent_ItemUnequipped(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerInventoryComponent Getsender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerInventoryComponent(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateFromItem
{
public:
	FCreateFromItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	struct UItemUserWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UItemUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FEnterCombatMode
{
public:
	FEnterCombatMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStance
{
public:
	FSetStance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIngredientClassesArray
{
public:
	FIngredientClassesArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TSoftClassPtr<UObject>> GetIngredientClasses() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEnduranceSkillParametersPerSkillLevel
{
public:
	FEnduranceSkillParametersPerSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FExperienceDependentFloat GetEnergyConsumptionMultiplier() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 0);
	}
	struct FExperienceDependentFloat GetWaterConsumptionMultiplier() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 8);
	}
	struct FExperienceDependentFloat GetStaminaRecoveryMultiplier() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FExamineItem
{
public:
	FExamineItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryContainer2DRepData
{
public:
	FInventoryContainer2DRepData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FInventoryItemPositionPair> GetItemsData() {
		return memory.read<struct TArray<struct FInventoryItemPositionPair>>(m_addr + 0);
	}
	struct UObject GetParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UObject(ptr_addr);
	}
	int32_t GetSizeX() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetSizeY() {
		return memory.read<int32_t>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemLootTreeNodeTableRow
{
public:
	FItemLootTreeNodeTableRow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetRarity() {
		return memory.read<uint8_t >(m_addr + 32);
	}
	struct TArray<struct TSoftClassPtr<UObject>> GetPostSpawnActions() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMeleeTarget
{
public:
	FGetMeleeTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTurnMontages
{
public:
	FTurnMontages(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetTurnInPlaceLeft() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetTurnInPlaceRight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetReloadActionSequenceForData
{
public:
	FGetReloadActionSequenceForData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWeaponReloadData GetreloadData() {
		return memory.read<struct FWeaponReloadData>(m_addr + 0);
	}
	struct UWeaponActionReloadSequence GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UWeaponActionReloadSequence(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetProgressPercentage
{
public:
	FSetProgressPercentage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRepairVehicle
{
public:
	FRepairVehicle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GethealthToRepair() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAngularVelocity
{
public:
	FGetAngularVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBruisingComponent
{
public:
	FGetBruisingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBruisingComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBruisingComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerNearbyFoliageInstanceInfo
{
public:
	FPrisonerNearbyFoliageInstanceInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetFoliageType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct UInstancedStaticMeshComponent GetInstancedMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UInstancedStaticMeshComponent(ptr_addr);
	}
	struct FPackedLocation GetPackedLocation() {
		return memory.read<struct FPackedLocation>(m_addr + 16);
	}
	struct FTransform GetTransformZeroOrigin() {
		return memory.read<struct FTransform>(m_addr + 32);
	}
	struct UFoliageAssetData GetFoliageAssetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UFoliageAssetData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPackedLocation
{
public:
	FPackedLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FUpdateZoomEffect
{
public:
	FUpdateZoomEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFraction() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateThrowingMenuWidget
{
public:
	FCreateThrowingMenuWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TArray<struct UCircularMenuSegmentThrowingInfo> GetthrowingSegmentInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UCircularMenuSegmentThrowingInfo>(ptr_addr);
	}
	struct UCircularMenuWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UCircularMenuWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponBow_Server_InsertArrow
{
public:
	FWeaponBow_Server_InsertArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponBow Getbow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponBow(ptr_addr);
	}
	struct AAmmunitionArrow Getarrow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AAmmunitionArrow(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FWireDescription
{
public:
	FWireDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_PostAudioEventOnPrisoner
{
public:
	FNetMulticast_PostAudioEventOnPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetakEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}
	bool GetmultiCastToClients() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSavedSpawnLocation
{
public:
	FGetSavedSpawnLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCrouchStage
{
public:
	FGetCrouchStage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBoolAttribute
{
public:
	FSetBoolAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldPlayChamberOpenedIdle
{
public:
	FShouldPlayChamberOpenedIdle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerThirdPersonSubviewBlendOverride
{
public:
	FPrisonerThirdPersonSubviewBlendOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetSource() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	uint8_t  GetTarget() {
		return memory.read<uint8_t >(m_addr + 1);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPlayAsDrone
{
public:
	FSetPlayAsDrone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLockpicksCount
{
public:
	FGetLockpicksCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentMidiDeviceIndex
{
public:
	FGetCurrentMidiDeviceIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBasePoseAimOffsetPair
{
public:
	FBasePoseAimOffsetPair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetUpperBodyPose() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetLowerBodyPose() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace GetAimOffset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UBlendSpace(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFishingRod
{
public:
	FGetFishingRod(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AFishingRod GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AFishingRod(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCookingUtilitySlotInstance_UserSetData
{
public:
	FCookingUtilitySlotInstance_UserSetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSlotId() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<char> GetInternalCoordinates() {
		return memory.read<struct TArray<char>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetHoldBreathState
{
public:
	FServer_SetHoldBreathState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGameEvent
{
public:
	FGetGameEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameEventBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGameEventBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnFishingAttachmentAdded
{
public:
	FOnFishingAttachmentAdded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AFishingRod GetFishingRod() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AFishingRod(ptr_addr);
	}
	struct AFishingAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AFishingAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSegmentIdForCoordinates
{
public:
	FGetSegmentIdForCoordinates(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetCoordinates() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	int32_t GetLayer() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGroundMovementParameters
{
public:
	FGetGroundMovementParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerGroundMovementParameters GetReturnValue() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateReloadData
{
public:
	FUpdateReloadData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWeaponReloadData GetreloadDataIn() {
		return memory.read<struct FWeaponReloadData>(m_addr + 0);
	}
	struct FWeaponReloadData GetreloadDataOut() {
		return memory.read<struct FWeaponReloadData>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerGroundMovementParameters
{
public:
	FPrisonerGroundMovementParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMaxSpeed() {
		return memory.read<float>(m_addr + 0);
	}
	float GetAcceleration() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDeceleration() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FEquipClothesItem
{
public:
	FEquipClothesItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AClothesItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AClothesItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZColorRow
{
public:
	FConZColorRow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 8);
	}
	struct FString GetDescription() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SetAmmoCount
{
public:
	FClient_SetAmmoCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FImpactEffectData
{
public:
	FImpactEffectData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem GetParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleSystem(ptr_addr);
	}
	struct UNiagaraSystem GetNiagaraParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UNiagaraSystem(ptr_addr);
	}
	struct UMaterial GetDecal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UMaterial(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHandBondage
{
public:
	FGetHandBondage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBondageComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBondageComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsInFirstPersonView
{
public:
	FGetIsInFirstPersonView(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanPrisonerTakeItemInHands
{
public:
	FCanPrisonerTakeItemInHands(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}
	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetText
{
public:
	FSetText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsThrowAiming
{
public:
	FIsThrowAiming(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FResourceNetworkGUID
{
public:
	FResourceNetworkGUID(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FServer_SetExaminedPrisoner
{
public:
	FServer_SetExaminedPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInactivityIdleAnimations
{
public:
	FGetInactivityIdleAnimations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UAnimSequenceBase> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UAnimSequenceBase>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleEngineState
{
public:
	FGetVehicleEngineState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ExecuteMeleeAction
{
public:
	FNetMulticast_ExecuteMeleeAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMeleeAction GetAction() {
		return memory.read<struct FMeleeAction>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsLimpingOverrideEnabled
{
public:
	FGetIsLimpingOverrideEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZConsoleVariableRow
{
public:
	FConZConsoleVariableRow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetConsoleVariable() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FString GetDescription() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnMidiEvent
{
public:
	FOnMidiEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMIDIDeviceController GetMIDIDeviceController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMIDIDeviceController(ptr_addr);
	}
	int32_t GetTimestamp() {
		return memory.read<int32_t>(m_addr + 8);
	}
	uint8_t  GetEventType() {
		return memory.read<uint8_t >(m_addr + 12);
	}
	int32_t GetChannel() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetControlID() {
		return memory.read<int32_t>(m_addr + 20);
	}
	int32_t GetVelocity() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetRawEventType() {
		return memory.read<int32_t>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetItemOfClass
{
public:
	FGetItemOfClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	struct AItem GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLookatMeleeTargetAimOffset
{
public:
	FGetLookatMeleeTargetAimOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNameText
{
public:
	FSetNameText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNearbyFoliageInfo
{
public:
	FGetNearbyFoliageInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerNearbyFoliageInfo GetReturnValue() {
		return memory.read<struct FPrisonerNearbyFoliageInfo>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOverrideIsLimping
{
public:
	FGetOverrideIsLimping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPercentage
{
public:
	FGetPercentage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrisonerAnimInstance
{
public:
	FGetPrisonerAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerAnimInstance GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerAnimInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCapturingTeam
{
public:
	FGetCapturingTeam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSavedSpawnLocationActive
{
public:
	FGetSavedSpawnLocationActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIntAttribute
{
public:
	FSetIntAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRep_PackedWetness
{
public:
	FOnRep_PackedWetness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetoldWetness() {
		return memory.read<uint32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleEngineStallingParameters
{
public:
	FVehicleEngineStallingParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinDuration() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxDuration() {
		return memory.read<float>(m_addr + 4);
	}
	float GetStopEngineChance() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetShouldStallingStopOnThrottleOrBreakRelease() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetShouldEngineStopOnThrottleOrBreakRelease() {
		return memory.read<bool>(m_addr + 13);
	}
	struct UCurveFloat GetThrottleCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UCurveFloat(ptr_addr);
	}
	float GetThrottleCurveFrequencyMultiplier() {
		return memory.read<float>(m_addr + 24);
	}
	struct UCurveFloat GetBrakeCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UCurveFloat(ptr_addr);
	}
	float GetBrakeCurveFrequencyMultiplier() {
		return memory.read<float>(m_addr + 40);
	}
	float GetForceMagnitudeScale() {
		return memory.read<float>(m_addr + 44);
	}
	struct UCurveFloat GetForceMagnitudeScaleCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UCurveFloat(ptr_addr);
	}
	float GetForceMagnitudeScaleCurveFrequencyMultiplier() {
		return memory.read<float>(m_addr + 56);
	}
	float GetForceDirectionRandomizationAngle() {
		return memory.read<float>(m_addr + 60);
	}
	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct TArray<float> GetAudioEventTriggerTimeRatios() {
		return memory.read<struct TArray<float>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FCopyFromCharacter
{
public:
	FCopyFromCharacter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter GetsourceCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBruiseLayerRenderTarget
{
public:
	FGetBruiseLayerRenderTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetLayer() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct UTextureRenderTarget2D GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTextureRenderTarget2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSavedSpawnRotation
{
public:
	FGetSavedSpawnRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCookingRecipeRegistryEntry
{
public:
	FCookingRecipeRegistryEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetEnabled() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FPrimaryAssetId GetAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetShouldIgnoreHeadTurningAndLeaning
{
public:
	FGetShouldIgnoreHeadTurningAndLeaning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSquad
{
public:
	FGetSquad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetsquadId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	struct AConZSquad GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AConZSquad(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDesiredCourseAngle
{
public:
	FGetDesiredCourseAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FElementSnapMarker
{
public:
	FElementSnapMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FVector GetSlack() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	bool GetElementTypesMustMatch() {
		return memory.read<bool>(m_addr + 60);
	}
	bool GetIncreaseLevelOnSnap() {
		return memory.read<bool>(m_addr + 61);
	}
	char GetMaxLevelToSnap() {
		return memory.read<char>(m_addr + 62);
	}
	struct FVector GetRequiredElementSize() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	struct FVector GetRequiredElementSizeTolerance() {
		return memory.read<struct FVector>(m_addr + 76);
	}
	bool GetDestroySnappedElementWhenDestroyed() {
		return memory.read<bool>(m_addr + 88);
	}
	uint16_t GetOutSocketTypes() {
		return memory.read<uint16_t>(m_addr + 90);
	}
	uint16_t GetInSocketTypes() {
		return memory.read<uint16_t>(m_addr + 92);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerBodyEffectSave
{
public:
	FPrisonerBodyEffectSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetData() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTabMode
{
public:
	FGetTabMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDistance
{
public:
	FGetDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnPreActionEnd
{
public:
	FOnPreActionEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCharacterAction GetAction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCharacterAction(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTabMouseMovement
{
public:
	FGetTabMouseMovement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMeleeTarget
{
public:
	FSetMeleeTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_QueueHostQuote
{
public:
	FNetMulticast_QueueHostQuote(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}
	bool GetplayOnlyIfInstant() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetstopPreviousQuote() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_PlayLockpickingProtectionEffects
{
public:
	FNetMulticast_PlayLockpickingProtectionEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetLockpickable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UParticleSystem GetParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent Getaudio() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FVector GetParticlesScale() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInteractionHint
{
public:
	FGetInteractionHint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSectorId
{
public:
	FSectorId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FIsCompleted
{
public:
	FIsCompleted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWaterWeight
{
public:
	FSetWaterWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTacticsBlobMaterial
{
public:
	FGetTacticsBlobMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInstanceDynamic GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleHealthBarCaption
{
public:
	FGetVehicleHealthBarCaption(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldIgnoreRotation
{
public:
	FShouldIgnoreRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_PlayMontage
{
public:
	FNetMulticast_PlayMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInteractableDestroyed
{
public:
	FInteractableDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor Getinteractable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_InstrumentStopTone
{
public:
	FServer_InstrumentStopTone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Gettone() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GettimeOffset() {
		return memory.read<float>(m_addr + 4);
	}
	int32_t Getoctave() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponSpreadData
{
public:
	FWeaponSpreadData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWeaponSpreadItem GetByStance[4]() {
		return memory.read<struct FWeaponSpreadItem>(m_addr + 0);
	}
	float GetIncrementPerShot() {
		return memory.read<float>(m_addr + 48);
	}
	float GetIncrementFromShotsMax() {
		return memory.read<float>(m_addr + 52);
	}
	float GetIncrementSpeed() {
		return memory.read<float>(m_addr + 56);
	}
	float GetDecrementSpeed() {
		return memory.read<float>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetThrowingComponent
{
public:
	FGetThrowingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerThrowComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerThrowComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStateForInteractionWithItem
{
public:
	FGetStateForInteractionWithItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUserActiveName
{
public:
	FGetUserActiveName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemSpawnerPreset_Item
{
public:
	FItemSpawnerPreset_Item(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetItem() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	uint8_t  GetRarity() {
		return memory.read<uint8_t >(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleWeaponAimingStance
{
public:
	FGetVehicleWeaponAimingStance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVisionEffectsComponent
{
public:
	FGetVisionEffectsComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVisionEffectsComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UVisionEffectsComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCTFParameters
{
public:
	FGetCTFParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCTFParameters GetReturnValue() {
		return memory.read<struct FCTFParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTeamIndex
{
public:
	FGetTeamIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerHallucinationSymptomSeverityLevelParams
{
public:
	FPrisonerHallucinationSymptomSeverityLevelParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMaxNumHallucinationIllusions() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_HandleFootstep
{
public:
	FServer_HandleFootstep(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetmotionIntensity() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool GetshouldMakeNoise() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxVehicleHealth
{
public:
	FGetMaxVehicleHealth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaterialSwitchValue
{
public:
	FGetMaterialSwitchValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char EPhysicalSurface GetValue() {
		return memory.read<char EPhysicalSurface>(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGardenSlot
{
public:
	FGardenSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint Get_slotPosition() {
		return memory.read<struct FIntPoint>(m_addr + 12);
	}
	struct UPlantSpecies Get_species() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UPlantSpecies(ptr_addr);
	}
	uint8_t  Get_stage() {
		return memory.read<uint8_t >(m_addr + 32);
	}
	uint16_t Get_repWater() {
		return memory.read<uint16_t>(m_addr + 34);
	}
	char Get_repGrowthPercentage() {
		return memory.read<char>(m_addr + 40);
	}
	bool Get_organicFertilizer() {
		return memory.read<bool>(m_addr + 48);
	}
	bool Get_industrialFertilizer() {
		return memory.read<bool>(m_addr + 49);
	}
	struct UPlantPestSpecies Get_pests[3]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPlantPestSpecies(ptr_addr);
	}
	char Get_repPestsIntensities[3]() {
		return memory.read<char>(m_addr + 80);
	}
	struct UPlantDiseaseSpecies Get_diseases[3]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UPlantDiseaseSpecies(ptr_addr);
	}
	char Get_repDiseaseIntensities[3]() {
		return memory.read<char>(m_addr + 120);
	}
	char Get_repWeedIntensity() {
		return memory.read<char>(m_addr + 136);
	}
	bool Get_pesticideActive() {
		return memory.read<bool>(m_addr + 144);
	}
	bool Get_fungicideActive() {
		return memory.read<bool>(m_addr + 152);
	}
	bool Get_weedRepellentActive() {
		return memory.read<bool>(m_addr + 160);
	}
	char Get_repHealth() {
		return memory.read<char>(m_addr + 168);
	}
	bool Get_isDead() {
		return memory.read<bool>(m_addr + 176);
	}
	bool Get_isOld() {
		return memory.read<bool>(m_addr + 177);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWaterMovementParameters
{
public:
	FGetWaterMovementParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerWaterMovementParameters GetReturnValue() {
		return memory.read<struct FPrisonerWaterMovementParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateBuildingFortificationsState
{
public:
	FNetMulticast_UpdateBuildingFortificationsState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FString GetbuildingId() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct TArray<struct FFortificationData> GetFortificationData() {
		return memory.read<struct TArray<struct FFortificationData>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultAmmunitionData
{
public:
	FGetDefaultAmmunitionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FAmmunitionData GetReturnValue() {
		return memory.read<struct FAmmunitionData>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_JoinCurrencyItem
{
public:
	FServer_JoinCurrencyItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetfinalItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	struct AItem GetinitiatingItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWeightLoad
{
public:
	FGetWeightLoad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetBodyRotation
{
public:
	FNetMulticast_SetBodyRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetRotation() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FVector GetAngularVelocity() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnBorderCrossingPenaltyChange
{
public:
	FOnBorderCrossingPenaltyChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	uint8_t  GetnewPenalty() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWristwatchComponent
{
public:
	FGetWristwatchComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UChildActorComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UChildActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentAdditionalSocket
{
public:
	FVehicleAttachmentAdditionalSocket(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasHandsUp
{
public:
	FHasHandsUp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMechanic_Server_UnsubscribeFromVehicleServiceData
{
public:
	FMechanic_Server_UnsubscribeFromVehicleServiceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AMechanic GetMechanic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AMechanic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FHandleIntroCinematicFinished
{
public:
	FHandleIntroCinematicFinished(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCameraManager GetcameraManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCameraManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleLightReference
{
public:
	FVehicleLightReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	uint8_t  GetLightType() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	struct FName GetMaterialSlotName() {
		return memory.read<struct FName>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasItem
{
public:
	FHasItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOverlapClosestBlocking
{
public:
	FOverlapClosestBlocking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACharacter(ptr_addr);
	}
	struct FTransform GetobstructionTestCapsulesWorldTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct TArray<struct FItemObstructionTestCapsule> GetobstructionTestCapsules() {
		return memory.read<struct TArray<struct FItemObstructionTestCapsule>>(m_addr + 64);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 80);
	}
	float GetPenetrationDepth() {
		return memory.read<float>(m_addr + 216);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 220);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetItemInHandsOnClient
{
public:
	FSetItemInHandsOnClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FHolsterItemOnServer
{
public:
	FHolsterItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	int32_t GetattachmentSocketHelper() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_UnpackAmmoBox
{
public:
	FServer_UnpackAmmoBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionBoxItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionBoxItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FHoveredActorChanged__DelegateSignature
{
public:
	FHoveredActorChanged__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GethoveredActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsActivelyFishing
{
public:
	FIsActivelyFishing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_AIMovementFinished
{
public:
	FNetMulticast_AIMovementFinished(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetwasSuccessful() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsFishing
{
public:
	FIsFishing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsFreeLookEnabled
{
public:
	FIsFreeLookEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPostAkEventAttached
{
public:
	FPostAkEventAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetakEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct FName GetAttachPointName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	bool GetbStopWhenAttachedToDestroyed() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FString GetEventName() {
		return memory.read<struct FString>(m_addr + 32);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_StopMusic
{
public:
	FMulticast_StopMusic(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateSpecific
{
public:
	FCreateSpecific(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetinteractionInitiator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct UObject GetinteractableObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}
	struct FInteractionStruct GetfirstInteractionStruct() {
		return memory.read<struct FInteractionStruct>(m_addr + 16);
	}
	struct FInteractionStruct GetsecondInteractionStruct() {
		return memory.read<struct FInteractionStruct>(m_addr + 168);
	}
	struct UCircularMenuMusicPlayerToggleInfo GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct UCircularMenuMusicPlayerToggleInfo(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartMeleeAttack
{
public:
	FStartMeleeAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetmeleeAttackType() {
		return memory.read<struct FGameplayTag>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLastLoginTime
{
public:
	FSetLastLoginTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetValue() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInteracting
{
public:
	FIsInteracting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWeaponAimingTypeOnServer
{
public:
	FSetWeaponAimingTypeOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsMemberOf
{
public:
	FIsMemberOf(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZSquad GetSquad() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZSquad(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FHeatSourceParameters
{
public:
	FHeatSourceParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTemperature() {
		return memory.read<float>(m_addr + 0);
	}
	float GetTemperatureMultiplier() {
		return memory.read<float>(m_addr + 4);
	}
	float GetFuelMassRatio() {
		return memory.read<float>(m_addr + 8);
	}
	float GetEmissivity() {
		return memory.read<float>(m_addr + 12);
	}
	float GetDistanceScale() {
		return memory.read<float>(m_addr + 16);
	}
	float GetInnerRadiusTemperatureScale() {
		return memory.read<float>(m_addr + 20);
	}
	float GetAdditionalTemperaturePerGramOfOxygen() {
		return memory.read<float>(m_addr + 24);
	}
	float GetInnerRadius() {
		return memory.read<float>(m_addr + 28);
	}
	float GetOuterRadius() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDragStartEvent
{
public:
	FOnDragStartEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBaseItemWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBaseItemWidget(ptr_addr);
	}
	struct FGeometry GetGeometry() {
		return memory.read<struct FGeometry>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsNightVisionEnabled
{
public:
	FIsNightVisionEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsSquadInvitationReceived
{
public:
	FIsSquadInvitationReceived(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasEnoughAmmo
{
public:
	FHasEnoughAmmo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsThrowing
{
public:
	FIsThrowing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLeaveCombatMode
{
public:
	FLeaveCombatMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetPlayAnimation() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetoverrideAbilityCheck() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerBodyBoneGroupsVsSeverity
{
public:
	FPrisonerBodyBoneGroupsVsSeverity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerBodyBoneGroupsVsSeverityKey> GetKeys() {
		return memory.read<struct TArray<struct FPrisonerBodyBoneGroupsVsSeverityKey>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBankATMMyCardsButtonStateVisual
{
public:
	FBankATMMyCardsButtonStateVisual(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetFontColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FSlateBrush GetBackgroundBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 16);
	}
	struct FSlateBrush GetCardIconBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_AddNearbyFoliageInstances
{
public:
	FNetMulticast_AddNearbyFoliageInstances(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerNearbyFoliageInstanceInfoReplicated> GetreplicatedInstanceInfo() {
		return memory.read<struct TArray<struct FPrisonerNearbyFoliageInstanceInfoReplicated>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUsedAmmoCount
{
public:
	FGetUsedAmmoCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ApplyHaircutAndMakeup
{
public:
	FNetMulticast_ApplyHaircutAndMakeup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterTemplate GetCharacterTemplate() {
		return memory.read<struct FCharacterTemplate>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugDigit
{
public:
	FDrawDebugDigit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	int32_t Getdigit() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 24);
	}
	struct FColor GetColor() {
		return memory.read<struct FColor>(m_addr + 36);
	}
	float GetSize() {
		return memory.read<float>(m_addr + 40);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 44);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLoadedAmmoCount
{
public:
	FGetLoadedAmmoCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ApplyPlasticSurgery
{
public:
	FNetMulticast_ApplyPlasticSurgery(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterTemplate GetCharacterTemplate() {
		return memory.read<struct FCharacterTemplate>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTraderMarkerTradeableOverrideStruct
{
public:
	FTraderMarkerTradeableOverrideStruct(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetTradeableClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	int32_t GetBasePlayerPurchasePrice() {
		return memory.read<int32_t>(m_addr + 40);
	}
	uint8_t  GetPurchaseCurrencyType() {
		return memory.read<uint8_t >(m_addr + 44);
	}
	int32_t GetPurchasePriceAlternateCurrencyPrice() {
		return memory.read<int32_t>(m_addr + 48);
	}
	int32_t GetBasePlayerSellPrice() {
		return memory.read<int32_t>(m_addr + 52);
	}
	float GetDeltaPrice() {
		return memory.read<float>(m_addr + 56);
	}
	bool GetIsOverridingPurchaseAbility() {
		return memory.read<bool>(m_addr + 60);
	}
	bool GetCanBePurchasedByPlayer() {
		return memory.read<bool>(m_addr + 61);
	}
	bool GetIsLocallyImmuneToUserOverrides() {
		return memory.read<bool>(m_addr + 62);
	}
	int32_t GetRequiredFamePoints() {
		return memory.read<int32_t>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_HandleLanded
{
public:
	FNetMulticast_HandleLanded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetImpactVelocity() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugPlantAPlantAtLookedLocation
{
public:
	FDebugPlantAPlantAtLookedLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPlantSpecies Getspecies() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPlantSpecies(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerHallucinationIllusionInfo
{
public:
	FPrisonerHallucinationIllusionInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	struct TSet<struct TSoftClassPtr<UObject>> GetIncompatibleClasses() {
		return memory.read<struct TSet<struct TSoftClassPtr<UObject>>>(m_addr + 40);
	}
	struct FInt32Range GetSeverityLevelConstraint() {
		return memory.read<struct FInt32Range>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAnimalActorDestroyed
{
public:
	FOnAnimalActorDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetanimalActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_InstrumentPlayTone
{
public:
	FNetMulticast_InstrumentPlayTone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Gettone() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GettimeOffset() {
		return memory.read<float>(m_addr + 4);
	}
	int32_t Getoctave() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FTrashSliderValueChangedTemp__DelegateSignature
{
public:
	FTrashSliderValueChangedTemp__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_InstrumentStopTone
{
public:
	FNetMulticast_InstrumentStopTone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Gettone() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GettimeOffset() {
		return memory.read<float>(m_addr + 4);
	}
	int32_t Getoctave() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateDoorData
{
public:
	FNetMulticast_UpdateDoorData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FConZBaseElementIdentifier GetElementIdentifier() {
		return memory.read<struct FConZBaseElementIdentifier>(m_addr + 8);
	}
	struct FDoorRepData GetdoorData() {
		return memory.read<struct FDoorRepData>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTurnInPlaceElapsedTimeRight
{
public:
	FGetTurnInPlaceElapsedTimeRight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSecondsBetweenLaunches
{
public:
	FGetSecondsBetweenLaunches(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SpawnVomitingEffects
{
public:
	FNetMulticast_SpawnVomitingEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetisForced() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAirplaneWingHitZoneData
{
public:
	FAirplaneWingHitZoneData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateAdminStates
{
public:
	FNetMulticast_UpdateAdminStates(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char Getstates() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnExaminedPrisonerEquippedItem
{
public:
	FOnExaminedPrisonerEquippedItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerInventoryComponent Getinventory() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerInventoryComponent(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPrisonerDetected
{
public:
	FIsPrisonerDetected(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_IncreaseSkillExperiencePoints
{
public:
	FServer_IncreaseSkillExperiencePoints(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetskillReplicationID() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetPoints() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAreaCenter
{
public:
	FGetAreaCenter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SplitAmmo
{
public:
	FServer_SplitAmmo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionItem GetammoItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnExaminedPrisonerUnequippedItem
{
public:
	FOnExaminedPrisonerUnequippedItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerInventoryComponent Getinventory() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerInventoryComponent(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FWait
{
public:
	FWait(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnMovementUpdated
{
public:
	FOnMovementUpdated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeltaSeconds() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetOldLocation() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FVector GetOldVelocity() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddRoomDefinition
{
public:
	FAddRoomDefinition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetRoomDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}
	struct UStaticMeshComponent GetLocker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct AKillBoxC4SpawnPoint GetC4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AKillBoxC4SpawnPoint(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnHearNoise
{
public:
	FOnHearNoise(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetinstigatorPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetVolume() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRep_ItemInHandsVisualObstructionDepth
{
public:
	FOnRep_ItemInHandsVisualObstructionDepth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetoldValue() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Farming_AddWaterToSlot
{
public:
	FServer_Farming_AddWaterToSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGarden GetGarden() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGarden(ptr_addr);
	}
	int32_t GetSlot() {
		return memory.read<int32_t>(m_addr + 8);
	}
	float GetAmount() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMarker
{
public:
	FGetMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameEventLocationMarker GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGameEventLocationMarker(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPromoteSquadMemberOnServer
{
public:
	FPromoteSquadMemberOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveFromSquadOnServer
{
public:
	FRemoveFromSquadOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartMeleeDodge
{
public:
	FStartMeleeDodge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetDirection() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveRecentServerAt
{
public:
	FRemoveRecentServerAt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveItemFromHands
{
public:
	FRemoveItemFromHands(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetpreferedHolsterType() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FResourceLockingManager_Server_LockArea
{
public:
	FResourceLockingManager_Server_LockArea(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FResourceNetworkGUID GetLockOwnerGUID() {
		return memory.read<struct FResourceNetworkGUID>(m_addr + 0);
	}
	struct FBox GetArea() {
		return memory.read<struct FBox>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveWeaponAttachment
{
public:
	FRemoveWeaponAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SendStateSnapshot
{
public:
	FNetMulticast_SendStateSnapshot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWeatherReplicatedStateSnapshot GetSnapshot() {
		return memory.read<struct FWeatherReplicatedStateSnapshot>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SendState
{
public:
	FServer_SendState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeltaTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FRigidBodyState GetState() {
		return memory.read<struct FRigidBodyState>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FChangeOpenState
{
public:
	FChangeOpenState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetShouldOpen() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetRotationTarget
{
public:
	FServer_SetRotationTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetrotationTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRequestRespawn
{
public:
	FRequestRespawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerTeleportRequest Getrequest() {
		return memory.read<struct FPrisonerTeleportRequest>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerTeleportRequest
{
public:
	FPrisonerTeleportRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetLoadedProjectileClass
{
public:
	FGetLoadedProjectileClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AProjectile GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AProjectile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SetWidgetVisibilityAndReset
{
public:
	FClient_SetWidgetVisibilityAndReset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetVisibility() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterMeshMorphTargetArray
{
public:
	FCharacterMeshMorphTargetArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCharacterMeshMorphTarget> GetMorphTargetArray() {
		return memory.read<struct TArray<struct FCharacterMeshMorphTarget>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRespawnAtCommonSpawnLocation
{
public:
	FRespawnAtCommonSpawnLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetcommonSpawnLocation() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FSectorId GetSectorId() {
		return memory.read<struct FSectorId>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FFireShotDescription
{
public:
	FFireShotDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSendServerTime
{
public:
	FSendServerTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTargetLeanAmountOnServer
{
public:
	FSetTargetLeanAmountOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSendMessageToClient
{
public:
	FSendMessageToClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentUserProfile
{
public:
	FGetCurrentUserProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UUserProfile GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UUserProfile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_AddNearbyFoliageInstances
{
public:
	FServer_AddNearbyFoliageInstances(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerNearbyFoliageInstanceInfoReplicated> GetreplicatedInstanceInfo() {
		return memory.read<struct TArray<struct FPrisonerNearbyFoliageInstanceInfoReplicated>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSendSquadInvitationOnServer
{
public:
	FSendSquadInvitationOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner Getinvited() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTradeOutpostProsperityLevelInfo
{
public:
	FTradeOutpostProsperityLevelInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetProsperityLevelName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	float GetProsperityLevelThreshold() {
		return memory.read<float>(m_addr + 16);
	}
	float GetFundsChangeRatePerHour() {
		return memory.read<float>(m_addr + 20);
	}
	int32_t GetProsperityLevelThresholdGold() {
		return memory.read<int32_t>(m_addr + 24);
	}
	float GetGBCRefreshRatePerHour() {
		return memory.read<float>(m_addr + 28);
	}
	float GetGSCRefreshRatePerHour() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRotated__DelegateSignature
{
public:
	FOnRotated__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemWidget2 GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UItemWidget2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMapHUDHomeLocationObject
{
public:
	FMapHUDHomeLocationObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFont Get_font() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UFont(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLockPickingDifficulty
{
public:
	FSetLockPickingDifficulty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_AddInventoryNode
{
public:
	FServer_AddInventoryNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UObject Getcontainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}
	struct FInventoryPositionDataRepHelper Getposition() {
		return memory.read<struct FInventoryPositionDataRepHelper>(m_addr + 16);
	}
	struct UObject GetTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FEconomyManagerRequestData
{
public:
	FEconomyManagerRequestData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetVehicleAnimInstance
{
public:
	FGetVehicleAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimInstance GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMuzzleDirection
{
public:
	FGetMuzzleDirection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryPositionDataRepHelper
{
public:
	FInventoryPositionDataRepHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject Get_dataClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	struct UInventoryPositionData Get_positionData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UInventoryPositionData(ptr_addr);
	}
	struct UObject Get_owner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UObject(ptr_addr);
	}
	int32_t Get_repKey() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWaterImmersionDepth
{
public:
	FGetWaterImmersionDepth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_AIMovementFinished
{
public:
	FServer_AIMovementFinished(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetwasSuccessful() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultDedicatedServerResponsePort
{
public:
	FGetDefaultDedicatedServerResponsePort(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_DestroyPlaceable
{
public:
	FServer_DestroyPlaceable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetID() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_InitiateCraftedPlacement
{
public:
	FServer_InitiateCraftedPlacement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPlaceableCraftableItem GetCraftableItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPlaceableCraftableItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerAppearance_TattooArray
{
public:
	FPrisonerAppearance_TattooArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerAppearance_Tattoo> GetTattoos() {
		return memory.read<struct TArray<struct FPrisonerAppearance_Tattoo>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddAmmo
{
public:
	FAddAmmo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAmmunitionData> Getammo() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZBaseElementIdentifier
{
public:
	FConZBaseElementIdentifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetBaseId() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetElementID() {
		return memory.read<int64_t>(m_addr + 8);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_InteractWithLadder
{
public:
	FServer_InteractWithLadder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GettraceOrigin() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GettraceDirection() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerBodyMuscleGroupsVsSeverityKey
{
public:
	FPrisonerBodyMuscleGroupsVsSeverityKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatRange GetSeverityRange() {
		return memory.read<struct FFloatRange>(m_addr + 0);
	}
	struct TSet<uint8_t > GetValues() {
		return memory.read<struct TSet<uint8_t >>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMember
{
public:
	FGetMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	struct FConZSquadMember GetReturnValue() {
		return memory.read<struct FConZSquadMember>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRecipeItemState
{
public:
	FRecipeItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FServer_lockpickingEnded
{
public:
	FServer_lockpickingEnded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetLockpickable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetSucceeded() {
		return memory.read<bool>(m_addr + 8);
	}
	struct FConZBaseElementIdentifier GetlockpickableBaseElement() {
		return memory.read<struct FConZBaseElementIdentifier>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_MinigameEnded
{
public:
	FServer_MinigameEnded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AMinigame GetminigameClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AMinigame(ptr_addr);
	}
	bool GetisPractice() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetSucceeded() {
		return memory.read<bool>(m_addr + 9);
	}
	struct TArray<struct TWeakObjectPtr<AItem>> Gettools() {
		return memory.read<struct TArray<struct TWeakObjectPtr<AItem>>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FHitReactResult
{
public:
	FHitReactResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontageToPlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetFollowupMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}
	float GetRegainControlDurationMultiplier() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterHeadImpactSoundsData
{
public:
	FCharacterHeadImpactSoundsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCharacterHeadImpactSoundData> GetSoundsData() {
		return memory.read<struct TArray<struct FCharacterHeadImpactSoundData>>(m_addr + 0);
	}
	struct FCharacterImpactSounds GetFallbackSounds() {
		return memory.read<struct FCharacterImpactSounds>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_OnLockpickingProtectionTriggered
{
public:
	FServer_OnLockpickingProtectionTriggered(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetLockpickable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetDamage() {
		return memory.read<float>(m_addr + 8);
	}
	struct UParticleSystem GetParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent Getaudio() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FVector GetParticlesScale() {
		return memory.read<struct FVector>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_ProjectileDealDamage
{
public:
	FServer_ProjectileDealDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FNetPackedProjectileDamageEvent GetpackedDamageEvent() {
		return memory.read<struct FNetPackedProjectileDamageEvent>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_UpdateLockHPOnServer
{
public:
	FServer_UpdateLockHPOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetLockpickable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetlockHP() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_DealRadialDamage
{
public:
	FServer_DealRadialDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	UObject GetWeaponClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UObject(ptr_addr);
	}
	struct FVector GetzeroLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	float GetDamage() {
		return memory.read<float>(m_addr + 28);
	}
	float GetInnerRadius() {
		return memory.read<float>(m_addr + 32);
	}
	float GetOuterRadius() {
		return memory.read<float>(m_addr + 36);
	}
	float GetFalloff() {
		return memory.read<float>(m_addr + 40);
	}
	float Getforce() {
		return memory.read<float>(m_addr + 44);
	}
	struct FTargetTypeDamageMultiplier GetTargetTypeMultiplier() {
		return memory.read<struct FTargetTypeDamageMultiplier>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPelvisBoneName
{
public:
	FGetPelvisBoneName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTakeItemInHands
{
public:
	FTakeItemInHands(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSlots
{
public:
	FGetSlots(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGridSlot GetGridSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UGridSlot(ptr_addr);
	}
	int32_t GetWidth() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetHeight() {
		return memory.read<int32_t>(m_addr + 12);
	}
	struct TArray<struct UInventorySlotUserWidget> GetSlots() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct UInventorySlotUserWidget>(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FScumPointDamageEvent
{
public:
	FScumPointDamageEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FInteractWithItem
{
public:
	FInteractWithItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}
	uint8_t  GetinteractionType() {
		return memory.read<uint8_t >(m_addr + 16);
	}
	struct FInteractionData GetInteractionData() {
		return memory.read<struct FInteractionData>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FTabButtonStyle
{
public:
	FTabButtonStyle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetSize() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	char EHorizontalAlignment GetHorizontalAlignment() {
		return memory.read<char EHorizontalAlignment>(m_addr + 8);
	}
	char EVerticalAlignment GetVerticalAlignment() {
		return memory.read<char EVerticalAlignment>(m_addr + 9);
	}
	struct FButtonStyle GetButtonStyle() {
		return memory.read<struct FButtonStyle>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RemoveNearbyFoliageInstances
{
public:
	FServer_RemoveNearbyFoliageInstances(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerNearbyFoliageInstanceInfoReplicated> GetreplicatedInstanceInfo() {
		return memory.read<struct TArray<struct FPrisonerNearbyFoliageInstanceInfoReplicated>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBankCardTypeData
{
public:
	FBankCardTypeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	int32_t GetPurchasePrice() {
		return memory.read<int32_t>(m_addr + 40);
	}
	uint8_t  GetPurchasePriceCurrency() {
		return memory.read<uint8_t >(m_addr + 44);
	}
	int32_t GetMaxWrongPinAttempts() {
		return memory.read<int32_t>(m_addr + 48);
	}
	int32_t GetFreeRenewalNum() {
		return memory.read<int32_t>(m_addr + 52);
	}
	int32_t GetDailyWithdrawLimit() {
		return memory.read<int32_t>(m_addr + 56);
	}
	int32_t GetDailyDepositLimit() {
		return memory.read<int32_t>(m_addr + 60);
	}
	int32_t GetPinComplexity() {
		return memory.read<int32_t>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_ReportVote
{
public:
	FServer_ReportVote(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetVote() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnCharacterAroundInfo
{
public:
	FSpawnCharacterAroundInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<APawn> GetAvailablePawns() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<APawn>(ptr_addr);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	float GetMinSpawnRadius() {
		return memory.read<float>(m_addr + 64);
	}
	float GetMaxSpawnRadius() {
		return memory.read<float>(m_addr + 68);
	}
	int32_t GetNumOfCharactersToSpawn() {
		return memory.read<int32_t>(m_addr + 72);
	}
	bool GetIgnoreLimit() {
		return memory.read<bool>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPhase
{
public:
	FGetPhase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMechanic_Server_SubscribeToVehicleServiceData
{
public:
	FMechanic_Server_SubscribeToVehicleServiceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AMechanic GetMechanic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AMechanic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_SetOnlyManualTrigger
{
public:
	FMulticast_SetOnlyManualTrigger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetonlyManualTrigger() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSkillStaminaConsumptionOnServer
{
public:
	FSetSkillStaminaConsumptionOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkill GetSkill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkill(ptr_addr);
	}
	float GetConsumption() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetActiveParachute
{
public:
	FServer_SetActiveParachute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AClothesItem GetParachute() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AClothesItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsStaringPerched
{
public:
	FGetIsStaringPerched(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetCarryingItemState
{
public:
	FServer_SetCarryingItemState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetState() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveAttachment
{
public:
	FRemoveAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetCurrentSpeedStep
{
public:
	FServer_SetCurrentSpeedStep(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Getstep() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetDangerCooldown
{
public:
	FServer_SetDangerCooldown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getcooldown() {
		return memory.read<float>(m_addr + 0);
	}
	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleDoorWindowCollisionAttached
{
public:
	FSetVehicleDoorWindowCollisionAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdoorIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FTrashNamedSliderValueChangedTemp__DelegateSignature
{
public:
	FTrashNamedSliderValueChangedTemp__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetGameEventLoadout
{
public:
	FServer_SetGameEventLoadout(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AItem Getprimary() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AItem(ptr_addr);
	}
	struct TArray<AItem> GetprimaryAttachments() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<AItem>(ptr_addr);
	}
	AItem Getsecondary() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return AItem(ptr_addr);
	}
	struct TArray<AItem> GetsecondaryAttachments() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct TArray<AItem>(ptr_addr);
	}
	AItem Gettertiary() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return AItem(ptr_addr);
	}
	struct TArray<AItem> GettertiaryAttachments() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<AItem>(ptr_addr);
	}
	struct TArray<AItem> Getoutfit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<AItem>(ptr_addr);
	}
	struct TArray<AItem> Getsupport() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct TArray<AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSphereOverlap
{
public:
	FSphereOverlap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetOverlappedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	int32_t GetOtherBodyIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}
	bool GetbFromSweep() {
		return memory.read<bool>(m_addr + 28);
	}
	struct FHitResult GetSweepResult() {
		return memory.read<struct FHitResult>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FLadderDetectionParams
{
public:
	FLadderDetectionParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetRayOrigin() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetRayDirection() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetMaxHorzDistanceToLadder() {
		return memory.read<float>(m_addr + 24);
	}
	float GetMaxRayToLadderAngle() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnItemDestroyed
{
public:
	FOnItemDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetitemActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetItemInHandsVisualObstructionDepth
{
public:
	FServer_SetItemInHandsVisualObstructionDepth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetMeleeTarget
{
public:
	FServer_SetMeleeTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetPlayingInstrumentState
{
public:
	FServer_SetPlayingInstrumentState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleMarkerData
{
public:
	FVehicleMarkerData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FTrashCarouselValueChangedTemp__DelegateSignature
{
public:
	FTrashCarouselValueChangedTemp__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNewValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetScopingWithItemInHandsState
{
public:
	FServer_SetScopingWithItemInHandsState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetupStateFromCooking
{
public:
	FNetMulticast_SetupStateFromCooking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetcookState() {
		return memory.read<uint32_t>(m_addr + 0);
	}
	struct TArray<char> GetingredientData() {
		return memory.read<struct TArray<char>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetShouldIgnoreHeadTurning
{
public:
	FServer_SetShouldIgnoreHeadTurning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetVehicleAimingYaw
{
public:
	FServer_SetVehicleAimingYaw(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getangle() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIsInCombatModeOnServer
{
public:
	FSetIsInCombatModeOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRadius
{
public:
	FGetRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDoorUnlockDataDescription
{
public:
	FDoorUnlockDataDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UDoorUnlockData GetDoorUnlockData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UDoorUnlockData(ptr_addr);
	}
	int32_t GetProbabilityCount() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SplitCurrencyItem
{
public:
	FServer_SplitCurrencyItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetcurrencyItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	int32_t GetnewAmount() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FInsertCartridgeIntoWeaponAtLocation
{
public:
	FInsertCartridgeIntoWeaponAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	struct AAmmunitionItem Getammo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AAmmunitionItem(ptr_addr);
	}
	bool GetbackLocation() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumVehicleDoors
{
public:
	FGetNumVehicleDoors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_StoreAmmoInAmmoBox
{
public:
	FServer_StoreAmmoInAmmoBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionItem Getammo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionItem(ptr_addr);
	}
	struct AAmmunitionBoxItem GetBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AAmmunitionBoxItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMakeNoiseLoudness
{
public:
	FGetMakeNoiseLoudness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerBodyMuscleGroupsVsSeverity
{
public:
	FPrisonerBodyMuscleGroupsVsSeverity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerBodyMuscleGroupsVsSeverityKey> GetKeys() {
		return memory.read<struct TArray<struct FPrisonerBodyMuscleGroupsVsSeverityKey>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMountSlotIndicatorsWidget
{
public:
	FGetMountSlotIndicatorsWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UUserWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SwapWeaponAttachments
{
public:
	FServer_SwapWeaponAttachments(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	struct AWeaponAttachment GetoldAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AWeaponAttachment(ptr_addr);
	}
	struct AWeaponAttachment GetnewAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_UnloadAmmoFromMagazine
{
public:
	FServer_UnloadAmmoFromMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachmentMagazine Getmagazine() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachmentMagazine(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FHitReactMagnitudeData
{
public:
	FHitReactMagnitudeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitReactDirectionData GetSmallHit() {
		return memory.read<struct FHitReactDirectionData>(m_addr + 0);
	}
	struct FHitReactDirectionData GetMediumHit() {
		return memory.read<struct FHitReactDirectionData>(m_addr + 72);
	}
	struct FHitReactDirectionData GetLargeHit() {
		return memory.read<struct FHitReactDirectionData>(m_addr + 144);
	}
	struct FHitReactDirectionData GetKnockoutHit() {
		return memory.read<struct FHitReactDirectionData>(m_addr + 216);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFreeLookEnabledOnServer
{
public:
	FSetFreeLookEnabledOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGameEvent
{
public:
	FSetGameEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameEventBase GetgameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGameEventBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleExhaustEffectsParameters
{
public:
	FVehicleExhaustEffectsParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct UParticleSystem GetEngineStartedParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetEngineIdleParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetThrottlePressedParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent GetThrottlePressedAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetMinDurationBetweenThrottlePressedEffects() {
		return memory.read<float>(m_addr + 80);
	}
	float GetDeactivationDelay() {
		return memory.read<float>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIsEnabled
{
public:
	FSetIsEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIsInCombatMode
{
public:
	FSetIsInCombatMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIsLimpingOverrideEnabled
{
public:
	FSetIsLimpingOverrideEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIKLegsRootOffsetVectorFromCardinalDirection
{
public:
	FGetIKLegsRootOffsetVectorFromCardinalDirection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPhysicalAnimationDesc
{
public:
	FPhysicalAnimationDesc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetMidiDeviceByIndex
{
public:
	FSetMidiDeviceByIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FWindowMarker
{
public:
	FWindowMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsVaultable() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetIsFortifiable() {
		return memory.read<bool>(m_addr + 1);
	}
	struct UWindowFortificationsType GetWindowFortificationsType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UWindowFortificationsType(ptr_addr);
	}
	struct TArray<int32_t> GetAdditionalMarkerIndicesToModify() {
		return memory.read<struct TArray<int32_t>>(m_addr + 16);
	}
	bool GetDidIFailToCorrectlyPlaceWindowMarkers() {
		return memory.read<bool>(m_addr + 32);
	}
	struct FVector GetVertex1() {
		return memory.read<struct FVector>(m_addr + 36);
	}
	struct FVector GetVertex2() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	float GetFortificationOffset() {
		return memory.read<float>(m_addr + 60);
	}
	float GetCollisionBoxVertBias() {
		return memory.read<float>(m_addr + 64);
	}
	float GetCollisionBoxHorzBias() {
		return memory.read<float>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FMapHUDPrisonerObject
{
public:
	FMapHUDPrisonerObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D Get_prisonerPositionTextureSize() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}
	struct UTexture Get_myPrisonerPositionTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UTexture(ptr_addr);
	}
	struct UTexture Get_prisonerPingAnimationTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UTexture(ptr_addr);
	}
	float Get_prisonerPingSizeMultiplier() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMidiDeviceByName
{
public:
	FSetMidiDeviceByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotificationDescriptionReplicationHelper
{
public:
	FNotificationDescriptionReplicationHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetOverrideIsLimping
{
public:
	FSetOverrideIsLimping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCorpseStaticMeshRepData
{
public:
	FCorpseStaticMeshRepData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetDisplayName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UStaticMesh GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UStaticMesh(ptr_addr);
	}
	struct TArray<struct UMaterialInterface> GetMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct UMaterialInterface>(ptr_addr);
	}
	bool GetVisibility() {
		return memory.read<bool>(m_addr + 32);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	struct FName GetAttachSocket() {
		return memory.read<struct FName>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FCarouselTextStyle
{
public:
	FCarouselTextStyle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMargin GetPadding() {
		return memory.read<struct FMargin>(m_addr + 0);
	}
	char EHorizontalAlignment GetHorizontalAlignment() {
		return memory.read<char EHorizontalAlignment>(m_addr + 16);
	}
	char EVerticalAlignment GetVerticalAlignment() {
		return memory.read<char EVerticalAlignment>(m_addr + 17);
	}
	struct FSlateFontInfo GetFont() {
		return memory.read<struct FSlateFontInfo>(m_addr + 24);
	}
	struct FLinearColor GetColorAndOpacity() {
		return memory.read<struct FLinearColor>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPlayerSoundLevel
{
public:
	FSetPlayerSoundLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOn_Selection_MouseButtonDown
{
public:
	FOn_Selection_MouseButtonDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGeometry GetGeometry() {
		return memory.read<struct FGeometry>(m_addr + 0);
	}
	struct FPointerEvent GetMouseEvent() {
		return memory.read<struct FPointerEvent>(m_addr + 56);
	}
	struct FEventReply GetReturnValue() {
		return memory.read<struct FEventReply>(m_addr + 168);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsVehicleInteriorExposed
{
public:
	FIsVehicleInteriorExposed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFavoriteServers
{
public:
	FSetFavoriteServers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FUserServerHistoryItem> GetValue() {
		return memory.read<struct TArray<struct FUserServerHistoryItem>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FActiveMovingThroughFoliageSounds
{
public:
	FActiveMovingThroughFoliageSounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingIngredientTypeModifier
{
public:
	FCraftingIngredientTypeModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCraftingIngredientType GetIngredientType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UCraftingIngredientType(ptr_addr);
	}
	float GetAmountMultiplier() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRotationTarget
{
public:
	FSetRotationTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetrotationTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAITeamAttitudeData
{
public:
	FAITeamAttitudeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char ETeamAttitude GetAttitudePerTeam[7]() {
		return memory.read<char ETeamAttitude>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTargetOnServer
{
public:
	FSetTargetOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWristwatchBrightness
{
public:
	FSetWristwatchBrightness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_InsertCartridgeIntoWeapon
{
public:
	FServer_InsertCartridgeIntoWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionItem Getammo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionItem(ptr_addr);
	}
	struct FAmmunitionData GetAmmunitionData() {
		return memory.read<struct FAmmunitionData>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldLookatMeleeTarget
{
public:
	FShouldLookatMeleeTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowSpawnScreen
{
public:
	FShowSpawnScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetloadoutMenu() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMountReplication
{
public:
	FPrisonerMountReplication(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetMountedSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	uint8_t  Get_mountFlags() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	char Get_version() {
		return memory.read<char>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnLockRemoved__DelegateSignature
{
public:
	FOnLockRemoved__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRep_StateFlags
{
public:
	FOnRep_StateFlags(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetPrevious() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleManualSpawnPresetArray
{
public:
	FVehicleManualSpawnPresetArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVehiclePreset GetPresetPerSpawnType[4]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UVehiclePreset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldOpen
{
public:
	FShouldOpen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTabTextStyle
{
public:
	FTabTextStyle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMargin GetPadding() {
		return memory.read<struct FMargin>(m_addr + 0);
	}
	char EHorizontalAlignment GetHorizontalAlignment() {
		return memory.read<char EHorizontalAlignment>(m_addr + 16);
	}
	char EVerticalAlignment GetVerticalAlignment() {
		return memory.read<char EVerticalAlignment>(m_addr + 17);
	}
	struct FSlateFontInfo GetFont() {
		return memory.read<struct FSlateFontInfo>(m_addr + 24);
	}
	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 112);
	}
	struct FVector2D GetShadowOffset() {
		return memory.read<struct FVector2D>(m_addr + 128);
	}
	struct FLinearColor GetShadowColorAndOpacity() {
		return memory.read<struct FLinearColor>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FDoorRepData
{
public:
	FDoorRepData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetStateFlags() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FDbIntegerId GetOwningUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 8);
	}
	struct TArray<UObject> GetLocks() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<UObject>(ptr_addr);
	}
	struct TArray<int32_t> GetRemainingNeutralizationAttemptsPerLock() {
		return memory.read<struct TArray<int32_t>>(m_addr + 32);
	}
	char GetDoorAccessLevel() {
		return memory.read<char>(m_addr + 48);
	}
	struct TArray<struct AItem> GetAttachedItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FElementInteractedEvent__DelegateSignature
{
public:
	FElementInteractedEvent__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	uint8_t  GetinteractionType() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	struct FInteractionData GetInteractionData() {
		return memory.read<struct FInteractionData>(m_addr + 16);
	}
	struct FBaseInteractionParams GetBaseInteractionParams() {
		return memory.read<struct FBaseInteractionParams>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventory_Server_DropInventoryElement
{
public:
	FInventory_Server_DropInventoryElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}
	struct FInv2021_InventoryElementRepHelper GetElement() {
		return memory.read<struct FInv2021_InventoryElementRepHelper>(m_addr + 8);
	}
	struct FInv2021_InventoryPositionObjectRepHelper Getposition() {
		return memory.read<struct FInv2021_InventoryPositionObjectRepHelper>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMalfunctionsForEvent
{
public:
	FGetMalfunctionsForEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetmalfunctionEvent() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FWeaponMalfunctionEventDescription Getdesc() {
		return memory.read<struct FWeaponMalfunctionEventDescription>(m_addr + 4);
	}
	struct TArray<struct FWeaponMalfunctionProbability> GetmalfunctionsIn() {
		return memory.read<struct TArray<struct FWeaponMalfunctionProbability>>(m_addr + 16);
	}
	struct TArray<struct FWeaponMalfunctionProbability> GetmalfunctionsOut() {
		return memory.read<struct TArray<struct FWeaponMalfunctionProbability>>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnBackgroundClicked
{
public:
	FOnBackgroundClicked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDropdownMenuSelectionWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDropdownMenuSelectionWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTakeDamageDelegate__DelegateSignature
{
public:
	FTakeDamageDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetdamageActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetDamage() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetHitLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct APawn GeteventInstigator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentLocomotionStateElapsedTime
{
public:
	FGetCurrentLocomotionStateElapsedTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerAppearance_SkinParams
{
public:
	FPrisonerAppearance_SkinParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerAppearance_FaceVariation> GetFaceVariations() {
		return memory.read<struct TArray<struct FPrisonerAppearance_FaceVariation>>(m_addr + 0);
	}
	struct TArray<struct FPrisonerAppearance_SkinTone> GetSkinTones() {
		return memory.read<struct TArray<struct FPrisonerAppearance_SkinTone>>(m_addr + 16);
	}
	struct TArray<struct FPrisonerAppearance_HairColorPreset> GetHairColorPresets() {
		return memory.read<struct TArray<struct FPrisonerAppearance_HairColorPreset>>(m_addr + 32);
	}
	int32_t GetDefaultSkinToneIndex() {
		return memory.read<int32_t>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FActionChangedDelegate__DelegateSignature
{
public:
	FActionChangedDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetCurrentAction() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	uint8_t  GetPrevAction() {
		return memory.read<uint8_t >(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnlockLocation
{
public:
	FUnlockLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAmmoCount
{
public:
	FSetAmmoCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 0);
	}
	uint8_t  GetbroadcastRPCType() {
		return memory.read<uint8_t >(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FChangeSpeed
{
public:
	FChangeSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getpace() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFishStateParameters
{
public:
	FFishStateParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMaxSpeed() {
		return memory.read<float>(m_addr + 0);
	}
	float GetAcceleration() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDeceleration() {
		return memory.read<float>(m_addr + 8);
	}
	float GetTurnSpeed() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnItemContainerUnlocked__DelegateSignature
{
public:
	FOnItemContainerUnlocked__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItemContainer GetItemContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItemContainer(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_Initialize
{
public:
	FClient_Initialize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddAttachment
{
public:
	FAddAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachment(ptr_addr);
	}
	bool Getattach() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetremoveExistingOnTheSameMountType() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_ShowWaypointWidget
{
public:
	FClient_ShowWaypointWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GettargetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct AActor GetactorToTieLifetime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAquaticLifeSpawningVolumeDescription
{
public:
	FAquaticLifeSpawningVolumeDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFishSpeciesPreset GetFishSpeciesPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UFishSpeciesPreset(ptr_addr);
	}
	struct UFishSpawningPreset GetFishSpawningPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UFishSpawningPreset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAuthorityInfo
{
public:
	FSetAuthorityInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FUserProfileAuthorityInfo GetValue() {
		return memory.read<struct FUserProfileAuthorityInfo>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddAttachmentLocal
{
public:
	FAddAttachmentLocal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachment(ptr_addr);
	}
	bool Getattach() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnItemSelectionChanged
{
public:
	FOnItemSelectionChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getselected() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FChat_Client_UpdatePlayerArgumentCompletionCache
{
public:
	FChat_Client_UpdatePlayerArgumentCompletionCache(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> Getcompletions() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerInjuryTypeLikelihoods
{
public:
	FPrisonerInjuryTypeLikelihoods(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	float GetBoneInjuryLikelihood() {
		return memory.read<float>(m_addr + 16);
	}
	float GetMuscleInjuryLikelihood() {
		return memory.read<float>(m_addr + 20);
	}
	float GetOrganInjuryLikelihood() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAttachmentAddedSignature__DelegateSignature
{
public:
	FAttachmentAddedSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon Getsender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAttachmentRemovedSignature__DelegateSignature
{
public:
	FAttachmentRemovedSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon Getsender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectileArrowData
{
public:
	FProjectileArrowData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetAmmunitionArrowClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	float GetItemsHealth() {
		return memory.read<float>(m_addr + 8);
	}
	float GetStiffnessFactor() {
		return memory.read<float>(m_addr + 12);
	}
	float GetFlightRotationCorrectionSpeed() {
		return memory.read<float>(m_addr + 16);
	}
	float GetDeviationDegrees() {
		return memory.read<float>(m_addr + 20);
	}
	bool GetIsPartOfEvent() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRecipeClicked
{
public:
	FOnRecipeClicked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCraftingRecipeWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCraftingRecipeWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanAddAttachment
{
public:
	FCanAddAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachment(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRequestClearMalfunction
{
public:
	FRequestClearMalfunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmalfunction() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFishingRodOwner
{
public:
	FGetFishingRodOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentLightAngle
{
public:
	FGetCurrentLightAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoatParametersPerMovementPace_Deprecated
{
public:
	FBoatParametersPerMovementPace_Deprecated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsValid() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetBaseMaxForwardSpeed() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetCanReverse() {
		return memory.read<bool>(m_addr + 8);
	}
	float GetBaseMaxReverseSpeed() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMinPrisonerStrength() {
		return memory.read<float>(m_addr + 16);
	}
	float GetThrottleMultiplier() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetHookBitten
{
public:
	FNetMulticast_SetHookBitten(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}
	struct UFishSpeciesData GetspeciesData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UFishSpeciesData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FChooseSpawnLocation
{
public:
	FChooseSpawnLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterMeshMaterialOverride
{
public:
	FCharacterMeshMaterialOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagQuery GetCondition() {
		return memory.read<struct FGameplayTagQuery>(m_addr + 0);
	}
	struct FName GetMaterialSlot() {
		return memory.read<struct FName>(m_addr + 72);
	}
	struct TSoftObjectPtr<UMaterialInstance> GetOverrideMaterial() {
		return memory.read<struct TSoftObjectPtr<UMaterialInstance>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FFireShotProjectileDescription
{
public:
	FFireShotProjectileDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FAssignParticipantTeam
{
public:
	FAssignParticipantTeam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldPlayCasingEjectedSound
{
public:
	FShouldPlayCasingEjectedSound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDedicatedServerRequest
{
public:
	FGetDedicatedServerRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDedicatedServerRequest GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDedicatedServerRequest(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnFishingActionAnimNotify
{
public:
	FOnFishingActionAnimNotify(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetnotifyType() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMovableCollisionFieldMoveInfo
{
public:
	FMovableCollisionFieldMoveInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDuration() {
		return memory.read<float>(m_addr + 0);
	}
	uint8_t  GetcurveType() {
		return memory.read<uint8_t >(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetProgressPercentage
{
public:
	FGetProgressPercentage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveAttachmentLocal
{
public:
	FRemoveAttachmentLocal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAwardParticipant
{
public:
	FAwardParticipant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FGameEventRewardPoints Getreward() {
		return memory.read<struct FGameEventRewardPoints>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FLockpickable_Server_TriggerFailurePenalty
{
public:
	FLockpickable_Server_TriggerFailurePenalty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetLockpickable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct APrisoner GettriggeringPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_CheckIfFishBitBait
{
public:
	FServer_CheckIfFishBitBait(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHitReactLandingData
{
public:
	FHitReactLandingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinImpactSpeedToReact() {
		return memory.read<float>(m_addr + 0);
	}
	struct UAnimMontage GetMontageToPlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}
	float GetRegainControlDurationMultiplier() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetCanEverGoToRagdoll() {
		return memory.read<bool>(m_addr + 20);
	}
	float GetMinImpactSpeedForRagdoll() {
		return memory.read<float>(m_addr + 24);
	}
	float GetMinRagdollDuration() {
		return memory.read<float>(m_addr + 28);
	}
	float GetMaxRagdollDuration() {
		return memory.read<float>(m_addr + 32);
	}
	float GetRagdollDurationPerSpeedUnit() {
		return memory.read<float>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeleeSkillAttack
{
public:
	FMeleeSkillAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagContainer GetAttackTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 0);
	}
	struct FGameplayTagContainer GetIgnoreReason() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 32);
	}
	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetMontageFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAnimMontage(ptr_addr);
	}
	struct FFloatInterval GetPitchRange() {
		return memory.read<struct FFloatInterval>(m_addr + 80);
	}
	float GetMaxDistance() {
		return memory.read<float>(m_addr + 88);
	}
	float GetMinDistance() {
		return memory.read<float>(m_addr + 92);
	}
	float GetMinStamina() {
		return memory.read<float>(m_addr + 96);
	}
	float GetOrientToTargetSpeedFactor() {
		return memory.read<float>(m_addr + 100);
	}
	float GetRegainControlDurationMultiplier() {
		return memory.read<float>(m_addr + 104);
	}
	float GetStaminaDrainMultiplier() {
		return memory.read<float>(m_addr + 108);
	}
	bool GetCanBeUsedAsInitialAttack() {
		return memory.read<bool>(m_addr + 112);
	}
	bool GetCanBeUsedToCloseLargeDistanceToTarget() {
		return memory.read<bool>(m_addr + 113);
	}
	bool GetSolo() {
		return memory.read<bool>(m_addr + 114);
	}
	bool GetMute() {
		return memory.read<bool>(m_addr + 115);
	}
	bool GetIsAlwaysCandidate() {
		return memory.read<bool>(m_addr + 116);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_CleanupTrophyState
{
public:
	FServer_CleanupTrophyState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetkeptFish() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSearchItemSpawnerPresetArray
{
public:
	FSearchItemSpawnerPresetArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UItemSpawnerPreset> GetItemSpawnerPresets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<UItemSpawnerPreset>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerAppearance_IrisColor
{
public:
	FPrisonerAppearance_IrisColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetPreviewColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FVector4 GetIrisColor() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	uint8_t  GetColorName() {
		return memory.read<uint8_t >(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_ReleaseCastingObject
{
public:
	FServer_ReleaseCastingObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetDirection() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetcastingPower() {
		return memory.read<float>(m_addr + 24);
	}
	uint8_t  GetnextState() {
		return memory.read<uint8_t >(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetCastPower
{
public:
	FServer_SetCastPower(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInv2021_InventoryPositionObjectRepHelper
{
public:
	FInv2021_InventoryPositionObjectRepHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FServer_SpawnCaughtFish
{
public:
	FServer_SpawnCaughtFish(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor GetcaughtFishClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AActor(ptr_addr);
	}
	uint8_t  GetFishSpecies() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	float GetcaughtFishMass() {
		return memory.read<float>(m_addr + 12);
	}
	float GetcaughtFishSize() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDeactivateFacialExpressionOnGameThread
{
public:
	FDeactivateFacialExpressionOnGameThread(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetfacialExpression() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCapacityY
{
public:
	FGetCapacityY(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWarmth
{
public:
	FGetWarmth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZWeaponDescRow
{
public:
	FConZWeaponDescRow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamage() {
		return memory.read<float>(m_addr + 8);
	}
	float GetDamageInGameEvent() {
		return memory.read<float>(m_addr + 12);
	}
	struct FTargetTypeDamageMultiplier GetTargetTypeMultiplier() {
		return memory.read<struct FTargetTypeDamageMultiplier>(m_addr + 16);
	}
	float GetEnergy() {
		return memory.read<float>(m_addr + 32);
	}
	float GetSharpnessSlash() {
		return memory.read<float>(m_addr + 36);
	}
	float GetSharpnessPierce() {
		return memory.read<float>(m_addr + 40);
	}
	uint8_t  GetImpactSoundCategory() {
		return memory.read<uint8_t >(m_addr + 44);
	}
	struct UProjectileImpactEffects GetImpactEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UProjectileImpactEffects(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAllVoiceChatComponentsInRange
{
public:
	FGetAllVoiceChatComponentsInRange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UVoiceChatComponent> GetpawnList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UVoiceChatComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDirtiness
{
public:
	FSetDirtiness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getdirtiness() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FActivatedChangedEvent__DelegateSignature
{
public:
	FActivatedChangedEvent__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ANightVisionGogglesItem Getsender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ANightVisionGogglesItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnComponentDeactivated
{
public:
	FOnComponentDeactivated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UActorComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPhysicalSurfaceData
{
public:
	FPhysicalSurfaceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDirtinessFactor() {
		return memory.read<float>(m_addr + 0);
	}
	float GetWetnessFactor() {
		return memory.read<float>(m_addr + 4);
	}
	float GetLandingImpactVelocityModifier() {
		return memory.read<float>(m_addr + 8);
	}
	float GetNoiseLoudnessModifier() {
		return memory.read<float>(m_addr + 12);
	}
	float GetFootstepEnhancerChance() {
		return memory.read<float>(m_addr + 16);
	}
	float GetFootwearDamageMultiplier() {
		return memory.read<float>(m_addr + 20);
	}
	float GetFootAbrasionsMultiplier() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanBeCanceled
{
public:
	FCanBeCanceled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFiringBodyWeaponAnimation
{
public:
	FGetFiringBodyWeaponAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBodyWeaponAnimation GetReturnValue() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FObjectConditionContainer
{
public:
	FObjectConditionContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UObject> Get_objectConditions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTriggeredEvent__DelegateSignature
{
public:
	FTriggeredEvent__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTriggeredEventData GeteventData() {
		return memory.read<struct FTriggeredEventData>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHighlightItemOnClient
{
public:
	FHighlightItemOnClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInteractionStruct
{
public:
	FInteractionStruct(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetinteractionType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FString GetInteractionCaption() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddAmmoSingle
{
public:
	FAddAmmoSingle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FAmmunitionData Getammo() {
		return memory.read<struct FAmmunitionData>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanBeginFiringSequenceWithMalfunction
{
public:
	FCanBeginFiringSequenceWithMalfunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmalfunction() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanFireAgain
{
public:
	FCanFireAgain(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanReloadUsingData
{
public:
	FCanReloadUsingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWeaponReloadData GetData() {
		return memory.read<struct FWeaponReloadData>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FUntrackMission
{
public:
	FUntrackMission(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetMissionType() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanSwitchFiringMode
{
public:
	FCanSwitchFiringMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEat
{
public:
	FEat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindReloadData
{
public:
	FFindReloadData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AItem> GetItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AItem>(ptr_addr);
	}
	struct FWeaponReloadData GetreloadData() {
		return memory.read<struct FWeaponReloadData>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxValue
{
public:
	FGetMaxValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemContainersReplicationHelper
{
public:
	FItemContainersReplicationHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FItemContainerRepData> GetItemContainerData() {
		return memory.read<struct TMap<struct FString, struct FItemContainerRepData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAmmoCount
{
public:
	FGetAmmoCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterMeshMorphTarget
{
public:
	FCharacterMeshMorphTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagQuery GetCondition() {
		return memory.read<struct FGameplayTagQuery>(m_addr + 0);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimalActionMontageData
{
public:
	FAnimalActionMontageData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetSleepMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetEatMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetIntimidateMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAmmoTypeString
{
public:
	FGetAmmoTypeString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrimaryIdleAnimationTP
{
public:
	FGetPrimaryIdleAnimationTP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAmmunitionItemClass
{
public:
	FGetAmmunitionItemClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRequestSpamFilter
{
public:
	FRequestSpamFilter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FZombieRelaxedStanceAnimations
{
public:
	FZombieRelaxedStanceAnimations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetWalkLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldShowExtendedWidgetTooltip
{
public:
	FShouldShowExtendedWidgetTooltip(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFiringMontage
{
public:
	FGetFiringMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetisLastShot() {
		return memory.read<bool>(m_addr + 0);
	}
	struct UAnimMontage GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInternalMagazineAmmoCount
{
public:
	FGetInternalMagazineAmmoCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerBodyOrganGroupsVsSeverityKey
{
public:
	FPrisonerBodyOrganGroupsVsSeverityKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatRange GetSeverityRange() {
		return memory.read<struct FFloatRange>(m_addr + 0);
	}
	struct TSet<uint8_t > GetValues() {
		return memory.read<struct TSet<uint8_t >>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInternalMagazineSpace
{
public:
	FGetInternalMagazineSpace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBegin
{
public:
	FBegin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGuardedZoneManagerDescription
{
public:
	FGuardedZoneManagerDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSentrySpawnerDescription> Get_sentrySpawners() {
		return memory.read<struct TArray<struct FSentrySpawnerDescription>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnpackUint8
{
public:
	FUnpackUint8(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char Getpack() {
		return memory.read<char>(m_addr + 0);
	}
	struct TArray<bool> GetB() {
		return memory.read<struct TArray<bool>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_PlayChamberEffects
{
public:
	FServer_PlayChamberEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetplayDryFireSound() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsChambering
{
public:
	FGetIsChambering(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateConfiguration
{
public:
	FUpdateConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetConfigurationIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FCustomZoneConfiguration Getconfiguration() {
		return memory.read<struct FCustomZoneConfiguration>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanClimbWindow
{
public:
	FCanClimbWindow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsHitZoneActive
{
public:
	FIsHitZoneActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetzoneIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsScopingAllowed
{
public:
	FGetIsScopingAllowed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsStarted
{
public:
	FIsStarted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanMemberEditEmblem
{
public:
	FCanMemberEditEmblem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMagazine
{
public:
	FGetMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachmentMagazine GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachmentMagazine(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponMalfunctionProbability
{
public:
	FWeaponMalfunctionProbability(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmalfunction() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetProbability() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanEverBeCanceled
{
public:
	FCanEverBeCanceled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponMalfunctionEventDescription
{
public:
	FWeaponMalfunctionEventDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetIsFiring
{
public:
	FSetIsFiring(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsFiring() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxAmmoCount
{
public:
	FGetMaxAmmoCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponBowAimOffsets
{
public:
	FWeaponBowAimOffsets(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBlendSpace GetDrawPercentage[3]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBlendSpace(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRangedResourceProvider_ResourceAmountChanged
{
public:
	FRangedResourceProvider_ResourceAmountChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URangedResourceProviderComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct URangedResourceProviderComponent(ptr_addr);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetProbabilityForMalfunction
{
public:
	FGetProbabilityForMalfunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmalfunction() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetnormalizedHealth() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetShakiness
{
public:
	FGetShakiness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSpread
{
public:
	FGetSpread(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseDamageInteractionEvent
{
public:
	FBaseDamageInteractionEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetType
{
public:
	FGetType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMovementSettings_Ground_Standing_Running
{
public:
	FPrisonerMovementSettings_Ground_Standing_Running(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerGroundMovementParameters GetDefault() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUseMuzzleDirectionForShooting
{
public:
	FGetUseMuzzleDirectionForShooting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUseWeaponAnimationPose
{
public:
	FGetUseWeaponAnimationPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMissionItemInfo
{
public:
	FMissionItemInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<AActor> GetItemLocation() {
		return memory.read<struct TSoftObjectPtr<AActor>>(m_addr + 0);
	}
	AItem GetItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return AItem(ptr_addr);
	}
	bool GetShouldRemove() {
		return memory.read<bool>(m_addr + 48);
	}
	float GetTimeToDestroy() {
		return memory.read<float>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWeaponOwner
{
public:
	FGetWeaponOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMaxMovementPaceVsSeverityKey
{
public:
	FPrisonerMaxMovementPaceVsSeverityKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatRange GetSeverityRange() {
		return memory.read<struct FFloatRange>(m_addr + 0);
	}
	uint8_t  GetMaxMovementPace() {
		return memory.read<uint8_t >(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FHalloweenSacrificePitRequiredItemVariants
{
public:
	FHalloweenSacrificePitRequiredItemVariants(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TSoftClassPtr<UObject>> GetVariants() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingSlotRequirement
{
public:
	FCraftingSlotRequirement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSlotName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetLimitIngredientTypes() {
		return memory.read<bool>(m_addr + 16);
	}
	struct TArray<UCraftingIngredientType> GetIngredientTypes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<UCraftingIngredientType>(ptr_addr);
	}
	uint8_t  GetConsumptionHint() {
		return memory.read<uint8_t >(m_addr + 40);
	}
	int32_t GetAmountNeeded() {
		return memory.read<int32_t>(m_addr + 44);
	}
	bool GetOverrideAmountNeededSkill() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FCraftingSlotAmountNeededPerSkillLevel GetAmountNeededSkillLevelOverride() {
		return memory.read<struct FCraftingSlotAmountNeededPerSkillLevel>(m_addr + 56);
	}
	struct TArray<struct FCraftingIngredientTypeModifier> GetIngredientTypeModifiers() {
		return memory.read<struct TArray<struct FCraftingIngredientTypeModifier>>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FGet_ItemName_ColorAndOpacity
{
public:
	FGet_ItemName_ColorAndOpacity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateColor GetReturnValue() {
		return memory.read<struct FSlateColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetZeroRange
{
public:
	FGetZeroRange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasAmmoToUnload
{
public:
	FHasAmmoToUnload(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTransformWorldPositionToTargetFOV
{
public:
	FTransformWorldPositionToTargetFOV(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetFieldOfView() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetWorldPosition() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FFilterNonNumbersFromString
{
public:
	FFilterNonNumbersFromString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetReplenishableResourceAmount
{
public:
	FNetMulticast_SetReplenishableResourceAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FPackedLocation GetID() {
		return memory.read<struct FPackedLocation>(m_addr + 8);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMetabolismRadialProgressBarFontSettings
{
public:
	FMetabolismRadialProgressBarFontSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetFontSize() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FMargin GetFontPadding() {
		return memory.read<struct FMargin>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAmmoCompatible
{
public:
	FIsAmmoCompatible(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetAmmunitionTag() {
		return memory.read<struct FGameplayTag>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSentrySpawnerDescription
{
public:
	FSentrySpawnerDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	ASentry2 Get_sentryClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return ASentry2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAmmoInMagazineCompatible
{
public:
	FIsAmmoInMagazineCompatible(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachmentMagazine Getmagazine() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachmentMagazine(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsChamberOpened
{
public:
	FIsChamberOpened(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsFiring
{
public:
	FIsFiring(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCookingUtilitySlotArray
{
public:
	FCookingUtilitySlotArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCookingUtilitySlotInstance> Get_slots() {
		return memory.read<struct TArray<struct FCookingUtilitySlotInstance>>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterStatsItem
{
public:
	FCharacterStatsItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetRank() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FString GetPlayerName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FCharacterStats GetCharacterStats() {
		return memory.read<struct FCharacterStats>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHideAvatarAnimation
{
public:
	FGetHideAvatarAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInGameEvent
{
public:
	FIsInGameEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_PlayChamberEffects
{
public:
	FNetMulticast_PlayChamberEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetplayDryFireSound() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_PlayFiringEffects
{
public:
	FNetMulticast_PlayFiringEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetisLastShot() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_SetRadius
{
public:
	FMulticast_SetRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRadius() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsShowingLoading
{
public:
	FIsShowingLoading(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FZoneConfiguration
{
public:
	FZoneConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsOutpost() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetIsItemPlacementAllowed() {
		return memory.read<bool>(m_addr + 1);
	}
	struct TArray<uint8_t > GetInteractionsToDisable() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnEmblemUpdate
{
public:
	FOnEmblemUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDropdownMenuSelectionWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDropdownMenuSelectionWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMapHUDFlagsObject
{
public:
	FMapHUDFlagsObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture Get_flagPositionOuterRingTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UTexture(ptr_addr);
	}
	struct FLinearColor Get_flagOuterRingColor() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}
	struct FLinearColor Get_flagHighlightOuterRingColor() {
		return memory.read<struct FLinearColor>(m_addr + 48);
	}
	struct UTexture Get_flagPositionInnerCircleTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UTexture(ptr_addr);
	}
	struct FLinearColor Get_flagInnerCircleColor() {
		return memory.read<struct FLinearColor>(m_addr + 72);
	}
	struct FLinearColor Get_flagHighlightInnerCircleColor() {
		return memory.read<struct FLinearColor>(m_addr + 88);
	}
	struct UFont Get_flagFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UFont(ptr_addr);
	}
	struct FLinearColor Get_flagNameHighlightColor() {
		return memory.read<struct FLinearColor>(m_addr + 112);
	}
	struct FLinearColor Get_flagNameHighlightOutlineColor() {
		return memory.read<struct FLinearColor>(m_addr + 128);
	}
	struct FLinearColor Get_flagNameColor() {
		return memory.read<struct FLinearColor>(m_addr + 144);
	}
	struct FLinearColor Get_flagNameOutlineColor() {
		return memory.read<struct FLinearColor>(m_addr + 160);
	}
	struct FVector2D Get_flagPositionTextureSize() {
		return memory.read<struct FVector2D>(m_addr + 176);
	}
	int32_t Get_flagTextStackOffset() {
		return memory.read<int32_t>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLimits
{
public:
	FSetLimits(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxValue() {
		return memory.read<float>(m_addr + 4);
	}
	int32_t GetstepCount() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotifyHitOnServer
{
public:
	FNotifyHitOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	struct FVector_NetQuantizeNormal GetshootDirection() {
		return memory.read<struct FVector_NetQuantizeNormal>(m_addr + 136);
	}
	int32_t GetrandomSeed() {
		return memory.read<int32_t>(m_addr + 148);
	}
	float GetreticleSpread() {
		return memory.read<float>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FProvideNextRadioTrack
{
public:
	FProvideNextRadioTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URadioTrack GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct URadioTrack(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRecipeAvailabilityState
{
public:
	FRecipeAvailabilityState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetNumVehicleReverseGears
{
public:
	FGetNumVehicleReverseGears(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTextChanged
{
public:
	FOnTextChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAttachmentAdded
{
public:
	FOnAttachmentAdded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAttachmentRemoved
{
public:
	FOnAttachmentRemoved(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnShotFired
{
public:
	FOnShotFired(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetisLastShot() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTextNameCommittedInCharacterPanel
{
public:
	FOnTextNameCommittedInCharacterPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetNewValue() {
		return memory.read<struct FText>(m_addr + 0);
	}
	char ETextCommit GetCommitMethod() {
		return memory.read<char ETextCommit>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnWeaponActionAnimNotify
{
public:
	FOnWeaponActionAnimNotify(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetnotifyType() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGameEventParticipantInfo
{
public:
	FGameEventParticipantInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetUniqueId() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct TWeakObjectPtr<APrisoner> GetPrisoner() {
		return memory.read<struct TWeakObjectPtr<APrisoner>>(m_addr + 16);
	}
	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 24);
	}
	uint8_t  GetState() {
		return memory.read<uint8_t >(m_addr + 40);
	}
	int32_t GetTeamIndex() {
		return memory.read<int32_t>(m_addr + 44);
	}
	struct TArray<struct UGameEventParticipantStats> GetRoundStats() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct UGameEventParticipantStats>(ptr_addr);
	}
	struct UGameEventParticipantStats GetEventStats() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UGameEventParticipantStats(ptr_addr);
	}
	struct TArray<struct APrisoner> GetHurtBy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct APrisoner>(ptr_addr);
	}
	int32_t GetRepHelper() {
		return memory.read<int32_t>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZTradeableDescRow
{
public:
	FConZTradeableDescRow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetTradeableClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 8);
	}
	struct FPrimaryAssetId GetPrimaryAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 48);
	}
	bool GetCanBePurchasedByPlayer() {
		return memory.read<bool>(m_addr + 64);
	}
	uint8_t  GetTradeCategory() {
		return memory.read<uint8_t >(m_addr + 65);
	}
	struct TSet<uint8_t > GetTraderTypes() {
		return memory.read<struct TSet<uint8_t >>(m_addr + 72);
	}
	float GetBasePurchasePriceModifier() {
		return memory.read<float>(m_addr + 152);
	}
	float GetBaseSalePriceReductionModifier() {
		return memory.read<float>(m_addr + 156);
	}
	uint8_t  GetPurchaseCurrencyType() {
		return memory.read<uint8_t >(m_addr + 160);
	}
	int32_t GetAlternateCurrencyPurchasePrice() {
		return memory.read<int32_t>(m_addr + 164);
	}
	uint8_t  GetSpawnType() {
		return memory.read<uint8_t >(m_addr + 168);
	}
	struct FText GetTradingEntryCaption() {
		return memory.read<struct FText>(m_addr + 176);
	}
	struct TSoftObjectPtr<UTexture2D> GetTradingEntryIconTexture() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 200);
	}
	int32_t GetMaxAmountPurchasedAtOnce() {
		return memory.read<int32_t>(m_addr + 240);
	}
	bool GetIsStockAmountUnlimited() {
		return memory.read<bool>(m_addr + 244);
	}
	struct FGameplayTag GetTradeableFamePointPenaltyGroup() {
		return memory.read<struct FGameplayTag>(m_addr + 248);
	}
	int32_t GetRequiredFamePoints() {
		return memory.read<int32_t>(m_addr + 256);
	}
	struct FGameplayTag GetTradeableRotationRarity() {
		return memory.read<struct FGameplayTag>(m_addr + 260);
	}
	bool GetOnlyAvailableAfterPlayerSale() {
		return memory.read<bool>(m_addr + 268);
	}
	int32_t GetCustomStockAmountMin() {
		return memory.read<int32_t>(m_addr + 272);
	}
	int32_t GetCustomStockAmountMax() {
		return memory.read<int32_t>(m_addr + 276);
	}
	UTradeableDiscountCondition GetTradeableDiscountCondition() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return UTradeableDiscountCondition(ptr_addr);
	}
	struct FGameplayTagContainer GetTraderSearchTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 288);
	}
	struct FGameplayTagContainer GetTraderSearchRelated() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 320);
	}
	bool GetIsImmuneToUserOverrides() {
		return memory.read<bool>(m_addr + 352);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayFiringEffects
{
public:
	FPlayFiringEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetisLastShot() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBondageItem
{
public:
	FGetBondageItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveAmmo
{
public:
	FRemoveAmmo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FAmmunitionData GetReturnValue() {
		return memory.read<struct FAmmunitionData>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFollowCharacter
{
public:
	FFollowCharacter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACharacter GetcharacterToFollow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACharacter(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveAttachmentOnServer
{
public:
	FRemoveAttachmentOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotificationAndDelay
{
public:
	FNotificationAndDelay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UNotificationDescription GetNotification() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UNotificationDescription(ptr_addr);
	}
	float GetDelay() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFoliageEffectsData
{
public:
	FFoliageEffectsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetStartMovingThroughFoliageAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopMovingThroughFoliageAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetOneShotMovingThroughFoliageAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_ReceiveServerData
{
public:
	FClient_ReceiveServerData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetRequestID() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FPlayerRpcChannelServerDataResponseNetSerializer GetResponse() {
		return memory.read<struct FPlayerRpcChannelServerDataResponseNetSerializer>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_DropAttachment
{
public:
	FServer_DropAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDcxWheeledVehicleFlatTireWheelConfiguration
{
public:
	FDcxWheeledVehicleFlatTireWheelConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDcxVehicleWheelData GetFlatTireWheelData() {
		return memory.read<struct FDcxVehicleWheelData>(m_addr + 0);
	}
	struct UDcxVehicleTire GetFlatTire() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UDcxVehicleTire(ptr_addr);
	}
	struct UDcxVehicleTire GetOriginalTire() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UDcxVehicleTire(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FScumRadialDamageEvent
{
public:
	FScumRadialDamageEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FServer_FireShotProjectile
{
public:
	FServer_FireShotProjectile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFireShotProjectileData GetData() {
		return memory.read<struct FFireShotProjectileData>(m_addr + 0);
	}
	struct FFireShotDescription Getdesc() {
		return memory.read<struct FFireShotDescription>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FFireShotProjectileData
{
public:
	FFireShotProjectileData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetStartLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector_NetQuantizeNormal GetshootDirection() {
		return memory.read<struct FVector_NetQuantizeNormal>(m_addr + 12);
	}
	int32_t GetZeroRange() {
		return memory.read<int32_t>(m_addr + 24);
	}
	float GetWindage() {
		return memory.read<float>(m_addr + 28);
	}
	int32_t GetRandomFactor() {
		return memory.read<int32_t>(m_addr + 32);
	}
	float GetConeHalfAngle() {
		return memory.read<float>(m_addr + 36);
	}
	struct FFireShotProjectileDescription GetDescription() {
		return memory.read<struct FFireShotProjectileDescription>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FDcxWheeledVehicleTireEffectProperties
{
public:
	FDcxWheeledVehicleTireEffectProperties(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetTireLocalOffset() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnProjectileStopped
{
public:
	FOnProjectileStopped(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetImpactResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_PlayFiringEffects
{
public:
	FServer_PlayFiringEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetisLastShot() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFiringModeOnServer
{
public:
	FSetFiringModeOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStringAttribute
{
public:
	FSetStringAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIsScopingAllowed
{
public:
	FSetIsScopingAllowed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSpreadMultiplierForWeapon
{
public:
	FGetSpreadMultiplierForWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLoadedProjectileClass
{
public:
	FSetLoadedProjectileClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AProjectile GetprojectileClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AProjectile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentAlternatorSetup
{
public:
	FVehicleAttachmentAlternatorSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetRpmChargeCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOverrideUseWeaponAnimationPose
{
public:
	FSetOverrideUseWeaponAnimationPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShouldPlayChamberOpenedIdle
{
public:
	FSetShouldPlayChamberOpenedIdle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateRanking
{
public:
	FUpdateRanking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FChangeState
{
public:
	FChangeState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetState() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUseMuzzleDirectionForShooting
{
public:
	FSetUseMuzzleDirectionForShooting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWheeledVehicleAnimInstanceProxy
{
public:
	FWheeledVehicleAnimInstanceProxy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetUseWeaponAnimationPose
{
public:
	FSetUseWeaponAnimationPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOpeningDuration
{
public:
	FGetOpeningDuration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FParseServerIpAndPort
{
public:
	FParseServerIpAndPort(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetIp() {
		return memory.read<struct FString>(m_addr + 16);
	}
	int32_t GetPort() {
		return memory.read<int32_t>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FCookingFoodProxyMesh
{
public:
	FCookingFoodProxyMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMesh(ptr_addr);
	}
	struct UStaticMeshComponent Get_meshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct UAkComponent Get_thermalSoundEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct UAkComponent(ptr_addr);
	}
	struct UAkAudioEvent Get_startCookingEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent Get_stopCookingEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimalSpawnData
{
public:
	FAnimalSpawnData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNextClueDistanceMin() {
		return memory.read<float>(m_addr + 0);
	}
	float GetNextClueDistanceMax() {
		return memory.read<float>(m_addr + 4);
	}
	int32_t GetNumCluesMin() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetNumCluesMax() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetPackSizeMin() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetPackSizeMax() {
		return memory.read<int32_t>(m_addr + 20);
	}
	float GetNextClueMaxHalfAngleDeg() {
		return memory.read<float>(m_addr + 24);
	}
	struct FAnimalSpawnWeigthsPerDayPeriod GetSpawnWeights() {
		return memory.read<struct FAnimalSpawnWeigthsPerDayPeriod>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetZeroRangeOnServer
{
public:
	FSetZeroRangeOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetZeroRange() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCookingUtilityFilterDropdownEntryData
{
public:
	FCookingUtilityFilterDropdownEntryData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetCookingUtilityTag() {
		return memory.read<struct FGameplayTag>(m_addr + 0);
	}
	struct FText GetDisplayName() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCollisionPointDamageEvent
{
public:
	FCollisionPointDamageEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FDetectWindow
{
public:
	FDetectWindow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWindowInfo GetResult() {
		return memory.read<struct FWindowInfo>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 208);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetKeyCarrier
{
public:
	FGetKeyCarrier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanBegin
{
public:
	FCanBegin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldClearMalfunctionOnEvent
{
public:
	FShouldClearMalfunctionOnEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmalfunction() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	uint8_t  GetmalfunctionEvent() {
		return memory.read<uint8_t >(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZBaseRepairAreaDuration
{
public:
	FConZBaseRepairAreaDuration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNumberOfBaseElementsTreshold() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetRepairDuration() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateAmmunitionMeshes
{
public:
	FUpdateAmmunitionMeshes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetammoIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	bool GetshowReversed() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBeginIgnitionAttempt
{
public:
	FBeginIgnitionAttempt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetignitionAttempts() {
		return memory.read<uint32_t>(m_addr + 0);
	}
	bool GetwillRecoverFromStall() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponMalfunctionChances
{
public:
	FWeaponMalfunctionChances(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatInterval GetValue[7]() {
		return memory.read<struct FFloatInterval>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAimOffsetBlendSpaceFP
{
public:
	FGetAimOffsetBlendSpaceFP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBlendSpace GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBlendSpace(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayerPawnBirdInfo
{
public:
	FPlayerPawnBirdInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCoastalBirdsinProximity() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetContinetalBirdsinProximity() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetVirtualAssignedCoastalBirds() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetVirtualAssignedContinentalBirds() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnEquipClothesItem
{
public:
	FUnEquipClothesItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AClothesItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AClothesItem(ptr_addr);
	}
	bool GetplaceInInventory() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetshouldEverDrop() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetUseFuelUsagePerHourMultiplierWhenActive
{
public:
	FServer_SetUseFuelUsagePerHourMultiplierWhenActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FParameterVector4
{
public:
	FParameterVector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetValue() {
		return memory.read<struct FVector4>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FFireAnimationData
{
public:
	FFireAnimationData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBodyWeaponAnimation GetBodyWeaponAnimation() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 0);
	}
	float GetTimeBetweenShots() {
		return memory.read<float>(m_addr + 16);
	}
	struct FBodyWeaponAnimation GetBodyWeaponAnimationChamber() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 24);
	}
	float GetTimeForChamber() {
		return memory.read<float>(m_addr + 40);
	}
	UWeaponActionWornOutFiringConditions GetConditions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UWeaponActionWornOutFiringConditions(ptr_addr);
	}
	struct FRuntimeFloatCurve GetProbabilityWeightCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_TriggerTrap
{
public:
	FNetMulticast_TriggerTrap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTrapTriggerParams GetParams() {
		return memory.read<struct FTrapTriggerParams>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseBuildingSizeVariation
{
public:
	FBaseBuildingSizeVariation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UBaseBuildingComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UBaseBuildingComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponViewKickData
{
public:
	FWeaponViewKickData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPitchMin() {
		return memory.read<float>(m_addr + 0);
	}
	float GetPitchMax() {
		return memory.read<float>(m_addr + 4);
	}
	float GetYawMin() {
		return memory.read<float>(m_addr + 8);
	}
	float GetYawMax() {
		return memory.read<float>(m_addr + 12);
	}
	float GetPitchDecrementSpeed() {
		return memory.read<float>(m_addr + 16);
	}
	float GetYawDecrementSpeed() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkillExperienceChange
{
public:
	FSkillExperienceChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetExperienceChange() {
		return memory.read<float>(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldDetectPrisoner
{
public:
	FShouldDetectPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponSpreadItem
{
public:
	FWeaponSpreadItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetIdle() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMoving() {
		return memory.read<float>(m_addr + 4);
	}
	float GetSpeedTarget() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponAttachmentAnimations
{
public:
	FWeaponAttachmentAnimations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBodyWeaponAnimation GetAdd() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 0);
	}
	struct FBodyWeaponAnimation GetRemove() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHudWidgetCanvasPanel
{
public:
	FGetHudWidgetCanvasPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCanvasPanel GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCanvasPanel(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FChangeMode
{
public:
	FChangeMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmode() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnInventoryContainerAddedOrRemoved
{
public:
	FOnInventoryContainerAddedOrRemoved(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerInventoryComponent Getsender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerInventoryComponent(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleCollisionDecalData
{
public:
	FParticleCollisionDecalData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetDecal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	float GetMinSize() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMaxSize() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMinLifetime() {
		return memory.read<float>(m_addr + 16);
	}
	float GetMaxLifetime() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_LockResource
{
public:
	FNetMulticast_LockResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FResourceNetworkGUID GetLockOwnerGUID() {
		return memory.read<struct FResourceNetworkGUID>(m_addr + 4);
	}
	struct FResourceNetworkGUID GetResourceGUID() {
		return memory.read<struct FResourceNetworkGUID>(m_addr + 8);
	}
	int32_t GetResourceId() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateIsInFocusModeOnServer
{
public:
	FUpdateIsInFocusModeOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetisInFocus() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWaypointScreenWidget
{
public:
	FGetWaypointScreenWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWaypointScreenWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UWaypointScreenWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFortificationMarkerParams
{
public:
	FFortificationMarkerParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsValid() {
		return memory.read<bool>(m_addr + 0);
	}
	int32_t GetMarkerIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct UStaticMesh GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UStaticMesh(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 28);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveVehicleMarkerData
{
public:
	FReceiveVehicleMarkerData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVehicleMarkersData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UVehicleMarkersData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Farming_ApplyFungicide
{
public:
	FServer_Farming_ApplyFungicide(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGarden GetGarden() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGarden(ptr_addr);
	}
	int32_t GetSlot() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldShowExtendedWidgetTooltipChanged__DelegateSignature
{
public:
	FShouldShowExtendedWidgetTooltipChanged__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetShouldShowExtendedWidgetTooltip() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMapHUDVehiclesObject
{
public:
	FMapHUDVehiclesObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture Get_vehiclePositionOuterRingTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UTexture(ptr_addr);
	}
	struct FLinearColor Get_vehicleOuterRingColor() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}
	struct FLinearColor Get_vehicleHighlightOuterRingColor() {
		return memory.read<struct FLinearColor>(m_addr + 48);
	}
	struct UTexture Get_vehiclePositionInnerCircleTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UTexture(ptr_addr);
	}
	struct FLinearColor Get_vehicleInnerCircleColor() {
		return memory.read<struct FLinearColor>(m_addr + 72);
	}
	struct FLinearColor Get_vehicleHighlightInnerCircleColor() {
		return memory.read<struct FLinearColor>(m_addr + 88);
	}
	struct UFont Get_vehicleFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UFont(ptr_addr);
	}
	struct FLinearColor Get_vehicleNameHighlightColor() {
		return memory.read<struct FLinearColor>(m_addr + 112);
	}
	struct FLinearColor Get_vehicleNameHighlightOutlineColor() {
		return memory.read<struct FLinearColor>(m_addr + 128);
	}
	struct FLinearColor Get_vehicleNameColor() {
		return memory.read<struct FLinearColor>(m_addr + 144);
	}
	struct FLinearColor Get_vehicleNameOutlineColor() {
		return memory.read<struct FLinearColor>(m_addr + 160);
	}
	struct FVector2D Get_vehiclePositionTextureSize() {
		return memory.read<struct FVector2D>(m_addr + 176);
	}
	int32_t Get_vehicleTextStackOffset() {
		return memory.read<int32_t>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};class FCCSliderSelected__DelegateSignature
{
public:
	FCCSliderSelected__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCCSkillSliderWidget GetSlider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCCSkillSliderWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMapHUDDroneObject
{
public:
	FMapHUDDroneObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture Get_droneDirectionTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UTexture(ptr_addr);
	}
	struct UTexture Get_dronePositionTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UTexture(ptr_addr);
	}
	struct UTexture Get_dronePingAnimationTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UTexture(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMapHUDOtherPlayersObject
{
public:
	FMapHUDOtherPlayersObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture Get_otherPlayerPositionOuterRingTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UTexture(ptr_addr);
	}
	struct FLinearColor Get_otherPlayerOuterRingColor() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}
	struct FLinearColor Get_otherPlayerHighlightOuterRingColor() {
		return memory.read<struct FLinearColor>(m_addr + 48);
	}
	struct UTexture Get_otherPlayerPositionInnerCicleTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UTexture(ptr_addr);
	}
	struct FLinearColor Get_otherPlayerInnerCircleColor() {
		return memory.read<struct FLinearColor>(m_addr + 72);
	}
	struct FLinearColor Get_otherPlayerHighlightInnerCircleColor() {
		return memory.read<struct FLinearColor>(m_addr + 88);
	}
	struct UFont Get_otherPlayerFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UFont(ptr_addr);
	}
	struct FLinearColor Get_otherPlayerNameHighlightColor() {
		return memory.read<struct FLinearColor>(m_addr + 112);
	}
	struct FLinearColor Get_otherPlayerNameHighlightOutlineColor() {
		return memory.read<struct FLinearColor>(m_addr + 128);
	}
	struct FLinearColor Get_otherPlayerNameColor() {
		return memory.read<struct FLinearColor>(m_addr + 144);
	}
	struct FLinearColor Get_otherPlayerNameOutlineColor() {
		return memory.read<struct FLinearColor>(m_addr + 160);
	}
	struct FVector2D Get_prisonerPositionTextureSize() {
		return memory.read<struct FVector2D>(m_addr + 176);
	}
	int32_t Get_otherPlayerTextStackOffset() {
		return memory.read<int32_t>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddSelectionItemOnClient
{
public:
	FAddSelectionItemOnClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAutoAddAllItemsOnServer
{
public:
	FAutoAddAllItemsOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AItem> GetItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AItem>(ptr_addr);
	}
	bool GetremoveSelection() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FHandleSizeChange
{
public:
	FHandleSizeChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	char ETextCommit GetCommitMethod() {
		return memory.read<char ETextCommit>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTeamScore
{
public:
	FGetTeamScore(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetTeamIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGameResourceConsumptionDataForeignSubstance
{
public:
	FGameResourceConsumptionDataForeignSubstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UForeignSubstance GetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UForeignSubstance(ptr_addr);
	}
	float GetAmount() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAutoAddItemOnServer
{
public:
	FAutoAddItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	bool GettryToJoinItems() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlaceableIngredient
{
public:
	FPlaceableIngredient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UCraftingItemTag> GetTags() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UCraftingItemTag>(ptr_addr);
	}
	struct TArray<AItem> GetSpecificItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<AItem>(ptr_addr);
	}
	struct TArray<uint8_t > GetTagsCraftingTypes() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 32);
	}
	struct TArray<uint8_t > GetSpecificItemsCraftingTypes() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 48);
	}
	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 64);
	}
	uint8_t  GetScalingType() {
		return memory.read<uint8_t >(m_addr + 65);
	}
	float GetRequired() {
		return memory.read<float>(m_addr + 68);
	}
	float GetSatisfied() {
		return memory.read<float>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SendQuickAccessState
{
public:
	FClient_SendQuickAccessState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FQuickAccessClientSyncData> GetData() {
		return memory.read<struct TArray<struct FQuickAccessClientSyncData>>(m_addr + 0);
	}
	bool GetenableSendingState() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuickAccessClientSyncData
{
public:
	FQuickAccessClientSyncData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FDropAllItemsOnServer
{
public:
	FDropAllItemsOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AItem> GetItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AItem>(ptr_addr);
	}
	bool GetremoveSelection() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FInitGrid
{
public:
	FInitGrid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMargin GetgridPadding() {
		return memory.read<struct FMargin>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDropItemOnServer
{
public:
	FDropItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentRoundDatabaseId
{
public:
	FGetCurrentRoundDatabaseId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetReturnValue() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEquipClothesItemOnServer
{
public:
	FEquipClothesItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AClothesItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AClothesItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FEquipItemInHandsOnServer
{
public:
	FEquipItemInHandsOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEquippedClothes
{
public:
	FGetEquippedClothes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AClothesItem> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AClothesItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGearWeight
{
public:
	FGetGearWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGearWeightFast
{
public:
	FGetGearWeightFast(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDemoteMember
{
public:
	FDemoteMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFollowerBoneLocationOffset
{
public:
	FSetFollowerBoneLocationOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetLocationOffset() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisoner_GetHealthRatio
{
public:
	FPrisoner_GetHealthRatio(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_PlayBackgroundInteraction
{
public:
	FNetMulticast_PlayBackgroundInteraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetanimationAudioPairIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	uint8_t  GetplayType() {
		return memory.read<uint8_t >(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPossibleRecipeIngredient
{
public:
	FPossibleRecipeIngredient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsResource() {
		return memory.read<bool>(m_addr + 0);
	}
	struct TSoftClassPtr<UObject> GetItem() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 8);
	}
	bool GetShouldConsumeWhole() {
		return memory.read<bool>(m_addr + 48);
	}
	int32_t GetUsage() {
		return memory.read<int32_t>(m_addr + 52);
	}
	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return UGameResourceType(ptr_addr);
	}
	float GetLiters() {
		return memory.read<float>(m_addr + 64);
	}
	float GetNutrientInclusionFactor() {
		return memory.read<float>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxFacialHairLength
{
public:
	FGetMaxFacialHairLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasSelectionItem
{
public:
	FHasSelectionItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsClothesItemEquipped
{
public:
	FIsClothesItemEquipped(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AClothesItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AClothesItem(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemEquippedDelegate__DelegateSignature
{
public:
	FItemEquippedDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerInventoryComponent Getsender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerInventoryComponent(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInflateWheelTire
{
public:
	FInflateWheelTire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetWheelIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FExamineObjectOnServer
{
public:
	FExamineObjectOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMeshComponent GetMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMeshComponent(ptr_addr);
	}
	struct FMeshInstanceId GetInstanceId() {
		return memory.read<struct FMeshInstanceId>(m_addr + 8);
	}
	struct FVector GetinstanceLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct UObject GetSpawner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FEquipArrow
{
public:
	FEquipArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionArrow Getarrow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionArrow(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDropZoneParameters
{
public:
	FSetDropZoneParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDropZoneParameters GetParams() {
		return memory.read<struct FDropZoneParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemUnequippedDelegate__DelegateSignature
{
public:
	FItemUnequippedDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerInventoryComponent Getsender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerInventoryComponent(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnEquippedClothesDestroyed
{
public:
	FOnEquippedClothesDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveItemOnServer
{
public:
	FRemoveItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInventoryNodeIcon
{
public:
	FGetInventoryNodeIcon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPossibleItem
{
public:
	FPossibleItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCraftingItemTag GetCraftingTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCraftingItemTag(ptr_addr);
	}
	AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return AItem(ptr_addr);
	}
	int32_t GetQuantity() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetUsage() {
		return memory.read<int32_t>(m_addr + 20);
	}
	float GetusageWeight() {
		return memory.read<float>(m_addr + 24);
	}
	uint8_t  GetCraftingType() {
		return memory.read<uint8_t >(m_addr + 28);
	}
	int32_t GetQuantityVariation() {
		return memory.read<int32_t>(m_addr + 32);
	}
	float GetWeightVariation() {
		return memory.read<float>(m_addr + 36);
	}
	bool GetSpawnHere() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveRecentServer
{
public:
	FRemoveRecentServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FUserServerHistoryItem GetItem() {
		return memory.read<struct FUserServerHistoryItem>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveSelectionItemsOnClient
{
public:
	FRemoveSelectionItemsOnClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AItem> GetItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveSelectionItemsOnClients
{
public:
	FRemoveSelectionItemsOnClients(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AItem> GetItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AItem>(ptr_addr);
	}
	bool GetallClients() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_InitializeItemVirtualizedInventory
{
public:
	FServer_InitializeItemVirtualizedInventory(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SendQuickAccessState
{
public:
	FServer_SendQuickAccessState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FQuickAccessSlotData> GetData() {
		return memory.read<struct TArray<struct FQuickAccessSlotData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDemolitionSkillParametersPerSkillLevel
{
public:
	FDemolitionSkillParametersPerSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTrapQuality() {
		return memory.read<float>(m_addr + 0);
	}
	float GetArmTrapXP() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDisarmOwnedTrapXP() {
		return memory.read<float>(m_addr + 8);
	}
	float GetDisarmEnemyTrapXP() {
		return memory.read<float>(m_addr + 12);
	}
	float GetAddTriggerXP() {
		return memory.read<float>(m_addr + 16);
	}
	float GetCraftTrapXP() {
		return memory.read<float>(m_addr + 20);
	}
	int32_t GetNumberOfWires() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetGreenWiresNumber() {
		return memory.read<int32_t>(m_addr + 28);
	}
	int32_t GetRedWiresNumber() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetNumberOfDefuseAttempts() {
		return memory.read<int32_t>(m_addr + 36);
	}
	struct TMap<uint8_t , struct FDemolitionSkillParametersPerTrapType> GetParametersPerTrapType() {
		return memory.read<struct TMap<uint8_t , struct FDemolitionSkillParametersPerTrapType>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuickAccessSlotData
{
public:
	FQuickAccessSlotData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FPrisonerWhistled__DelegateSignature
{
public:
	FPrisonerWhistled__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleHandlingExperienceAwards
{
public:
	FVehicleHandlingExperienceAwards(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPointsForStartingEngine() {
		return memory.read<float>(m_addr + 0);
	}
	float GetPointsPerDrivenDistanceInKm() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetItemWidgets
{
public:
	FGetItemWidgets(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UItemUserWidget> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UItemUserWidget>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTrapItem_Server_SetNumTries
{
public:
	FTrapItem_Server_SetNumTries(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ATrapItem GetTrapItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ATrapItem(ptr_addr);
	}
	int32_t GetnumTries() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDragCancelledEvent
{
public:
	FOnDragCancelledEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBaseItemWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBaseItemWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugAddWaterToPlantAtLookedLocation
{
public:
	FDebugAddWaterToPlantAtLookedLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAmount() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDragEnterEvent
{
public:
	FOnDragEnterEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UInventorySlotUserWidget GetinventorySlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UInventorySlotUserWidget(ptr_addr);
	}
	struct UBaseItemWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UBaseItemWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDragLeaveEvent
{
public:
	FOnDragLeaveEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UInventorySlotUserWidget GetinventorySlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UInventorySlotUserWidget(ptr_addr);
	}
	struct UBaseItemWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UBaseItemWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBruisePatch
{
public:
	FBruisePatch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetLayer() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct TArray<uint8_t > GetAllowedZones() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 8);
	}
	int32_t GetOrder() {
		return memory.read<int32_t>(m_addr + 24);
	}
	struct UTexture2D GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UTexture2D(ptr_addr);
	}
	struct FVector2D GetOffset() {
		return memory.read<struct FVector2D>(m_addr + 40);
	}
	bool GetMute() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDropdownSelectionDelegate__DelegateSignature
{
public:
	FOnDropdownSelectionDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDropdownMenuSelectionWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDropdownMenuSelectionWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnPlaySessionEnd
{
public:
	FOnPlaySessionEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getquit() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindProfile
{
public:
	FFindProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetID() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	struct UUserProfile GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UUserProfile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasOwningUser_Client_UpdateState
{
public:
	FHasOwningUser_Client_UpdateState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetownerString() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDropEvent
{
public:
	FOnDropEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UInventorySlotUserWidget GetinventorySlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UInventorySlotUserWidget(ptr_addr);
	}
	struct UBaseItemWidget GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UBaseItemWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAuthorityInfo
{
public:
	FGetAuthorityInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FUserProfileAuthorityInfo GetReturnValue() {
		return memory.read<struct FUserProfileAuthorityInfo>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnObjectAddedToContainerEvent__DelegateSignature
{
public:
	FOnObjectAddedToContainerEvent__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAngle
{
public:
	FGetAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTargetActor
{
public:
	FGetTargetActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_AddToOrUpdatePrisonerKillRegistry
{
public:
	FMulticast_AddToOrUpdatePrisonerKillRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetTarget() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	struct FDbIntegerId Getkiller() {
		return memory.read<struct FDbIntegerId>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAttached
{
public:
	FIsAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsOnScreen
{
public:
	FIsOnScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEquipParticipantLoadout
{
public:
	FEquipParticipantLoadout(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnLifetimeTiedActorDestroyed
{
public:
	FOnLifetimeTiedActorDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextAcceptedEvent__DelegateSignature
{
public:
	FTextAcceptedEvent__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCCSliderChanged__DelegateSignature
{
public:
	FCCSliderChanged__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCCSkillSliderWidget GetSlider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCCSkillSliderWidget(ptr_addr);
	}
	uint8_t  GetAttribute() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSizeVariatedTilesData
{
public:
	FSizeVariatedTilesData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FOnSelectionIndexChangedEvent__DelegateSignature
{
public:
	FOnSelectionIndexChangedEvent__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSelectedIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClickedDelegate__DelegateSignature
{
public:
	FClickedDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCraftingAvailableItemWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCraftingAvailableItemWidget(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAvailabilityState
{
public:
	FGetAvailabilityState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHandleMalfunctionEvent
{
public:
	FHandleMalfunctionEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetmalfunctionEvent() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FWeaponMalfunctionEventDescription Getdesc() {
		return memory.read<struct FWeaponMalfunctionEventDescription>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_LockArea
{
public:
	FNetMulticast_LockArea(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FResourceNetworkGUID GetLockOwnerGUID() {
		return memory.read<struct FResourceNetworkGUID>(m_addr + 4);
	}
	struct FBox GetArea() {
		return memory.read<struct FBox>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrivingSkillParametersPerSkillLevel
{
public:
	FDrivingSkillParametersPerSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetEngineStartViaMotionDuration() {
		return memory.read<float>(m_addr + 0);
	}
	float GetEngineStartViaMotionFailureChance() {
		return memory.read<float>(m_addr + 4);
	}
	float GetEngineReadyDelay() {
		return memory.read<float>(m_addr + 8);
	}
	float GetEngineFailedToStartDelay() {
		return memory.read<float>(m_addr + 12);
	}
	float GetEngineFailedToStartNoFuelDelay() {
		return memory.read<float>(m_addr + 16);
	}
	float GetEngineFailedToStartNoBatteryDelay() {
		return memory.read<float>(m_addr + 20);
	}
	float GetEngineStalledDelay() {
		return memory.read<float>(m_addr + 24);
	}
	float GetMaxSpeedModifier() {
		return memory.read<float>(m_addr + 28);
	}
	float GetThrottleModifier() {
		return memory.read<float>(m_addr + 32);
	}
	float GetBrakeModifier() {
		return memory.read<float>(m_addr + 36);
	}
	float GetWheelSteeringLerpSpeedMultiplier() {
		return memory.read<float>(m_addr + 40);
	}
	struct FEngineHandlingParameters GetEngineHandlingParameters() {
		return memory.read<struct FEngineHandlingParameters>(m_addr + 44);
	}
	struct FGearboxHandlingParameters GetGearboxHandlingParameters() {
		return memory.read<struct FGearboxHandlingParameters>(m_addr + 52);
	}
	struct FDrivingSkillEngineStallingParameters GetEngineStallingByAccelerationParameters() {
		return memory.read<struct FDrivingSkillEngineStallingParameters>(m_addr + 64);
	}
	struct FDrivingSkillEngineStallingParameters GetEngineStallingByUpShiftParameters() {
		return memory.read<struct FDrivingSkillEngineStallingParameters>(m_addr + 128);
	}
	struct FDrivingSkillEngineStallingParameters GetEngineStallingWhenStartingViaMotion() {
		return memory.read<struct FDrivingSkillEngineStallingParameters>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZFlagElementData
{
public:
	FConZFlagElementData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetOvertakeEndTime() {
		return memory.read<int64_t>(m_addr + 0);
	}
	struct FDbIntegerId GetOvertakerId() {
		return memory.read<struct FDbIntegerId>(m_addr + 8);
	}
	int32_t GetNumberOfExpandedElements() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FClick
{
public:
	FClick(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGeometry GetMyGeometry() {
		return memory.read<struct FGeometry>(m_addr + 0);
	}
	struct FPointerEvent GetMouseEvent() {
		return memory.read<struct FPointerEvent>(m_addr + 56);
	}
	struct FEventReply GetReturnValue() {
		return memory.read<struct FEventReply>(m_addr + 168);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimalStationaryRotationRateSettings
{
public:
	FAnimalStationaryRotationRateSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetRunRotationRate() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetTrotRotationRate() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	struct FRotator GetWalkRotationRate() {
		return memory.read<struct FRotator>(m_addr + 24);
	}
	struct FRotator GetSneakRotationRate() {
		return memory.read<struct FRotator>(m_addr + 36);
	}
	struct FRotator GetStandRotationRate() {
		return memory.read<struct FRotator>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDragOperationCancelled
{
public:
	FOnDragOperationCancelled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDragDropOperation GetOperation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDragDropOperation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrisonerId
{
public:
	FGetPrisonerId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetReturnValue() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDragImage
{
public:
	FGetDragImage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGeometry GetGeometry() {
		return memory.read<struct FGeometry>(m_addr + 0);
	}
	struct UInventorySlotUserWidget GetwidgetImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UInventorySlotUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStacksCount
{
public:
	FSetStacksCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnClicked__DelegateSignature
{
public:
	FOnClicked__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemUserWidget GetclickedWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UItemUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetImage
{
public:
	FSetImage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateEmptyProfile
{
public:
	FCreateEmptyProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct UUserProfile GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UUserProfile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseElementDamageZone
{
public:
	FBaseElementDamageZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetBoundsMin() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetBoundsMax() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetMinDamagePerSecond() {
		return memory.read<float>(m_addr + 24);
	}
	float GetMaxDamagePerSecond() {
		return memory.read<float>(m_addr + 28);
	}
	float GetMinSpeedForDamage() {
		return memory.read<float>(m_addr + 32);
	}
	float GetMaxSpeedForDamage() {
		return memory.read<float>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentSlotId
{
public:
	FVehicleAttachmentSlotId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FOnSwitchClickedDelegate__DelegateSignature
{
public:
	FOnSwitchClickedDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetwidgetArrayIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPowerNodeConnector
{
public:
	FPowerNodeConnector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetShouldHaveCable() {
		return memory.read<bool>(m_addr + 8);
	}
	int32_t GetCableMeshIndex() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetTargetConnectorIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct UStaticMeshComponent GetCableMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnChoiceClickedEvent__DelegateSignature
{
public:
	FOnChoiceClickedEvent__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USpawnChoiceWidget GetSpawnChoiceWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USpawnChoiceWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsVehicleFreeLookEnabled
{
public:
	FIsVehicleFreeLookEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAchievementStats
{
public:
	FAchievementStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FCutObjectOnClients
{
public:
	FCutObjectOnClients(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMeshComponent GetMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMeshComponent(ptr_addr);
	}
	struct FMeshInstanceId GetInstanceId() {
		return memory.read<struct FMeshInstanceId>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayGearSounds
{
public:
	FPlayGearSounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetmotionIntensity() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdminCommandArgumentDescription
{
public:
	FAdminCommandArgumentDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetName() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetDescription() {
		return memory.read<struct FText>(m_addr + 24);
	}
	bool GetShowCompletionValuesInHelpText() {
		return memory.read<bool>(m_addr + 48);
	}
	struct UAdminCommandArgumentDataTypeBase GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAdminCommandArgumentDataTypeBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleWeaponAimingThirdPersonData
{
public:
	FVehicleWeaponAimingThirdPersonData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVehicleThirdPersonWeaponTypeData> GetWeaponTypeData() {
		return memory.read<struct TArray<struct FVehicleThirdPersonWeaponTypeData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSearchItemClassesArray
{
public:
	FSearchItemClassesArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TSoftClassPtr<UObject>> GetItemClasses() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCircleYForX
{
public:
	FGetCircleYForX(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetX() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector2D GetCenter() {
		return memory.read<struct FVector2D>(m_addr + 4);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetUp() {
		return memory.read<bool>(m_addr + 16);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerAppearance_HairColorPreset
{
public:
	FPrisonerAppearance_HairColorPreset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetPreviewColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	float GetBrightness() {
		return memory.read<float>(m_addr + 16);
	}
	struct FLinearColor GetRootColor() {
		return memory.read<struct FLinearColor>(m_addr + 20);
	}
	struct FLinearColor GetRootColorOnHead() {
		return memory.read<struct FLinearColor>(m_addr + 36);
	}
	uint8_t  GetColorName() {
		return memory.read<uint8_t >(m_addr + 52);
	}
	float GetRoughness() {
		return memory.read<float>(m_addr + 56);
	}
	float GetScatter() {
		return memory.read<float>(m_addr + 60);
	}
	struct FLinearColor GetTipColor() {
		return memory.read<struct FLinearColor>(m_addr + 64);
	}
	float GetRandomHueVariation() {
		return memory.read<float>(m_addr + 80);
	}
	float GetRandomValueVariation() {
		return memory.read<float>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};class FDemolitionSkillParametersPerTrapType
{
public:
	FDemolitionSkillParametersPerTrapType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDefuseTime() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDetectionDelayTimerData
{
public:
	FDetectionDelayTimerData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinDetectionDelayBasedOnDistance() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxDetectionDelayBasedOnDistance() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMinDetectionDelayBasedOnVisibility() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMaxDetectionDelayBasedOnVisibility() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_WheelAndSuspensionHandler
{
public:
	FAnimNode_WheelAndSuspensionHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FAviationSkillParametersPerSkillLevel
{
public:
	FAviationSkillParametersPerSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetShouldHaveMouseInput() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetEngineReadyDelay() {
		return memory.read<float>(m_addr + 4);
	}
	float GetEngineFailedToStartDelay() {
		return memory.read<float>(m_addr + 8);
	}
	float GetEngineFailedToStartNoFuelDelay() {
		return memory.read<float>(m_addr + 12);
	}
	float GetEngineFailedToStartNoBatteryDelay() {
		return memory.read<float>(m_addr + 16);
	}
	float GetEngineStalledDelay() {
		return memory.read<float>(m_addr + 20);
	}
	float GetThrottleLerpMultiplier() {
		return memory.read<float>(m_addr + 24);
	}
	float GetBrakeLerpMultiplier() {
		return memory.read<float>(m_addr + 28);
	}
	float GetRollLerpMultiplier() {
		return memory.read<float>(m_addr + 32);
	}
	float GetYawLerpMultiplier() {
		return memory.read<float>(m_addr + 36);
	}
	float GetPitchLerpMultiplier() {
		return memory.read<float>(m_addr + 40);
	}
	float GetControlResetLerpMultiplier() {
		return memory.read<float>(m_addr + 44);
	}
	float GetWindInfluenceMultiplier() {
		return memory.read<float>(m_addr + 48);
	}
	struct FEngineHandlingParameters GetEngineHandlingParameters() {
		return memory.read<struct FEngineHandlingParameters>(m_addr + 52);
	}
	struct FDrivingSkillEngineStallingParameters GetEngineStallingByAccelerationParameters() {
		return memory.read<struct FDrivingSkillEngineStallingParameters>(m_addr + 64);
	}
	struct FDrivingSkillEngineStallingParameters GetEngineStallingByUpShiftParameters() {
		return memory.read<struct FDrivingSkillEngineStallingParameters>(m_addr + 128);
	}
	struct FDrivingSkillEngineStallingParameters GetEngineStallingWhenStartingViaMotion() {
		return memory.read<struct FDrivingSkillEngineStallingParameters>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};class FChoppingIngredient
{
public:
	FChoppingIngredient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetItem() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	int32_t GetMinQuantity() {
		return memory.read<int32_t>(m_addr + 40);
	}
	int32_t GetMaxQuantity() {
		return memory.read<int32_t>(m_addr + 44);
	}
	bool GetIsQuantityAffectedByTool() {
		return memory.read<bool>(m_addr + 48);
	}
	float GetInitialDamage() {
		return memory.read<float>(m_addr + 52);
	}
	float GetRandomizeDamage() {
		return memory.read<float>(m_addr + 56);
	}
	bool GetOverrideAutoDestructTime() {
		return memory.read<bool>(m_addr + 60);
	}
	float GetAutoDestructTime() {
		return memory.read<float>(m_addr + 64);
	}
	bool GetIsHealthAffectedByChoppedItem() {
		return memory.read<bool>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FEngineHandlingParameters
{
public:
	FEngineHandlingParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetIgnitionDurationMultiplier() {
		return memory.read<float>(m_addr + 0);
	}
	float GetIgnitionFailureChance() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FBankCardOperationRequestData
{
public:
	FBankCardOperationRequestData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FCurrencyConversionRequestData
{
public:
	FCurrencyConversionRequestData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FBankATMBoughtCardStateVisual
{
public:
	FBankATMBoughtCardStateVisual(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateColor GetFontColor() {
		return memory.read<struct FSlateColor>(m_addr + 0);
	}
	struct FLinearColor GetBrushColor() {
		return memory.read<struct FLinearColor>(m_addr + 40);
	}
	float GetOnHoveredUpwardsOffset() {
		return memory.read<float>(m_addr + 56);
	}
	bool GetOptionsCircleSelectedState() {
		return memory.read<bool>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FBankATMPointingButtonStateVisual
{
public:
	FBankATMPointingButtonStateVisual(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetFontColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FSlateBrush GetBackgroundBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FFamePointAwards
{
public:
	FFamePointAwards(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBaseFameInflux() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMovingOnFoot() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMovingDriving() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMovingFlying() {
		return memory.read<float>(m_addr + 12);
	}
	float GetRustyLockLockpick() {
		return memory.read<float>(m_addr + 16);
	}
	float GetIronLockLockpick() {
		return memory.read<float>(m_addr + 20);
	}
	float GetSilverLockLockpick() {
		return memory.read<float>(m_addr + 24);
	}
	float GetGoldLockLockpick() {
		return memory.read<float>(m_addr + 28);
	}
	float GetBombDefuse() {
		return memory.read<float>(m_addr + 32);
	}
	float GetOwningTheBase() {
		return memory.read<float>(m_addr + 36);
	}
	struct FTimespan GetMaxTimeFromLastLogin() {
		return memory.read<struct FTimespan>(m_addr + 40);
	}
	float GetBaseOvertakeMultiplier() {
		return memory.read<float>(m_addr + 48);
	}
	float GetBuiltBlueprintNoSkill() {
		return memory.read<float>(m_addr + 52);
	}
	float GetBuiltBlueprintBasic() {
		return memory.read<float>(m_addr + 56);
	}
	float GetBuiltBlueprintMedium() {
		return memory.read<float>(m_addr + 60);
	}
	float GetBuiltBlueprintAdvanced() {
		return memory.read<float>(m_addr + 64);
	}
	float GetBuiltBaseElementNoSkill() {
		return memory.read<float>(m_addr + 68);
	}
	float GetBuiltBaseElementBasic() {
		return memory.read<float>(m_addr + 72);
	}
	float GetBuiltBaseElementMedium() {
		return memory.read<float>(m_addr + 76);
	}
	float GetBuiltBaseElementAdvanced() {
		return memory.read<float>(m_addr + 80);
	}
	float GetVehicleSold() {
		return memory.read<float>(m_addr + 84);
	}
	float GetWheelBarrowSold() {
		return memory.read<float>(m_addr + 88);
	}
	float GetAcquiredGoldCreditCard() {
		return memory.read<float>(m_addr + 92);
	}
	float GetTreatedWoundC1() {
		return memory.read<float>(m_addr + 96);
	}
	float GetTreatedWoundC2() {
		return memory.read<float>(m_addr + 100);
	}
	float GetTreatedWoundC3() {
		return memory.read<float>(m_addr + 104);
	}
	float GetTreatedWoundC4() {
		return memory.read<float>(m_addr + 108);
	}
	float GetCuredInfectionC1() {
		return memory.read<float>(m_addr + 112);
	}
	float GetCuredInfectionC2() {
		return memory.read<float>(m_addr + 116);
	}
	float GetCuredInfectionC3() {
		return memory.read<float>(m_addr + 120);
	}
	float GetCuredSepsis() {
		return memory.read<float>(m_addr + 124);
	}
	float GetAbundantFishCaughtMultiplier() {
		return memory.read<float>(m_addr + 128);
	}
	float GetCommonFishCaughtMultiplier() {
		return memory.read<float>(m_addr + 132);
	}
	float GetUncommonFishCaughtMultiplier() {
		return memory.read<float>(m_addr + 136);
	}
	float GetRareFishCaughtMultiplier() {
		return memory.read<float>(m_addr + 140);
	}
	float GetVeryRareFishCaughtMultiplier() {
		return memory.read<float>(m_addr + 144);
	}
	float GetExtremelyRareFishCaughtMultiplier() {
		return memory.read<float>(m_addr + 148);
	}
	float GetFishCaughtFamePointsPerKg() {
		return memory.read<float>(m_addr + 152);
	}
	float GetConsecutivelyKept50Fish() {
		return memory.read<float>(m_addr + 156);
	}
	float GetConsecutivelyReleased50Fish() {
		return memory.read<float>(m_addr + 160);
	}
	float GetUnlockedDoorKillbox() {
		return memory.read<float>(m_addr + 164);
	}
	float GetCraftedItemNoSkill() {
		return memory.read<float>(m_addr + 168);
	}
	float GetCraftedItemBasic() {
		return memory.read<float>(m_addr + 172);
	}
	float GetCraftedItemMedium() {
		return memory.read<float>(m_addr + 176);
	}
	float GetCraftedItemAdvanced() {
		return memory.read<float>(m_addr + 180);
	}
	float GetCraftedC4() {
		return memory.read<float>(m_addr + 184);
	}
	float GetSurvivedConsecutiveDays2() {
		return memory.read<float>(m_addr + 188);
	}
	float GetSurvivedConsecutiveDays4() {
		return memory.read<float>(m_addr + 192);
	}
	float GetSurvivedConsecutiveDays8() {
		return memory.read<float>(m_addr + 196);
	}
	float GetSurvivedConsecutiveDays16() {
		return memory.read<float>(m_addr + 200);
	}
	float GetSurvivedConsecutiveDays32() {
		return memory.read<float>(m_addr + 204);
	}
	float GetEscapedSharkBite() {
		return memory.read<float>(m_addr + 208);
	}
	float GetPuppetKills() {
		return memory.read<float>(m_addr + 212);
	}
	float GetPuppetKills10() {
		return memory.read<float>(m_addr + 216);
	}
	float GetPuppetKills100() {
		return memory.read<float>(m_addr + 220);
	}
	float GetPuppetKills500() {
		return memory.read<float>(m_addr + 224);
	}
	float GetAnimalKills() {
		return memory.read<float>(m_addr + 228);
	}
	float GetAnimalKills10() {
		return memory.read<float>(m_addr + 232);
	}
	float GetAnimalKills100() {
		return memory.read<float>(m_addr + 236);
	}
	float GetAnimalKills500() {
		return memory.read<float>(m_addr + 240);
	}
	float GetFirearmKills10() {
		return memory.read<float>(m_addr + 244);
	}
	float GetFirearmKills100() {
		return memory.read<float>(m_addr + 248);
	}
	float GetFirearmKills500() {
		return memory.read<float>(m_addr + 252);
	}
	float GetFirearmHeadShotOver200m() {
		return memory.read<float>(m_addr + 256);
	}
	float GetBowHeadshotOver100m() {
		return memory.read<float>(m_addr + 260);
	}
	float GetMeleeKills10() {
		return memory.read<float>(m_addr + 264);
	}
	float GetMeleeKills100() {
		return memory.read<float>(m_addr + 268);
	}
	float GetMeleeKills500() {
		return memory.read<float>(m_addr + 272);
	}
	float GetBareHandedKills10() {
		return memory.read<float>(m_addr + 276);
	}
	float GetBareHandedKills100() {
		return memory.read<float>(m_addr + 280);
	}
	float GetBareHandedKills500() {
		return memory.read<float>(m_addr + 284);
	}
	float GetFinishedHauntedHouseRitual() {
		return memory.read<float>(m_addr + 288);
	}
	float GetSkillLeveledUpToBasic() {
		return memory.read<float>(m_addr + 292);
	}
	float GetSkillLeveledUpToMedium() {
		return memory.read<float>(m_addr + 296);
	}
	float GetSkillLeveledUpToAdvanced() {
		return memory.read<float>(m_addr + 300);
	}
	float GetSkillLeveledUpToAdvancedPlus() {
		return memory.read<float>(m_addr + 304);
	}
	float GetMaxedOutAttributes() {
		return memory.read<float>(m_addr + 308);
	}
	float GetDecontaminated() {
		return memory.read<float>(m_addr + 312);
	}
	float GetWashedClothing() {
		return memory.read<float>(m_addr + 316);
	}
	float GetLandedWithParachute() {
		return memory.read<float>(m_addr + 320);
	}
	float GetBuiltGarden() {
		return memory.read<float>(m_addr + 324);
	}
	float GetSeedsPlanted() {
		return memory.read<float>(m_addr + 328);
	}
	float GetSuccessfulHarvest() {
		return memory.read<float>(m_addr + 332);
	}
	float GetWeedsPlucked() {
		return memory.read<float>(m_addr + 336);
	}
	float GetCollectedSeeds() {
		return memory.read<float>(m_addr + 340);
	}
	float GetAppliedPesticideOrFungicide() {
		return memory.read<float>(m_addr + 344);
	}
	float GetHadPlasticSurgery() {
		return memory.read<float>(m_addr + 348);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumTries
{
public:
	FGetNumTries(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBankATMVirtualEditboxStateVisual
{
public:
	FBankATMVirtualEditboxStateVisual(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetOutlineColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingProductDescription
{
public:
	FCraftingProductDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetProductClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	struct FString GetProductClassName() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FText GetProductCaption() {
		return memory.read<struct FText>(m_addr + 56);
	}
	struct UTexture2D GetProductIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UTexture2D(ptr_addr);
	}
	struct TArray<struct FCraftingSlotRequirement> GetSlotRequirements() {
		return memory.read<struct TArray<struct FCraftingSlotRequirement>>(m_addr + 88);
	}
	struct TArray<struct UCraftingCondition> GetConditions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct TArray<struct UCraftingCondition>(ptr_addr);
	}
	struct TArray<struct UCraftingAction> GetActions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct TArray<struct UCraftingAction>(ptr_addr);
	}
	struct FCraftingRecipeSkillReward GetSkillReward() {
		return memory.read<struct FCraftingRecipeSkillReward>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingRecipeSkillReward
{
public:
	FCraftingRecipeSkillReward(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetSkill() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	int32_t GetNoSkillReward() {
		return memory.read<int32_t>(m_addr + 40);
	}
	int32_t GetBasicReward() {
		return memory.read<int32_t>(m_addr + 44);
	}
	int32_t GetMediumReward() {
		return memory.read<int32_t>(m_addr + 48);
	}
	int32_t GetAdvancedReward() {
		return memory.read<int32_t>(m_addr + 52);
	}
	int32_t GetAboveAdvancedReward() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingSlotAmountNeededPerSkillLevel
{
public:
	FCraftingSlotAmountNeededPerSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	USkill GetSkill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return USkill(ptr_addr);
	}
	int32_t GetNoSkillAmount() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetBasicAmount() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetMediumAmount() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetAdvancedAmount() {
		return memory.read<int32_t>(m_addr + 20);
	}
	int32_t GetAboveAdvancedAmount() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingIngredientCost
{
public:
	FCraftingIngredientCost(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FVehicleSpawnerInfo
{
public:
	FVehicleSpawnerInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FEntityId GetVehicleEntityId() {
		return memory.read<struct FEntityId>(m_addr + 0);
	}
	struct FPrimaryAssetId GetVehicleAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 8);
	}
	struct FEntityId GetContainerId() {
		return memory.read<struct FEntityId>(m_addr + 24);
	}
	struct TWeakObjectPtr<AVehicleBase> GetVehicleBase() {
		return memory.read<struct TWeakObjectPtr<AVehicleBase>>(m_addr + 32);
	}
	struct FString GetVehicleAlias() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FTransform GetVehicleTransform() {
		return memory.read<struct FTransform>(m_addr + 64);
	}
	int64_t GetVehicleLastAccessTime() {
		return memory.read<int64_t>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FRequiredItemForItemTagParams
{
public:
	FRequiredItemForItemTagParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentGearboxSimulationData
{
public:
	FVehicleAttachmentGearboxSimulationData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCurrentGearIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZOnDemandElementData
{
public:
	FConZOnDemandElementData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FConZBaseElementIdentifier GetElementIdentifier() {
		return memory.read<struct FConZBaseElementIdentifier>(m_addr + 0);
	}
	struct FString GetOwnerName() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingRecipeParams
{
public:
	FCraftingRecipeParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetProductClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	struct TMap<USkill, uint8_t > GetSkillLevels() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TMap<USkill, uint8_t >(ptr_addr);
	}
	struct TArray<struct FCraftingSlotParams> GetSlots() {
		return memory.read<struct TArray<struct FCraftingSlotParams>>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingSlotParams
{
public:
	FCraftingSlotParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TScriptInterface<ICraftingIngredient>> GetIngredients() {
		return memory.read<struct TArray<struct TScriptInterface<ICraftingIngredient>>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBasicNotificationDescriptionData
{
public:
	FBasicNotificationDescriptionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetMessage() {
		return memory.read<struct FText>(m_addr + 0);
	}
	int32_t GetFontSize() {
		return memory.read<int32_t>(m_addr + 24);
	}
	struct UTexture2D GetIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UTexture2D(ptr_addr);
	}
	int32_t GetIconSize() {
		return memory.read<int32_t>(m_addr + 40);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 44);
	}
	bool Getping() {
		return memory.read<bool>(m_addr + 48);
	}
	float GetDelay() {
		return memory.read<float>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHealthRatio
{
public:
	FGetHealthRatio(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFoliageGeneralData
{
public:
	FFoliageGeneralData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCollisionBoundsScale() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetCollisionBoundsOffset() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimalSpawnWeigthsPerDayPeriod
{
public:
	FAnimalSpawnWeigthsPerDayPeriod(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSpawnWeight[4]() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoatParametersPerMovementPace
{
public:
	FBoatParametersPerMovementPace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsValid() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetBaseMaxForwardSpeed() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetCanReverse() {
		return memory.read<bool>(m_addr + 8);
	}
	float GetBaseMaxReverseSpeed() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMinPrisonerStrength() {
		return memory.read<float>(m_addr + 16);
	}
	float GetThrottleMultiplier() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildingsArray
{
public:
	FBuildingsArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct ABuilding> Get_buildings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct ABuilding>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuryMaterialData
{
public:
	FBuryMaterialData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UParticleSystem GetBreachActionParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent GetBreachActionSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UParticleSystem GetDumpActionParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent GetDumpActionSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleEngineRpm
{
public:
	FGetVehicleEngineRpm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCamouflageSkillExperienceAwards
{
public:
	FCamouflageSkillExperienceAwards(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBonusExperience() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTeleportUserDataReplicator
{
public:
	FTeleportUserDataReplicator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTeleportUserData GetUserData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTeleportUserData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDoorUnlockDataCollection
{
public:
	FDoorUnlockDataCollection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FDoorUnlockDataDescription> GetData() {
		return memory.read<struct TArray<struct FDoorUnlockDataDescription>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCargoDropSpawnerPreset
{
public:
	FCargoDropSpawnerPreset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UItemSpawnerPreset GetPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UItemSpawnerPreset(ptr_addr);
	}
	UItemSpawnerPreset2 GetSpawnerPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UItemSpawnerPreset2(ptr_addr);
	}
	float GetChanceMultiplier() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCarouselStyle
{
public:
	FCarouselStyle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FButtonStyle GetLeftArrowIcon() {
		return memory.read<struct FButtonStyle>(m_addr + 0);
	}
	struct FButtonStyle GetRightArrowIcon() {
		return memory.read<struct FButtonStyle>(m_addr + 632);
	}
	struct FCarouselTextStyle GetValueText() {
		return memory.read<struct FCarouselTextStyle>(m_addr + 1264);
	}

private:
	std::uint64_t m_addr = 0;
};class FEntityComponentId
{
public:
	FEntityComponentId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FEntityId GetEntityId() {
		return memory.read<struct FEntityId>(m_addr + 0);
	}
	struct FName GetComponentName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCarouselWithLabelStyle
{
public:
	FCarouselWithLabelStyle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateBrush GetFocusBackgroundImage() {
		return memory.read<struct FSlateBrush>(m_addr + 0);
	}
	struct FCarouselTextStyle GetLabelText() {
		return memory.read<struct FCarouselTextStyle>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterActionAnimationDescription
{
public:
	FCharacterActionAnimationDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FAttachComponentData
{
public:
	FAttachComponentData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMeshComponent GetMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMeshComponent(ptr_addr);
	}
	int32_t GetParticleIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	bool GetSimulateTension() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCCNonImplementedSkill
{
public:
	FCCNonImplementedSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetAttribute() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FText GetCaption() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDroneVisitTimeData
{
public:
	FDroneVisitTimeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinVisitTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxVisitTime() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterMeshSlice
{
public:
	FCharacterMeshSlice(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagQuery GetCondition() {
		return memory.read<struct FGameplayTagQuery>(m_addr + 0);
	}
	struct FGameplayTagContainer GetSlots() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 72);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetSkeletalMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 104);
	}
	struct FGameplayTag GetSkeletalMeshSocket() {
		return memory.read<struct FGameplayTag>(m_addr + 144);
	}
	struct TMap<struct FName, struct FCharacterMeshMorphTargetArray> GetSkeletalMeshMorphTargets() {
		return memory.read<struct TMap<struct FName, struct FCharacterMeshMorphTargetArray>>(m_addr + 152);
	}
	struct TSoftObjectPtr<UStaticMesh> GetStaticMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 232);
	}
	struct FGameplayTag GetStaticMeshSocket() {
		return memory.read<struct FGameplayTag>(m_addr + 272);
	}
	struct TArray<struct FCharacterMeshMaterialOverride> GetOverrideMaterials() {
		return memory.read<struct TArray<struct FCharacterMeshMaterialOverride>>(m_addr + 280);
	}
	struct TSoftClassPtr<UObject> GetSpecificAnimationBlueprintClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 296);
	}
	struct FTransform GetSpecificTransform() {
		return memory.read<struct FTransform>(m_addr + 336);
	}
	bool GetHidesUnderlyingLayer() {
		return memory.read<bool>(m_addr + 384);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextBoxTextStyle
{
public:
	FTextBoxTextStyle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateFontInfo GetFont() {
		return memory.read<struct FSlateFontInfo>(m_addr + 0);
	}
	struct FLinearColor GetColorAndOpacity() {
		return memory.read<struct FLinearColor>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterArmsImpactSoundsData
{
public:
	FCharacterArmsImpactSoundsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCharacterArmsImpactSoundData> GetSoundsData() {
		return memory.read<struct TArray<struct FCharacterArmsImpactSoundData>>(m_addr + 0);
	}
	struct FCharacterImpactSounds GetFallbackSounds() {
		return memory.read<struct FCharacterImpactSounds>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterTorsoImpactSoundsData
{
public:
	FCharacterTorsoImpactSoundsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCharacterTorsoImpactSoundData> GetSoundsData() {
		return memory.read<struct TArray<struct FCharacterTorsoImpactSoundData>>(m_addr + 0);
	}
	struct FCharacterImpactSounds GetFallbackSounds() {
		return memory.read<struct FCharacterImpactSounds>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterTorsoImpactSoundData
{
public:
	FCharacterTorsoImpactSoundData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<uint8_t > GetImpactSourceCategories() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 0);
	}
	struct TArray<uint8_t > GetImpactTargetCategories() {
		return memory.read<struct TArray<uint8_t >>(m_addr + 16);
	}
	struct FCharacterImpactSounds GetSounds() {
		return memory.read<struct FCharacterImpactSounds>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FPreformChargeAttack
{
public:
	FPreformChargeAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetattackIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseElementSpawnParams
{
public:
	FBaseElementSpawnParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetQuality() {
		return memory.read<float>(m_addr + 0);
	}
	struct TArray<UObject> GetDoorUpgrades() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<UObject>(ptr_addr);
	}
	struct TArray<int32_t> GetCombinationsPerLock() {
		return memory.read<struct TArray<int32_t>>(m_addr + 24);
	}
	struct FDbIntegerId GetShelterId() {
		return memory.read<struct FDbIntegerId>(m_addr + 40);
	}
	struct FEntityId GetEntityId() {
		return memory.read<struct FEntityId>(m_addr + 48);
	}
	struct TArray<struct AItem> GetAttachedItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponTypeAimOffset
{
public:
	FWeaponTypeAimOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetWeaponType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct UBlendSpace GetAimOffset[2]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UBlendSpace(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterMeshClassSet
{
public:
	FCharacterMeshClassSet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<UCharacterMesh> GetClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TSet<UCharacterMesh>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetLoadedVariablesForCrossbow
{
public:
	FNetMulticast_SetLoadedVariablesForCrossbow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetisCocked() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCloseRangeAttackData
{
public:
	FCloseRangeAttackData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	float GetRegainControlDurationModifier() {
		return memory.read<float>(m_addr + 8);
	}
	float GetRange() {
		return memory.read<float>(m_addr + 12);
	}
	float Getangle() {
		return memory.read<float>(m_addr + 16);
	}
	float GetHorizontalHalfAngleRange() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterMeshClassArray
{
public:
	FCharacterMeshClassArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UCharacterMesh> GetClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<UCharacterMesh>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAnyMemberAlive
{
public:
	FIsAnyMemberAlive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHitByMeleeImpactSoundsInfo
{
public:
	FHitByMeleeImpactSoundsInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetImpactSourceSoundCategory() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	uint8_t  GetHitSeverity() {
		return memory.read<uint8_t >(m_addr + 1);
	}
	uint8_t  GetImpactBodyPart() {
		return memory.read<uint8_t >(m_addr + 2);
	}
	struct FVector GetImpactPoint() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterSpawnerDataBasedOnPreset
{
public:
	FCharacterSpawnerDataBasedOnPreset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCharacterSpawnerPreset GetPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UCharacterSpawnerPreset(ptr_addr);
	}
	bool GetOverrideCharacterClasses() {
		return memory.read<bool>(m_addr + 8);
	}
	struct TArray<APawn> GetCharacterClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<APawn>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsValid
{
public:
	FIsValid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterSpawneeInfo
{
public:
	FCharacterSpawneeInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateHair
{
public:
	FNetMulticast_UpdateHair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GethairParams() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPhaseTimeLeft
{
public:
	FGetPhaseTimeLeft(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPawnCharacterInfo
{
public:
	FPawnCharacterInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	APawn GetSpawnablePawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return APawn(ptr_addr);
	}
	struct TArray<APawn> GetCharacterPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<APawn>(ptr_addr);
	}
	float GetPoiCharacterIdleThresholdTime() {
		return memory.read<float>(m_addr + 24);
	}
	float GetExteriorCharacterIdleThresholdTime() {
		return memory.read<float>(m_addr + 28);
	}
	float GetInteriorCharacterIdleThresholdTime() {
		return memory.read<float>(m_addr + 32);
	}
	float GetMinShortRangeSpawnDistance() {
		return memory.read<float>(m_addr + 36);
	}
	float GetMaxShortRangeSpawnDistance() {
		return memory.read<float>(m_addr + 40);
	}
	float GetMinLongRangeSpawnDistance() {
		return memory.read<float>(m_addr + 44);
	}
	float GetMaxLongRangeSpawnDistance() {
		return memory.read<float>(m_addr + 48);
	}
	float GetPawnCullDuration() {
		return memory.read<float>(m_addr + 52);
	}
	int32_t GetMinWildCharactersPerPawnGroup() {
		return memory.read<int32_t>(m_addr + 56);
	}
	int32_t GetMaxWildCharactersPerPawnGroup() {
		return memory.read<int32_t>(m_addr + 60);
	}
	int32_t GetMaxExteriorCharactersPerPawnGroup() {
		return memory.read<int32_t>(m_addr + 64);
	}
	int32_t GetMaxInteriorCharactersPerPawnGroup() {
		return memory.read<int32_t>(m_addr + 68);
	}
	float GetPawnFieldOfView() {
		return memory.read<float>(m_addr + 72);
	}
	float GetSpawningFieldOfView() {
		return memory.read<float>(m_addr + 76);
	}
	int32_t GetMaxAllowedPawns() {
		return memory.read<int32_t>(m_addr + 80);
	}
	int32_t GetMaxAllowedWildPawns() {
		return memory.read<int32_t>(m_addr + 84);
	}
	int32_t GetMaxAllowedExteriorPawns() {
		return memory.read<int32_t>(m_addr + 96);
	}
	int32_t GetMaxAllowedInteriorPawns() {
		return memory.read<int32_t>(m_addr + 108);
	}
	float GetExteriorPawnAmountModifier() {
		return memory.read<float>(m_addr + 120);
	}
	float GetInteriorPawnAmountModifier() {
		return memory.read<float>(m_addr + 132);
	}
	float GetWildPawnAmountModifier() {
		return memory.read<float>(m_addr + 144);
	}
	struct TArray<struct FSpawnedPawnInfo> GetSpawnedPawns() {
		return memory.read<struct TArray<struct FSpawnedPawnInfo>>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGameAudioPaused
{
public:
	FSetGameAudioPaused(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getpaused() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTiredIdleAnimationFP
{
public:
	FGetTiredIdleAnimationFP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowOnUI
{
public:
	FShowOnUI(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterStats
{
public:
	FCharacterStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFamePoints() {
		return memory.read<float>(m_addr + 8);
	}
	int32_t GetFameLevel() {
		return memory.read<int32_t>(m_addr + 12);
	}
	float GetEventScore() {
		return memory.read<float>(m_addr + 16);
	}
	int32_t GetEventKills() {
		return memory.read<int32_t>(m_addr + 20);
	}
	int32_t GetEventTeamKills() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetEventDeaths() {
		return memory.read<int32_t>(m_addr + 28);
	}
	int32_t GetEventSuicides() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetEventAssists() {
		return memory.read<int32_t>(m_addr + 36);
	}
	int32_t GetEventHeadshots() {
		return memory.read<int32_t>(m_addr + 40);
	}
	bool GetIsBanned() {
		return memory.read<bool>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWheelTires
{
public:
	FGetWheelTires(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVehicleHitZoneData> GetReturnValue() {
		return memory.read<struct TArray<struct FVehicleHitZoneData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpamSeverityConditions
{
public:
	FSpamSeverityConditions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetResetDuration() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetOffenceRepetitions() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FFirstPersonViewParameters
{
public:
	FFirstPersonViewParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatInterval GetMinMaxViewPitch() {
		return memory.read<struct FFloatInterval>(m_addr + 0);
	}
	struct FFloatInterval GetMinMaxViewYaw() {
		return memory.read<struct FFloatInterval>(m_addr + 8);
	}
	struct FFloatInterval GetMinMaxViewYawInCombatMode() {
		return memory.read<struct FFloatInterval>(m_addr + 16);
	}
	struct FFloatInterval GetMinMaxViewYawIfBlocked() {
		return memory.read<struct FFloatInterval>(m_addr + 24);
	}
	struct UCurveLinearColor GetMinMaxViewPitchByYaw() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UCurveLinearColor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnIdleStateExit
{
public:
	FOnIdleStateExit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FAnimNode_StateMachine GetMachine() {
		return memory.read<struct FAnimNode_StateMachine>(m_addr + 0);
	}
	int32_t GetprevStateIndex() {
		return memory.read<int32_t>(m_addr + 176);
	}
	int32_t GetnextStateIndex() {
		return memory.read<int32_t>(m_addr + 180);
	}

private:
	std::uint64_t m_addr = 0;
};class FChoppingRecipe
{
public:
	FChoppingRecipe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInteractionCaption() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct UAkAudioEvent GetChopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UAkAudioEvent(ptr_addr);
	}
	uint8_t  GetnoiseLevel() {
		return memory.read<uint8_t >(m_addr + 32);
	}
	uint8_t  GetChoppingMontage() {
		return memory.read<uint8_t >(m_addr + 33);
	}
	uint8_t  GetChoppingMontageEnd() {
		return memory.read<uint8_t >(m_addr + 34);
	}
	bool GetEnforceDroppingItemOnGround() {
		return memory.read<bool>(m_addr + 35);
	}
	bool GetShouldResultUsesDependOnSourceHP() {
		return memory.read<bool>(m_addr + 36);
	}
	struct TArray<struct FChoppingIngredient> GetIngredients() {
		return memory.read<struct TArray<struct FChoppingIngredient>>(m_addr + 40);
	}
	struct FPossibleChoppingTools GetToolRequiredToBeInRightHand() {
		return memory.read<struct FPossibleChoppingTools>(m_addr + 56);
	}
	struct TArray<struct FPossibleChoppingTools> GetAdditionalToolsRequired() {
		return memory.read<struct TArray<struct FPossibleChoppingTools>>(m_addr + 72);
	}
	USkill GetSkill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return USkill(ptr_addr);
	}
	float GetExperiencePointsAwarded() {
		return memory.read<float>(m_addr + 96);
	}
	struct FChoppingParametersPerSkillLevel GetNoSkillLevelData() {
		return memory.read<struct FChoppingParametersPerSkillLevel>(m_addr + 100);
	}
	struct FChoppingParametersPerSkillLevel GetBasicLevelData() {
		return memory.read<struct FChoppingParametersPerSkillLevel>(m_addr + 112);
	}
	struct FChoppingParametersPerSkillLevel GetMediumLevelData() {
		return memory.read<struct FChoppingParametersPerSkillLevel>(m_addr + 124);
	}
	struct FChoppingParametersPerSkillLevel GetAdvancedLevelData() {
		return memory.read<struct FChoppingParametersPerSkillLevel>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FChoppingParametersPerSkillLevel
{
public:
	FChoppingParametersPerSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FExperienceDependentFloat GetChoppingTime() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 0);
	}
	int32_t GetIngredientsQuantityBonus() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FExperienceDependentFloat
{
public:
	FExperienceDependentFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValueWhenExperienceIsMinimal() {
		return memory.read<float>(m_addr + 0);
	}
	float GetValueWhenExperienceIsMaximal() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMovementSettings_Ground_Standing_Jogging
{
public:
	FPrisonerMovementSettings_Ground_Standing_Jogging(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerGroundMovementParameters GetDefault() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 0);
	}
	struct FPrisonerGroundMovementParameters GetMeleeCombat() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 12);
	}
	struct FPrisonerGroundMovementParameters GetWeaponAiming() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FChoppingTool2
{
public:
	FChoppingTool2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UBaseItemTag> GetItemTags() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UBaseItemTag>(ptr_addr);
	}
	UBaseItemTag GetItemTagClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UBaseItemTag(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 24);
	}
	bool GetOverrideChoppingTime() {
		return memory.read<bool>(m_addr + 64);
	}
	float GetChoppingTimeMultiplier() {
		return memory.read<float>(m_addr + 68);
	}
	bool GetOverrideIngredientsQuantity() {
		return memory.read<bool>(m_addr + 72);
	}
	int32_t GetIngredientsQuantityBonus() {
		return memory.read<int32_t>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryContainerClothesData
{
public:
	FInventoryContainerClothesData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FInventoryItemPositionPair> GetItemsData() {
		return memory.read<struct TArray<struct FInventoryItemPositionPair>>(m_addr + 0);
	}
	struct UObject GetParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UObject(ptr_addr);
	}
	int32_t GetRepCounter() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSelectedChoppingTool
{
public:
	FSelectedChoppingTool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	struct FChoppingTool2 GetTool() {
		return memory.read<struct FChoppingTool2>(m_addr + 8);
	}
	bool GetIsRequiredToBeInHands() {
		return memory.read<bool>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FFortificationData
{
public:
	FFortificationData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMarkerIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	UObject GetFortificationClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UObject(ptr_addr);
	}
	struct FDbIntegerId GetOwnerUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 16);
	}
	float Gethealth() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTrackedItemDestroyed
{
public:
	FOnTrackedItemDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCircularSegmentContainer
{
public:
	FCircularSegmentContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UCircularMenuSegmentWidget> GetSegmentWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UCircularMenuSegmentWidget>(ptr_addr);
	}
	int32_t GetSegmentCountOverride() {
		return memory.read<int32_t>(m_addr + 16);
	}
	float GetOffset() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FCircularLayerData
{
public:
	FCircularLayerData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCenterCutoffPercentage() {
		return memory.read<float>(m_addr + 0);
	}
	float GetSize() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleGearDown
{
public:
	FSetVehicleGearDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRepActionData
{
public:
	FRepActionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetAction() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	char GetIndexParameter() {
		return memory.read<char>(m_addr + 1);
	}
	char GetVersion() {
		return memory.read<char>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTimeOfDayChanged
{
public:
	FOnTimeOfDayChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeatherController2 Getsender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeatherController2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLastDirectConnectionAddress
{
public:
	FGetLastDirectConnectionAddress(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTraderMarker
{
public:
	FTraderMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTraderPersonalityDataAsset GetTraderPersonality() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UTraderPersonalityDataAsset(ptr_addr);
	}
	struct FTransform GetPurchasedTradeablesSpawnTransform() {
		return memory.read<struct FTransform>(m_addr + 112);
	}
	struct FTransform GetDepotSpawnTransform() {
		return memory.read<struct FTransform>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RequestServerData
{
public:
	FServer_RequestServerData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetRequestID() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FPlayerRpcChannelServerDataRequestNetSerializer Getrequest() {
		return memory.read<struct FPlayerRpcChannelServerDataRequestNetSerializer>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FLandingEffectDataPerSeverity
{
public:
	FLandingEffectDataPerSeverity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem GetParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleSystem(ptr_addr);
	}
	bool GetSpawnParticlesInDirectionOfVelocity() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCancel
{
public:
	FCancel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetRegular() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FImageAssetToLoad
{
public:
	FImageAssetToLoad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetName() {
		return memory.read<struct FGameplayTag>(m_addr + 0);
	}
	struct FString GetFilePath() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FEntityId
{
public:
	FEntityId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetValue() {
		return memory.read<int64_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerInfo
{
public:
	FServerInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetAddress() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetPort() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 24);
	}
	char GetPlayerCount() {
		return memory.read<char>(m_addr + 40);
	}
	char GetMaxPlayerCount() {
		return memory.read<char>(m_addr + 41);
	}
	bool GetPasswordProtected() {
		return memory.read<bool>(m_addr + 42);
	}
	float Getping() {
		return memory.read<float>(m_addr + 44);
	}
	float GetInGameTime() {
		return memory.read<float>(m_addr + 48);
	}
	struct FString GetVersion() {
		return memory.read<struct FString>(m_addr + 56);
	}
	bool GetIsComplete() {
		return memory.read<bool>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleServiceData
{
public:
	FVehicleServiceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVehicleServiceStationSaveObject GetServiceStationSaveObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UVehicleServiceStationSaveObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseInteractionVisitor
{
public:
	FBaseInteractionVisitor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FCooking_Server_RemoveFavoriteRecipe
{
public:
	FCooking_Server_RemoveFavoriteRecipe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetrecipeId() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZBaseInteractionData
{
public:
	FConZBaseInteractionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetBaseId() {
		return memory.read<int64_t>(m_addr + 0);
	}
	struct FVector GetBaseLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGameEventParameters
{
public:
	FGameEventParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAnnounceDuration() {
		return memory.read<float>(m_addr + 0);
	}
	float GetCancelDuration() {
		return memory.read<float>(m_addr + 4);
	}
	float GetRoundDuration() {
		return memory.read<float>(m_addr + 8);
	}
	int32_t GetRoundLimit() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetWinLimit() {
		return memory.read<int32_t>(m_addr + 16);
	}
	float GetRespawnDelay() {
		return memory.read<float>(m_addr + 20);
	}
	float GetTimeoutDuration() {
		return memory.read<float>(m_addr + 24);
	}
	int32_t GetMinParticipants() {
		return memory.read<int32_t>(m_addr + 28);
	}
	int32_t GetMaxParticipants() {
		return memory.read<int32_t>(m_addr + 32);
	}
	bool GetAllowRespawn() {
		return memory.read<bool>(m_addr + 36);
	}
	bool GetFriendlyFire() {
		return memory.read<bool>(m_addr + 37);
	}
	struct TArray<int32_t> GetTeamLimit() {
		return memory.read<struct TArray<int32_t>>(m_addr + 40);
	}
	int32_t GetEntryFee() {
		return memory.read<int32_t>(m_addr + 56);
	}
	struct FGameEventRewardPoints GetPointsPerEnemyKill() {
		return memory.read<struct FGameEventRewardPoints>(m_addr + 60);
	}
	struct FGameEventRewardPoints GetPointsPerTeamKill() {
		return memory.read<struct FGameEventRewardPoints>(m_addr + 72);
	}
	struct FGameEventRewardPoints GetPointsPerDeath() {
		return memory.read<struct FGameEventRewardPoints>(m_addr + 84);
	}
	struct FGameEventRewardPoints GetPointsPerSuicide() {
		return memory.read<struct FGameEventRewardPoints>(m_addr + 96);
	}
	struct FGameEventRewardPoints GetPointsPerAssist() {
		return memory.read<struct FGameEventRewardPoints>(m_addr + 108);
	}
	struct FGameEventRewardPoints GetPointsPerHeadshot() {
		return memory.read<struct FGameEventRewardPoints>(m_addr + 120);
	}
	struct FGameEventRewardPoints GetPointsPerRoundWin() {
		return memory.read<struct FGameEventRewardPoints>(m_addr + 132);
	}
	struct TArray<struct FGameEventRewardPoints> GetPointsPerRank() {
		return memory.read<struct TArray<struct FGameEventRewardPoints>>(m_addr + 144);
	}
	struct FGameEventRewardPoints GetPointsForParticipation() {
		return memory.read<struct FGameEventRewardPoints>(m_addr + 160);
	}
	float GetScoreToFameConversionFactor() {
		return memory.read<float>(m_addr + 172);
	}
	struct TArray<struct UItemSelection> GetPossiblePrimaryWeapons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct TArray<struct UItemSelection>(ptr_addr);
	}
	struct TArray<struct UItemSelection> GetPossibleSecondaryWeapons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct TArray<struct UItemSelection>(ptr_addr);
	}
	struct TArray<struct UItemSelection> GetPossibleTertiaryWeapons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct TArray<struct UItemSelection>(ptr_addr);
	}
	struct TArray<struct UItemSelection> GetPossibleOutfits() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct TArray<struct UItemSelection>(ptr_addr);
	}
	struct TArray<struct UItemSelection> GetPossibleSupportItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct TArray<struct UItemSelection>(ptr_addr);
	}
	struct TArray<struct UItemSelection> GetMandatoryGear() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct TArray<struct UItemSelection>(ptr_addr);
	}
	struct FText GetEventName() {
		return memory.read<struct FText>(m_addr + 272);
	}
	struct FText GetEventDescription() {
		return memory.read<struct FText>(m_addr + 296);
	}
	struct FText GetPrerequisitesText() {
		return memory.read<struct FText>(m_addr + 320);
	}
	struct FText GetWeaponText() {
		return memory.read<struct FText>(m_addr + 344);
	}
	struct FText GetRewardsText() {
		return memory.read<struct FText>(m_addr + 368);
	}

private:
	std::uint64_t m_addr = 0;
};class FRunningSkillParametersPerSkillLevel
{
public:
	FRunningSkillParametersPerSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FExperienceDependentFloat GetMaxSpeedMultiplier() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 0);
	}
	struct FExperienceDependentFloat GetStaminaConsumptionMultiplier() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FElementMorphQuery
{
public:
	FElementMorphQuery(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetDebugSolo() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FName GetQueryName() {
		return memory.read<struct FName>(m_addr + 4);
	}
	struct TArray<struct FElementQueryMarker> GetMarkers() {
		return memory.read<struct TArray<struct FElementQueryMarker>>(m_addr + 16);
	}
	struct UStaticMesh GetStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UStaticMesh(ptr_addr);
	}
	struct FElementSnapMarkerOverride GetMarkersOverride() {
		return memory.read<struct FElementSnapMarkerOverride>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnInteractionButtonClicked
{
public:
	FOnInteractionButtonClicked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsChecked() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetParticipantTeam
{
public:
	FSetParticipantTeam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	int32_t GetTeamIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FElementSnapMarkerOverride
{
public:
	FElementSnapMarkerOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetOverrideType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct TArray<struct FName> GetSnapMarkersToRemove() {
		return memory.read<struct TArray<struct FName>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FModularElementSnapMarker
{
public:
	FModularElementSnapMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct FModularElementSnapMarkerSocket GetSocket() {
		return memory.read<struct FModularElementSnapMarkerSocket>(m_addr + 64);
	}
	bool GetInfluenceStability() {
		return memory.read<bool>(m_addr + 88);
	}
	float GetStability() {
		return memory.read<float>(m_addr + 92);
	}

private:
	std::uint64_t m_addr = 0;
};class FModularElementSnapMarkerSocket
{
public:
	FModularElementSnapMarkerSocket(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UModularBaseBuildingSocketType GetType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UModularBaseBuildingSocketType(ptr_addr);
	}
	UModularBaseBuildingSocketType GetInType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UModularBaseBuildingSocketType(ptr_addr);
	}
	UModularBaseBuildingSocketType GetOutType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UModularBaseBuildingSocketType(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZBaseData
{
public:
	FConZBaseData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetBaseId() {
		return memory.read<int64_t>(m_addr + 0);
	}
	struct FString GetBaseName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FVector2D GetBaseSize() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}
	struct FVector GetBaseLocation() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	int64_t GetBaseOwnerPlayerId() {
		return memory.read<int64_t>(m_addr + 48);
	}
	bool GetIsOwnedByPlayer() {
		return memory.read<bool>(m_addr + 56);
	}
	struct FVector2D GetBaseBoundsMin() {
		return memory.read<struct FVector2D>(m_addr + 60);
	}
	struct FVector2D GetBaseBoundsMax() {
		return memory.read<struct FVector2D>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsClimbingLadder
{
public:
	FIsClimbingLadder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetReloadData
{
public:
	FGetReloadData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWeaponReloadData GetReturnValue() {
		return memory.read<struct FWeaponReloadData>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZBaseElementData
{
public:
	FConZBaseElementData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetElementID() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetOwnerPlayerId() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetCreatorPrisonerId() {
		return memory.read<int64_t>(m_addr + 16);
	}
	struct FString GetOwnerName() {
		return memory.read<struct FString>(m_addr + 24);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	UObject GetElementClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return UObject(ptr_addr);
	}
	float GetHealthPoints() {
		return memory.read<float>(m_addr + 104);
	}
	float GetQuality() {
		return memory.read<float>(m_addr + 108);
	}
	char GetDoorElementStateFlags() {
		return memory.read<char>(m_addr + 112);
	}
	struct TArray<UObject> GetDoorUpgrades() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct TArray<UObject>(ptr_addr);
	}
	struct TArray<int32_t> GetCombinationsPerLock() {
		return memory.read<struct TArray<int32_t>>(m_addr + 136);
	}
	uint8_t  GetDoorAccessLevel() {
		return memory.read<uint8_t >(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseElementDestructionZone
{
public:
	FBaseElementDestructionZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBox GetBounds() {
		return memory.read<struct FBox>(m_addr + 0);
	}
	float GetDamageToItems() {
		return memory.read<float>(m_addr + 28);
	}
	float GetFallDamagePerMeter() {
		return memory.read<float>(m_addr + 32);
	}
	float GetMaxFallDamage() {
		return memory.read<float>(m_addr + 36);
	}
	bool GetMustElementBeAboveZone() {
		return memory.read<bool>(m_addr + 40);
	}
	bool GetIgnoreElementsThatCantBePlacedOnOtherElements() {
		return memory.read<bool>(m_addr + 41);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTurnInPlaceElapsedTimeLeft
{
public:
	FGetTurnInPlaceElapsedTimeLeft(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuoyancyTestPoint
{
public:
	FBuoyancyTestPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 12);
	}
	float GetDensity() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWeaponAnimationPoseOnWorkerThread
{
public:
	FGetWeaponAnimationPoseOnWorkerThread(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetanimationPose() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 1);
	}
	struct UAnimSequenceBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanBeSelected
{
public:
	FCanBeSelected(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemActionDescription GetDescription() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UItemActionDescription(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterCreationMenuContext
{
public:
	FCharacterCreationMenuContext(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsPreferringMultiplayer() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FString GetServerIp() {
		return memory.read<struct FString>(m_addr + 8);
	}
	int32_t GetServerResponsePort() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetServerGameplayPort() {
		return memory.read<int32_t>(m_addr + 28);
	}
	struct FString GetServerAuthToken() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FCommonMaps
{
public:
	FCommonMaps(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UWorld> GetMainMenu() {
		return memory.read<struct TSoftObjectPtr<UWorld>>(m_addr + 0);
	}
	struct TSoftObjectPtr<UWorld> GetCharacterCreationMenu() {
		return memory.read<struct TSoftObjectPtr<UWorld>>(m_addr + 40);
	}
	struct TSoftObjectPtr<UWorld> GetSingleplayer() {
		return memory.read<struct TSoftObjectPtr<UWorld>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGenderSwitchValue
{
public:
	FGetGenderSwitchValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FOverlapBlocking
{
public:
	FOverlapBlocking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACharacter(ptr_addr);
	}
	struct FTransform GetobstructionTestCapsuleWorldTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct FItemObstructionTestCapsule GetobstructionTestCapsule() {
		return memory.read<struct FItemObstructionTestCapsule>(m_addr + 64);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 144);
	}
	float GetPenetrationDepth() {
		return memory.read<float>(m_addr + 280);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 284);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleDoorHitMeshAttached
{
public:
	FSetVehicleDoorHitMeshAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdoorIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZSliderStyle
{
public:
	FConZSliderStyle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FProgressBarStyle GetSlider() {
		return memory.read<struct FProgressBarStyle>(m_addr + 0);
	}
	struct FSlateBrush GetThumb() {
		return memory.read<struct FSlateBrush>(m_addr + 416);
	}

private:
	std::uint64_t m_addr = 0;
};class FWaterQueryResult
{
public:
	FWaterQueryResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetInWaterIncludingWaves() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetInWaterExcludingWaves() {
		return memory.read<bool>(m_addr + 13);
	}
	bool GetIsBottomValid() {
		return memory.read<bool>(m_addr + 14);
	}
	struct FVector GetSurface() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FVector GetBottom() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	struct FVector GetVelocity() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	float GetWaveHeight() {
		return memory.read<float>(m_addr + 52);
	}
	struct FVector GetWaveNormal() {
		return memory.read<struct FVector>(m_addr + 56);
	}
	struct FVirtualizedWaterSpline GetWaterSpline() {
		return memory.read<struct FVirtualizedWaterSpline>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnExpandToggleClicked
{
public:
	FOnExpandToggleClicked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getchecked() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_HandleFiringEffects
{
public:
	FServer_HandleFiringEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetshotFired() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawQueryResult
{
public:
	FDrawQueryResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWaterQueryResult GetResult() {
		return memory.read<struct FWaterQueryResult>(m_addr + 0);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};class FVirtualizedWaterSpline
{
public:
	FVirtualizedWaterSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FInventoryItemPositionPair
{
public:
	FInventoryItemPositionPair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInventoryPositionDataRepHelper Getposition() {
		return memory.read<struct FInventoryPositionDataRepHelper>(m_addr + 0);
	}
	struct UObject GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerBodySimulationData_Effects
{
public:
	FPrisonerBodySimulationData_Effects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodyCondition_Knockout GetKnockout() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UPrisonerBodyCondition_Knockout(ptr_addr);
	}
	UPrisonerBodyCondition_BasicInjury GetBasicInjury() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UPrisonerBodyCondition_BasicInjury(ptr_addr);
	}
	UPrisonerBodyCondition_BleedingInjury GetBleedingInjury() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UPrisonerBodyCondition_BleedingInjury(ptr_addr);
	}
	UPrisonerBodyCondition_Choking GetChoking() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return UPrisonerBodyCondition_Choking(ptr_addr);
	}
	UPrisonerBodyCondition_FoodDisgust GetFoodDisgust() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return UPrisonerBodyCondition_FoodDisgust(ptr_addr);
	}
	UPrisonerBodyCondition_TearGasExposure GetTearGasExposure() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UPrisonerBodyCondition_TearGasExposure(ptr_addr);
	}
	UPrisonerBodyEffect_Limping GetLimping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UPrisonerBodyEffect_Limping(ptr_addr);
	}
	struct FPrisonerBodySimulationData_Effects_ExhaustionChange GetExhaustionChange() {
		return memory.read<struct FPrisonerBodySimulationData_Effects_ExhaustionChange>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZPrisonerSpawnEquipmentProperties
{
public:
	FConZPrisonerSpawnEquipmentProperties(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetElevation() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetClearEquipment() {
		return memory.read<bool>(m_addr + 4);
	}
	bool GetOverrideDefaultOutfit() {
		return memory.read<bool>(m_addr + 5);
	}
	struct UPrisonerLoadout GetLoadoutFemale() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UPrisonerLoadout(ptr_addr);
	}
	struct UPrisonerLoadout GetLoadoutMale() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrisonerLoadout(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPlayingAnimation
{
public:
	FIsPlayingAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZOceanLocationProperties
{
public:
	FConZOceanLocationProperties(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FEntitySetup_Component
{
public:
	FEntitySetup_Component(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UEntityComponentSetup GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UEntityComponentSetup(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FHoverClickButtonVisualInfo
{
public:
	FHoverClickButtonVisualInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetBackgroundColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetBorderColor() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanEverBeExecuted
{
public:
	FCanEverBeExecuted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct FString GetreasonIfNot() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGameEventTeamColours
{
public:
	FGameEventTeamColours(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetTeamName() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetParticipantStatsDarker() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	struct FLinearColor GetParticipantStatsLighter() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}
	struct FLinearColor GetParticipantStatsHighlighted() {
		return memory.read<struct FLinearColor>(m_addr + 48);
	}
	struct FLinearColor GetParticipantStatsDisabled() {
		return memory.read<struct FLinearColor>(m_addr + 64);
	}
	struct FLinearColor GetParticipantStatsMini() {
		return memory.read<struct FLinearColor>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FRadiationSourceDescription
{
public:
	FRadiationSourceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FVector GetExtents() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FVector GetEpicenterLocation() {
		return memory.read<struct FVector>(m_addr + 60);
	}
	float GetEpicenterRadius() {
		return memory.read<float>(m_addr + 72);
	}
	float GetMaxRadiationAmountIncreaseRate() {
		return memory.read<float>(m_addr + 76);
	}
	float GetRadiationAmountIncreaseRateFalloffExponent() {
		return memory.read<float>(m_addr + 80);
	}
	float GetRadiationNoiseAmountScale() {
		return memory.read<float>(m_addr + 84);
	}
	float GetRadiationNoiseLocationScale() {
		return memory.read<float>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FMainPointSnappedUtilities
{
public:
	FMainPointSnappedUtilities(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FEntityId> Get_repSnappedKey() {
		return memory.read<struct TArray<struct FEntityId>>(m_addr + 160);
	}
	struct TArray<struct FEntityId> Get_repSnappedValue() {
		return memory.read<struct TArray<struct FEntityId>>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};class FCookingUtilitySlotInstance
{
public:
	FCookingUtilitySlotInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId Get_uniqueId() {
		return memory.read<struct FDbIntegerId>(m_addr + 56);
	}
	struct FGameplayTag Get_utilityType() {
		return memory.read<struct FGameplayTag>(m_addr + 64);
	}
	char Get_usage() {
		return memory.read<char>(m_addr + 72);
	}
	struct FEntityId Get_boundCookingUtility() {
		return memory.read<struct FEntityId>(m_addr + 80);
	}
	struct UCookingRecipe Get_boundRecipe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UCookingRecipe(ptr_addr);
	}
	struct UCookingRecipe Get_clientReservedRecipe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UCookingRecipe(ptr_addr);
	}
	uint16_t Get_repTemperature() {
		return memory.read<uint16_t>(m_addr + 114);
	}
	uint16_t Get_repCookTime() {
		return memory.read<uint16_t>(m_addr + 124);
	}
	char Get_cookQualityPacked() {
		return memory.read<char>(m_addr + 136);
	}
	struct FEntityId Get_ownerCookingUtility() {
		return memory.read<struct FEntityId>(m_addr + 144);
	}
	struct TArray<uint32_t> Get_packedLocations() {
		return memory.read<struct TArray<uint32_t>>(m_addr + 184);
	}
	struct TArray<char> Get_internalCoordinatesPacked() {
		return memory.read<struct TArray<char>>(m_addr + 200);
	}
	int32_t Get_slotItemTagArrayIndex() {
		return memory.read<int32_t>(m_addr + 268);
	}
	struct TWeakObjectPtr<AFoodItem> Get_resultItem() {
		return memory.read<struct TWeakObjectPtr<AFoodItem>>(m_addr + 272);
	}
	float Get_targetCookTime() {
		return memory.read<float>(m_addr + 364);
	}
	bool Get_cookingFinished() {
		return memory.read<bool>(m_addr + 372);
	}
	bool Get_cookingStartFailed() {
		return memory.read<bool>(m_addr + 373);
	}
	bool Get_cookingAborted() {
		return memory.read<bool>(m_addr + 375);
	}
	struct FDbIntegerId Get_parentInstance() {
		return memory.read<struct FDbIntegerId>(m_addr + 384);
	}

private:
	std::uint64_t m_addr = 0;
};class FCookingResult
{
public:
	FCookingResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetItem() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRecipeIngredient
{
public:
	FRecipeIngredient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetIngredientTitle() {
		return memory.read<struct FText>(m_addr + 0);
	}
	bool GetIsResource() {
		return memory.read<bool>(m_addr + 24);
	}
	struct TArray<struct FPossibleRecipeIngredient> GetPossibleIngredient() {
		return memory.read<struct TArray<struct FPossibleRecipeIngredient>>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FEngineeringEventData
{
public:
	FEngineeringEventData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FOnShowPasswordToggle
{
public:
	FOnShowPasswordToggle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGeometry GetMyGeometry() {
		return memory.read<struct FGeometry>(m_addr + 0);
	}
	struct FPointerEvent GetMouseEvent() {
		return memory.read<struct FPointerEvent>(m_addr + 56);
	}
	struct FEventReply GetReturnValue() {
		return memory.read<struct FEventReply>(m_addr + 168);
	}

private:
	std::uint64_t m_addr = 0;
};class FCookingSortingDropdownEntryData
{
public:
	FCookingSortingDropdownEntryData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetDisplayName() {
		return memory.read<struct FText>(m_addr + 0);
	}
	uint8_t  GetRecipesSort() {
		return memory.read<uint8_t >(m_addr + 24);
	}
	struct FSlateBrush GetIcon() {
		return memory.read<struct FSlateBrush>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBorderCenter
{
public:
	FGetBorderCenter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIgnitableItemIgnitionRequirements
{
public:
	FIgnitableItemIgnitionRequirements(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UFireSourceItemTag> GetPossibleItemTags() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UFireSourceItemTag>(ptr_addr);
	}
	int32_t GetUses() {
		return memory.read<int32_t>(m_addr + 16);
	}
	float GetusageWeight() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FUntrackItem
{
public:
	FUntrackItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCookingUtilityMainSnapPoint
{
public:
	FCookingUtilityMainSnapPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetUtilitySlotType() {
		return memory.read<struct FGameplayTag>(m_addr + 0);
	}
	struct FVector GetLocationOffset() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetSnapRadius() {
		return memory.read<float>(m_addr + 20);
	}
	bool GetCanAllUtilityTypesBePlacedOn() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FGameplayTagContainer GetUtilityTypesThatCanBePlaced() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 32);
	}
	int32_t GetRepresentativeSlotId() {
		return memory.read<int32_t>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxDurationLeft
{
public:
	FGetMaxDurationLeft(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCookingUtilitySlot
{
public:
	FCookingUtilitySlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetUtilitySlotType() {
		return memory.read<struct FGameplayTag>(m_addr + 0);
	}
	struct FVector GetLocationOffset() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct TArray<struct FVector> GetMovementEndpoints() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 24);
	}
	float GetCircularShapeRadius() {
		return memory.read<float>(m_addr + 40);
	}
	float GetThermalConduction() {
		return memory.read<float>(m_addr + 44);
	}
	bool GetCanAllUtilityTypesBePlacedOn() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FGameplayTagContainer GetUtilityTypesThatCanBePlaced() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 56);
	}
	struct FVector GetCookMeshVisualOffset() {
		return memory.read<struct FVector>(m_addr + 88);
	}
	struct UCookingUtilityUIDataAsset GetCookingUtilityUIDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UCookingUtilityUIDataAsset(ptr_addr);
	}
	bool GetHighlightSlot() {
		return memory.read<bool>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FCookingUtilityUITableRow
{
public:
	FCookingUtilityUITableRow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetUtilitySlotType() {
		return memory.read<struct FGameplayTag>(m_addr + 8);
	}
	struct UCookingUtilityUIDataAsset GetCookingUtilityUIDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UCookingUtilityUIDataAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPhysicalHitReactData
{
public:
	FPhysicalHitReactData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetPelvisBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	float GetInitialStrengthMultiplier() {
		return memory.read<float>(m_addr + 16);
	}
	float GetBlendDuration() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FCorpsePoseData
{
public:
	FCorpsePoseData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector_NetQuantize GetLocation() {
		return memory.read<struct FVector_NetQuantize>(m_addr + 0);
	}
	struct FQuat GetRotation() {
		return memory.read<struct FQuat>(m_addr + 16);
	}
	struct FVector_NetQuantize GetLinearVelocity() {
		return memory.read<struct FVector_NetQuantize>(m_addr + 32);
	}
	struct FVector_NetQuantize GetAngularVelocity() {
		return memory.read<struct FVector_NetQuantize>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingPair
{
public:
	FCraftingPair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AItem GetCraftedItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AItem(ptr_addr);
	}
	AItem GetCraftingItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return AItem(ptr_addr);
	}
	int32_t GetCraftedItemCount() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct TArray<AItem> GetBonusItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentRound
{
public:
	FGetCurrentRound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSurvivalStats_Server_HandlePlayerLogout
{
public:
	FSurvivalStats_Server_HandlePlayerLogout(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingItem
{
public:
	FCraftingItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetDescription() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct TArray<struct FPossibleItem> GetPossibleItems() {
		return memory.read<struct TArray<struct FPossibleItem>>(m_addr + 16);
	}
	uint8_t  GetScalingType() {
		return memory.read<uint8_t >(m_addr + 32);
	}
	struct UAkAudioEvent GetFillSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMechanic_Client_UpdateServiceDataOnClient
{
public:
	FMechanic_Client_UpdateServiceDataOnClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AMechanic GetMechanic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AMechanic(ptr_addr);
	}
	struct FVehicleAttachmentPriceDataPerClassMap GetDelta() {
		return memory.read<struct FVehicleAttachmentPriceDataPerClassMap>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFundsOverviewUIData
{
public:
	FFundsOverviewUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FCraftingSkillLevelData
{
public:
	FCraftingSkillLevelData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCraftingTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetProcessingTime() {
		return memory.read<float>(m_addr + 4);
	}
	float GetPoints() {
		return memory.read<float>(m_addr + 8);
	}
	float GetProbability_Add() {
		return memory.read<float>(m_addr + 12);
	}
	float GetProbability_Multiply() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerFirstPersonSubviewBlendOverride
{
public:
	FPrisonerFirstPersonSubviewBlendOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetSource() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	uint8_t  GetTarget() {
		return memory.read<uint8_t >(m_addr + 1);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemClassesArray
{
public:
	FItemClassesArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<AItem> GetItemClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<AItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryItemComponentElement
{
public:
	FInventoryItemComponentElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FPrisonerAppearance_SkinTone
{
public:
	FPrisonerAppearance_SkinTone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetPreviewColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetSkinColorOffset() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	struct FLinearColor GetAverageLipColor() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingRecipe
{
public:
	FCraftingRecipe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCraftingRecipeCraftableItem> GetCraftableItems() {
		return memory.read<struct TArray<struct FCraftingRecipeCraftableItem>>(m_addr + 0);
	}
	struct TArray<struct FCraftingRecipeCraftingIngredient> GetCraftingIngredients() {
		return memory.read<struct TArray<struct FCraftingRecipeCraftingIngredient>>(m_addr + 16);
	}
	USkill GetSkillNeeded() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return USkill(ptr_addr);
	}
	uint8_t  GetSkillLevelNeeded() {
		return memory.read<uint8_t >(m_addr + 40);
	}
	struct UCraftableItem GetCraftableItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UCraftableItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_InteractWithBaseElement
{
public:
	FServer_InteractWithBaseElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetinteractionType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FConZBaseInteractionData GetbaseData() {
		return memory.read<struct FConZBaseInteractionData>(m_addr + 8);
	}
	struct FConZBaseElementInteractionData GetelementData() {
		return memory.read<struct FConZBaseElementInteractionData>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingRecipeCraftingIngredient
{
public:
	FCraftingRecipeCraftingIngredient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCraftingRecipeCraftingItem> GetCraftingItems() {
		return memory.read<struct TArray<struct FCraftingRecipeCraftingItem>>(m_addr + 0);
	}
	bool GetIsTool() {
		return memory.read<bool>(m_addr + 16);
	}
	bool GetIsOptional() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FHandleShapeChange
{
public:
	FHandleShapeChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetoldValue() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetNewValue() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct UWidget GetSource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UWidget(ptr_addr);
	}
	uint8_t  GetchangeSource() {
		return memory.read<uint8_t >(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPowerCableMeshInfo
{
public:
	FPowerCableMeshInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMesh(ptr_addr);
	}
	float GetLength() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingRecipeCraftableItem
{
public:
	FCraftingRecipeCraftableItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AItem GetItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AItem(ptr_addr);
	}
	bool GetEnoughSkill() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftingSlot
{
public:
	FCraftingSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSlotName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	UCraftingSlotType GetSlotType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UCraftingSlotType(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTrackItem
{
public:
	FTrackItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCriminalRecordUIData
{
public:
	FCriminalRecordUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetParameters
{
public:
	FSetParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameEventParameters Getparameters() {
		return memory.read<struct FGameEventParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNextMontageSection
{
public:
	FSetNextMontageSection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetNextSection() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkillTemplateUIData
{
public:
	FSkillTemplateUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FDamageTargetTypeMapping
{
public:
	FDamageTargetTypeMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct TArray<UObject> GetClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFlagB
{
public:
	FGetFlagB(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACTFFlag GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACTFFlag(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHairMeshComponent
{
public:
	FGetHairMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemContainer_Client_TriggerFailurePenalty
{
public:
	FItemContainer_Client_TriggerFailurePenalty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetruntimeId() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct AActor GettriggeringActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeshMaterialPair
{
public:
	FMeshMaterialPair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMesh GetSkeletalMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMesh(ptr_addr);
	}
	struct UMaterialInstance GetEquippedMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDcxVehicleTireParticleData
{
public:
	FDcxVehicleTireParticleData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinLateralSlip() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxLateralSlip() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMinLongitudinalSlip() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMaxLongitudinalSlip() {
		return memory.read<float>(m_addr + 12);
	}
	float GetParticleScaleModifier() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDeathmatchParameters
{
public:
	FDeathmatchParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetRoundScoreLimit() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetAreaRestrictionInterval() {
		return memory.read<float>(m_addr + 4);
	}
	float GetAreaRestrictionDuration() {
		return memory.read<float>(m_addr + 8);
	}
	float GetAreaRestrictionStep() {
		return memory.read<float>(m_addr + 12);
	}
	float GetBarrierHeatUpDuration() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FTooltipPanelData
{
public:
	FTooltipPanelData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	UUserWidget GetWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UUserWidget(ptr_addr);
	}
	uint8_t  GetPanelType() {
		return memory.read<uint8_t >(m_addr + 16);
	}
	int32_t GetLayer() {
		return memory.read<int32_t>(m_addr + 20);
	}
	bool GetIsEditorOnly() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FScheduleEvent
{
public:
	FScheduleEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWheelData
{
public:
	FWheelData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetWheelMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDialogInfoContainer
{
public:
	FDialogInfoContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FDialogueInfo> GetDialogInfos() {
		return memory.read<struct TArray<struct FDialogueInfo>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryStackMemberData
{
public:
	FInventoryStackMemberData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Getposition() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetSize() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FDialogueInfo
{
public:
	FDialogueInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetVoiceOver() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 8);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 32);
	}
	uint8_t  GetDialogType() {
		return memory.read<uint8_t >(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FDistantLevelDescription
{
public:
	FDistantLevelDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	uint8_t  GetMeshStreamingBehavior() {
		return memory.read<uint8_t >(m_addr + 64);
	}
	float GetMaxDrawDistance() {
		return memory.read<float>(m_addr + 68);
	}
	bool GetNeverDistanceCull() {
		return memory.read<bool>(m_addr + 72);
	}
	struct FBoxSphereBounds GetMeshBounds() {
		return memory.read<struct FBoxSphereBounds>(m_addr + 76);
	}
	struct TSoftObjectPtr<UStaticMesh> GetCollisionMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 104);
	}
	struct TArray<struct TSoftObjectPtr<UStaticMesh>> GetMeshLODs() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UStaticMesh>>>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};class FDummyCollisionCapsuleInfo
{
public:
	FDummyCollisionCapsuleInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<AActor> GetAttachParent() {
		return memory.read<struct TWeakObjectPtr<AActor>>(m_addr + 0);
	}
	struct FGameplayTag GetAttachment() {
		return memory.read<struct FGameplayTag>(m_addr + 8);
	}
	struct FTransform GetRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	float GetUnscaledRadius() {
		return memory.read<float>(m_addr + 64);
	}
	float GetUnscaledHalfHeight() {
		return memory.read<float>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponUnloadAmmoData
{
public:
	FWeaponUnloadAmmoData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetActionSequenceClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	int32_t GetAmmoCount() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCurrencyDescription
{
public:
	FCurrencyDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCurrencySymbol() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FText GetCurrencyName() {
		return memory.read<struct FText>(m_addr + 16);
	}
	struct FString GetConfigFileSymbol() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FSlateColor GetUITextColor() {
		return memory.read<struct FSlateColor>(m_addr + 56);
	}
	uint8_t  GetRequiredBankCardTypeToPerformTransactions() {
		return memory.read<uint8_t >(m_addr + 96);
	}
	bool GetMustBeOwnerOfBankCard() {
		return memory.read<bool>(m_addr + 97);
	}

private:
	std::uint64_t m_addr = 0;
};class FDamageOverTimeUpdateGroup
{
public:
	FDamageOverTimeUpdateGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetUpdateInterval() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEntityToCreateOnStartupParams
{
public:
	FEntityToCreateOnStartupParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UEntitySetup GetEntity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UEntitySetup(ptr_addr);
	}
	bool GetCreateOnServer() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetCreateOnClient() {
		return memory.read<bool>(m_addr + 9);
	}
	bool GetCreateInShippingBuilds() {
		return memory.read<bool>(m_addr + 10);
	}

private:
	std::uint64_t m_addr = 0;
};class FExplosionRadialDamageEvent
{
public:
	FExplosionRadialDamageEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UDamageCustomization GetDamageCustomizationClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return UDamageCustomization(ptr_addr);
	}
	float Getforce() {
		return memory.read<float>(m_addr + 80);
	}
	struct FTargetTypeDamageMultiplier GetTargetTypeMultiplier() {
		return memory.read<struct FTargetTypeDamageMultiplier>(m_addr + 88);
	}
	struct UObject GetDamageDealer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentAssociatedTradeables
{
public:
	FVehicleAttachmentAssociatedTradeables(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetRepairServiceClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	struct TSoftClassPtr<UObject> GetInstallationServiceClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FFamePointPenalties
{
public:
	FFamePointPenalties(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetIronLockLockpick() {
		return memory.read<float>(m_addr + 0);
	}
	float GetSilverLockLockpick() {
		return memory.read<float>(m_addr + 4);
	}
	float GetGoldLockLockpick() {
		return memory.read<float>(m_addr + 8);
	}
	float GetVehiclePurchased() {
		return memory.read<float>(m_addr + 12);
	}
	float GetWheelBarrowPurchased() {
		return memory.read<float>(m_addr + 16);
	}
	float GetPrisonerCommittedSuicide() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEnablePawnCollision
{
public:
	FSetEnablePawnCollision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFarmingSkillParametersPerSkillLevel
{
public:
	FFarmingSkillParametersPerSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPlantingSeedTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetPlantingSeedTimeDecreaseByStrength() {
		return memory.read<float>(m_addr + 4);
	}
	float GetFertilizingTime() {
		return memory.read<float>(m_addr + 8);
	}
	float GetWateringTime() {
		return memory.read<float>(m_addr + 12);
	}
	float GetWeedingByHandTime() {
		return memory.read<float>(m_addr + 16);
	}
	float GetWeedingByToolTime() {
		return memory.read<float>(m_addr + 20);
	}
	float GetApplyWeedRepellentTime() {
		return memory.read<float>(m_addr + 24);
	}
	float GetApplyPesticideTime() {
		return memory.read<float>(m_addr + 28);
	}
	float GetGardenSlotCraftTime() {
		return memory.read<float>(m_addr + 32);
	}
	float GetRemovePlantTime() {
		return memory.read<float>(m_addr + 36);
	}
	float GetRemovePlantTimeDecreaseByStrength() {
		return memory.read<float>(m_addr + 40);
	}
	float GetDestroyGardenTime() {
		return memory.read<float>(m_addr + 44);
	}
	float GetDestroyGardenTimeDecreaseByStrength() {
		return memory.read<float>(m_addr + 48);
	}
	float GetBaseMultiplier() {
		return memory.read<float>(m_addr + 52);
	}
	float GetExpMultiplier() {
		return memory.read<float>(m_addr + 56);
	}
	float GetSuccessfulHarvestChancePercentage() {
		return memory.read<float>(m_addr + 60);
	}
	struct FInt32Interval GetSuccessfulHarvestNumItemsToSpawn() {
		return memory.read<struct FInt32Interval>(m_addr + 64);
	}
	float GetSkillLevelBonusExperience() {
		return memory.read<float>(m_addr + 72);
	}
	float GetPlantingSeedExperience() {
		return memory.read<float>(m_addr + 76);
	}
	float GetAddFertilizerExperience() {
		return memory.read<float>(m_addr + 80);
	}
	float GetWateringPlantExperiencePerLiter() {
		return memory.read<float>(m_addr + 84);
	}
	float GetReachingNextPlantStageExperience() {
		return memory.read<float>(m_addr + 88);
	}
	float GetWeedingByHandExperience() {
		return memory.read<float>(m_addr + 92);
	}
	float GetWeedingByToolExperience() {
		return memory.read<float>(m_addr + 96);
	}
	float GetApplyWeedRepellentExperience() {
		return memory.read<float>(m_addr + 100);
	}
	float GetApplyPesticideExperience() {
		return memory.read<float>(m_addr + 104);
	}
	float GetCraftGardenExperience() {
		return memory.read<float>(m_addr + 108);
	}

private:
	std::uint64_t m_addr = 0;
};class FFillItemWithReplenishableResourceInteractionData
{
public:
	FFillItemWithReplenishableResourceInteractionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInteractionCaptionOverride() {
		return memory.read<struct FText>(m_addr + 0);
	}
	bool GetCanShowDrinkAsDefaultInteraction() {
		return memory.read<bool>(m_addr + 24);
	}
	float GetBaseActionDuration() {
		return memory.read<float>(m_addr + 28);
	}
	float GetActionDurationPerAmountFilled() {
		return memory.read<float>(m_addr + 32);
	}
	float GetResourceFillingExperiencePerAmount() {
		return memory.read<float>(m_addr + 36);
	}
	struct UAnimMontage GetPrisonerFillingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAkAudioEvent GetStartItemNoiseAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopItemNoiseAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateBCULockRegistryOnClientWithUserProfileId
{
public:
	FUpdateBCULockRegistryOnClientWithUserProfileId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetServerUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMissionLevelInfo
{
public:
	FMissionLevelInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FFishingMinigameData
{
public:
	FFishingMinigameData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FOnRep_AttachmentOwner
{
public:
	FOnRep_AttachmentOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVehicleAttachment GetoldAttachmentOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UVehicleAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleHasFuel
{
public:
	FVehicleHasFuel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFishingData
{
public:
	FFishingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetHookDepth() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerFallingPosePair
{
public:
	FPrisonerFallingPosePair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetposeA() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	uint8_t  GetposeB() {
		return memory.read<uint8_t >(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FFloatingWidgetUIData
{
public:
	FFloatingWidgetUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FTreeCanopySphere
{
public:
	FTreeCanopySphere(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 12);
	}
	float GetCanopyDensity() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSwitch_Server_Press
{
public:
	FSwitch_Server_Press(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ASwitch GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ASwitch(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildingData
{
public:
	FBuildingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsCleared() {
		return memory.read<bool>(m_addr + 0);
	}
	struct TArray<struct FWindowMarkerModifier> GetWindowMarkerModifiers() {
		return memory.read<struct TArray<struct FWindowMarkerModifier>>(m_addr + 8);
	}
	struct TArray<struct FFortificationData> GetFortifications() {
		return memory.read<struct TArray<struct FFortificationData>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsUserDeveloper
{
public:
	FIsUserDeveloper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetUserId() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FEditableParameter
{
public:
	FEditableParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDamageMultipliers
{
public:
	FDamageMultipliers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor GetDamageCauserClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AActor(ptr_addr);
	}
	struct TArray<struct FMultiplierByClass> GetDamageMultipliers() {
		return memory.read<struct TArray<struct FMultiplierByClass>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTensionToolCount
{
public:
	FGetTensionToolCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FParameterInt32
{
public:
	FParameterInt32(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWalkingIdleAnimationFP
{
public:
	FGetWalkingIdleAnimationFP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWaterSplineRegistry
{
public:
	FGetWaterSplineRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZWaterSplineRegistry GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZWaterSplineRegistry(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnMontageBlendingOutStarted
{
public:
	FOnMontageBlendingOutStarted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	bool Getinterrupted() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnArea
{
public:
	FSpawnArea(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 12);
	}
	int32_t GetTeamIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIsCocked
{
public:
	FSetIsCocked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHeatSource
{
public:
	FHeatSource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FHeatSourceParameters Getparameters() {
		return memory.read<struct FHeatSourceParameters>(m_addr + 12);
	}
	bool GetIsUsingFuelSimulation() {
		return memory.read<bool>(m_addr + 48);
	}
	int32_t GetTimesUpdatedWithoutMoving() {
		return memory.read<int32_t>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeleeSkillExperienceAwards
{
public:
	FMeleeSkillExperienceAwards(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetHit() {
		return memory.read<float>(m_addr + 0);
	}
	float GetKill() {
		return memory.read<float>(m_addr + 4);
	}
	float GetComboHitMultiplier() {
		return memory.read<float>(m_addr + 8);
	}
	float GetSkillLevelBonus() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FHuntingBiomeDescription
{
public:
	FHuntingBiomeDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 48);
	}
	struct FHuntingBiomeParameters Getparameters() {
		return memory.read<struct FHuntingBiomeParameters>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FInteractionQueryParameters
{
public:
	FInteractionQueryParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInteractionLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetInteractionNormal() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct TWeakObjectPtr<UPrimitiveComponent> GetComponent() {
		return memory.read<struct TWeakObjectPtr<UPrimitiveComponent>>(m_addr + 24);
	}
	int32_t GetInstanceIndex() {
		return memory.read<int32_t>(m_addr + 32);
	}
	bool GetIsInDroneMode() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryContainerClothesElement
{
public:
	FInventoryContainerClothesElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FCanViewName
{
public:
	FCanViewName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawCircle
{
public:
	FDrawCircle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetX() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FVector GetY() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 44);
	}
	float GetnumberOfSides() {
		return memory.read<float>(m_addr + 48);
	}
	struct FColor GetColor() {
		return memory.read<struct FColor>(m_addr + 52);
	}
	bool GetpersistentLines() {
		return memory.read<bool>(m_addr + 56);
	}
	float GetLifeTime() {
		return memory.read<float>(m_addr + 60);
	}
	char GetDepthPriority() {
		return memory.read<char>(m_addr + 64);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FInv2021_InventoryPosition
{
public:
	FInv2021_InventoryPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FInv2021_InventoryPosition2D
{
public:
	FInv2021_InventoryPosition2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetX() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetY() {
		return memory.read<int32_t>(m_addr + 12);
	}
	char GetRotation() {
		return memory.read<char>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetBowState
{
public:
	FServer_SetBowState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetState() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryContainerHandsHolstersData
{
public:
	FInventoryContainerHandsHolstersData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FInventoryItemPositionPair> GetItemsData() {
		return memory.read<struct TArray<struct FInventoryItemPositionPair>>(m_addr + 0);
	}
	struct UObject GetParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UObject(ptr_addr);
	}
	int32_t GetRepCounter() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryContainerSelectionRepData
{
public:
	FInventoryContainerSelectionRepData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UObject> GetItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UObject>(ptr_addr);
	}
	struct TArray<struct FInventoryItemPositionPair> GetItemsData() {
		return memory.read<struct TArray<struct FInventoryItemPositionPair>>(m_addr + 16);
	}
	struct UObject GetParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryNodeWidgetData
{
public:
	FInventoryNodeWidgetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSlot() {
		return memory.read<struct FName>(m_addr + 0);
	}
	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	float GetNumberData() {
		return memory.read<float>(m_addr + 12);
	}
	int32_t GetIntegerNumberData() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct FText GetTextData() {
		return memory.read<struct FText>(m_addr + 24);
	}
	struct UTexture2D GetIconData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UTexture2D(ptr_addr);
	}
	uint8_t  GetVisibilityData() {
		return memory.read<uint8_t >(m_addr + 56);
	}
	bool GetIsAnimated() {
		return memory.read<bool>(m_addr + 57);
	}
	float GetOpacity() {
		return memory.read<float>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOwningWeapon
{
public:
	FGetOwningWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemContainersArray
{
public:
	FItemContainersArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AItemContainer> Get_itemContainers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AItemContainer>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateGoldPriceMasterMultiplier
{
public:
	FNetMulticast_UpdateGoldPriceMasterMultiplier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetgoldPriceMasterMultiplier() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemContainerRepData
{
public:
	FItemContainerRepData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UObject> GetLocks() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<UObject>(ptr_addr);
	}
	struct TArray<int32_t> GetRemainingNeutralizationAttemptsPerLock() {
		return memory.read<struct TArray<int32_t>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemGeneralParametersTableRow
{
public:
	FItemGeneralParametersTableRow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText Get_caption() {
		return memory.read<struct FText>(m_addr + 8);
	}
	struct FText Get_description() {
		return memory.read<struct FText>(m_addr + 32);
	}
	struct TSoftObjectPtr<UTexture2D> Get_outsideInventoryIcon() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWinningTeamsPerRound
{
public:
	FGetWinningTeamsPerRound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetReturnValue() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemSpawnerMarker
{
public:
	FItemSpawnerMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FItemSpawnerDataBasedOnPreset GetSpawner() {
		return memory.read<struct FItemSpawnerDataBasedOnPreset>(m_addr + 48);
	}
	struct FItemSpawnerPresetWithOverrides GetSpawnerPreset() {
		return memory.read<struct FItemSpawnerPresetWithOverrides>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_DestroyCompletedMission
{
public:
	FServer_DestroyCompletedMission(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AMission GetMission() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AMission(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemSpawnerPresetWithOverrides
{
public:
	FItemSpawnerPresetWithOverrides(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UItemSpawnerPreset2 GetPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UItemSpawnerPreset2(ptr_addr);
	}
	bool GetOverrideNodes() {
		return memory.read<bool>(m_addr + 8);
	}
	struct TArray<struct FItemSpawnerPreset_Node> GetNodes() {
		return memory.read<struct TArray<struct FItemSpawnerPreset_Node>>(m_addr + 16);
	}
	bool GetOverrideItems() {
		return memory.read<bool>(m_addr + 32);
	}
	struct TArray<struct FItemSpawnerPreset_Item> GetItems() {
		return memory.read<struct TArray<struct FItemSpawnerPreset_Item>>(m_addr + 40);
	}
	bool GetOverrideFixedItems() {
		return memory.read<bool>(m_addr + 56);
	}
	struct TArray<struct TSoftClassPtr<UObject>> GetFixedItems() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 64);
	}
	bool GetOverrideAlwaysSpawn() {
		return memory.read<bool>(m_addr + 80);
	}
	bool GetAlwaysSpawn() {
		return memory.read<bool>(m_addr + 81);
	}
	bool GetOverrideProbability() {
		return memory.read<bool>(m_addr + 82);
	}
	float GetProbability() {
		return memory.read<float>(m_addr + 84);
	}
	bool GetOverrideQuantity() {
		return memory.read<bool>(m_addr + 88);
	}
	struct FInt32Interval GetQuantity() {
		return memory.read<struct FInt32Interval>(m_addr + 92);
	}
	bool GetOverrideAllowDuplicates() {
		return memory.read<bool>(m_addr + 100);
	}
	bool GetAllowDuplicates() {
		return memory.read<bool>(m_addr + 101);
	}
	bool GetOverrideShouldFilterItemsByZone() {
		return memory.read<bool>(m_addr + 102);
	}
	bool GetShouldFilterItemsByZone() {
		return memory.read<bool>(m_addr + 103);
	}
	bool GetOverrideInitialDamage() {
		return memory.read<bool>(m_addr + 104);
	}
	float GetInitialDamage() {
		return memory.read<float>(m_addr + 108);
	}
	bool GetOverrideRandomDamage() {
		return memory.read<bool>(m_addr + 112);
	}
	float GetRandomDamage() {
		return memory.read<float>(m_addr + 116);
	}
	bool GetOverrideInitialUsage() {
		return memory.read<bool>(m_addr + 120);
	}
	float GetInitialUsage() {
		return memory.read<float>(m_addr + 124);
	}
	bool GetOverrideRandomUsage() {
		return memory.read<bool>(m_addr + 128);
	}
	float GetRandomUsage() {
		return memory.read<float>(m_addr + 132);
	}
	bool GetOverridePostSpawnActions() {
		return memory.read<bool>(m_addr + 136);
	}
	struct TArray<struct TSoftClassPtr<UObject>> GetPostSpawnActions() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMovementSettings_Air
{
public:
	FPrisonerMovementSettings_Air(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerAirMovementParameters GetFall() {
		return memory.read<struct FPrisonerAirMovementParameters>(m_addr + 0);
	}
	struct FPrisonerAirMovementParameters GetSkydiveSlow() {
		return memory.read<struct FPrisonerAirMovementParameters>(m_addr + 28);
	}
	struct FPrisonerAirMovementParameters GetSkydiveFast() {
		return memory.read<struct FPrisonerAirMovementParameters>(m_addr + 56);
	}
	struct FPrisonerAirMovementParameters GetDiveHeadFirst() {
		return memory.read<struct FPrisonerAirMovementParameters>(m_addr + 84);
	}
	struct FPrisonerAirMovementParameters GetDiveFeetFirst() {
		return memory.read<struct FPrisonerAirMovementParameters>(m_addr + 112);
	}
	struct FPrisonerAirMovementParameters GetHandsBound() {
		return memory.read<struct FPrisonerAirMovementParameters>(m_addr + 140);
	}
	struct TMap<struct FPrisonerFallingPosePair, struct FPrisonerFallingPoseTransitionParams> GetPoseTransitionParamsMap() {
		return memory.read<struct TMap<struct FPrisonerFallingPosePair, struct FPrisonerFallingPoseTransitionParams>>(m_addr + 168);
	}
	float GetJumpZVelocity() {
		return memory.read<float>(m_addr + 248);
	}
	struct FFloatInterval GetJumpZVelocityMultiplierVsPerformanceRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 312);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemSpawnerDataBasedOnPreset
{
public:
	FItemSpawnerDataBasedOnPreset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UItemSpawnerPreset GetPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UItemSpawnerPreset(ptr_addr);
	}
	bool GetOverrideItemClasses() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetOverrideItemSpawnTypes() {
		return memory.read<bool>(m_addr + 9);
	}
	bool GetOverrideAlwaysSpawn() {
		return memory.read<bool>(m_addr + 10);
	}
	bool GetOverrideProbability() {
		return memory.read<bool>(m_addr + 11);
	}
	bool GetOverrideUseItemZone() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetOverrideUseItemRarity() {
		return memory.read<bool>(m_addr + 13);
	}
	bool GetOverrideUseItemSpawnGroup() {
		return memory.read<bool>(m_addr + 14);
	}
	bool GetOverrideInitialDamage() {
		return memory.read<bool>(m_addr + 15);
	}
	bool GetOverrideRandomizeDamage() {
		return memory.read<bool>(m_addr + 16);
	}
	bool GetOverrideInitialUsage() {
		return memory.read<bool>(m_addr + 17);
	}
	bool GetOverrideRandomizeUsage() {
		return memory.read<bool>(m_addr + 18);
	}
	bool GetOverrideInitialDirtiness() {
		return memory.read<bool>(m_addr + 19);
	}
	bool GetOverrideRandomizeDirtiness() {
		return memory.read<bool>(m_addr + 20);
	}
	bool GetOverrideMinAmmoCount() {
		return memory.read<bool>(m_addr + 21);
	}
	bool GetOverrideMaxAmmoCount() {
		return memory.read<bool>(m_addr + 22);
	}
	bool GetOverrideMinCashAmount() {
		return memory.read<bool>(m_addr + 23);
	}
	bool GetOverrideMaxCashAmount() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetOverrideUseCollisionTraceToAdjustSpawnLocation() {
		return memory.read<bool>(m_addr + 25);
	}
	bool GetOverrideUseCollisionTraceToAdjustSpawnRotation() {
		return memory.read<bool>(m_addr + 26);
	}
	bool GetOverridePostItemsSpawnedActions() {
		return memory.read<bool>(m_addr + 27);
	}
	struct TArray<struct TSoftClassPtr<UObject>> GetItemClasses() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 32);
	}
	struct FGameplayTagContainer GetItemSpawnTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 48);
	}
	bool GetAlwaysSpawn() {
		return memory.read<bool>(m_addr + 80);
	}
	float GetProbability() {
		return memory.read<float>(m_addr + 84);
	}
	bool GetUseItemZone() {
		return memory.read<bool>(m_addr + 88);
	}
	bool GetUseItemRarity() {
		return memory.read<bool>(m_addr + 89);
	}
	bool GetUseItemSpawnGroup() {
		return memory.read<bool>(m_addr + 90);
	}
	float GetInitialDamage() {
		return memory.read<float>(m_addr + 92);
	}
	float GetRandomizeDamage() {
		return memory.read<float>(m_addr + 96);
	}
	float GetInitialUsage() {
		return memory.read<float>(m_addr + 100);
	}
	float GetRandomizeUsage() {
		return memory.read<float>(m_addr + 104);
	}
	float GetInitialDirtiness() {
		return memory.read<float>(m_addr + 108);
	}
	float GetRandomizeDirtiness() {
		return memory.read<float>(m_addr + 112);
	}
	int32_t GetMinAmmoCount() {
		return memory.read<int32_t>(m_addr + 116);
	}
	int32_t GetMaxAmmoCount() {
		return memory.read<int32_t>(m_addr + 120);
	}
	int32_t GetMinCashAmount() {
		return memory.read<int32_t>(m_addr + 124);
	}
	int32_t GetMaxCashAmount() {
		return memory.read<int32_t>(m_addr + 128);
	}
	bool GetUseCollisionTraceToAdjustSpawnLocation() {
		return memory.read<bool>(m_addr + 132);
	}
	bool GetUseCollisionTraceToAdjustSpawnRotation() {
		return memory.read<bool>(m_addr + 133);
	}
	UPostItemsSpawnedActions GetPostItemsSpawnedActions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return UPostItemsSpawnedActions(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBodyConditionSpriteData
{
public:
	FBodyConditionSpriteData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FItemSpawningSettings
{
public:
	FItemSpawningSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetUseQuadTreeToDetermineRelevantSpawnerGroups() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetRelevantSpawnerGroupsUpdateInterval() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMinPlayerLocationDeltaToUpdateRelevantSpawnerGroups() {
		return memory.read<float>(m_addr + 8);
	}
	float GetSpawnerGroupsCullDistance() {
		return memory.read<float>(m_addr + 12);
	}
	float GetSpawnerExpirationTimeInMinutes() {
		return memory.read<float>(m_addr + 16);
	}
	float GetExamineSpawnerExpirationTimeInMinutes() {
		return memory.read<float>(m_addr + 20);
	}
	float GetSpawnerTasksProcessingInterval() {
		return memory.read<float>(m_addr + 24);
	}
	float GetSpawnerTasksProcessingBudgetInMilliseconds() {
		return memory.read<float>(m_addr + 28);
	}
	int32_t GetMaxNumberOfSpawnerTasksPerUpdate() {
		return memory.read<int32_t>(m_addr + 32);
	}
	bool GetShouldDestroySpawnedItemsIfNoPlayersAround() {
		return memory.read<bool>(m_addr + 36);
	}
	float GetRarityRatio() {
		return memory.read<float>(m_addr + 40);
	}
	float GetSpawnerProbabilityMultiplier() {
		return memory.read<float>(m_addr + 44);
	}
	float GetExamineSpawnerProbabilityMultiplier() {
		return memory.read<float>(m_addr + 48);
	}
	float GetItemHealthMultiplierWhenUnderwater() {
		return memory.read<float>(m_addr + 52);
	}
	bool GetIgnoreSpawnerProbability() {
		return memory.read<bool>(m_addr + 56);
	}
	bool GetIgnoreItemLimit() {
		return memory.read<bool>(m_addr + 57);
	}
	bool GetIgnoreItemZone() {
		return memory.read<bool>(m_addr + 58);
	}
	bool GetIgnoreItemRarity() {
		return memory.read<bool>(m_addr + 59);
	}
	bool GetDebugDrawItemSpawnTransforms() {
		return memory.read<bool>(m_addr + 60);
	}
	float GetDebugDrawItemSpawnTransformsDuration() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FExamineItemSpawnerData
{
public:
	FExamineItemSpawnerData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMinQuantity() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetMaxQuantity() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetAllowDuplicates() {
		return memory.read<bool>(m_addr + 8);
	}
	struct FItemSpawnerDataBasedOnPreset GetSpawner() {
		return memory.read<struct FItemSpawnerDataBasedOnPreset>(m_addr + 16);
	}
	struct TArray<struct FExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes> GetMaxOccurrencesPerSpawnTypes() {
		return memory.read<struct TArray<struct FExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes>>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomZones_Client_ReceiveCustomZoneData
{
public:
	FCustomZones_Client_ReceiveCustomZoneData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCustomZoneConfiguration GetglobalConfiguration() {
		return memory.read<struct FCustomZoneConfiguration>(m_addr + 0);
	}
	struct TArray<struct FCustomZoneConfiguration> Getconfigurations() {
		return memory.read<struct TArray<struct FCustomZoneConfiguration>>(m_addr + 64);
	}
	struct TArray<struct FCustomZoneRegion> GetRegions() {
		return memory.read<struct TArray<struct FCustomZoneRegion>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes
{
public:
	FExamineItemSpawnerConstraint_MaxOccurrencesPerSpawnTypes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagContainer GetItemSpawnTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 0);
	}
	int32_t GetMaxNumberOfOccurrences() {
		return memory.read<int32_t>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectileImpulseMultiplier
{
public:
	FProjectileImpulseMultiplier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor GetActorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AActor(ptr_addr);
	}
	float GetMultiplier() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemSpawnerData
{
public:
	FItemSpawnerData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TSoftClassPtr<UObject>> GetItemClasses() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 0);
	}
	struct FGameplayTagContainer GetItemSpawnTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 16);
	}
	bool GetAlwaysSpawn() {
		return memory.read<bool>(m_addr + 48);
	}
	float GetProbability() {
		return memory.read<float>(m_addr + 52);
	}
	bool GetUseItemZone() {
		return memory.read<bool>(m_addr + 56);
	}
	bool GetUseItemRarity() {
		return memory.read<bool>(m_addr + 57);
	}
	bool GetUseItemSpawnGroup() {
		return memory.read<bool>(m_addr + 58);
	}
	float GetInitialDamage() {
		return memory.read<float>(m_addr + 60);
	}
	float GetRandomizeDamage() {
		return memory.read<float>(m_addr + 64);
	}
	float GetInitialUsage() {
		return memory.read<float>(m_addr + 68);
	}
	float GetRandomizeUsage() {
		return memory.read<float>(m_addr + 72);
	}
	float GetInitialDirtiness() {
		return memory.read<float>(m_addr + 76);
	}
	float GetRandomizeDirtiness() {
		return memory.read<float>(m_addr + 80);
	}
	int32_t GetMinAmmoCount() {
		return memory.read<int32_t>(m_addr + 84);
	}
	int32_t GetMaxAmmoCount() {
		return memory.read<int32_t>(m_addr + 88);
	}
	int32_t GetMinCashAmount() {
		return memory.read<int32_t>(m_addr + 92);
	}
	int32_t GetMaxCashAmount() {
		return memory.read<int32_t>(m_addr + 96);
	}
	bool GetUseCollisionTraceToAdjustSpawnLocation() {
		return memory.read<bool>(m_addr + 100);
	}
	bool GetUseCollisionTraceToAdjustSpawnRotation() {
		return memory.read<bool>(m_addr + 101);
	}
	UPostItemsSpawnedActions GetPostItemsSpawnedActions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return UPostItemsSpawnedActions(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemSpawningParametersTableRow
{
public:
	FItemSpawningParametersTableRow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMaxOccurrences() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct FItemLocation GetAllowedLocations() {
		return memory.read<struct FItemLocation>(m_addr + 12);
	}
	struct FFloatInterval GetCooldownPerSquadMember() {
		return memory.read<struct FFloatInterval>(m_addr + 28);
	}
	bool GetIsSubjectToAllowTrapsConfig() {
		return memory.read<bool>(m_addr + 36);
	}
	struct TArray<struct TSoftClassPtr<UObject>> GetVariations() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 40);
	}
	bool GetShouldOverrideInitialAndRandomUsage() {
		return memory.read<bool>(m_addr + 56);
	}
	float GetInitialUsageOverride() {
		return memory.read<float>(m_addr + 60);
	}
	float GetRandomUsageOverride() {
		return memory.read<float>(m_addr + 64);
	}
	struct FVector GetSpawnLocationOffset() {
		return memory.read<struct FVector>(m_addr + 68);
	}
	struct FRotator GetSpawnRotationOffset() {
		return memory.read<struct FRotator>(m_addr + 80);
	}
	float GetSpawnRotationRandomization() {
		return memory.read<float>(m_addr + 92);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOnlineMemberCount
{
public:
	FGetOnlineMemberCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRoomDifficultyConfiguration
{
public:
	FRoomDifficultyConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<AItem> GetLocks() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<AItem>(ptr_addr);
	}
	struct TArray<AItem> GetZappers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<AItem>(ptr_addr);
	}
	bool GetIsC4Present() {
		return memory.read<bool>(m_addr + 32);
	}
	struct TArray<struct FSpawnerConfiguration> GetPossibleSpawners() {
		return memory.read<struct TArray<struct FSpawnerConfiguration>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FLandingEffectDataPerPhysicalSurface
{
public:
	FLandingEffectDataPerPhysicalSurface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLandingEffectDataPerSeverity GetLight() {
		return memory.read<struct FLandingEffectDataPerSeverity>(m_addr + 0);
	}
	struct FLandingEffectDataPerSeverity GetMedium() {
		return memory.read<struct FLandingEffectDataPerSeverity>(m_addr + 16);
	}
	struct FLandingEffectDataPerSeverity GetHeavy() {
		return memory.read<struct FLandingEffectDataPerSeverity>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FWaterForceWhenSwimmingParams
{
public:
	FWaterForceWhenSwimmingParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDownstreamWaterForceMultiplier() {
		return memory.read<float>(m_addr + 0);
	}
	float GetUpstreamWaterForceMultiplier() {
		return memory.read<float>(m_addr + 4);
	}
	float GetImpulseThreshold() {
		return memory.read<float>(m_addr + 8);
	}
	float GetImpulseMultiplier() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMinSpeedForUpstream() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStatsOrderedByDeath
{
public:
	FGetStatsOrderedByDeath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FTournamentStats> Getstats() {
		return memory.read<struct TArray<struct FTournamentStats>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDeathmatchParameters
{
public:
	FSetDeathmatchParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDeathmatchParameters GetParams() {
		return memory.read<struct FDeathmatchParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_PierceHitObject
{
public:
	FMulticast_PierceHitObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetImpactVelocity() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FHitResult GetZeroBasedImpactResult() {
		return memory.read<struct FHitResult>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAerodynamicSurface
{
public:
	FAerodynamicSurface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	float GetLiftSlope() {
		return memory.read<float>(m_addr + 64);
	}
	float GetSkinFriction() {
		return memory.read<float>(m_addr + 68);
	}
	float GetZeroLiftAoA() {
		return memory.read<float>(m_addr + 72);
	}
	float GetStallAngleHigh() {
		return memory.read<float>(m_addr + 76);
	}
	float GetStallAngleLow() {
		return memory.read<float>(m_addr + 80);
	}
	float GetChord() {
		return memory.read<float>(m_addr + 84);
	}
	float GetSpan() {
		return memory.read<float>(m_addr + 88);
	}
	float GetAspectRatio() {
		return memory.read<float>(m_addr + 92);
	}
	float GetFlapFraction() {
		return memory.read<float>(m_addr + 96);
	}
	bool GetIsControlable() {
		return memory.read<bool>(m_addr + 100);
	}
	float GetFlapAngle() {
		return memory.read<float>(m_addr + 104);
	}
	float GetFlapAngleSensitivity() {
		return memory.read<float>(m_addr + 108);
	}
	float GetMaxFlapAngle() {
		return memory.read<float>(m_addr + 112);
	}
	float GetAreaMultiplier() {
		return memory.read<float>(m_addr + 116);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentPriceDataPerClassMap
{
public:
	FVehicleAttachmentPriceDataPerClassMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetContentBox
{
public:
	FGetContentBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVerticalBox GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UVerticalBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeleeAction
{
public:
	FMeleeAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetActionType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct TWeakObjectPtr<UAnimMontage> GetMontage() {
		return memory.read<struct TWeakObjectPtr<UAnimMontage>>(m_addr + 4);
	}
	float GetStartDelay() {
		return memory.read<float>(m_addr + 12);
	}
	float GetPlayRate() {
		return memory.read<float>(m_addr + 16);
	}
	float GetBlockDuration() {
		return memory.read<float>(m_addr + 20);
	}
	float GetOrientToTargetSpeedFactor() {
		return memory.read<float>(m_addr + 24);
	}
	float GetRegainControlDurationModifier() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeleeDodge
{
public:
	FMeleeDodge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FMeleeAttack
{
public:
	FMeleeAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FCheckMeleeAttackCapsuleCollisionData
{
public:
	FCheckMeleeAttackCapsuleCollisionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FUpdateExistenceOnClient
{
public:
	FUpdateExistenceOnClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetExists() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeleeSkillParametersPerSkillLevel
{
public:
	FMeleeSkillParametersPerSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FExperienceDependentFloat GetStartDelay() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 0);
	}
	struct FExperienceDependentFloat GetStartDelayPenaltyPerStrengthShortage() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 8);
	}
	struct FExperienceDependentFloat GetAnimationPlayRateModifier() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 16);
	}
	struct FExperienceDependentFloat GetAnimationPlayRatePenaltyPerStrengthShortage() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 24);
	}
	struct FExperienceDependentFloat GetRegainControlDurationModifier() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 32);
	}
	struct FExperienceDependentFloat GetStaminaDrain() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 40);
	}
	struct FExperienceDependentFloat GetStaminaDrainPenaltyPerStrengthShortage() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 48);
	}
	struct FExperienceDependentFloat GetStaminaRecoveryDelay() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 56);
	}
	struct FExperienceDependentFloat GetStaminaRecoveryDuration() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 64);
	}
	struct FExperienceDependentFloat GetStaminaInfluenceWindowMin() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 72);
	}
	struct FExperienceDependentFloat GetStaminaInfluenceWindowMax() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 80);
	}
	struct FExperienceDependentFloat GetStaminaInfluenceWindowLinearity() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 88);
	}
	struct FExperienceDependentFloat GetStartDelayWhenExhausted() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 96);
	}
	struct FExperienceDependentFloat GetAnimationPlayRateModifierWhenExhausted() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 104);
	}
	struct FExperienceDependentFloat GetRegainControlDurationModifierWhenExhausted() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 112);
	}
	struct FExperienceDependentFloat GetStaminaMultiplierPerExcessGearWeight() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 120);
	}
	struct FExperienceDependentFloat GetComboCooldownDuration() {
		return memory.read<struct FExperienceDependentFloat>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeleeSkillAnimations
{
public:
	FMeleeSkillAnimations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetPrimaryIdleAnimationTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetPrimaryIdleAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetTiredIdleAnimationTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetTiredIdleAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetWalkingIdleAnimationTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetWalkingIdleAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetBlockIdleAnimationTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetBlockIdleAnimationFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace GetAimOffsetBlendSpaceTP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UBlendSpace(ptr_addr);
	}
	struct UBlendSpace GetAimOffsetBlendSpaceFP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UBlendSpace(ptr_addr);
	}
	struct UAnimMontage GetEnterCombatModeMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetLeaveCombatModeMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UAnimMontage(ptr_addr);
	}
	struct TArray<struct UAnimSequenceBase> GetInactivityIdleAnimations() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct TArray<struct UAnimSequenceBase>(ptr_addr);
	}
	float GetIdleToBlockBlendDuration() {
		return memory.read<float>(m_addr + 112);
	}
	float GetBlockToIdleBlendDuration() {
		return memory.read<float>(m_addr + 116);
	}
	struct TArray<struct FMeleeSkillAttack> GetAttacks() {
		return memory.read<struct TArray<struct FMeleeSkillAttack>>(m_addr + 120);
	}
	struct TArray<struct FMeleeSkillDodge> GetDodges() {
		return memory.read<struct TArray<struct FMeleeSkillDodge>>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeleeSkillDodge
{
public:
	FMeleeSkillDodge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetDodgeDirectionType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}
	float GetRegainControlDurationMultiplier() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeshHitZone
{
public:
	FMeshHitZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FMetabolismRadialProgressBarColorScheme
{
public:
	FMetabolismRadialProgressBarColorScheme(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetBackgroundColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetPrimaryBarColor() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	struct FLinearColor GetPrimaryBarGlowColor() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}
	struct FLinearColor GetSecondaryBarColor() {
		return memory.read<struct FLinearColor>(m_addr + 48);
	}
	struct FLinearColor GetSecondaryBarGlowColor() {
		return memory.read<struct FLinearColor>(m_addr + 64);
	}
	struct FLinearColor GetFontColor() {
		return memory.read<struct FLinearColor>(m_addr + 80);
	}
	struct FLinearColor GetFontInnerGlowColor() {
		return memory.read<struct FLinearColor>(m_addr + 96);
	}
	struct FLinearColor GetFontOuterGlowColor() {
		return memory.read<struct FLinearColor>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FInPlaceTurningData
{
public:
	FInPlaceTurningData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInPlaceTurnAnimationInfo GetLAnimationInfo() {
		return memory.read<struct FInPlaceTurnAnimationInfo>(m_addr + 0);
	}
	struct FInPlaceTurnAnimationInfo GetRAnimationInfo() {
		return memory.read<struct FInPlaceTurnAnimationInfo>(m_addr + 20);
	}
	float GetBlendAlphaInterpolationSpeed() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNextIndex
{
public:
	FGetNextIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetUp() {
		return memory.read<bool>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeshInstanceId
{
public:
	FMeshInstanceId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FOnRep_Health
{
public:
	FOnRep_Health(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetoldValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubstancesData
{
public:
	FSubstancesData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNutrients[20]() {
		return memory.read<float>(m_addr + 0);
	}
	struct TMap<int32_t, float> GetForeignSubstances() {
		return memory.read<struct TMap<int32_t, float>>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};class FMetabolismRadialAttributeProgressBarColor
{
public:
	FMetabolismRadialAttributeProgressBarColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetPositiveColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetNeutralColor() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	struct FLinearColor GetNegativeColor() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FDigestionItemSave
{
public:
	FDigestionItemSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FConsumableSave GetConsumable() {
		return memory.read<struct FConsumableSave>(m_addr + 0);
	}
	float GetRemainingMassToConsume() {
		return memory.read<float>(m_addr + 256);
	}
	float GetMassConsumed() {
		return memory.read<float>(m_addr + 260);
	}
	float GetTotalMassConsumed() {
		return memory.read<float>(m_addr + 264);
	}
	float GetMassAbsorbed() {
		return memory.read<float>(m_addr + 268);
	}
	struct FSubstancesData GetSubstancesInStomach() {
		return memory.read<struct FSubstancesData>(m_addr + 272);
	}
	struct FSubstancesData GetSubstancesInIntestine() {
		return memory.read<struct FSubstancesData>(m_addr + 480);
	}
	struct TArray<struct FConsumableDigestionHandlerSave> GetDigestionHandlers() {
		return memory.read<struct TArray<struct FConsumableDigestionHandlerSave>>(m_addr + 688);
	}

private:
	std::uint64_t m_addr = 0;
};class FHeatUpAndChangeArea
{
public:
	FHeatUpAndChangeArea(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRadius() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector Getfocus() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 16);
	}
	float GetheatUpDuration() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetProvider
{
public:
	FGetProvider(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FForeignSubstanceSave
{
public:
	FForeignSubstanceSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetData() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMetabolismSPBColorScheme
{
public:
	FMetabolismSPBColorScheme(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetBaseColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetFillColorBottom() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	struct FLinearColor GetFillColorTop() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}
	struct FLinearColor GetOutlineColorBottom() {
		return memory.read<struct FLinearColor>(m_addr + 48);
	}
	struct FLinearColor GetOutlineColorTop() {
		return memory.read<struct FLinearColor>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FLadderInfo
{
public:
	FLadderInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FTransform GetTransformInverse() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	struct FTransform GetEdge() {
		return memory.read<struct FTransform>(m_addr + 96);
	}
	struct FVector GetCapsuleBias() {
		return memory.read<struct FVector>(m_addr + 144);
	}
	float GetStepHeight() {
		return memory.read<float>(m_addr + 156);
	}
	float GetStepWidth() {
		return memory.read<float>(m_addr + 160);
	}
	bool GetHasEdge() {
		return memory.read<bool>(m_addr + 164);
	}
	bool GetIsNarrow() {
		return memory.read<bool>(m_addr + 165);
	}
	char EPhysicalSurface GetPhysicalSurfaceForSounds() {
		return memory.read<char EPhysicalSurface>(m_addr + 166);
	}
	int32_t GetNumberOfSteps() {
		return memory.read<int32_t>(m_addr + 168);
	}
	int32_t GetHitStepIndex() {
		return memory.read<int32_t>(m_addr + 172);
	}

private:
	std::uint64_t m_addr = 0;
};class FMinigameToolRequestData
{
public:
	FMinigameToolRequestData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FIsRagdollAtRest
{
public:
	FIsRagdollAtRest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FActiveManagers
{
public:
	FActiveManagers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AMissionManager> GetMissionManagers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AMissionManager>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_SetVisuals
{
public:
	FMulticast_SetVisuals(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMesh(ptr_addr);
	}
	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FObjectiveData
{
public:
	FObjectiveData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetObjectiveAssetId() {
		return memory.read<struct FString>(m_addr + 0);
	}
	uint8_t  GetObjectiveState() {
		return memory.read<uint8_t >(m_addr + 16);
	}
	struct FText GetDescription() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FModularTooltipSectionData
{
public:
	FModularTooltipSectionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UModularTooltipElementData> GetElements() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<struct UModularTooltipElementData>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanStart
{
public:
	FCanStart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Farming_RemovePlant
{
public:
	FServer_Farming_RemovePlant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGarden GetGarden() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGarden(ptr_addr);
	}
	int32_t GetSlotId() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMovableMeshComponentData
{
public:
	FMovableMeshComponentData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSpawnedDepotsHelperStruct
{
public:
	FSpawnedDepotsHelperStruct(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FMovableCollisionFieldState
{
public:
	FMovableCollisionFieldState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsTurnedOn() {
		return memory.read<bool>(m_addr + 0);
	}
	char GetPackedCurrentPercentage() {
		return memory.read<char>(m_addr + 1);
	}
	uint8_t  GetMoveType() {
		return memory.read<uint8_t >(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTurnInPlaceDirectionBlendAlpha
{
public:
	FGetTurnInPlaceDirectionBlendAlpha(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNutrientsRDA
{
public:
	FNutrientsRDA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinProteinsPerLeanBodyMass() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxProteinsPerLeanBodyMass() {
		return memory.read<float>(m_addr + 4);
	}
	float GetFats() {
		return memory.read<float>(m_addr + 8);
	}
	float GetWater() {
		return memory.read<float>(m_addr + 12);
	}
	float GetVitaminA() {
		return memory.read<float>(m_addr + 16);
	}
	float GetVitaminB1() {
		return memory.read<float>(m_addr + 20);
	}
	float GetVitaminB2() {
		return memory.read<float>(m_addr + 24);
	}
	float GetVitaminB3() {
		return memory.read<float>(m_addr + 28);
	}
	float GetVitaminB4() {
		return memory.read<float>(m_addr + 32);
	}
	float GetVitaminB5() {
		return memory.read<float>(m_addr + 36);
	}
	float GetVitaminB6() {
		return memory.read<float>(m_addr + 40);
	}
	float GetVitaminB9() {
		return memory.read<float>(m_addr + 44);
	}
	float GetVitaminB12() {
		return memory.read<float>(m_addr + 48);
	}
	float GetVitaminC() {
		return memory.read<float>(m_addr + 52);
	}
	float GetVitaminD() {
		return memory.read<float>(m_addr + 56);
	}
	float GetVitaminE() {
		return memory.read<float>(m_addr + 60);
	}
	float GetVitaminK() {
		return memory.read<float>(m_addr + 64);
	}
	float GetCalcium() {
		return memory.read<float>(m_addr + 68);
	}
	float GetMagnesium() {
		return memory.read<float>(m_addr + 72);
	}
	float GetPotassium() {
		return memory.read<float>(m_addr + 76);
	}
	float GetCopper() {
		return memory.read<float>(m_addr + 80);
	}
	float GetSelenium() {
		return memory.read<float>(m_addr + 84);
	}
	float GetIron() {
		return memory.read<float>(m_addr + 88);
	}
	float GetPhosphorus() {
		return memory.read<float>(m_addr + 92);
	}
	float GetZinc() {
		return memory.read<float>(m_addr + 96);
	}
	float GetManganese() {
		return memory.read<float>(m_addr + 100);
	}
	float GetSodium() {
		return memory.read<float>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};class FObjectiveTrackableData
{
public:
	FObjectiveTrackableData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FPhysicalSurfaceEffectsData
{
public:
	FPhysicalSurfaceEffectsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPhysicalSurfaceVehicleEffectsData GetVehicle() {
		return memory.read<struct FPhysicalSurfaceVehicleEffectsData>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkillEventWeaponReload
{
public:
	FSkillEventWeaponReload(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FPhysicalSurfaceVehicleEffectsData
{
public:
	FPhysicalSurfaceVehicleEffectsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem GetParticleTrail() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleSystem(ptr_addr);
	}
	float GetParticleTrailSlipModifier() {
		return memory.read<float>(m_addr + 8);
	}
	float GetParticleTrailDestructionDelay() {
		return memory.read<float>(m_addr + 12);
	}
	struct UParticleSystem GetParticleWave() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UParticleSystem(ptr_addr);
	}
	float GetParticleWaveSlipModifier() {
		return memory.read<float>(m_addr + 24);
	}
	float GetParticleWaveDestructionDelay() {
		return memory.read<float>(m_addr + 28);
	}
	struct FPhysicalSurfaceVehicleTireParticleData GetSmallTireParticles() {
		return memory.read<struct FPhysicalSurfaceVehicleTireParticleData>(m_addr + 32);
	}
	struct FPhysicalSurfaceVehicleTireParticleData GetMediumTireParticles() {
		return memory.read<struct FPhysicalSurfaceVehicleTireParticleData>(m_addr + 48);
	}
	struct FPhysicalSurfaceVehicleTireParticleData GetLargeTireParticles() {
		return memory.read<struct FPhysicalSurfaceVehicleTireParticleData>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlaceableActorStateReplicationHelper
{
public:
	FPlaceableActorStateReplicationHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FTilesData
{
public:
	FTilesData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UHierarchicalInstancedStaticMeshComponent GetHISMComponentMain() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UHierarchicalInstancedStaticMeshComponent(ptr_addr);
	}
	struct UHierarchicalInstancedStaticMeshComponent GetHISMComponentOutline() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UHierarchicalInstancedStaticMeshComponent(ptr_addr);
	}
	struct UHierarchicalInstancedStaticMeshComponent GetHISMComponentDepth() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UHierarchicalInstancedStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSendMessageToMembers
{
public:
	FSendMessageToMembers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLineTraceSocketPair
{
public:
	FLineTraceSocketPair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTraceStart() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetTraceEnd() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlantMeshData
{
public:
	FPlantMeshData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetPlantGrowsUpright() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FVector GetTranslation() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FFloatInterval GetRandomVerticalOffsetInterval() {
		return memory.read<struct FFloatInterval>(m_addr + 16);
	}
	struct FFloatInterval GetRandomHorizontalOffsetInterval() {
		return memory.read<struct FFloatInterval>(m_addr + 24);
	}
	struct FFloatInterval GetRandomScaleInterval() {
		return memory.read<struct FFloatInterval>(m_addr + 32);
	}
	struct FPlantStageMeshData GetVegetatingPlantMesh() {
		return memory.read<struct FPlantStageMeshData>(m_addr + 40);
	}
	struct FPlantStageMeshData GetFloweringPlantMesh() {
		return memory.read<struct FPlantStageMeshData>(m_addr + 64);
	}
	struct FPlantStageMeshData GetRipeningPlantMesh() {
		return memory.read<struct FPlantStageMeshData>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlantStageMeshData
{
public:
	FPlantStageMeshData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetSkipStage() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetProduceReadyStagePercent() {
		return memory.read<float>(m_addr + 4);
	}
	struct TArray<struct FPlantMesh> GetMeshes() {
		return memory.read<struct TArray<struct FPlantMesh>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlantMesh
{
public:
	FPlantMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FStaticMeshMaterialPair GetMesh() {
		return memory.read<struct FStaticMeshMaterialPair>(m_addr + 0);
	}
	struct FFloatInterval GetStageMorphTargetInterpolationRange() {
		return memory.read<struct FFloatInterval>(m_addr + 24);
	}
	struct FVector GetGrowthExponents() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SendGroundSearchLocation
{
public:
	FClient_SendGroundSearchLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayerRpcChannelServerDataResponseNetSerializer
{
public:
	FPlayerRpcChannelServerDataResponseNetSerializer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FPlayerRpcChannelServerDataRequestNetSerializer
{
public:
	FPlayerRpcChannelServerDataRequestNetSerializer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FPrisonerFPWeaponFOVSettings
{
public:
	FPrisonerFPWeaponFOVSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FWheelBarrowParametersPerMovementPace
{
public:
	FWheelBarrowParametersPerMovementPace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsValid() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetBaseMaxForwardSpeed() {
		return memory.read<float>(m_addr + 4);
	}
	float GetBaseMaxForwardSpeedLimping() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetCanReverse() {
		return memory.read<bool>(m_addr + 12);
	}
	float GetBaseMaxReverseSpeed() {
		return memory.read<float>(m_addr + 16);
	}
	float GetBaseMaxReverseSpeedLimping() {
		return memory.read<float>(m_addr + 20);
	}
	float GetBaseMaxLoad() {
		return memory.read<float>(m_addr + 24);
	}
	float GetMinPrisonerStrength() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FInstrumentEvent
{
public:
	FInstrumentEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FFindTimeBeforeJumpApex
{
public:
	FFindTimeBeforeJumpApex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetAnimSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetdistanceToApex() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FVisualParameter
{
public:
	FVisualParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMorphName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetMaterialParamName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBP_OnInventoryCountChanged
{
public:
	FBP_OnInventoryCountChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetnumContainedItems() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRep_Behavior
{
public:
	FOnRep_Behavior(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetoldValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerAppearanceId
{
public:
	FPrisonerAppearanceId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetGender() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerAppearance_IrisVariation
{
public:
	FPrisonerAppearance_IrisVariation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UTexture2D> GetIrisHeight() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 0);
	}
	struct TSoftObjectPtr<UTexture2D> GetIrisMasks() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ProcessDecay
{
public:
	FNetMulticast_ProcessDecay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetDeltaSeconds() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerAppearance_FaceVariation
{
public:
	FPrisonerAppearance_FaceVariation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UTexture2D> GetSkinColor() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 0);
	}
	struct TSoftObjectPtr<UTexture2D> GetSkinNormal() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerAppearance_HairStyle
{
public:
	FPrisonerAppearance_HairStyle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetRequiresGameUpgrade() {
		return memory.read<bool>(m_addr + 0);
	}
	uint8_t  GetGameUpgradeRequired() {
		return memory.read<uint8_t >(m_addr + 1);
	}
	struct UCharacterMesh GetMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UCharacterMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoxComponent_OnComponentBeginOverlap
{
public:
	FBoxComponent_OnComponentBeginOverlap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetOverlappedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	int32_t GetOtherBodyIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}
	bool GetbFromSweep() {
		return memory.read<bool>(m_addr + 28);
	}
	struct FHitResult GetSweepResult() {
		return memory.read<struct FHitResult>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerBodyOrganGroupsVsSeverity
{
public:
	FPrisonerBodyOrganGroupsVsSeverity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerBodyOrganGroupsVsSeverityKey> GetKeys() {
		return memory.read<struct TArray<struct FPrisonerBodyOrganGroupsVsSeverityKey>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTradeOutpostManagerDescription
{
public:
	FTradeOutpostManagerDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FPrisonerBodyBoneGroupsVsSeverityKey
{
public:
	FPrisonerBodyBoneGroupsVsSeverityKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatRange GetSeverityRange() {
		return memory.read<struct FFloatRange>(m_addr + 0);
	}
	struct TSet<uint8_t > GetValues() {
		return memory.read<struct TSet<uint8_t >>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_PendAffect
{
public:
	FClient_PendAffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDuration() {
		return memory.read<float>(m_addr + 0);
	}
	float GetIntensity() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_PlayMusic
{
public:
	FMulticast_PlayMusic(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPBCTI_ApplyBandagesOrDisinfect_ApplyBandagesData
{
public:
	FPBCTI_ApplyBandagesOrDisinfect_ApplyBandagesData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBaseActionDuration() {
		return memory.read<float>(m_addr + 0);
	}
	struct FFloatRange GetActionDurationLimits() {
		return memory.read<struct FFloatRange>(m_addr + 4);
	}
	float GetBaseExperienceGainVsSkillLevel[5]() {
		return memory.read<float>(m_addr + 20);
	}
	float GetStabilizationDurationReductionVsSkillLevel[5]() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMemberRank
{
public:
	FGetMemberRank(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPBCTI_ApplyBandagesOrDisinfect_DisinfectData
{
public:
	FPBCTI_ApplyBandagesOrDisinfect_DisinfectData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBaseActionDuration() {
		return memory.read<float>(m_addr + 0);
	}
	struct FFloatRange GetActionDurationLimits() {
		return memory.read<struct FFloatRange>(m_addr + 4);
	}
	float GetBaseExperienceGainVsSkillLevel[5]() {
		return memory.read<float>(m_addr + 20);
	}
	struct UAkAudioEvent GetBeginInteractionPatientAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetEndInteractionPatientAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages_PerSkillData
{
public:
	FPBCTIIT_ApplyBandagesOrDisinfect_ApplyBandages_PerSkillData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetNumUsesPerSeverityLevel() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPBCTIIT_ApplyBandagesOrDisinfect_Disinfect_PerSkillData
{
public:
	FPBCTIIT_ApplyBandagesOrDisinfect_Disinfect_PerSkillData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetNumUsesPerSeverityLevel() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges
{
public:
	FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRanges(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRange> GetValueRanges() {
		return memory.read<struct TArray<struct FPrisonerBodySimulationData_ConsumableDigestionHandlersForValueRange>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerBodySimulationData_Effects_ExhaustionChange
{
public:
	FPrisonerBodySimulationData_Effects_ExhaustionChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerBodyEffect_ExhaustionChange GetConsumption() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UPrisonerBodyEffect_ExhaustionChange(ptr_addr);
	}
	UPrisonerBodyEffect_ExhaustionChange GetResting() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UPrisonerBodyEffect_ExhaustionChange(ptr_addr);
	}
	UPrisonerBodyEffect_ExhaustionChange GetSmoking() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UPrisonerBodyEffect_ExhaustionChange(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMaxMovementPaceVsSeverity
{
public:
	FPrisonerMaxMovementPaceVsSeverity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrisonerMaxMovementPaceVsSeverityKey> GetKeys() {
		return memory.read<struct TArray<struct FPrisonerMaxMovementPaceVsSeverityKey>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FControllerDigestionItem
{
public:
	FControllerDigestionItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FPrisonerCharacterMeshDecayMultiplierData
{
public:
	FPrisonerCharacterMeshDecayMultiplierData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamageMultiplierPerPace[4]() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDamageMultiplierPerStance[4]() {
		return memory.read<float>(m_addr + 16);
	}
	float GetWetnessDamageThreshold() {
		return memory.read<float>(m_addr + 32);
	}
	float GetWetnessDamageMultiplier() {
		return memory.read<float>(m_addr + 36);
	}
	bool GetDamagedByFloor() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FWindowInfo
{
public:
	FWindowInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FTransform GetTransformInverse() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	struct FVector GetAnchor() {
		return memory.read<struct FVector>(m_addr + 96);
	}
	float GetWidth() {
		return memory.read<float>(m_addr + 108);
	}
	float GetHeight() {
		return memory.read<float>(m_addr + 112);
	}
	struct FWindowClimbingAnimationInfo GetAnimationInfo() {
		return memory.read<struct FWindowClimbingAnimationInfo>(m_addr + 120);
	}
	int32_t GetAnimationIndex() {
		return memory.read<int32_t>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};class FVATMaterialParam
{
public:
	FVATMaterialParam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInstanceDynamic GetDynamicMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWindowMarkers
{
public:
	FGetWindowMarkers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FWindowMarker> GetResult() {
		return memory.read<struct TArray<struct FWindowMarker>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWindowDetectionParams
{
public:
	FWindowDetectionParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCharacterHeadLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetCharacterFeetLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetCharacterForwardVector() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	float GetMaxHorzDistanceToWindow() {
		return memory.read<float>(m_addr + 36);
	}
	float GetMaxCharacterToWindowAngle() {
		return memory.read<float>(m_addr + 40);
	}
	float GetHorzHitDetectionBias() {
		return memory.read<float>(m_addr + 44);
	}
	float GetHitDetectionBiasBelowWindow() {
		return memory.read<float>(m_addr + 48);
	}
	float GetHitDetectionBiasAboveWindow() {
		return memory.read<float>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FLadderInfoRepData
{
public:
	FLadderInfoRepData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetLadderTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FVector GetCapsuleBias() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FVector GetRootBoneOffset() {
		return memory.read<struct FVector>(m_addr + 60);
	}
	float GetStepHeight() {
		return memory.read<float>(m_addr + 72);
	}
	char EPhysicalSurface GetPhysicalSurfaceForSounds() {
		return memory.read<char EPhysicalSurface>(m_addr + 76);
	}
	char GetNumberOfSteps() {
		return memory.read<char>(m_addr + 77);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerClimbAnimationInfo
{
public:
	FPrisonerClimbAnimationInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinEdgeHeight() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxEdgeHeight() {
		return memory.read<float>(m_addr + 4);
	}
	float GetVaultDistance() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMaxVaultLandHeightError() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetAnchorOffset() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct UAnimSequenceBase GetAnchoringAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetAnchoringAnimationTime() {
		return memory.read<float>(m_addr + 40);
	}
	float GetAnchoringDuration() {
		return memory.read<float>(m_addr + 44);
	}
	struct UAnimMontage GetClimbingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAnimMontage(ptr_addr);
	}
	float GetStaminaDrain() {
		return memory.read<float>(m_addr + 56);
	}
	bool GetRequiresEmptyLHand() {
		return memory.read<bool>(m_addr + 60);
	}
	bool GetRequiresEmptyRHand() {
		return memory.read<bool>(m_addr + 61);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerCommonData_ResponseIdles
{
public:
	FPrisonerCommonData_ResponseIdles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UPrisonerResponseIdle GetDirtyAfterProne() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UPrisonerResponseIdle(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerInitialSkillInfo
{
public:
	FPrisonerInitialSkillInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkill GetSkill() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkill(ptr_addr);
	}
	uint8_t  GetInitialLevel() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	float GetInitialExperiencePoints() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerConditionalSpawnEquipment
{
public:
	FPrisonerConditionalSpawnEquipment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagQuery GetCondition() {
		return memory.read<struct FGameplayTagQuery>(m_addr + 0);
	}
	struct TSoftClassPtr<UObject> GetItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	uint8_t  GetEquipType() {
		return memory.read<uint8_t >(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMovementSettings_Water
{
public:
	FPrisonerMovementSettings_Water(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerWaterMovementParameters GetSlow() {
		return memory.read<struct FPrisonerWaterMovementParameters>(m_addr + 0);
	}
	struct FPrisonerWaterMovementParameters GetMedium() {
		return memory.read<struct FPrisonerWaterMovementParameters>(m_addr + 12);
	}
	struct FPrisonerWaterMovementParameters GetFast() {
		return memory.read<struct FPrisonerWaterMovementParameters>(m_addr + 24);
	}
	struct FPrisonerWaterMovementParameters GetDivingSlow() {
		return memory.read<struct FPrisonerWaterMovementParameters>(m_addr + 36);
	}
	struct FPrisonerWaterMovementParameters GetDivingMedium() {
		return memory.read<struct FPrisonerWaterMovementParameters>(m_addr + 48);
	}
	struct FFloatInterval GetMaxSpeedMultiplierVsPerformanceRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 60);
	}
	struct FFloatInterval GetAccelerationMultiplierVsPerformanceRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 68);
	}
	struct FFloatInterval GetDecelerationMultiplierVsPerformanceRatio() {
		return memory.read<struct FFloatInterval>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerAirMovementParameters
{
public:
	FPrisonerAirMovementParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTerminalVelocity() {
		return memory.read<float>(m_addr + 0);
	}
	float GetLateralMaxSpeed() {
		return memory.read<float>(m_addr + 4);
	}
	float GetLateralDrag() {
		return memory.read<float>(m_addr + 8);
	}
	float GetDesiredPitch() {
		return memory.read<float>(m_addr + 12);
	}
	float GetYawRotationRateFactor() {
		return memory.read<float>(m_addr + 16);
	}
	float GetControlChangeSpeed() {
		return memory.read<float>(m_addr + 20);
	}
	float GetDragIntensity() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumberOfPendingNotifiesInCurrentSection
{
public:
	FGetNumberOfPendingNotifiesInCurrentSection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetnotifyType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMovementSettings_Ground_Prone
{
public:
	FPrisonerMovementSettings_Ground_Prone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerMovementSettings_Ground_Prone_Walking GetWalking() {
		return memory.read<struct FPrisonerMovementSettings_Ground_Prone_Walking>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayMontage
{
public:
	FPlayMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	float GetPlayRate() {
		return memory.read<float>(m_addr + 8);
	}
	struct FName GetstartSection() {
		return memory.read<struct FName>(m_addr + 12);
	}
	bool GetassignCallbacks() {
		return memory.read<bool>(m_addr + 20);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentBatterySetup
{
public:
	FVehicleAttachmentBatterySetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetBatteryResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UGameResourceType(ptr_addr);
	}
	float GetCharge() {
		return memory.read<float>(m_addr + 8);
	}
	float GetChargingBaseDuration() {
		return memory.read<float>(m_addr + 12);
	}
	float GetChargingDurationPerAmountCharged() {
		return memory.read<float>(m_addr + 16);
	}
	float GetExperienceAwardedPerAmountCharged() {
		return memory.read<float>(m_addr + 20);
	}
	struct UAnimMontage GetPrisonerChargingMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAkAudioEvent GetStartChargingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopChargingAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddCargoLocker
{
public:
	FAddCargoLocker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetcargoLocker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMovementSettings_Ground_Prone_Walking
{
public:
	FPrisonerMovementSettings_Ground_Prone_Walking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerGroundMovementParameters GetDefault() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 0);
	}
	struct FPrisonerGroundMovementParameters GetWeaponAiming() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 12);
	}
	struct FPrisonerGroundMovementParameters GetWeaponAimingDownTheSights() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMovementSettings_Ground_Standing
{
public:
	FPrisonerMovementSettings_Ground_Standing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerMovementSettings_Ground_Standing_Walking GetWalking() {
		return memory.read<struct FPrisonerMovementSettings_Ground_Standing_Walking>(m_addr + 0);
	}
	struct FPrisonerMovementSettings_Ground_Standing_Walking GetWalkLimping() {
		return memory.read<struct FPrisonerMovementSettings_Ground_Standing_Walking>(m_addr + 48);
	}
	struct FPrisonerMovementSettings_Ground_Standing_Jogging GetJogging() {
		return memory.read<struct FPrisonerMovementSettings_Ground_Standing_Jogging>(m_addr + 96);
	}
	struct FPrisonerMovementSettings_Ground_Standing_Jogging GetJogLimping() {
		return memory.read<struct FPrisonerMovementSettings_Ground_Standing_Jogging>(m_addr + 132);
	}
	struct FPrisonerMovementSettings_Ground_Standing_Running GetRunning() {
		return memory.read<struct FPrisonerMovementSettings_Ground_Standing_Running>(m_addr + 168);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanBeEverDropped
{
public:
	FCanBeEverDropped(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerMovementSettings_Ground_Standing_Walking
{
public:
	FPrisonerMovementSettings_Ground_Standing_Walking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrisonerGroundMovementParameters GetDefault() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 0);
	}
	struct FPrisonerGroundMovementParameters GetMeleeCombat() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 12);
	}
	struct FPrisonerGroundMovementParameters GetWeaponAiming() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 24);
	}
	struct FPrisonerGroundMovementParameters GetWeaponAimingDownTheSights() {
		return memory.read<struct FPrisonerGroundMovementParameters>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_DestroyAllElementsInRadius
{
public:
	FNetMulticast_DestroyAllElementsInRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 16);
	}
	float GetminElementAreaCovered() {
		return memory.read<float>(m_addr + 20);
	}
	float GetminAngleDeg() {
		return memory.read<float>(m_addr + 24);
	}
	float GetmaxAngleDeg() {
		return memory.read<float>(m_addr + 28);
	}
	struct FVector GetforwardVector() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	uint8_t  GettypeFilter() {
		return memory.read<uint8_t >(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FMusicPlayerPlaybackOptions
{
public:
	FMusicPlayerPlaybackOptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetMusicPlaylist() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}
	int32_t GetCurrentPlaylistIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	bool GetPlaybackPaused() {
		return memory.read<bool>(m_addr + 20);
	}
	float GetCurrentPlaybackVolume() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetShouldRepeatCurrent() {
		return memory.read<bool>(m_addr + 28);
	}
	bool GetShouldLoop() {
		return memory.read<bool>(m_addr + 29);
	}
	bool GetShouldShuffle() {
		return memory.read<bool>(m_addr + 30);
	}
	bool GetShouldPlayRadio() {
		return memory.read<bool>(m_addr + 31);
	}
	bool GetIsTurnedOn() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerRestingDataAutonomous
{
public:
	FPrisonerRestingDataAutonomous(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetHasDisabledMovement() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FVector_NetQuantize GetLocation() {
		return memory.read<struct FVector_NetQuantize>(m_addr + 4);
	}
	struct FVector_NetQuantize GetEulerRotation() {
		return memory.read<struct FVector_NetQuantize>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerRestingParameters
{
public:
	FPrisonerRestingParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmode() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool GetShouldUpdateTransform() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetShouldDisableMovement() {
		return memory.read<bool>(m_addr + 2);
	}
	bool GetShouldDisableCapsuleCollision() {
		return memory.read<bool>(m_addr + 3);
	}
	struct TWeakObjectPtr<UAnimSequenceBase> GetRestingAnimation() {
		return memory.read<struct TWeakObjectPtr<UAnimSequenceBase>>(m_addr + 4);
	}
	struct TArray<struct FVector> GetEndRestLocations() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 16);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 32);
	}
	bool GetIsRestingOnGround() {
		return memory.read<bool>(m_addr + 80);
	}
	float GetFeetIKOffset() {
		return memory.read<float>(m_addr + 84);
	}
	struct TWeakObjectPtr<AItem> GetItem() {
		return memory.read<struct TWeakObjectPtr<AItem>>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLockStateWidget
{
public:
	FSetLockStateWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDiegeticLockState GetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDiegeticLockState(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayAsDrone
{
public:
	FGetPlayAsDrone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumberOfParticipants
{
public:
	FGetNumberOfParticipants(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMoveFocusUp
{
public:
	FMoveFocusUp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetUINavigation() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct UWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetToolTipWidget
{
public:
	FGetToolTipWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FThrowingItemData
{
public:
	FThrowingItemData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetWalkingIdleAnimationTP
{
public:
	FGetWalkingIdleAnimationTP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerDistanceTravelledContext
{
public:
	FPrisonerDistanceTravelledContext(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FPrisonerMeleeAttackTypes
{
public:
	FPrisonerMeleeAttackTypes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetPrimaryMeleeAttackTypeWhenNotMoving() {
		return memory.read<struct FGameplayTag>(m_addr + 0);
	}
	struct FGameplayTag GetPrimaryMeleeAttackTypeWhenWalking() {
		return memory.read<struct FGameplayTag>(m_addr + 8);
	}
	struct FGameplayTag GetPrimaryMeleeAttackTypeWhenJogging() {
		return memory.read<struct FGameplayTag>(m_addr + 16);
	}
	struct FGameplayTag GetPrimaryMeleeAttackTypeWhenRunning() {
		return memory.read<struct FGameplayTag>(m_addr + 24);
	}
	struct FGameplayTag GetPrimaryMeleeAttackTypeWhenFalling() {
		return memory.read<struct FGameplayTag>(m_addr + 32);
	}
	struct FGameplayTag GetSecondaryMeleeAttackTypeWhenNotMoving() {
		return memory.read<struct FGameplayTag>(m_addr + 40);
	}
	struct FGameplayTag GetSecondaryMeleeAttackTypeWhenWalking() {
		return memory.read<struct FGameplayTag>(m_addr + 48);
	}
	struct FGameplayTag GetSecondaryMeleeAttackTypeWhenJogging() {
		return memory.read<struct FGameplayTag>(m_addr + 56);
	}
	struct FGameplayTag GetSecondaryMeleeAttackTypeWhenRunning() {
		return memory.read<struct FGameplayTag>(m_addr + 64);
	}
	struct FGameplayTag GetSecondaryMeleeAttackTypeWhenFalling() {
		return memory.read<struct FGameplayTag>(m_addr + 72);
	}
	struct FGameplayTag GetComboMeleeAttackTypeWhenNotMoving() {
		return memory.read<struct FGameplayTag>(m_addr + 80);
	}
	struct FGameplayTag GetComboMeleeAttackTypeWhenWalking() {
		return memory.read<struct FGameplayTag>(m_addr + 88);
	}
	struct FGameplayTag GetComboMeleeAttackTypeWhenJogging() {
		return memory.read<struct FGameplayTag>(m_addr + 96);
	}
	struct FGameplayTag GetComboMeleeAttackTypeWhenRunning() {
		return memory.read<struct FGameplayTag>(m_addr + 104);
	}
	struct FGameplayTag GetComboMeleeAttackTypeWhenFalling() {
		return memory.read<struct FGameplayTag>(m_addr + 112);
	}
	struct FGameplayTag GetBashMeleeAttackType() {
		return memory.read<struct FGameplayTag>(m_addr + 120);
	}
	struct FGameplayTag GetWeaponBayonetMeleeAttackType() {
		return memory.read<struct FGameplayTag>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkillEventWeaponProjectileHitTarget
{
public:
	FSkillEventWeaponProjectileHitTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	float GetDistance() {
		return memory.read<float>(m_addr + 16);
	}
	float GetEnergyRatio() {
		return memory.read<float>(m_addr + 20);
	}
	bool GetIsHeadShot() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetIsKill() {
		return memory.read<bool>(m_addr + 25);
	}
	bool GetWasSniping() {
		return memory.read<bool>(m_addr + 26);
	}
	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 27);
	}
	uint8_t  GetWindSpeedCategory() {
		return memory.read<uint8_t >(m_addr + 28);
	}
	float GetExperienceMultiplier() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerTurnMontageDescription
{
public:
	FPrisonerTurnMontageDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetAnimationL90() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetAnimationR90() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct FName GetTurnAngleCurveName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	struct FName GetSlotName() {
		return memory.read<struct FName>(m_addr + 24);
	}
	float GetBlendInTime() {
		return memory.read<float>(m_addr + 32);
	}
	float GetBlendOutTime() {
		return memory.read<float>(m_addr + 36);
	}
	float GetBlendOutTriggerTime() {
		return memory.read<float>(m_addr + 40);
	}
	float GetPlayRate() {
		return memory.read<float>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FDerivedPrisonerSkillComponentUIData
{
public:
	FDerivedPrisonerSkillComponentUIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FLocalOffsetCurves
{
public:
	FLocalOffsetCurves(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveLinearColor GetYawIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCurveLinearColor(ptr_addr);
	}
	struct UCurveLinearColor GetYawMoving() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UCurveLinearColor(ptr_addr);
	}
	struct UCurveLinearColor GetPitchIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UCurveLinearColor(ptr_addr);
	}
	struct UCurveLinearColor GetPitchMoving() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UCurveLinearColor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOwnersDrawWeightBySkill
{
public:
	FGetOwnersDrawWeightBySkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerViewInfo
{
public:
	FPrisonerViewInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetWeaponFOV() {
		return memory.read<float>(m_addr + 1520);
	}
	struct FVector GetWeaponFoveationOffset() {
		return memory.read<struct FVector>(m_addr + 1524);
	}
	float GetMinViewYaw() {
		return memory.read<float>(m_addr + 1536);
	}
	float GetMaxViewYaw() {
		return memory.read<float>(m_addr + 1540);
	}
	float GetMinViewPitch() {
		return memory.read<float>(m_addr + 1544);
	}
	float GetMaxViewPitch() {
		return memory.read<float>(m_addr + 1548);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFloatAttribute
{
public:
	FGetFloatAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectileData
{
public:
	FProjectileData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetCaption() {
		return memory.read<struct FText>(m_addr + 0);
	}
	float GetCaliber() {
		return memory.read<float>(m_addr + 24);
	}
	float GetWeight() {
		return memory.read<float>(m_addr + 28);
	}
	float GetMuzzleVelocity() {
		return memory.read<float>(m_addr + 32);
	}
	float GetBallisticCoefficient() {
		return memory.read<float>(m_addr + 36);
	}
	uint8_t  GetBallisticDragModel() {
		return memory.read<uint8_t >(m_addr + 40);
	}
	float GetInitialDamage() {
		return memory.read<float>(m_addr + 44);
	}
	float GetInitialDamageInGameEvent() {
		return memory.read<float>(m_addr + 48);
	}
	struct FTargetTypeDamageMultiplier GetTargetTypeMultiplier() {
		return memory.read<struct FTargetTypeDamageMultiplier>(m_addr + 56);
	}
	float GetPenetrationFactor() {
		return memory.read<float>(m_addr + 72);
	}
	float GetGlancingAngle() {
		return memory.read<float>(m_addr + 76);
	}
	bool GetAllowGlanceOrForceBounce() {
		return memory.read<bool>(m_addr + 80);
	}
	float GetBounceAngle() {
		return memory.read<float>(m_addr + 84);
	}
	float GetArmorPiercingFactor() {
		return memory.read<float>(m_addr + 88);
	}
	bool GetCanCauseHeadExplosion() {
		return memory.read<bool>(m_addr + 92);
	}

private:
	std::uint64_t m_addr = 0;
};class FSaveLayout
{
public:
	FSaveLayout(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TScriptInterface<IAttributeMapInterface> GetAttributes() {
		return memory.read<struct TScriptInterface<IAttributeMapInterface>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFiredShotDescriptionRep
{
public:
	FFiredShotDescriptionRep(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetPackedData() {
		return memory.read<uint32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConnectionSaveData
{
public:
	FConnectionSaveData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FEntityComponentId GetID() {
		return memory.read<struct FEntityComponentId>(m_addr + 0);
	}
	float GetAmount() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMaterialsWetness
{
public:
	FSetMaterialsWetness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	float GetWetness() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRequiredRepairingItemTagParams
{
public:
	FRequiredRepairingItemTagParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBaseItemTag GetItemTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBaseItemTag(ptr_addr);
	}
	int32_t GetItemUsageConsumption() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRepairableParams
{
public:
	FRepairableParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTagContainer GetRepairableTypes() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 0);
	}
	float GetHealthRepairedPerUse() {
		return memory.read<float>(m_addr + 32);
	}
	float GetExperienceAwardedPerHealthRepaired() {
		return memory.read<float>(m_addr + 36);
	}
	float GetMinRepairDuration() {
		return memory.read<float>(m_addr + 40);
	}
	float GetMaxRepairDuration() {
		return memory.read<float>(m_addr + 44);
	}
	bool GetShouldRepairZeroHealth() {
		return memory.read<bool>(m_addr + 48);
	}
	uint8_t  GetMinSkillLevelRequired() {
		return memory.read<uint8_t >(m_addr + 49);
	}

private:
	std::uint64_t m_addr = 0;
};class FReplenishableResource
{
public:
	FReplenishableResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FNormalizeRotator
{
public:
	FNormalizeRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetRotator() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FPeriodicallyReplenishedResourceDescription
{
public:
	FPeriodicallyReplenishedResourceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInitialAmount() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxAmount() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReplenishInterval() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReplenishAmount() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAreaResourceLockNetwork
{
public:
	FAreaResourceLockNetwork(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FResourceNetworkGUID GetLockOwnerGUID() {
		return memory.read<struct FResourceNetworkGUID>(m_addr + 0);
	}
	struct FBox GetArea() {
		return memory.read<struct FBox>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorResourceLockNetwork
{
public:
	FActorResourceLockNetwork(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FResourceNetworkGUID GetLockOwnerGUID() {
		return memory.read<struct FResourceNetworkGUID>(m_addr + 0);
	}
	struct FResourceNetworkGUID GetResourceGUID() {
		return memory.read<struct FResourceNetworkGUID>(m_addr + 4);
	}
	int32_t GetResourceId() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeshInstancesRestoreOptions
{
public:
	FMeshInstancesRestoreOptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRestoreInterval() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetCombination
{
public:
	FServer_SetCombination(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRestorableMeshInstanceId
{
public:
	FRestorableMeshInstanceId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSavePrisonerState
{
public:
	FSavePrisonerState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSedentaryNPCHeadAnimationAndAudio
{
public:
	FSedentaryNPCHeadAnimationAndAudio(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetHeadAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAkAudioEvent(ptr_addr);
	}
	bool GetOverrideNativeTrackingAnimations() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetArmingMontage
{
public:
	FGetArmingMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetthrowingType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct UAnimMontage GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSedentaryNPCMarker
{
public:
	FSedentaryNPCMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetSedentaryNPCClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	struct FTransform GetSpawnTransform() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	bool GetShouldRaycastSpawnPosition() {
		return memory.read<bool>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FInPlaceTurnAnimationInfo
{
public:
	FInPlaceTurnAnimationInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDuration() {
		return memory.read<float>(m_addr + 0);
	}
	float GetTurnSpeed() {
		return memory.read<float>(m_addr + 4);
	}
	float GetAnimationPlayRate() {
		return memory.read<float>(m_addr + 8);
	}
	float GetBlendInDuration() {
		return memory.read<float>(m_addr + 12);
	}
	float GetBlendOutDuration() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsParticipating
{
public:
	FIsParticipating(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicle_Server_TakeMeleeDamage
{
public:
	FVehicle_Server_TakeMeleeDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVehicleAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UVehicleAttachment(ptr_addr);
	}
	float GetdamageAmount() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSentryGlitchingPartInfo
{
public:
	FSentryGlitchingPartInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsGlitching() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetNextUpdateTime() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSentryCombatBehaviorMode
{
public:
	FSentryCombatBehaviorMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCombatVariationWeights[5]() {
		return memory.read<float>(m_addr + 0);
	}
	float GetGrenadeLaunchVariationWeights[3]() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSentryMeleeAttackDescription
{
public:
	FSentryMeleeAttackDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetAttackAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	float GetEnemyAngleMin() {
		return memory.read<float>(m_addr + 8);
	}
	float GetEnemyAngleMax() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEndSectionName
{
public:
	FGetEndSectionName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerUsedItem
{
public:
	FServerUsedItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	int32_t GetQuantity() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetUsage() {
		return memory.read<int32_t>(m_addr + 12);
	}
	float GetusageWeight() {
		return memory.read<float>(m_addr + 16);
	}
	uint8_t  GetCraftingType() {
		return memory.read<uint8_t >(m_addr + 20);
	}
	bool GetSpawnHere() {
		return memory.read<bool>(m_addr + 21);
	}

private:
	std::uint64_t m_addr = 0;
};class FPriceUpdateData
{
public:
	FPriceUpdateData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSkillEventWeapon
{
public:
	FSkillEventWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetWeaponCategory() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkillEventWeaponClearedMalfunction
{
public:
	FSkillEventWeaponClearedMalfunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getmalfunction() {
		return memory.read<uint8_t >(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkillEventWeaponFireShot
{
public:
	FSkillEventWeaponFireShot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetOwningFishingRod
{
public:
	FGetOwningFishingRod(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AFishingRod GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AFishingRod(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkillRecord
{
public:
	FSkillRecord(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetID() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetExperiencePoints() {
		return memory.read<float>(m_addr + 4);
	}
	uint8_t  GetLevel() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	int8_t Getcounter() {
		return memory.read<int8_t>(m_addr + 9);
	}
	struct TArray<char> GetSkillSpecificData() {
		return memory.read<struct TArray<char>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSliderWithLabelAndNumberStyle
{
public:
	FSliderWithLabelAndNumberStyle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateBrush GetFocusBackgroundImage() {
		return memory.read<struct FSlateBrush>(m_addr + 0);
	}
	struct FSliderWithLabelAndNumberTextStyle GetLabelText() {
		return memory.read<struct FSliderWithLabelAndNumberTextStyle>(m_addr + 136);
	}
	struct FSliderWithLabelAndNumberTextStyle GetNumberText() {
		return memory.read<struct FSliderWithLabelAndNumberTextStyle>(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};class FChangePace
{
public:
	FChangePace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getpace() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSliderWithLabelAndNumberTextStyle
{
public:
	FSliderWithLabelAndNumberTextStyle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateFontInfo GetFont() {
		return memory.read<struct FSlateFontInfo>(m_addr + 0);
	}
	struct FLinearColor GetColorAndOpacity() {
		return memory.read<struct FLinearColor>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLeader
{
public:
	FGetLeader(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetReturnValue() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsClimbingWindow
{
public:
	FIsClimbingWindow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartLocationDescription
{
public:
	FStartLocationDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetTypeFlags() {
		return memory.read<char>(m_addr + 0);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	bool GetIsDisabled() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetSwingSpeedLevel
{
public:
	FServer_SetSwingSpeedLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetshouldPlaySwingMontageEndSection() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCompassSkillParametersPerSkillLevel
{
public:
	FCompassSkillParametersPerSkillLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetCompassSkillLevel() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnFishingAttachmentDestroyed
{
public:
	FOnFishingAttachmentDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnInnerDoorUnlockedDelegate
{
public:
	FOnInnerDoorUnlockedDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxVehicleEngineBlockHealth
{
public:
	FGetMaxVehicleEngineBlockHealth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConZFontRow
{
public:
	FConZFontRow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateFontInfo GetFont() {
		return memory.read<struct FSlateFontInfo>(m_addr + 8);
	}
	struct FString GetDescription() {
		return memory.read<struct FString>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemFirstPersonUpperBodyAnimationsData
{
public:
	FItemFirstPersonUpperBodyAnimationsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetStandIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace1D GetStandWalk() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UBlendSpace1D GetStandWalkLimping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UBlendSpace1D GetStandJog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UBlendSpace1D GetStandJogLimping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UAnimSequenceBase GetStandRun() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetCrouchIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UBlendSpace1D GetCrouchWalk() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UBlendSpace1D GetCrouchWalkLimping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UBlendSpace1D(ptr_addr);
	}
	struct UAnimSequenceBase GetProneIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAreCirclesIntersecting
{
public:
	FAreCirclesIntersecting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetcenterA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetradiusA() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector2D GetcenterB() {
		return memory.read<struct FVector2D>(m_addr + 12);
	}
	float GetradiusB() {
		return memory.read<float>(m_addr + 20);
	}
	bool GetonlyEdge() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 25);
	}

private:
	std::uint64_t m_addr = 0;
};class FHandsPoseCorrections
{
public:
	FHandsPoseCorrections(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetRightHand() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetRightFist() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetRightFistInCombatMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetRightHandToIdleBlendAlpha() {
		return memory.read<float>(m_addr + 24);
	}
	struct UAnimSequenceBase GetLeftHand() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetLeftFist() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetLeftFistInCombatMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetLeftHandToIdleBlendAlpha() {
		return memory.read<float>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTurnInPlaceBlendAlpha
{
public:
	FGetTurnInPlaceBlendAlpha(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTrailActive
{
public:
	FGetTrailActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FObjectiveItem
{
public:
	FObjectiveItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AItem GetItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTeamDeathmatchParameters
{
public:
	FTeamDeathmatchParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetRoundScoreLimit() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetAreaRestrictionInterval() {
		return memory.read<float>(m_addr + 4);
	}
	float GetAreaRestrictionDuration() {
		return memory.read<float>(m_addr + 8);
	}
	float GetAreaRestrictionStep() {
		return memory.read<float>(m_addr + 12);
	}
	float GetBarrierHeatUpDuration() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleWeaponAimingStanceTransitionCurves
{
public:
	FVehicleWeaponAimingStanceTransitionCurves(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct UCurveFloat GetSupportedYawAngles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTeleportRepData
{
public:
	FTeleportRepData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetRequestID() {
		return memory.read<char>(m_addr + 0);
	}
	bool GetIsInProgress() {
		return memory.read<bool>(m_addr + 1);
	}
	struct TWeakObjectPtr<AActor> GetSubject() {
		return memory.read<struct TWeakObjectPtr<AActor>>(m_addr + 4);
	}
	struct FVector GetTargetLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FRotator GetTargetRotation() {
		return memory.read<struct FRotator>(m_addr + 24);
	}
	struct FTeleportUserDataReplicator GetUserDataReplicator() {
		return memory.read<struct FTeleportUserDataReplicator>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FThrowingAnimationSet
{
public:
	FThrowingAnimationSet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetPlayerLongThrowMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPlayerLongThrowLoopMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPlayerShortThrowMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPlayerThrowbackMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTireSurfaceAudioEntry
{
public:
	FTireSurfaceAudioEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetSoundGroup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct TArray<char EPhysicalSurface> GetRelatedPhysicalSurfaces() {
		return memory.read<struct TArray<char EPhysicalSurface>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FTournamentStats
{
public:
	FTournamentStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	struct FString GetPlayerName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool Getonline() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetAlive() {
		return memory.read<bool>(m_addr + 25);
	}
	int32_t GetFamePoints() {
		return memory.read<int32_t>(m_addr + 28);
	}
	int32_t GetKills() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetDeaths() {
		return memory.read<int32_t>(m_addr + 36);
	}
	struct FDateTime GetLastDeathTime() {
		return memory.read<struct FDateTime>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDistanceSquaredToClosestPlayerPawnOrSpectator
{
public:
	FGetDistanceSquaredToClosestPlayerPawnOrSpectator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWorld GetWorld() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UWorld(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FProcess
{
public:
	FProcess(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCraftingRecipeParams GetParams() {
		return memory.read<struct FCraftingRecipeParams>(m_addr + 0);
	}
	struct UCraftingResult GetResult() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UCraftingResult(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddHardSpawnPoint
{
public:
	FAddHardSpawnPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetholeDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}
	struct AKillBoxSpawnPoint GetSpawner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AKillBoxSpawnPoint(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTournamentParameters
{
public:
	FTournamentParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetColorText
{
public:
	FGetColorText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetColor() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FTraderDropdownMenuEntry
{
public:
	FTraderDropdownMenuEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetTitle() {
		return memory.read<struct FText>(m_addr + 0);
	}
	int32_t GetIndentationLevel() {
		return memory.read<int32_t>(m_addr + 24);
	}
	struct FGameplayTagContainer GetTradeCategories() {
		return memory.read<struct FGameplayTagContainer>(m_addr + 32);
	}
	struct UUserWidget GetRelatedCategoryButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UUserWidget(ptr_addr);
	}
	struct UPanelWidget GetPanelToOpenOnClick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UPanelWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTraderLocationMarker
{
public:
	FTraderLocationMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetMarkerType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPendingTraderPersonalityDataHelperStruct
{
public:
	FPendingTraderPersonalityDataHelperStruct(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTraderPersonalityDataAsset GetPersonality() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UTraderPersonalityDataAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTradeablesResponseData
{
public:
	FTradeablesResponseData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FTradeableClassDataOverrideReplicationHelper
{
public:
	FTradeableClassDataOverrideReplicationHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FOnTextCommitted
{
public:
	FOnTextCommitted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	char ETextCommit GetCommitMethod() {
		return memory.read<char ETextCommit>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FPerTraderOverrideDataHelper
{
public:
	FPerTraderOverrideDataHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FTradeableOverrideData
{
public:
	FTradeableOverrideData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FTrapTriggerParams
{
public:
	FTrapTriggerParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetTriggeredActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetDeltaTime() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FExecute
{
public:
	FExecute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Farming_SetWeedIntensity
{
public:
	FServer_Farming_SetWeedIntensity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGarden GetGarden() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGarden(ptr_addr);
	}
	int32_t GetSlotId() {
		return memory.read<int32_t>(m_addr + 8);
	}
	float GetIntensity() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumberOfActiveParticipants
{
public:
	FGetNumberOfActiveParticipants(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUsableObjectiveItem
{
public:
	FUsableObjectiveItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AItem GetItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanExecute
{
public:
	FCanExecute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUserProfileAuthorityInfo
{
public:
	FUserProfileAuthorityInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetIp() {
		return memory.read<struct FString>(m_addr + 16);
	}
	int32_t GetResponsePort() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetGameplayPort() {
		return memory.read<int32_t>(m_addr + 36);
	}
	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 40);
	}
	struct FString GetAuthToken() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FUserServerHistoryItem
{
public:
	FUserServerHistoryItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetHost() {
		return memory.read<struct FString>(m_addr + 16);
	}
	int32_t GetPort() {
		return memory.read<int32_t>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentBatterySimulationData
{
public:
	FVehicleAttachmentBatterySimulationData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCurrentCharge() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHandleNameChange
{
public:
	FHandleNameChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	char ETextCommit GetCommitMethod() {
		return memory.read<char ETextCommit>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleServiceItemSlot
{
public:
	FVehicleServiceItemSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetItemLocationSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetAttachPointSocketName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FGameplayTag GetServiceTag() {
		return memory.read<struct FGameplayTag>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FInsertCartridgeIntoMagazine
{
public:
	FInsertCartridgeIntoMagazine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeaponAttachmentMagazine Getmagazine() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeaponAttachmentMagazine(ptr_addr);
	}
	struct AAmmunitionItem Getammo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AAmmunitionItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Farming_PlantAPlant
{
public:
	FServer_Farming_PlantAPlant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner Getplanter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct AGarden GetGarden() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AGarden(ptr_addr);
	}
	int32_t GetSlot() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct UPlantSpecies Getspecies() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UPlantSpecies(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentDoorSetup
{
public:
	FVehicleAttachmentDoorSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetOpenRotator() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FTransform GetPrisonerTransformToInteract() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct UAnimMontage GetPrisonerUnmountedOpenMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPrisonerUnmountedCloseMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPrisonerMountedOpenMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPrisonerMountedCloseMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentEngineBlockSimulationData
{
public:
	FVehicleAttachmentEngineBlockSimulationData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetState() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetIgnitionDurationMultiplier() {
		return memory.read<float>(m_addr + 12);
	}
	float GetIgnitionFailureChance() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetShouldApplyTorque() {
		return memory.read<bool>(m_addr + 20);
	}
	float GetCurrentRpm() {
		return memory.read<float>(m_addr + 24);
	}
	float GetLoad() {
		return memory.read<float>(m_addr + 28);
	}
	float GetCurrentFuelCapacity() {
		return memory.read<float>(m_addr + 32);
	}
	float GetTargetTemperature() {
		return memory.read<float>(m_addr + 36);
	}
	float GetCurrentTemperature() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentEngineBlockSetup
{
public:
	FVehicleAttachmentEngineBlockSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetAccelerationCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetTorqueCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UCurveFloat(ptr_addr);
	}
	float GetRpmMax() {
		return memory.read<float>(m_addr + 16);
	}
	float GetRpmLimiter() {
		return memory.read<float>(m_addr + 20);
	}
	float GetRpmIdle() {
		return memory.read<float>(m_addr + 24);
	}
	float GetRpmRise() {
		return memory.read<float>(m_addr + 28);
	}
	float GetRpmFall() {
		return memory.read<float>(m_addr + 32);
	}
	float GetFuelCapacity() {
		return memory.read<float>(m_addr + 36);
	}
	UGameResourceType GetFuelResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UGameResourceType(ptr_addr);
	}
	struct UCurveFloat GetFuelConsumptionToRpmCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UCurveFloat(ptr_addr);
	}
	float GetFuelFillingBaseDuration() {
		return memory.read<float>(m_addr + 56);
	}
	float GetFuelDrainingBaseDuration() {
		return memory.read<float>(m_addr + 60);
	}
	float GetFillingDurationPerFuelAmountFilled() {
		return memory.read<float>(m_addr + 64);
	}
	float GetDrainingDurationPerFuelAmountDrained() {
		return memory.read<float>(m_addr + 68);
	}
	float GetExperienceAwardedPerFuelAmountFilled() {
		return memory.read<float>(m_addr + 72);
	}
	float GetExperienceAwardedPerFuelAmountDrained() {
		return memory.read<float>(m_addr + 76);
	}
	struct UAnimMontage GetPrisonerFillingFuelMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetPrisonerDrainingFuelMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAkAudioEvent GetStartFillingFuelAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopFillingFuelAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStartFillingFuelWithReplenishableResourceAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopFillingFuelWithReplenishableResourceAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStartDrainingFuelAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopDrainingFuelAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct FVector GetReplenishableFillSourceOverlapBoxExtent() {
		return memory.read<struct FVector>(m_addr + 144);
	}
	float GetIgnitionBatteryDrainPerSecond() {
		return memory.read<float>(m_addr + 156);
	}
	struct UAkAudioEvent GetRunningAudioEventStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRunningAudioEventStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetRTPCRpmMaxMultiplier() {
		return memory.read<float>(m_addr + 176);
	}
	float GetRTPCRpmMinMultiplier() {
		return memory.read<float>(m_addr + 180);
	}
	float GetRTPCRpmMultiplier() {
		return memory.read<float>(m_addr + 184);
	}
	float GetRTPCRpmMultiplierReverse() {
		return memory.read<float>(m_addr + 188);
	}
	float GetWorkingTemperature() {
		return memory.read<float>(m_addr + 192);
	}
	float GetMaxTemperature() {
		return memory.read<float>(m_addr + 196);
	}
	struct UCurveFloat GetCoolantRatioToTemperatureRiseCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UCurveFloat(ptr_addr);
	}
	float GetIgnitionDuration() {
		return memory.read<float>(m_addr + 208);
	}
	struct UAkAudioEvent GetIgnitionAudioEventStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetIgnitionAudioEventStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetIgnitionSuccessAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetStallingDuration() {
		return memory.read<float>(m_addr + 240);
	}
	float GetStallingRecoveryChance() {
		return memory.read<float>(m_addr + 244);
	}
	struct UAkAudioEvent GetStallingAudioEventStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStallingAudioEventStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetRemovedAudioEventStart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentGearboxSetup
{
public:
	FVehicleAttachmentGearboxSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVehicleGearSetup> GetGears() {
		return memory.read<struct TArray<struct FVehicleGearSetup>>(m_addr + 0);
	}
	bool GetIsAutomatic() {
		return memory.read<bool>(m_addr + 16);
	}
	float GetGearChangeDelay() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleGearSetup
{
public:
	FVehicleGearSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetGearUpRatio() {
		return memory.read<float>(m_addr + 8);
	}
	float GetGearDownRatio() {
		return memory.read<float>(m_addr + 12);
	}
	float GetGearRatio() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDamageAdjacentAttachment
{
public:
	FDamageAdjacentAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamagePropagationMultiplier() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRecentServers
{
public:
	FGetRecentServers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FUserServerHistoryItem> GetReturnValue() {
		return memory.read<struct TArray<struct FUserServerHistoryItem>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddLoadingWidget
{
public:
	FAddLoadingWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULoadingScreen GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ULoadingScreen(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentMeshSetup
{
public:
	FVehicleAttachmentMeshSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetShouldCreate() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetShouldCreateOnServer() {
		return memory.read<bool>(m_addr + 1);
	}
	struct FSoftObjectPath GetMesh() {
		return memory.read<struct FSoftObjectPath>(m_addr + 8);
	}
	UAnimInstance GetAnimationBlueprintClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return UAnimInstance(ptr_addr);
	}
	bool GetRefPoseAttach() {
		return memory.read<bool>(m_addr + 40);
	}
	struct FTransform GetOffset() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	float GetMass() {
		return memory.read<float>(m_addr + 96);
	}
	bool GetShouldWeld() {
		return memory.read<bool>(m_addr + 100);
	}
	bool GetSimulatePhysics() {
		return memory.read<bool>(m_addr + 101);
	}
	bool GetEnableGravity() {
		return memory.read<bool>(m_addr + 102);
	}
	bool GetApplyImpulseOnDamage() {
		return memory.read<bool>(m_addr + 103);
	}
	bool GetCastShadow() {
		return memory.read<bool>(m_addr + 104);
	}
	bool GetVisibility() {
		return memory.read<bool>(m_addr + 105);
	}
	bool GetShouldNotifyRigidBodyCollision() {
		return memory.read<bool>(m_addr + 106);
	}
	bool GetCanEverAffectNavigation() {
		return memory.read<bool>(m_addr + 107);
	}
	char ECollisionEnabled GetCollisionEnabled() {
		return memory.read<char ECollisionEnabled>(m_addr + 108);
	}
	struct FName GetCollisionProfileName() {
		return memory.read<struct FName>(m_addr + 112);
	}
	bool GetShouldRegisterHit() {
		return memory.read<bool>(m_addr + 120);
	}
	struct UPhysicalMaterial GetPhysicalMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UPhysicalMaterial(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientEffectData
{
public:
	FClientEffectData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FVehicleBaseTickFunction
{
public:
	FVehicleBaseTickFunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FCanMemberDemoteRank
{
public:
	FCanMemberDemoteRank(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	uint8_t  GetRank() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleCorpseBurningParticles
{
public:
	FVehicleCorpseBurningParticles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem GetParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleSystem(ptr_addr);
	}
	struct FTransform GetParticlesTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct FHeatSourceParameters GetDEPRECATED_HeatSourceParameters() {
		return memory.read<struct FHeatSourceParameters>(m_addr + 64);
	}
	struct FDbIntegerId GetDEPRECATED_HeatSourceId() {
		return memory.read<struct FDbIntegerId>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleForcePushParams
{
public:
	FVehicleForcePushParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInteractionName() {
		return memory.read<struct FText>(m_addr + 0);
	}
	float GetActionDuration() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetIsRadialImpulse() {
		return memory.read<bool>(m_addr + 28);
	}
	struct FVector GetImpulse() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehiclePartDescription
{
public:
	FVehiclePartDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameplayTag GetPartType() {
		return memory.read<struct FGameplayTag>(m_addr + 0);
	}
	float Gethealth() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleAttachmentSpawnData
{
public:
	FVehicleAttachmentSpawnData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetVehicleMileageMin() {
		return memory.read<float>(m_addr + 0);
	}
	float GetSpawningChance() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FTestingOnly_DirectDamage
{
public:
	FTestingOnly_DirectDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetDamage() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleServiceRequest_InstallAttachment
{
public:
	FVehicleServiceRequest_InstallAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FVehicleWeaponAimingStanceData
{
public:
	FVehicleWeaponAimingStanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVehicleWeaponAimingStanceTransitionMontages> GetStanceTransitionMontages() {
		return memory.read<struct TArray<struct FVehicleWeaponAimingStanceTransitionMontages>>(m_addr + 0);
	}
	struct TArray<struct FVehicleWeaponAimingStanceTransitionCurves> GetSupportedAnglesForTransition() {
		return memory.read<struct TArray<struct FVehicleWeaponAimingStanceTransitionCurves>>(m_addr + 16);
	}
	struct FVehicleWeaponAimingFirstPersonData GetFirstPerson() {
		return memory.read<struct FVehicleWeaponAimingFirstPersonData>(m_addr + 32);
	}
	struct FVehicleWeaponAimingThirdPersonData GetThirdPerson() {
		return memory.read<struct FVehicleWeaponAimingThirdPersonData>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ReceiveCustomZoneData
{
public:
	FNetMulticast_ReceiveCustomZoneData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCustomZoneConfiguration GetglobalConfiguration() {
		return memory.read<struct FCustomZoneConfiguration>(m_addr + 0);
	}
	struct TArray<struct FCustomZoneConfiguration> Getconfigurations() {
		return memory.read<struct TArray<struct FCustomZoneConfiguration>>(m_addr + 64);
	}
	struct TArray<struct FCustomZoneRegion> GetRegions() {
		return memory.read<struct TArray<struct FCustomZoneRegion>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleThirdPersonWeaponTypeData
{
public:
	FVehicleThirdPersonWeaponTypeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetWeaponType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool GetalwaysIgnorePreMountAimOffsets() {
		return memory.read<bool>(m_addr + 1);
	}
	struct FBasePoseAimOffsetPair GetIdlePoseAndAimOffset[2]() {
		return memory.read<struct FBasePoseAimOffsetPair>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleWeaponAimingFirstPersonData
{
public:
	FVehicleWeaponAimingFirstPersonData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFirstPersonViewParameters GetViewParameters() {
		return memory.read<struct FFirstPersonViewParameters>(m_addr + 0);
	}
	struct FVector GetLocationOffset() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct UCurveVector GetLocationOffsetByYaw() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UCurveVector(ptr_addr);
	}
	struct UCurveVector GetLocationOffsetByPitch() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UCurveVector(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAnimalKilled
{
public:
	FOnAnimalKilled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAnimal2 GetAnimal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAnimal2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleWeaponAimingStanceTransitionMontages
{
public:
	FVehicleWeaponAimingStanceTransitionMontages(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct TArray<struct FWeaponTypeMontage> GetWeaponTypeMontages() {
		return memory.read<struct TArray<struct FWeaponTypeMontage>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponTypeMontage
{
public:
	FWeaponTypeMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetWeaponType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}
	struct UCurveFloat GetSupportedYawAngles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleTireEffectProperties
{
public:
	FVehicleTireEffectProperties(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetTireLocalOffset() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWashItemData
{
public:
	FWashItemData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AItem GetCleanItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AItem(ptr_addr);
	}
	int32_t GetWashItemUsage() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateRepData
{
public:
	FNetMulticast_UpdateRepData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetRepData() {
		return memory.read<uint32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleMaterialParameterDescription
{
public:
	FVehicleMaterialParameterDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetMinValue() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMaxValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleImpactEffects
{
public:
	FVehicleImpactEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetHitImpulseThreshold() {
		return memory.read<float>(m_addr + 0);
	}
	struct UParticleSystem GetParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UParticleSystem(ptr_addr);
	}
	struct FVector GetParticlesScale() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UAkAudioEvent(ptr_addr);
	}
	UMatineeCameraShake GetCameraShake() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UMatineeCameraShake(ptr_addr);
	}
	float GetCameraShakeScale() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAchievementsManagerServer
{
public:
	FGetAchievementsManagerServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAchievementsManagerServer GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAchievementsManagerServer(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleExhaustEffects
{
public:
	FVehicleExhaustEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVehicleExhaustParticles> GetParticles() {
		return memory.read<struct TArray<struct FVehicleExhaustParticles>>(m_addr + 0);
	}
	float GetThrottleImpulseMinValue() {
		return memory.read<float>(m_addr + 16);
	}
	float GetThrottleImpulseMaxValue() {
		return memory.read<float>(m_addr + 20);
	}
	float GetThrottleImpulseSpeedTermMaxValue() {
		return memory.read<float>(m_addr + 24);
	}
	float GetThrottleImpulseAttackDuration() {
		return memory.read<float>(m_addr + 28);
	}
	float GetThrottleImpulseSustainDuration() {
		return memory.read<float>(m_addr + 32);
	}
	float GetThrottleImpulseReleaseDuration() {
		return memory.read<float>(m_addr + 36);
	}
	float GetParticlesDestructionDelay() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleDamagedEffectsParameters
{
public:
	FVehicleDamagedEffectsParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatRange GetHealthRatioRange() {
		return memory.read<struct FFloatRange>(m_addr + 0);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct UParticleSystem GetParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent GetStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAkAudioEvent(ptr_addr);
	}
	float GetDeactivationDelay() {
		return memory.read<float>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPenaltyCountdownVisibility
{
public:
	FGetPenaltyCountdownVisibility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleSpawnerMarker
{
public:
	FVehicleSpawnerMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct UVehicleGroupSpawningPreset GetVehicleGroupSpawningPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UVehicleGroupSpawningPreset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetBowStateData
{
public:
	FServer_SetBowStateData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWeaponBowStateDataReplicated GetState() {
		return memory.read<struct FWeaponBowStateDataReplicated>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleSpawnPointData
{
public:
	FVehicleSpawnPointData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetSpawnTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct TArray<struct UVehiclePreset> GetVehicleSpawnPresets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct UVehiclePreset>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVersion
{
public:
	FVersion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMajor() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetMinor() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetBuild() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetRevision() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_PlayCountdownAnnouncement
{
public:
	FMulticast_PlayCountdownAnnouncement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClassesArray
{
public:
	FClassesArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UObject> GetClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<UObject>(ptr_addr);
	}
	struct TArray<UObject> GetProhibitedClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMessageStruct
{
public:
	FMessageStruct(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 24);
	}
	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponBowArmsShake
{
public:
	FWeaponBowArmsShake(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetThirdPerson[3]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetFirstPerson[3]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponBowStateDataReplicated
{
public:
	FWeaponBowStateDataReplicated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetBowDrawPercentage() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetHoldTimeInFullDraw() {
		return memory.read<float>(m_addr + 4);
	}
	uint8_t  GetWeaponBowState() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponBowDrawData
{
public:
	FWeaponBowDrawData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetPlayingAnimations
{
public:
	FGetPlayingAnimations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterActionAnimationDescription GetReturnValue() {
		return memory.read<struct FCharacterActionAnimationDescription>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClearMalfunctionData
{
public:
	FClearMalfunctionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetShouldClearMalfunction() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FBodyWeaponAnimation GetAnimations() {
		return memory.read<struct FBodyWeaponAnimation>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponMalfunctionProbabilityCurves
{
public:
	FWeaponMalfunctionProbabilityCurves(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve GetProbabilityCurve[7]() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWaitTimeInSeconds
{
public:
	FGetWaitTimeInSeconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeaponCheckAmmoData
{
public:
	FWeaponCheckAmmoData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetActionSequenceClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultistageRandomRoll
{
public:
	FMultistageRandomRoll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatInterval Get_valueRange() {
		return memory.read<struct FFloatInterval>(m_addr + 0);
	}
	bool Get_shouldWrapValue() {
		return memory.read<bool>(m_addr + 8);
	}
	struct TArray<struct FRandomRollStage> Get_baseValueRollStages() {
		return memory.read<struct TArray<struct FRandomRollStage>>(m_addr + 16);
	}
	bool Get_isVarianceEnabled() {
		return memory.read<bool>(m_addr + 32);
	}
	struct FFloatInterval Get_varianceRollInterval() {
		return memory.read<struct FFloatInterval>(m_addr + 36);
	}
	struct FFloatInterval Get_varianceTargetInterval() {
		return memory.read<struct FFloatInterval>(m_addr + 44);
	}
	float Get_varianceTargetInterpSpeed() {
		return memory.read<float>(m_addr + 52);
	}
	int32_t Get_baseValueStageToSetWhenForcingBaseValue() {
		return memory.read<int32_t>(m_addr + 100);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_PlaySoundOnClients
{
public:
	FNetMulticast_PlaySoundOnClients(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetSoundToPlay() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool Getforce() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_PlayAnnouncementToParticipant
{
public:
	FMulticast_PlayAnnouncementToParticipant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct UAkAudioEvent GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeatherReplicatedStateSnapshot
{
public:
	FWeatherReplicatedStateSnapshot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FWorldEventDrawData
{
public:
	FWorldEventDrawData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FZombieCombatStanceAnimations
{
public:
	FZombieCombatStanceAnimations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetRunStartAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetRunLoopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetRunStopAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FZombieRelaxedStanceVariation2
{
public:
	FZombieRelaxedStanceVariation2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FZombieRelaxedStanceAnimations GetAnimations() {
		return memory.read<struct FZombieRelaxedStanceAnimations>(m_addr + 0);
	}
	float GetWalkAcceleration() {
		return memory.read<float>(m_addr + 8);
	}
	float GetWalkDeceleration() {
		return memory.read<float>(m_addr + 12);
	}
	float GetWalkSpeed() {
		return memory.read<float>(m_addr + 16);
	}
	float GetWalkSpeedInAnimation() {
		return memory.read<float>(m_addr + 20);
	}
	float GetWalkTurnRate() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FZombieRagdollAutoRecovery
{
public:
	FZombieRagdollAutoRecovery(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetTimespan() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorComponentByName
{
public:
	FGetActorComponentByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct UActorComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanBeExecuted
{
public:
	FCanBeExecuted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct FString GetreasonIfNot() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnGift
{
public:
	FSpawnGift(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FExecuteInteractionOnServer
{
public:
	FExecuteInteractionOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetinteractionItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	uint8_t  GetInteraction() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	struct FServerCraftableItem GetCraftableItem() {
		return memory.read<struct FServerCraftableItem>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanInterruptDialogue
{
public:
	FCanInterruptDialogue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_BroadcastTrackedItemAmount
{
public:
	FClient_BroadcastTrackedItemAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetcurrentAmount() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFailObjective
{
public:
	FFailObjective(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetforceFail() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateLoadout
{
public:
	FCreateLoadout(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AItem Getprimary() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AItem(ptr_addr);
	}
	AItem Getsecondary() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return AItem(ptr_addr);
	}
	AItem Gettertiary() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return AItem(ptr_addr);
	}
	struct TArray<AItem> Getoutfit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<AItem>(ptr_addr);
	}
	struct TArray<AItem> Getsupport() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<AItem>(ptr_addr);
	}
	struct UPrisonerLoadout Getloadout() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPrisonerLoadout(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetObjectiveState
{
public:
	FSetObjectiveState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool Getsilent() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTabMenuOpenedHandler
{
public:
	FOnTabMenuOpenedHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GettabMode() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnPropellerHit
{
public:
	FOnPropellerHit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetHitComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FVector GetNormalImpulse() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayAnimation
{
public:
	FPlayAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACharacter(ptr_addr);
	}
	float GetPlayRate() {
		return memory.read<float>(m_addr + 8);
	}
	struct FName GetstartSection() {
		return memory.read<struct FName>(m_addr + 12);
	}
	bool GetassignCallbacks() {
		return memory.read<bool>(m_addr + 20);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateHandlingParametersOnClient
{
public:
	FUpdateHandlingParametersOnClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetWheelSteeringLerpSpeedMultiplier() {
		return memory.read<float>(m_addr + 0);
	}
	float GetengineIgnitionDurationMultiplier() {
		return memory.read<float>(m_addr + 4);
	}
	float GetengineIgnitionFailureChance() {
		return memory.read<float>(m_addr + 8);
	}
	float GetgearboxGearChangeDelayMultiplier() {
		return memory.read<float>(m_addr + 12);
	}
	float GetgearboxGearUpRatioMultiplier() {
		return memory.read<float>(m_addr + 16);
	}
	float GetgearboxGearDownRatioMultiplier() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetAmmoCount
{
public:
	FNetMulticast_SetAmmoCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClosestPrisoner
{
public:
	FClosestPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPackBoolsIntoUint8
{
public:
	FPackBoolsIntoUint8(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<bool> GetB() {
		return memory.read<struct TArray<bool>>(m_addr + 0);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMode
{
public:
	FGetMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldPlayParticleEffectForItem
{
public:
	FShouldPlayParticleEffectForItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnBaseElementDestroyed
{
public:
	FOnBaseElementDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetBaseElementId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCooking_Server_StopCooking
{
public:
	FCooking_Server_StopCooking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSlotId() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIntAttribute
{
public:
	FGetIntAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStringAttribute
{
public:
	FGetStringAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasAttribute
{
public:
	FHasAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBaseName
{
public:
	FGetBaseName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFloatAttribute
{
public:
	FSetFloatAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAkRTPCValue
{
public:
	FGetAkRTPCValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetRTPC() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetOutValue() {
		return memory.read<float>(m_addr + 8);
	}
	uint8_t  GetoutValueType() {
		return memory.read<uint8_t >(m_addr + 12);
	}
	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCharacterPainSeveritySwitchName
{
public:
	FGetCharacterPainSeveritySwitchName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCharacterPainSeveritySwitchValue
{
public:
	FGetCharacterPainSeveritySwitchValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanStartAttack
{
public:
	FCanStartAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_OnDetonate
{
public:
	FMulticast_OnDetonate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetzeroBasedLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEnvironmentSwitchName
{
public:
	FGetEnvironmentSwitchName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEnvironmentSwitchValue
{
public:
	FGetEnvironmentSwitchValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGenderSwitchName
{
public:
	FGetGenderSwitchName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetImpactSeveritySwitchName
{
public:
	FGetImpactSeveritySwitchName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetDisplayBrightnessMultiplier
{
public:
	FServer_SetDisplayBrightnessMultiplier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaterialSwitchName
{
public:
	FGetMaterialSwitchName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMotionIntensitySwitchValue
{
public:
	FGetMotionIntensitySwitchValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPercentage
{
public:
	FSetPercentage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPercentage() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMovementPaceSwitchName
{
public:
	FGetMovementPaceSwitchName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMovementPaceSwitchValue
{
public:
	FGetMovementPaceSwitchValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPostAkAudioEvent
{
public:
	FPostAkAudioEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetakEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	bool GetbStopWhenAttachedToDestroyed() {
		return memory.read<bool>(m_addr + 16);
	}
	struct FString GetEventName() {
		return memory.read<struct FString>(m_addr + 24);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FPostAndWaitForEndOfAkEvent
{
public:
	FPostAndWaitForEndOfAkEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetakEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	bool GetbStopWhenAttachedToDestroyed() {
		return memory.read<bool>(m_addr + 16);
	}
	struct TArray<struct FAkExternalSourceInfo> GetExternalSources() {
		return memory.read<struct TArray<struct FAkExternalSourceInfo>>(m_addr + 24);
	}
	struct FString GetEventName() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FLatentActionInfo GetLatentInfo() {
		return memory.read<struct FLatentActionInfo>(m_addr + 56);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopAkActor
{
public:
	FStopAkActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCraftItemOnServer
{
public:
	FCraftItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FServerCraftableItem GetCraftableItem() {
		return memory.read<struct FServerCraftableItem>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetModularMarkerNameOptions
{
public:
	FGetModularMarkerNameOptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> GetReturnValue() {
		return memory.read<struct TArray<struct FName>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSpawnRotationForLocation
{
public:
	FGetSpawnRotationForLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FFinalize
{
public:
	FFinalize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UCraftingResult GetResult() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UCraftingResult(ptr_addr);
	}
	struct UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCurrentText
{
public:
	FSetCurrentText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleSpawningManager2
{
public:
	FGetVehicleSpawningManager2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AVehicleSpawningManager2 GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AVehicleSpawningManager2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnResourceObjectDeactivated
{
public:
	FOnResourceObjectDeactivated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UActorComponent GetcontainerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnUserLogin
{
public:
	FOnUserLogin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartAction_Multicast
{
public:
	FStartAction_Multicast(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRepActionData GetnewAction() {
		return memory.read<struct FRepActionData>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnUserLogout
{
public:
	FOnUserLogout(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCapsuleComponent_OnComponentHit
{
public:
	FCapsuleComponent_OnComponentHit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetHitComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FVector GetNormalImpulse() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsFlying
{
public:
	FGetIsFlying(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDraggedItemPostRotated
{
public:
	FOnDraggedItemPostRotated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemWidget2 GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UItemWidget2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsPerched
{
public:
	FGetIsPerched(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsTakingOff
{
public:
	FGetIsTakingOff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldShowChangeDurationInfo
{
public:
	FShouldShowChangeDurationInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FChat_Client_UpdateSquadArgumentCompletionCache
{
public:
	FChat_Client_UpdateSquadArgumentCompletionCache(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> Getcompletions() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanBeRemovedIfAttachedToWeapon
{
public:
	FCanBeRemovedIfAttachedToWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_PlayEffects
{
public:
	FMulticast_PlayEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetzeroBasedLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSpeed
{
public:
	FGetSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSkeletalMeshWhenAttached
{
public:
	FGetSkeletalMeshWhenAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMesh GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStaticMeshWhenAttached
{
public:
	FGetStaticMeshWhenAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSwitchActiveMission
{
public:
	FSwitchActiveMission(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AMission GetmissionClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AMission(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWeaponMalfunctionProbabilityForMalfunctionEvent
{
public:
	FGetWeaponMalfunctionProbabilityForMalfunctionEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	uint8_t  GetmalfunctionEvent() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	struct FWeaponMalfunctionProbability GetReturnValue() {
		return memory.read<struct FWeaponMalfunctionProbability>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAimOffsetBlendSpaceTP
{
public:
	FGetAimOffsetBlendSpaceTP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBlendSpace GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBlendSpace(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBlockIdleAnimationFP
{
public:
	FGetBlockIdleAnimationFP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDatabaseConnection
{
public:
	FGetDatabaseConnection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDbConnection GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDbConnection(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBlockIdleAnimationTP
{
public:
	FGetBlockIdleAnimationTP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEnterCombatModeMontage
{
public:
	FGetEnterCombatModeMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIdleToBlockBlendDuration
{
public:
	FGetIdleToBlockBlendDuration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLeaveCombatModeMontage
{
public:
	FGetLeaveCombatModeMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindTeleportSpotInArea
{
public:
	FFindTeleportSpotInArea(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}
	float GetMinRadius() {
		return memory.read<float>(m_addr + 32);
	}
	float GetMaxRadius() {
		return memory.read<float>(m_addr + 36);
	}
	int32_t GetnumIterationsPerRadius() {
		return memory.read<int32_t>(m_addr + 40);
	}
	int32_t GetnumIterationsPerSlice() {
		return memory.read<int32_t>(m_addr + 44);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrimaryIdleAnimationFP
{
public:
	FGetPrimaryIdleAnimationFP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStaminaMultiplier
{
public:
	FGetStaminaMultiplier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetexcessGearWeight() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnMontageEnded
{
public:
	FOnMontageEnded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	bool Getinterrupted() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTiredIdleAnimationTP
{
public:
	FGetTiredIdleAnimationTP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoxComponent_OnComponentEndOverlap
{
public:
	FBoxComponent_OnComponentEndOverlap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetactivatedComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	int32_t GetOtherBodyIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddBruise
{
public:
	FAddBruise(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getzone() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateBuildingData
{
public:
	FNetMulticast_UpdateBuildingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FString GetruntimeId() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FBuildingData GetBuildingData() {
		return memory.read<struct FBuildingData>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHidePenaltyForCharacter
{
public:
	FGetHidePenaltyForCharacter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDropToLocation
{
public:
	FDropToLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetEndLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetfallingTime() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisoner_Die
{
public:
	FPrisoner_Die(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTimerWidget
{
public:
	FSetTimerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKillBoxTimerWidget GettimerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UKillBoxTimerWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRep_TurnedOn
{
public:
	FOnRep_TurnedOn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetoldValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetTurnedOn
{
public:
	FServer_SetTurnedOn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUseFuelUsagePerHourMultiplierWhenActive
{
public:
	FSetUseFuelUsagePerHourMultiplierWhenActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInsertCartridgeIntoWeapon
{
public:
	FInsertCartridgeIntoWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	struct AAmmunitionItem Getammo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AAmmunitionItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsCharacterOwnerMountedAsDriver
{
public:
	FIsCharacterOwnerMountedAsDriver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnActionAnimNotify
{
public:
	FOnActionAnimNotify(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetnotifyType() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveAttachmentFromWeapon
{
public:
	FRemoveAttachmentFromWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	struct AWeaponAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AWeaponAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FHolsterWeapon
{
public:
	FHolsterWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicle_Server_ProvidePrisonerWithDamage
{
public:
	FVehicle_Server_ProvidePrisonerWithDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct AActor GetTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct FCollisionPointDamageEvent GetDamageEvent() {
		return memory.read<struct FCollisionPointDamageEvent>(m_addr + 16);
	}
	struct AController GetInstigator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 368);
		return struct AController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanExecuteUsingData
{
public:
	FCanExecuteUsingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWeaponReloadData GetData() {
		return memory.read<struct FWeaponReloadData>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FEnd
{
public:
	FEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetRegular() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FExecuteUsingData
{
public:
	FExecuteUsingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWeaponReloadData GetData() {
		return memory.read<struct FWeaponReloadData>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActiveAnimationBody
{
public:
	FGetActiveAnimationBody(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldShowAviationHud
{
public:
	FShouldShowAviationHud(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnSliderValueUpdated
{
public:
	FOnSliderValueUpdated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActiveAnimationWeapon
{
public:
	FGetActiveAnimationWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Farming_KillPlant
{
public:
	FServer_Farming_KillPlant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGarden GetGarden() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGarden(ptr_addr);
	}
	int32_t GetSlotId() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIgnoreChamberBulletOnEnd
{
public:
	FIgnoreChamberBulletOnEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHighlightPartially
{
public:
	FHighlightPartially(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getpercent() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCheckExistenceOnServer
{
public:
	FCheckExistenceOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMeshComponent GetMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMeshComponent(ptr_addr);
	}
	struct FMeshInstanceId GetInstanceId() {
		return memory.read<struct FMeshInstanceId>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTextColor
{
public:
	FSetTextColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHandleValueChanged
{
public:
	FHandleValueChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnResourceComponentActivated
{
public:
	FOnResourceComponentActivated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UActorComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UActorComponent(ptr_addr);
	}
	bool GetwasReset() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FHandleSkillSliderValueChanged
{
public:
	FHandleSkillSliderValueChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCCSkillSliderWidget GetSlider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCCSkillSliderWidget(ptr_addr);
	}
	uint8_t  GetAttribute() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FTurnTowardLocation
{
public:
	FTurnTowardLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTextNameChanged
{
public:
	FOnTextNameChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTextNameCommittedInFacePanel
{
public:
	FOnTextNameCommittedInFacePanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetNewValue() {
		return memory.read<struct FText>(m_addr + 0);
	}
	char ETextCommit GetCommitMethod() {
		return memory.read<char ETextCommit>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentVehicleGear
{
public:
	FGetCurrentVehicleGear(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTextNameCommittedInSkillsPanel
{
public:
	FOnTextNameCommittedInSkillsPanel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetNewValue() {
		return memory.read<struct FText>(m_addr + 0);
	}
	char ETextCommit GetCommitMethod() {
		return memory.read<char ETextCommit>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FDeleteCharacter
{
public:
	FDeleteCharacter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UUserProfile GetUserProfile() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UUserProfile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdatePreviewPrisonersInternal
{
public:
	FUpdatePreviewPrisonersInternal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UUserProfile Getprofile() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UUserProfile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMissionScheduler
{
public:
	FGetMissionScheduler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AMissionScheduler GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AMissionScheduler(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnSpawnedPawnDestroyed
{
public:
	FOnSpawnedPawnDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetDestroyedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIntimidate
{
public:
	FIntimidate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct AActor Getfoe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnSpawnTriggerDestroyed
{
public:
	FOnSpawnTriggerDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetDestroyedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnCharacter
{
public:
	FSpawnCharacter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetSpawnTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	APawn GetPawnClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return APawn(ptr_addr);
	}
	bool GetIgnoreLimit() {
		return memory.read<bool>(m_addr + 56);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 57);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnCharacterGroup
{
public:
	FSpawnCharacterGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSpawnCharacterGroupInfo GetInfo() {
		return memory.read<struct FSpawnCharacterGroupInfo>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIsHighlighted
{
public:
	FSetIsHighlighted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanChangeName
{
public:
	FCanChangeName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_TriggerLockNeutralizationFailurePenalty
{
public:
	FNetMulticast_TriggerLockNeutralizationFailurePenalty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GettriggeringActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_BeginGiftAssetsLoading
{
public:
	FClient_BeginGiftAssetsLoading(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SpawnGiftItemEffects
{
public:
	FClient_SpawnGiftItemEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct UParticleSystem GetParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UParticleSystem(ptr_addr);
	}
	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreate
{
public:
	FCreate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameEventBase GetgameEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGameEventBase(ptr_addr);
	}
	UGameEventRoundInfoWidget GetroundInfoClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UGameEventRoundInfoWidget(ptr_addr);
	}
	UGameEventTeamHeaderWidget GetteamHeaderClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UGameEventTeamHeaderWidget(ptr_addr);
	}
	UGameEventParticipantStatsWidget GetstatClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return UGameEventParticipantStatsWidget(ptr_addr);
	}
	struct UGameEventScoreboardWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UGameEventScoreboardWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindMultiplayerCacheProfile
{
public:
	FFindMultiplayerCacheProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetServerIp() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetServerResponsePort() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct UUserProfile GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UUserProfile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnHit
{
public:
	FOnHit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetHitComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FVector GetNormalImpulse() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateFromInfo
{
public:
	FCreateFromInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCircularMenuSegmentInfo GetInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCircularMenuSegmentInfo(ptr_addr);
	}
	struct UCircularMenuSegmentWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UCircularMenuSegmentWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnBorderCrossingStateChanged
{
public:
	FOnBorderCrossingStateChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	uint8_t  Getpenalty() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCrateA
{
public:
	FGetCrateA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADropZoneCrate GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADropZoneCrate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTooltipText
{
public:
	FGetTooltipText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsTooltipEnabled
{
public:
	FIsTooltipEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleBrakeAmount
{
public:
	FGetVehicleBrakeAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateVisualParameters
{
public:
	FUpdateVisualParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetnumberOfSegments() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetOffset() {
		return memory.read<float>(m_addr + 8);
	}
	float GetmiddleCutoffPercentage() {
		return memory.read<float>(m_addr + 12);
	}
	float GetSize() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSegmentIdForCoordinatesAndLayer
{
public:
	FGetSegmentIdForCoordinatesAndLayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetCoordinates() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	int32_t GetLayer() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveMemberFromAllSquads
{
public:
	FRemoveMemberFromAllSquads(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	bool GetdestroySquadIfEmpty() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetName
{
public:
	FGetName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsStandAloneOrOwningClient
{
public:
	FIsStandAloneOrOwningClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInitializeLayer
{
public:
	FInitializeLayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLayer() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetOffset() {
		return memory.read<float>(m_addr + 4);
	}
	struct TArray<struct UCircularMenuSegmentInfo> GetSegmentInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UCircularMenuSegmentInfo>(ptr_addr);
	}
	int32_t GetcountParameterOverride() {
		return memory.read<int32_t>(m_addr + 24);
	}
	bool GetcreateAdditionalDummySegments() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTitleText
{
public:
	FSetTitleText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInitializeThrowingLayer
{
public:
	FInitializeThrowingLayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLayer() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetOffset() {
		return memory.read<float>(m_addr + 4);
	}
	struct TArray<struct UCircularMenuSegmentThrowingInfo> GetSegmentInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UCircularMenuSegmentThrowingInfo>(ptr_addr);
	}
	int32_t GetcountParameterOverride() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetHours
{
public:
	FSetHours(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetHours() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_NotifyObjectiveDone
{
public:
	FServer_NotifyObjectiveDone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AObjective GetObjective() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AObjective(ptr_addr);
	}
	uint8_t  GetObjectiveState() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAlert
{
public:
	FAlert(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FChargeAttackFoe
{
public:
	FChargeAttackFoe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor Getfoe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClimbWindow
{
public:
	FClimbWindow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWindowInfo GetWindowInfo() {
		return memory.read<struct FWindowInfo>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 208);
	}

private:
	std::uint64_t m_addr = 0;
};class FForceRoattionRate
{
public:
	FForceRoattionRate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetRotationRate() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAttacking
{
public:
	FIsAttacking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ForceSetAnimalRotation
{
public:
	FNetMulticast_ForceSetAnimalRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSit
{
public:
	FSit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnResourceComponentDeactivated
{
public:
	FOnResourceComponentDeactivated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UActorComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTurn
{
public:
	FTurn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetdirectionLeft() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCancelTimeLeft
{
public:
	FGetCancelTimeLeft(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRep_ConsumptionRate
{
public:
	FOnRep_ConsumptionRate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetpreviousConsumptionRate() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnElementInteracted
{
public:
	FOnElementInteracted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	uint8_t  GetinteractionType() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	struct FInteractionData GetInteractionData() {
		return memory.read<struct FInteractionData>(m_addr + 16);
	}
	struct FBaseInteractionParams GetBaseInteractionParams() {
		return memory.read<struct FBaseInteractionParams>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ChangeFlagOwner
{
public:
	FNetMulticast_ChangeFlagOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FDbIntegerId GetoldOwnerProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 8);
	}
	struct FDbIntegerId GetnewOwnerProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEffectOverTimeDealer
{
public:
	FGetEffectOverTimeDealer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AEffectOverTimeDealer GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AEffectOverTimeDealer(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ClearBaseOwnerPlayerId
{
public:
	FNetMulticast_ClearBaseOwnerPlayerId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FConZBaseInteractionData GetbaseData() {
		return memory.read<struct FConZBaseInteractionData>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_DestroyElement
{
public:
	FNetMulticast_DestroyElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FConZBaseElementIdentifier GetElementIdentifier() {
		return memory.read<struct FConZBaseElementIdentifier>(m_addr + 8);
	}
	uint8_t  Getreason() {
		return memory.read<uint8_t >(m_addr + 40);
	}
	bool Getcascade() {
		return memory.read<bool>(m_addr + 41);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_InteractWithElement
{
public:
	FNetMulticast_InteractWithElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	uint8_t  GetinteractionType() {
		return memory.read<uint8_t >(m_addr + 4);
	}
	struct FConZBaseInteractionData GetbaseData() {
		return memory.read<struct FConZBaseInteractionData>(m_addr + 8);
	}
	struct FConZBaseElementInteractionData GetbaseElementData() {
		return memory.read<struct FConZBaseElementInteractionData>(m_addr + 32);
	}
	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFacialHairLength
{
public:
	FGetFacialHairLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetBaseOwnerPlayerId
{
public:
	FNetMulticast_SetBaseOwnerPlayerId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FConZBaseInteractionData GetbaseData() {
		return memory.read<struct FConZBaseInteractionData>(m_addr + 8);
	}
	int64_t GetPlayerId() {
		return memory.read<int64_t>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetDebugMode
{
public:
	FNetMulticast_SetDebugMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	uint8_t  Getmode() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SpawnBaseElement
{
public:
	FNetMulticast_SpawnBaseElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct FConZBaseData GetbaseData() {
		return memory.read<struct FConZBaseData>(m_addr + 64);
	}
	UObject GetElementClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return UObject(ptr_addr);
	}
	int64_t GetElementID() {
		return memory.read<int64_t>(m_addr + 392);
	}
	int64_t GetOwnerUserProfileId() {
		return memory.read<int64_t>(m_addr + 400);
	}
	int64_t GetCreatorPrisonerId() {
		return memory.read<int64_t>(m_addr + 408);
	}
	bool GetIsOwnedByPlayer() {
		return memory.read<bool>(m_addr + 416);
	}
	struct FBaseElementSpawnParams GetParams() {
		return memory.read<struct FBaseElementSpawnParams>(m_addr + 424);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_TransferOwnership
{
public:
	FNetMulticast_TransferOwnership(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FDbIntegerId GetoldId() {
		return memory.read<struct FDbIntegerId>(m_addr + 8);
	}
	struct FDbIntegerId GetnewId() {
		return memory.read<struct FDbIntegerId>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateTradeableClassMapHelperOverrides
{
public:
	FNetMulticast_UpdateTradeableClassMapHelperOverrides(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FTradeableClassDataOverrideReplicationHelper GetoverrideUpdates() {
		return memory.read<struct FTradeableClassDataOverrideReplicationHelper>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateTradeablePriceMultiplierFactor
{
public:
	FNetMulticast_UpdateTradeablePriceMultiplierFactor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GettradeablePriceMultiplierFactor() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOnlineMembers
{
public:
	FGetOnlineMembers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FConZSquadMember> GetReturnValue() {
		return memory.read<struct TArray<struct FConZSquadMember>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentUser
{
public:
	FGetCurrentUser(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UUser GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UUser(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FHandleNetworkFailure
{
public:
	FHandleNetworkFailure(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWorld GetWorld() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UWorld(ptr_addr);
	}
	struct UNetDriver GetNetDriver() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UNetDriver(ptr_addr);
	}
	char ENetworkFailure GetFailureType() {
		return memory.read<char ENetworkFailure>(m_addr + 16);
	}
	struct FString GeterrorString() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FForceParticipantStatsRep
{
public:
	FForceParticipantStatsRep(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsTransitioningMap
{
public:
	FIsTransitioningMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnPostLoadMap
{
public:
	FOnPostLoadMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWorld GetloadedWorld() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UWorld(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartMultiplayerGame
{
public:
	FStartMultiplayerGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetIp() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetGameplayPort() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetResponsePort() {
		return memory.read<int32_t>(m_addr + 20);
	}
	struct FString GetAuthToken() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnLocalPrisonerSpawned
{
public:
	FOnLocalPrisonerSpawned(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClimbOffLadder
{
public:
	FClimbOffLadder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAIDetectionTimerHandler
{
public:
	FGetAIDetectionTimerHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAIDetectionTimerHandler GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAIDetectionTimerHandler(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBaseManager
{
public:
	FGetBaseManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZBaseManager GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZBaseManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCharacterSpawningManager
{
public:
	FGetCharacterSpawningManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACharacterSpawningManager GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACharacterSpawningManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddElectricalDoor
{
public:
	FAddElectricalDoor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetelectricalDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGlobalAquaticLifeManager
{
public:
	FGetGlobalAquaticLifeManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGlobalAquaticLifeManager GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGlobalAquaticLifeManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGlobalGuardedZoneManager
{
public:
	FGetGlobalGuardedZoneManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGlobalGuardedZoneManager GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGlobalGuardedZoneManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHeatSourceManager
{
public:
	FGetHeatSourceManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AHeatSourceManager GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AHeatSourceManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetItemSpawningManager
{
public:
	FGetItemSpawningManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItemSpawningManager GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItemSpawningManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMissionLevelManager
{
public:
	FGetMissionLevelManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AMissionLevelManager GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AMissionLevelManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetReportingManager
{
public:
	FGetReportingManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AReportingManager GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AReportingManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSurvivalStatsHandler
{
public:
	FGetSurvivalStatsHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ASurvivalStatsHandler GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ASurvivalStatsHandler(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FKickPlayer
{
public:
	FKickPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZPlayerController GetPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZPlayerController(ptr_addr);
	}
	struct FString GetKickReason() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FCopyLocationAndRotationToClipboard
{
public:
	FCopyLocationAndRotationToClipboard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddMemberToSquad
{
public:
	FAddMemberToSquad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	struct FString GetUserId() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct AConZSquad GetSquad() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct AConZSquad(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateSquad
{
public:
	FCreateSquad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetsquadId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	struct AConZSquad GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AConZSquad(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCustomMapBorder
{
public:
	FGetCustomMapBorder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACustomMapBorder GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACustomMapBorder(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetColours
{
public:
	FSetColours(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameEventTeamColours Getcolours() {
		return memory.read<struct FGameEventTeamColours>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNotify_EnableCapsuleCollision
{
public:
	FAnimNotify_EnableCapsuleCollision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimNotify GetNotify() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimNotify(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRegisteredPrisoners
{
public:
	FGetRegisteredPrisoners(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct APrisoner> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct APrisoner>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSquadForPrisoner
{
public:
	FGetSquadForPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct AConZSquad GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AConZSquad(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTournament
{
public:
	FGetTournament(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ATournament GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ATournament(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsTournamentInProgress
{
public:
	FIsTournamentInProgress(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_RemoveFromPrisonerKillRegistry
{
public:
	FMulticast_RemoveFromPrisonerKillRegistry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetTarget() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveMemberFromSquad
{
public:
	FRemoveMemberFromSquad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	struct AConZSquad GetSquad() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AConZSquad(ptr_addr);
	}
	bool GetdestroySquadIfEmpty() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddMember
{
public:
	FAddMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	struct FString GetUserId() {
		return memory.read<struct FString>(m_addr + 8);
	}
	uint8_t  GetRank() {
		return memory.read<uint8_t >(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTeamKills
{
public:
	FGetTeamKills(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanMemberEditInformation
{
public:
	FCanMemberEditInformation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanMemberEditMessage
{
public:
	FCanMemberEditMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanMemberPromoteRank
{
public:
	FCanMemberPromoteRank(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	uint8_t  GetRank() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanMemberRecruitMembers
{
public:
	FCanMemberRecruitMembers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Farming_ApplyPesticide
{
public:
	FServer_Farming_ApplyPesticide(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGarden GetGarden() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGarden(ptr_addr);
	}
	int32_t GetSlot() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxAllowedMemberCount
{
public:
	FGetMaxAllowedMemberCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMemberCount
{
public:
	FGetMemberCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetincludePending() {
		return memory.read<bool>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMemberLockAccessibility
{
public:
	FGetMemberLockAccessibility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetKillBoxEntrance
{
public:
	FSetKillBoxEntrance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor Getentrance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMembers
{
public:
	FGetMembers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FConZSquadMember> GetReturnValue() {
		return memory.read<struct TArray<struct FConZSquadMember>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSuccessorForMember
{
public:
	FGetSuccessorForMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	struct FDbIntegerId GetReturnValue() {
		return memory.read<struct FDbIntegerId>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasMember
{
public:
	FHasMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	bool GetincludePending() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FInviteMember
{
public:
	FInviteMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAnyMemberInDanger
{
public:
	FIsAnyMemberInDanger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsMemberCountValid
{
public:
	FIsMemberCountValid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetincludePending() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FPromoteMember
{
public:
	FPromoteMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTest_ProcessAdminCommand
{
public:
	FTest_ProcessAdminCommand(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetcommandText() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveMember
{
public:
	FRemoveMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_StartMeleeAttack
{
public:
	FServer_StartMeleeAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMeleeAction GetAction() {
		return memory.read<struct FMeleeAction>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMemberRank
{
public:
	FSetMemberRank(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetUserProfileId() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	uint8_t  GetRank() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFontSize
{
public:
	FSetFontSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetFontSize() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTextInternal
{
public:
	FSetTextInternal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FQueryWaterSplines
{
public:
	FQueryWaterSplines(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FWaterQueryResult GetReturnValue() {
		return memory.read<struct FWaterQueryResult>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateContentWidget
{
public:
	FCreateContentWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UUserWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnValueChanged
{
public:
	FOnValueChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_ClonePoseLocally
{
public:
	FMulticast_ClonePoseLocally(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter GetsourceCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSwapIngredient
{
public:
	FSwapIngredient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetwidgetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetorderIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAdditionalIngredientSelected
{
public:
	FOnAdditionalIngredientSelected(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCraftingAvailableItemWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCraftingAvailableItemWidget(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDeaths
{
public:
	FGetDeaths(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FExaminePrisonerOnServer
{
public:
	FExaminePrisonerOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEnemyKills
{
public:
	FGetEnemyKills(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHeadshots
{
public:
	FGetHeadshots(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScore
{
public:
	FGetScore(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FChat_Client_MuteUser
{
public:
	FChat_Client_MuteUser(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetUserId() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetUserName() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSuicides
{
public:
	FGetSuicides(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCallInParticipant
{
public:
	FCallInParticipant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCancelEvent
{
public:
	FCancelEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getforce() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanJoin
{
public:
	FCanJoin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	int32_t GetpreferredTeam() {
		return memory.read<int32_t>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRep_Data
{
public:
	FOnRep_Data(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInventoryContainerSelectionRepData GetOldData() {
		return memory.read<struct FInventoryContainerSelectionRepData>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanSchedule
{
public:
	FCanSchedule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConvertScoreToFame
{
public:
	FConvertScoreToFame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsCocked
{
public:
	FGetIsCocked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDeclareWinningTeam
{
public:
	FDeclareWinningTeam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBorder
{
public:
	FGetBorder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameEventBorder GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGameEventBorder(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugMode
{
public:
	FDebugMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDatabaseEventId
{
public:
	FGetDatabaseEventId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetReturnValue() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEventState
{
public:
	FGetEventState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMiniScoreboardWidget
{
public:
	FGetMiniScoreboardWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameEventScoreboardWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UGameEventScoreboardWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumberOfTeams
{
public:
	FGetNumberOfTeams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetParameters
{
public:
	FGetParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGameEventParameters GetReturnValue() {
		return memory.read<struct FGameEventParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPossibleLoadout
{
public:
	FGetPossibleLoadout(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct TArray<struct UItemSelection> GetprimaryWeapons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UItemSelection>(ptr_addr);
	}
	struct TArray<struct UItemSelection> GetsecondaryWeapons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<struct UItemSelection>(ptr_addr);
	}
	struct TArray<struct UItemSelection> GettertiaryWeapons() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<struct UItemSelection>(ptr_addr);
	}
	struct TArray<struct UItemSelection> Getoutfits() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct UItemSelection>(ptr_addr);
	}
	struct TArray<struct UItemSelection> Getsupport() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct UItemSelection>(ptr_addr);
	}
	struct TArray<struct UItemSelection> GetGear() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct TArray<struct UItemSelection>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScoreboardWidget
{
public:
	FGetScoreboardWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTournamentScoreboardWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTournamentScoreboardWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTravelToDestination
{
public:
	FTravelToDestination(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetDestination() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStatusTime
{
public:
	FGetStatusTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTeamMemberCount
{
public:
	FGetTeamMemberCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetTeamIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_PlayAnnouncementToTeam
{
public:
	FMulticast_PlayAnnouncementToTeam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetTeamIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct UAkAudioEvent GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsTeamFull
{
public:
	FIsTeamFull(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetTeamIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWeaponAimOffsetOnGameThread
{
public:
	FGetWeaponAimOffsetOnGameThread(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetprisonerAimOffsetType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct UBlendSpace GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UBlendSpace(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FKickParticipant
{
public:
	FKickParticipant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOtherButtonVisibility
{
public:
	FGetOtherButtonVisibility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNotify_DisableCapsuleCollision
{
public:
	FAnimNotify_DisableCapsuleCollision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimNotify GetNotify() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimNotify(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_PlayAnnouncementToAllParticipants
{
public:
	FMulticast_PlayAnnouncementToAllParticipants(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_ShowEventNotification
{
public:
	FMulticast_ShowEventNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FString GetauxString() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPresentSpawnScreen
{
public:
	FPresentSpawnScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventory_Server_AutoAddInventoryElementToContainer
{
public:
	FInventory_Server_AutoAddInventoryElementToContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}
	struct FInv2021_InventoryElementRepHelper GetElement() {
		return memory.read<struct FInv2021_InventoryElementRepHelper>(m_addr + 8);
	}
	struct UObject GetdestinationContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSameTeam
{
public:
	FSameTeam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetprisonerA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct APrisoner GetprisonerB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APrisoner(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdmin_Client_SendRespawnTimes
{
public:
	FAdmin_Client_SendRespawnTimes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetRespawnTime() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetrespawnTimeReset() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNumberOfTeams
{
public:
	FSetNumberOfTeams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTeamScore
{
public:
	FSetTeamScore(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetTeamIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetScore() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_DropItemAt
{
public:
	FServer_DropItemAt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFlagA
{
public:
	FGetFlagA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACTFFlag GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACTFFlag(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnParticipantDied
{
public:
	FOnParticipantDied(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner Getvictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct FDamageEvent GetDamageEvent() {
		return memory.read<struct FDamageEvent>(m_addr + 8);
	}
	struct AController GeteventInstigator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct AController(ptr_addr);
	}
	struct AActor Getcauser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCTFParameters
{
public:
	FSetCTFParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCTFParameters GetParams() {
		return memory.read<struct FCTFParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateBorder
{
public:
	FCreateBorder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameEventBorder GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGameEventBorder(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Farming_AddFertilizer
{
public:
	FServer_Farming_AddFertilizer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGarden GetGarden() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGarden(ptr_addr);
	}
	int32_t GetSlot() {
		return memory.read<int32_t>(m_addr + 8);
	}
	bool GetisIndustrial() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnVicinityContainerInitialized
{
public:
	FOnVicinityContainerInitialized(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TScriptInterface<IInventoryNode> GetItem() {
		return memory.read<struct TScriptInterface<IInventoryNode>>(m_addr + 0);
	}
	struct UItemWidget2 GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UItemWidget2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCallOnSliderMoved
{
public:
	FCallOnSliderMoved(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateFromValueInternal2
{
public:
	FUpdateFromValueInternal2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxCountOnScreen() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMaxValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddConfiguration
{
public:
	FAddConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCustomZoneConfiguration Getconfiguration() {
		return memory.read<struct FCustomZoneConfiguration>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectWorldToScreen
{
public:
	FProjectWorldToScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct FVector GetWorldPosition() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector2D GetSize() {
		return memory.read<struct FVector2D>(m_addr + 20);
	}
	struct FVector2D GetscreenPosition() {
		return memory.read<struct FVector2D>(m_addr + 28);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHandlingMethodDescription
{
public:
	FGetHandlingMethodDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetMethod() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleHasEngine
{
public:
	FVehicleHasEngine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultZoneState
{
public:
	FGetDefaultZoneState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHandleLocationChange
{
public:
	FHandleLocationChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	char ETextCommit GetCommitMethod() {
		return memory.read<char ETextCommit>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_PlayFiringAnimation
{
public:
	FNetMulticast_PlayFiringAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetammoIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetdryFire() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCheckWeaponDescReferences
{
public:
	FCheckWeaponDescReferences(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContext() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsArmed
{
public:
	FIsArmed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTriggerEvent
{
public:
	FOnTriggerEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTriggeredEventData GeteventData() {
		return memory.read<struct FTriggeredEventData>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDeflateWheelTire
{
public:
	FDeflateWheelTire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetWheelIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEngineLoad
{
public:
	FGetEngineLoad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDeathmatchParameters
{
public:
	FGetDeathmatchParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDeathmatchParameters GetReturnValue() {
		return memory.read<struct FDeathmatchParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_ReportUnachievedAchievements
{
public:
	FServer_ReportUnachievedAchievements(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct TArray<struct FString> GetachievementsIds() {
		return memory.read<struct TArray<struct FString>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Farming_CreateGarden
{
public:
	FServer_Farming_CreateGarden(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}
	struct FIntPoint GetSize() {
		return memory.read<struct FIntPoint>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Farming_SetGrowthState
{
public:
	FServer_Farming_SetGrowthState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGarden GetGarden() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AGarden(ptr_addr);
	}
	int32_t GetSlotId() {
		return memory.read<int32_t>(m_addr + 8);
	}
	uint8_t  Getstage() {
		return memory.read<uint8_t >(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetShowAvatarAnimation
{
public:
	FGetShowAvatarAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartAvatarAnimation
{
public:
	FStartAvatarAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetAnimationState() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddDoorPartInfo
{
public:
	FAddDoorPartInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetcloasedPosition() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetOpenedPosition() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct USceneComponent GetmoveableComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct USceneComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ToggleSmokeParticles
{
public:
	FNetMulticast_ToggleSmokeParticles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetshouldPlay() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSelfDestruct
{
public:
	FSelfDestruct(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetshouldSpawnItem() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLevelUpAnimation
{
public:
	FGetLevelUpAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCaptureProgress
{
public:
	FGetCaptureProgress(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCargo
{
public:
	FGetCargo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADropZoneCargo GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADropZoneCargo(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateItemContainerData
{
public:
	FNetMulticast_UpdateItemContainerData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FString GetruntimeId() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FItemContainerRepData GetItemContainerData() {
		return memory.read<struct FItemContainerRepData>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCrateB
{
public:
	FGetCrateB(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADropZoneCrate GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADropZoneCrate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDropZoneParameters
{
public:
	FGetDropZoneParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDropZoneParameters GetReturnValue() {
		return memory.read<struct FDropZoneParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSlot
{
public:
	FGetSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADropZoneSlot GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADropZoneSlot(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRangedResourceProvider_AvailableResourceAmountChanged
{
public:
	FRangedResourceProvider_AvailableResourceAmountChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URangedResourceProviderComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct URangedResourceProviderComponent(ptr_addr);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FInvokeExpansionChanged
{
public:
	FInvokeExpansionChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getmaximized() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSelectedIndex
{
public:
	FSetSelectedIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanStartFiring
{
public:
	FCanStartFiring(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTotalShells
{
public:
	FGetTotalShells(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSegmentBarNum
{
public:
	FSetSegmentBarNum(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetnumOfSegments() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetReelingAnimSequence
{
public:
	FGetReelingAnimSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFogDensity
{
public:
	FSetFogDensity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDensity() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FChangeArea
{
public:
	FChangeArea(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRadius() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector Getfocus() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOffset
{
public:
	FGetOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsActive
{
public:
	FIsActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_SetOffset
{
public:
	FMulticast_SetOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetOffset() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateStats
{
public:
	FUpdateStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRequestPlayerRanking
{
public:
	FRequestPlayerRanking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPad() {
		return memory.read<int32_t>(m_addr + 0);
	}
	uint8_t  GetorderByField() {
		return memory.read<uint8_t >(m_addr + 4);
	}
	uint8_t  GetsortOrder() {
		return memory.read<uint8_t >(m_addr + 5);
	}

private:
	std::uint64_t m_addr = 0;
};class FRequestTopPlayers
{
public:
	FRequestTopPlayers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 0);
	}
	uint8_t  GetorderByField() {
		return memory.read<uint8_t >(m_addr + 4);
	}
	uint8_t  GetsortOrder() {
		return memory.read<uint8_t >(m_addr + 5);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_UpdateMissionsData
{
public:
	FClient_UpdateMissionsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AMission GetmissionClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AMission(ptr_addr);
	}
	struct FMissionData GetMissionData() {
		return memory.read<struct FMissionData>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnEventComboBoxSelectionChanged
{
public:
	FOnEventComboBoxSelectionChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSelectedItem() {
		return memory.read<struct FString>(m_addr + 0);
	}
	char ESelectInfo GetSelectionType() {
		return memory.read<char ESelectInfo>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIndex
{
public:
	FGetIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScoreboard
{
public:
	FGetScoreboard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameEventScoreboardWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UGameEventScoreboardWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTeamIndex
{
public:
	FSetTeamIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetReservedParticipant
{
public:
	FGetReservedParticipant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FLandAtLocation
{
public:
	FLandAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetDestination() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReserveForPrisoner
{
public:
	FReserveForPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugGenerateGardensInRadius
{
public:
	FDebugGenerateGardensInRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	float GetSpread() {
		return memory.read<float>(m_addr + 16);
	}
	struct FIntPoint GetMinSize() {
		return memory.read<struct FIntPoint>(m_addr + 20);
	}
	struct FIntPoint GetMaxSize() {
		return memory.read<struct FIntPoint>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UnlockResource
{
public:
	FNetMulticast_UnlockResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FResourceNetworkGUID GetResourceGUID() {
		return memory.read<struct FResourceNetworkGUID>(m_addr + 4);
	}
	int32_t GetResourceId() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugGenerateGardensInSquare
{
public:
	FDebugGenerateGardensInSquare(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FIntPoint GetcountXY() {
		return memory.read<struct FIntPoint>(m_addr + 12);
	}
	struct FVector2D GetdistanceXY() {
		return memory.read<struct FVector2D>(m_addr + 20);
	}
	struct FIntPoint GetMinSize() {
		return memory.read<struct FIntPoint>(m_addr + 28);
	}
	struct FIntPoint GetMaxSize() {
		return memory.read<struct FIntPoint>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTrailActive
{
public:
	FSetTrailActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetActive() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SpawnGiftSpawningFinishedEffects
{
public:
	FNetMulticast_SpawnGiftSpawningFinishedEffects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UParticleSystem GetParticles() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UParticleSystem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxVehicleBatteryAmount
{
public:
	FGetMaxVehicleBatteryAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_StartLoadingAssets
{
public:
	FNetMulticast_StartLoadingAssets(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSoftObjectPath> GetAssetPaths() {
		return memory.read<struct TArray<struct FSoftObjectPath>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBP_OnCurrentLightAngleChanged
{
public:
	FBP_OnCurrentLightAngleChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBP_OnCurrentLightIntensityChanged
{
public:
	FBP_OnCurrentLightIntensityChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAttachmentDestroyed
{
public:
	FOnAttachmentDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnFishingAttachmentRemoved
{
public:
	FOnFishingAttachmentRemoved(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AFishingRod GetFishingRod() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AFishingRod(ptr_addr);
	}
	struct AFishingAttachment GetAttachment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AFishingAttachment(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetHealthPercentage
{
public:
	FSetHealthPercentage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMaxHealthPercentage
{
public:
	FSetMaxHealthPercentage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FApplyPhysicalAnimationData
{
public:
	FApplyPhysicalAnimationData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPhysicalAnimationDesc Getdesc() {
		return memory.read<struct FPhysicalAnimationDesc>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsBlendingRagdoll
{
public:
	FIsBlendingRagdoll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsCapsuleOverlapped
{
public:
	FIsCapsuleOverlapped(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInRagdoll
{
public:
	FIsInRagdoll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMoveRagdollMesh
{
public:
	FMoveRagdollMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FVector GetcurrentLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetTargetLocation() {
		return memory.read<struct FVector>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnMontageBlendingOut
{
public:
	FOnMontageBlendingOut(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	bool Getinterrupted() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWorldPosition
{
public:
	FSetWorldPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Getposition() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetZombieSoundComponent
{
public:
	FGetZombieSoundComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UZombieSoundComponent2 GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UZombieSoundComponent2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsMagazineToLoadEmpty
{
public:
	FIsMagazineToLoadEmpty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWeaponReloadData GetData() {
		return memory.read<struct FWeaponReloadData>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultInteractionForDrone
{
public:
	FGetDefaultInteractionForDrone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADrone GetDrone() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADrone(ptr_addr);
	}
	struct FInteractionQueryParameters GetParams() {
		return memory.read<struct FInteractionQueryParameters>(m_addr + 8);
	}
	struct FInteractionStruct GetReturnValue() {
		return memory.read<struct FInteractionStruct>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultInteractionForPrisoner
{
public:
	FGetDefaultInteractionForPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct FInteractionQueryParameters GetParams() {
		return memory.read<struct FInteractionQueryParameters>(m_addr + 8);
	}
	struct FInteractionStruct GetReturnValue() {
		return memory.read<struct FInteractionStruct>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInteractableName
{
public:
	FGetInteractableName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInteractions
{
public:
	FGetInteractions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UObject Getcreator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}
	struct FInteractionQueryParameters GetParams() {
		return memory.read<struct FInteractionQueryParameters>(m_addr + 16);
	}
	struct TArray<struct FInteractionStruct> GetReturnValue() {
		return memory.read<struct TArray<struct FInteractionStruct>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInteractionsWithItem
{
public:
	FGetInteractionsWithItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}
	struct TArray<struct FInteractionStruct> GetReturnValue() {
		return memory.read<struct TArray<struct FInteractionStruct>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FInteractable_WantsHealthBarVisible
{
public:
	FInteractable_WantsHealthBarVisible(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAbleToInteractWithItem
{
public:
	FIsAbleToInteractWithItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnHovered
{
public:
	FOnHovered(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FChopOnServer
{
public:
	FChopOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetchoppedObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFillWaterOnServer
{
public:
	FFillWaterOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	float GetRatio() {
		return memory.read<float>(m_addr + 8);
	}
	float GetSalinity() {
		return memory.read<float>(m_addr + 12);
	}
	UGameResourceType GetResourceType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UGameResourceType(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActualCourseAngle
{
public:
	FGetActualCourseAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsInCombatMode
{
public:
	FGetIsInCombatMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFinishExaminePrisonerOnServer
{
public:
	FFinishExaminePrisonerOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateLockHPOnClients
{
public:
	FNetMulticast_UpdateLockHPOnClients(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetLockpickable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetlockHP() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOpenItemOnServer
{
public:
	FOpenItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AFoodItem GetFoodItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AFoodItem(ptr_addr);
	}
	struct AItem GetopeningItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPickupItemOnClients
{
public:
	FPickupItemOnClients(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMeshComponent GetMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMeshComponent(ptr_addr);
	}
	struct FMeshInstanceId GetInstanceId() {
		return memory.read<struct FMeshInstanceId>(m_addr + 8);
	}
	struct UStaticMesh GetStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UStaticMesh(ptr_addr);
	}
	struct FVector GetpickupLocation() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FPickupItemOnServer
{
public:
	FPickupItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMeshComponent GetMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMeshComponent(ptr_addr);
	}
	struct FMeshInstanceId GetInstanceId() {
		return memory.read<struct FMeshInstanceId>(m_addr + 8);
	}
	struct UStaticMesh GetStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UStaticMesh(ptr_addr);
	}
	struct FVector GetpickupLocation() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	uint8_t  GetOperation() {
		return memory.read<uint8_t >(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_FindOrCreateGardenSlotMeshComponentForInteraction
{
public:
	FServer_FindOrCreateGardenSlotMeshComponentForInteraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetPlantMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FUncraftItemOnServer
{
public:
	FUncraftItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnexamineItemOnClient
{
public:
	FUnexamineItemOnClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnspawnExaminedItemsOnServer
{
public:
	FUnspawnExaminedItemsOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetdestroyItems() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUseItemOnServer
{
public:
	FUseItemOnServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}
	int32_t GetUsage() {
		return memory.read<int32_t>(m_addr + 8);
	}
	float GetusageWeight() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetEat() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveActiveInteractionWidget
{
public:
	FRemoveActiveInteractionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRep_Items
{
public:
	FOnRep_Items(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UObject> Get_oldItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInventoryNodeName
{
public:
	FGetInventoryNodeName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAnimations
{
public:
	FGetAnimations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterAndItemAnimation GetReturnValue() {
		return memory.read<struct FCharacterAndItemAnimation>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FJumpToAnimationSection
{
public:
	FJumpToAnimationSection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSection() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnLockpickDestroyed
{
public:
	FOnLockpickDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor Getlockpick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAnimNotify
{
public:
	FOnAnimNotify(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetnotifyType() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNextAnimationSection
{
public:
	FSetNextAnimationSection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSection() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetallowLoop() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNextAnimationSectionFromPrevious
{
public:
	FSetNextAnimationSectionFromPrevious(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetpreviousSection() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetNextSection() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_ApplyBaseDamageInteractionEventToZombie
{
public:
	FServer_ApplyBaseDamageInteractionEventToZombie(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AZombie2 GetZombie() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AZombie2(ptr_addr);
	}
	float GetDamage() {
		return memory.read<float>(m_addr + 8);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnStackAmountBoxTextChanged
{
public:
	FOnStackAmountBoxTextChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetnewText() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTextDataChanged
{
public:
	FOnTextDataChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTextAccepted
{
public:
	FOnTextAccepted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddGasEmitter
{
public:
	FAddGasEmitter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystemComponent GetgasEmitter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddSpawnPoint
{
public:
	FAddSpawnPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetholeDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}
	struct AKillBoxSpawnPoint GetSpawner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AKillBoxSpawnPoint(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_PlaySound
{
public:
	FNetMulticast_PlaySound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnEntranceUnlockedDelegate
{
public:
	FOnEntranceUnlockedDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDetectionField
{
public:
	FSetDetectionField(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AKillBoxDetectionField GetdetectionField() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AKillBoxDetectionField(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLaserComponent
{
public:
	FSetLaserComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMovableCollisionFieldComponent GetlaserComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMovableCollisionFieldComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMusicComponent
{
public:
	FSetMusicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkComponent GetmusicComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPanicbutton
{
public:
	FSetPanicbutton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ASwitch GetpanicButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ASwitch(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_RegisterLadderMarker
{
public:
	FNetMulticast_RegisterLadderMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FLadderMarker Getmarker() {
		return memory.read<struct FLadderMarker>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnEditTextWidgetTextAccepted
{
public:
	FOnEditTextWidgetTextAccepted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasLocks
{
public:
	FHasLocks(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTensionToolDestroyed
{
public:
	FOnTensionToolDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GettensionTool() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFillWithDefaultAmmo
{
public:
	FFillWithDefaultAmmo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBaseDamage
{
public:
	FGetBaseDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetModifiedDamage
{
public:
	FSetModifiedDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamage() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRemainingTime
{
public:
	FGetRemainingTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRandomPointWithinCircle
{
public:
	FGetRandomPointWithinCircle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetCenter() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPointWithinCircle
{
public:
	FIsPointWithinCircle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetPoint() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetcircleCenter() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	float GetcircleRadius() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FLineBoxIntersection
{
public:
	FLineBoxIntersection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetHitLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FBox GetBox() {
		return memory.read<struct FBox>(m_addr + 12);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 52);
	}
	struct FVector GetstartToEnd() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrone_OnDestroyed
{
public:
	FDrone_OnDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor Getsender() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsHoldingBlock
{
public:
	FIsHoldingBlock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Dodge
{
public:
	FServer_Dodge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMeleeAction GetAction() {
		return memory.read<struct FMeleeAction>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_EnablePendingBlockOrDodge
{
public:
	FServer_EnablePendingBlockOrDodge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCardinalDirectionFromCourseAngle
{
public:
	FGetCardinalDirectionFromCourseAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanBeAttackedByMelee
{
public:
	FCanBeAttackedByMelee(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanHoldBlock
{
public:
	FCanHoldBlock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeCharacterTemplate
{
public:
	FMakeCharacterTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterTemplate GetReturnValue() {
		return memory.read<struct FCharacterTemplate>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCheckMeleeAttackCapsuleCollision
{
public:
	FCheckMeleeAttackCapsuleCollision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCheckMeleeAttackCapsuleCollisionData GetData() {
		return memory.read<struct FCheckMeleeAttackCapsuleCollisionData>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 208);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnICUStateChanged
{
public:
	FOnICUStateChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetisCollapsed() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFoe
{
public:
	FGetFoe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMisc_Client_PostAudioEvent
{
public:
	FMisc_Client_PostAudioEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	bool GetstopWhenAttachedToDestroyed() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHitReactComponent
{
public:
	FGetHitReactComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UHitReactComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UHitReactComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetZombieMovement
{
public:
	FGetZombieMovement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UZombieMovementComponent2 GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UZombieMovementComponent2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_PlayTurnMontage
{
public:
	FNetMulticast_PlayTurnMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetturnMontage() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetturnAngle() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_StartAttack
{
public:
	FNetMulticast_StartAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetattackDescriptionIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEmblemData
{
public:
	FGetEmblemData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FConZSquadEmblem GetReturnValue() {
		return memory.read<struct FConZSquadEmblem>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRep_IsSearched
{
public:
	FOnRep_IsSearched(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetoldValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetStance
{
public:
	FServer_SetStance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_StartAttack
{
public:
	FServer_StartAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetattackDescriptionIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFoe
{
public:
	FSetFoe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartAttack
{
public:
	FStartAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn Getfoe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugNumber
{
public:
	FDrawDebugNumber(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetNumber() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FColor GetColor() {
		return memory.read<struct FColor>(m_addr + 24);
	}
	float GetSize() {
		return memory.read<float>(m_addr + 28);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 32);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 36);
	}
	bool GetautoSize() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawLine
{
public:
	FDrawLine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetLineStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetLineEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FColor GetColor() {
		return memory.read<struct FColor>(m_addr + 32);
	}
	bool GetpersistentLines() {
		return memory.read<bool>(m_addr + 36);
	}
	float GetLifeTime() {
		return memory.read<float>(m_addr + 40);
	}
	char GetDepthPriority() {
		return memory.read<char>(m_addr + 44);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetClassDefaultObject
{
public:
	FGetClassDefaultObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetObjectClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	struct UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDeveloperUsers
{
public:
	FGetDeveloperUsers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<struct FString> GetReturnValue() {
		return memory.read<struct TSet<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGameVersion
{
public:
	FGetGameVersion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLineBatcher
{
public:
	FGetLineBatcher(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetbPersistentLines() {
		return memory.read<bool>(m_addr + 8);
	}
	float GetLifeTime() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetbDepthIsForeground() {
		return memory.read<bool>(m_addr + 16);
	}
	struct ULineBatchComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct ULineBatchComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FLocalToUtcDateTime
{
public:
	FLocalToUtcDateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetLocal() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FParseTransformFromString
{
public:
	FParseTransformFromString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FParseVectorFromString
{
public:
	FParseVectorFromString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FVector GetoutVector() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FPasteLocationAndRotationFromClipboard
{
public:
	FPasteLocationAndRotationFromClipboard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FResolveObjectPathForPIE
{
public:
	FResolveObjectPathForPIE(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UObject> GetAsset() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 0);
	}
	struct UObject GetWorldContext() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UObject(ptr_addr);
	}
	struct FSoftObjectPath GetReturnValue() {
		return memory.read<struct FSoftObjectPath>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FSendChatLineToPlayer
{
public:
	FSendChatLineToPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZPlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZPlayerController(ptr_addr);
	}
	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 8);
	}
	uint8_t  GetChatType() {
		return memory.read<uint8_t >(m_addr + 24);
	}
	bool GetShouldCopyToClientClipboard() {
		return memory.read<bool>(m_addr + 25);
	}

private:
	std::uint64_t m_addr = 0;
};class FSortSkillsByLevelAndExperience
{
public:
	FSortSkillsByLevelAndExperience(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct USkill> GetSkills() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct USkill>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FUtcToLocalDateTime
{
public:
	FUtcToLocalDateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime Getutc() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCompleteObjectiveAnimation
{
public:
	FGetCompleteObjectiveAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStartObjectiveAnimation
{
public:
	FGetStartObjectiveAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanSpawn
{
public:
	FCanSpawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddToQueue
{
public:
	FAddToQueue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FDialogueInfo> GetmissionDialogue() {
		return memory.read<struct TArray<struct FDialogueInfo>>(m_addr + 0);
	}
	bool Getinterrupt() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnJournalTabModeOpened
{
public:
	FOnJournalTabModeOpened(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GettabMode() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_ShowMissionResultWidget
{
public:
	FClient_ShowMissionResultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AMission GetMission() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AMission(ptr_addr);
	}
	bool GetCompleted() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsMissionInvitationReceived
{
public:
	FIsMissionInvitationReceived(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_AcceptMissionInvitation
{
public:
	FServer_AcceptMissionInvitation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AMission GetMission() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AMission(ptr_addr);
	}
	bool Getaccepted() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SendMissionInvitation
{
public:
	FServer_SendMissionInvitation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AMissionManager Getmanager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AMissionManager(ptr_addr);
	}
	struct AMission GetMission() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AMission(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FChat_Server_BroadcastChatMessage
{
public:
	FChat_Server_BroadcastChatMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 0);
	}
	uint8_t  GetChannel() {
		return memory.read<uint8_t >(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonerHUD_OnShouldShowExtendedWidgetTooltipChanged
{
public:
	FPrisonerHUD_OnShouldShowExtendedWidgetTooltipChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInitialize
{
public:
	FInitialize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UStaticMeshComponent> GetmovableMeshes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}
	struct TArray<struct UStaticMeshComponent> GetcollisionMeshes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnLocalPrisonerHoveredActorChanged
{
public:
	FOnLocalPrisonerHoveredActorChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GethoveredActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_SendTransform
{
public:
	FMulticast_SendTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetpackedState() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SendTransform
{
public:
	FServer_SendTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetpackedState() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAuthTokenForCurrentUser
{
public:
	FGetAuthTokenForCurrentUser(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetServerIp() {
		return memory.read<struct FString>(m_addr + 8);
	}
	int32_t GetServerResponsePort() {
		return memory.read<int32_t>(m_addr + 24);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeAuthToken
{
public:
	FMakeAuthToken(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetUserId() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString Getpassword() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeAuthTokenForCurrentUser
{
public:
	FMakeAuthTokenForCurrentUser(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString Getpassword() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeAuthTokenForUser
{
public:
	FMakeAuthTokenForUser(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UUser GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UUser(ptr_addr);
	}
	struct FString Getpassword() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_RequestNotification
{
public:
	FNetMulticast_RequestNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FNotificationDescriptionReplicationHelper GetDescription() {
		return memory.read<struct FNotificationDescriptionReplicationHelper>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnPlayerReadyToPlay
{
public:
	FOnPlayerReadyToPlay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZPlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZPlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_Place
{
public:
	FServer_Place(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_UpdateState
{
public:
	FServer_UpdateState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPlaceableActorStateReplicationHelper GetState() {
		return memory.read<struct FPlaceableActorStateReplicationHelper>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGrowthPercentage
{
public:
	FGetGrowthPercentage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlantGrowthStagePercentage
{
public:
	FGetPlantGrowthStagePercentage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getgrowth() {
		return memory.read<float>(m_addr + 0);
	}
	struct UPlantSpecies Getspecies() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UPlantSpecies(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlantGrowthStageString
{
public:
	FGetPlantGrowthStageString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getgrowth() {
		return memory.read<float>(m_addr + 0);
	}
	struct UPlantSpecies Getspecies() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UPlantSpecies(ptr_addr);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_DropItem
{
public:
	FClient_DropItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_CloseDoor
{
public:
	FServer_CloseDoor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FQueueVoiceData
{
public:
	FQueueVoiceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetCompressedVoiceData() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_DestroyBaseElement
{
public:
	FServer_DestroyBaseElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetBaseId() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetElementID() {
		return memory.read<int64_t>(m_addr + 8);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_DestroyGarden
{
public:
	FServer_DestroyGarden(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	uint16_t GetgardenId() {
		return memory.read<uint16_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_OpenDoor
{
public:
	FServer_OpenDoor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SpawnAndDropItemAt
{
public:
	FServer_SpawnAndDropItemAt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UContainerItemDescriptor GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UContainerItemDescriptor(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdmin_Client_ShowSpawnedVehicles
{
public:
	FAdmin_Client_ShowSpawnedVehicles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct FString GetspawnedVehiclesInfo() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetShouldCopyToClientClipboard() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdmin_Server_TeleportTo_Location
{
public:
	FAdmin_Server_TeleportTo_Location(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZPlayerController GetController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZPlayerController(ptr_addr);
	}
	struct FTeleportRequest GetTeleportRequest() {
		return memory.read<struct FTeleportRequest>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdmin_Server_TeleportTo_VehicleLocation
{
public:
	FAdmin_Server_TeleportTo_VehicleLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZPlayerController GetController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZPlayerController(ptr_addr);
	}
	struct FTeleportRequest GetTeleportRequest() {
		return memory.read<struct FTeleportRequest>(m_addr + 8);
	}
	struct FString GetvehicleName() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseBuilding_Client_UpdateElementState
{
public:
	FBaseBuilding_Client_UpdateElementState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetareaSize() {
		return memory.read<float>(m_addr + 12);
	}
	struct TArray<struct FConZOnDemandElementData> GetData() {
		return memory.read<struct TArray<struct FConZOnDemandElementData>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseBuilding_Server_OnFlagAreaExited
{
public:
	FBaseBuilding_Server_OnFlagAreaExited(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPrisonerId
{
public:
	FSetPrisonerId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetValue() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBCULockRegistry_Client_SetClientHasActiveBCULock
{
public:
	FBCULockRegistry_Client_SetClientHasActiveBCULock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetclientHasActiveBCULock() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FChat_Client_ProcessAdminCommand
{
public:
	FChat_Client_ProcessAdminCommand(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetcommandText() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FChat_Client_SendMessageToChat
{
public:
	FChat_Client_SendMessageToChat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct AConZPlayerState GetSenderPlayerState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AConZPlayerState(ptr_addr);
	}
	uint8_t  GetChannel() {
		return memory.read<uint8_t >(m_addr + 24);
	}
	bool GetshouldCopyToClipboard() {
		return memory.read<bool>(m_addr + 25);
	}

private:
	std::uint64_t m_addr = 0;
};class FChat_Client_UnmuteUser
{
public:
	FChat_Client_UnmuteUser(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetUserId() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FChat_Server_ProcessAdminCommand
{
public:
	FChat_Server_ProcessAdminCommand(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetcommandText() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_IncreaseStat
{
public:
	FClient_IncreaseStat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct FString GetstatId() {
		return memory.read<struct FString>(m_addr + 8);
	}
	int32_t GetstatIncBy() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SendBuyErrorMessage
{
public:
	FClient_SendBuyErrorMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZPlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZPlayerController(ptr_addr);
	}
	uint8_t  GeterrorMessage() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetName
{
public:
	FSetName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SendSellErrorMessage
{
public:
	FClient_SendSellErrorMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZPlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZPlayerController(ptr_addr);
	}
	uint8_t  GeterrorMessage() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_ServerSettingsLock_ReceiveLockOwner
{
public:
	FClient_ServerSettingsLock_ReceiveLockOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetlockOwnerId() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetlockOwnerName() {
		return memory.read<struct FString>(m_addr + 16);
	}
	int32_t GetMessageIndex() {
		return memory.read<int32_t>(m_addr + 32);
	}
	bool GetlockIsMine() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_ServerSettingsSendToClient
{
public:
	FClient_ServerSettingsSendToClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetsettingIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	struct TArray<struct FString> GetSettings() {
		return memory.read<struct TArray<struct FString>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SetStat
{
public:
	FClient_SetStat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct FString GetstatId() {
		return memory.read<struct FString>(m_addr + 8);
	}
	int32_t GetStatValue() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FCooking_Server_AddFavoriteRecipe
{
public:
	FCooking_Server_AddFavoriteRecipe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetrecipeId() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCooking_Server_CreateResultItemAndAssignToPrisoner
{
public:
	FCooking_Server_CreateResultItemAndAssignToPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSlotId() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct APrisoner GetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCooking_Server_UpdateCookingSlotsFromUserSetData
{
public:
	FCooking_Server_UpdateCookingSlotsFromUserSetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCookingUtilitySlotInstance_UserSetData> GetData() {
		return memory.read<struct TArray<struct FCookingUtilitySlotInstance_UserSetData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomZones_Server_UpdateCustomZoneData
{
public:
	FCustomZones_Server_UpdateCustomZoneData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCustomZoneConfiguration GetglobalConfiguration() {
		return memory.read<struct FCustomZoneConfiguration>(m_addr + 0);
	}
	struct TArray<struct FCustomZoneConfiguration> Getconfigurations() {
		return memory.read<struct TArray<struct FCustomZoneConfiguration>>(m_addr + 64);
	}
	struct TArray<struct FCustomZoneRegion> GetRegions() {
		return memory.read<struct TArray<struct FCustomZoneRegion>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FDoor_Client_TriggerFailurePenalty
{
public:
	FDoor_Client_TriggerFailurePenalty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetruntimeId() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct AActor GettriggeringActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGrapple_Server_EndGrappleAttack
{
public:
	FGrapple_Server_EndGrappleAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter Getgrappler() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}
	struct APrisoner Getgrapplee() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APrisoner(ptr_addr);
	}
	uint8_t  GetgrappleEndType() {
		return memory.read<uint8_t >(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasOwningUser_Server_RequestStateUpdate
{
public:
	FHasOwningUser_Server_RequestStateUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStats
{
public:
	FGetStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FTournamentStats> GetReturnValue() {
		return memory.read<struct TArray<struct FTournamentStats>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHeatSourceItemComponent_Server_AdjustDial
{
public:
	FHeatSourceItemComponent_Server_AdjustDial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UContinuousFuelHeatSource GetFueledHeatSource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UContinuousFuelHeatSource(ptr_addr);
	}
	char GetdialValue() {
		return memory.read<char>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventory_Server_AddInventoryElementToContainer
{
public:
	FInventory_Server_AddInventoryElementToContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}
	struct FInv2021_InventoryElementRepHelper GetElement() {
		return memory.read<struct FInv2021_InventoryElementRepHelper>(m_addr + 8);
	}
	struct UObject GetdestinationContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UObject(ptr_addr);
	}
	struct FInv2021_InventoryPositionObjectRepHelper Getposition() {
		return memory.read<struct FInv2021_InventoryPositionObjectRepHelper>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventory_Server_AddToStack
{
public:
	FInventory_Server_AddToStack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}
	struct FInv2021_InventoryElementRepHelper GetelementToAdd() {
		return memory.read<struct FInv2021_InventoryElementRepHelper>(m_addr + 8);
	}
	struct FInv2021_InventoryElementRepHelper GetDestination() {
		return memory.read<struct FInv2021_InventoryElementRepHelper>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventory_Server_DropInventoryElementAt
{
public:
	FInventory_Server_DropInventoryElementAt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}
	struct FInv2021_InventoryElementRepHelper GetElement() {
		return memory.read<struct FInv2021_InventoryElementRepHelper>(m_addr + 8);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 52);
	}
	struct FInv2021_InventoryPositionObjectRepHelper Getposition() {
		return memory.read<struct FInv2021_InventoryPositionObjectRepHelper>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventory_Server_RemoveStacks
{
public:
	FInventory_Server_RemoveStacks(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZCharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZCharacter(ptr_addr);
	}
	struct FInv2021_InventoryElementRepHelper GettargetElement() {
		return memory.read<struct FInv2021_InventoryElementRepHelper>(m_addr + 8);
	}
	int32_t GetnumStacksToRemove() {
		return memory.read<int32_t>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FInventoryItemComponent_Server_RequestPageReplicationForController
{
public:
	FInventoryItemComponent_Server_RequestPageReplicationForController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UInventoryItemComponent GetinventoryItemComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UInventoryItemComponent(ptr_addr);
	}
	int32_t GetpageIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct AController GetController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FItemContainer_Server_ResetLockTimer
{
public:
	FItemContainer_Server_ResetLockTimer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetruntimeId() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsEnvironmentClassIndoor
{
public:
	FIsEnvironmentClassIndoor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTimeSpentFalling
{
public:
	FGetTimeSpentFalling(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoxingInPlaceTurningElapsedTimeLeft
{
public:
	FGetBoxingInPlaceTurningElapsedTimeLeft(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLockpickable_Server_SetNumTries
{
public:
	FLockpickable_Server_SetNumTries(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetLockpickable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	int32_t GetnumTries() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMisc_Server_LogKill
{
public:
	FMisc_Server_LogKill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner Getvictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct APrisoner Getkiller() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APrisoner(ptr_addr);
	}
	struct FString GetkillerUserProfileId() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisoner_Server_Die
{
public:
	FPrisoner_Server_Die(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisoner_Server_PushStaminaDrain
{
public:
	FPrisoner_Server_PushStaminaDrain(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	float GetAmountToDrain() {
		return memory.read<float>(m_addr + 8);
	}
	float GetdrainDuration() {
		return memory.read<float>(m_addr + 12);
	}
	float GetRecoveryDelay() {
		return memory.read<float>(m_addr + 16);
	}
	float GetRatioToRecover() {
		return memory.read<float>(m_addr + 20);
	}
	float GetrecoveryDuration() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FResourceLockingManager_Server_LockResource
{
public:
	FResourceLockingManager_Server_LockResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FResourceNetworkGUID GetLockOwnerGUID() {
		return memory.read<struct FResourceNetworkGUID>(m_addr + 0);
	}
	struct FResourceNetworkGUID GetResourceGUID() {
		return memory.read<struct FResourceNetworkGUID>(m_addr + 4);
	}
	int32_t GetResourceId() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FResourceLockingManager_Server_UnlockArea
{
public:
	FResourceLockingManager_Server_UnlockArea(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBox GetArea() {
		return memory.read<struct FBox>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_ServerSettingsSendToServer
{
public:
	FServer_ServerSettingsSendToServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetsettingIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	struct TArray<struct FString> GetSettings() {
		return memory.read<struct TArray<struct FString>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_InteractWithHuntingClue
{
public:
	FServer_InteractWithHuntingClue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AHuntingClue GetHuntingClue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AHuntingClue(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTabModeOpened
{
public:
	FOnTabModeOpened(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GettabMode() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_MakeNoise
{
public:
	FServer_MakeNoise(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GettargetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetLoudness() {
		return memory.read<float>(m_addr + 8);
	}
	struct APawn GetInstigator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct APawn(ptr_addr);
	}
	struct FVector GetImpactPoint() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_PlayerPurchaseTradeable
{
public:
	FServer_PlayerPurchaseTradeable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZPlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZPlayerController(ptr_addr);
	}
	struct TArray<struct FTradeableClassAndQuantity> GettradeableClassesAndQuantity() {
		return memory.read<struct TArray<struct FTradeableClassAndQuantity>>(m_addr + 8);
	}
	struct ATrader GetTrader() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct ATrader(ptr_addr);
	}
	bool GetisCashPreferred() {
		return memory.read<bool>(m_addr + 32);
	}
	float GetclientsidePlayerBasedPriceMultiplier() {
		return memory.read<float>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_PlayerSellTradeables
{
public:
	FServer_PlayerSellTradeables(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AConZPlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AConZPlayerController(ptr_addr);
	}
	struct TArray<struct UObject> Gettradeables() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UObject>(ptr_addr);
	}
	struct ATrader GetTrader() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct ATrader(ptr_addr);
	}
	bool GetplayerWantsCash() {
		return memory.read<bool>(m_addr + 32);
	}
	uint8_t  GetFlags() {
		return memory.read<uint8_t >(m_addr + 33);
	}
	float GetclientsidePlayerBasedPriceMultiplier() {
		return memory.read<float>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RequestDoorUpdate
{
public:
	FServer_RequestDoorUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ADoor GetDoor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ADoor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_ResetMission
{
public:
	FServer_ResetMission(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AMission GetmissionClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AMission(ptr_addr);
	}
	uint8_t  GetMissionType() {
		return memory.read<uint8_t >(m_addr + 8);
	}
	bool GetrestartMission() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_ServerSettingsLock_RequestLockAcquisition
{
public:
	FServer_ServerSettingsLock_RequestLockAcquisition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMessageIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SwitchActiveMission
{
public:
	FServer_SwitchActiveMission(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AMission GetmissionClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AMission(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_UnsubscribeFromUnachievedAchievements
{
public:
	FServer_UnsubscribeFromUnachievedAchievements(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct TArray<struct FString> GetachievementsIds() {
		return memory.read<struct TArray<struct FString>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_UnsubscribePlayer
{
public:
	FServer_UnsubscribePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPlayerUnsubscribeData GetPlayerUnsubscribeData() {
		return memory.read<struct FPlayerUnsubscribeData>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_UntrackMission
{
public:
	FServer_UntrackMission(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetMissionType() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkill_Server_IncreaseExperiencePoints
{
public:
	FSkill_Server_IncreaseExperiencePoints(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	USkill GetskillClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return USkill(ptr_addr);
	}
	float GetExperiencePoints() {
		return memory.read<float>(m_addr + 16);
	}
	float GetfamePointsMultiplier() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSurvivalStats_Server_HandlePlayerLogin
{
public:
	FSurvivalStats_Server_HandlePlayerLogin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTrapItem_Server_ClientAuthoritativeTriggerTrap
{
public:
	FTrapItem_Server_ClientAuthoritativeTriggerTrap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ATrapItem GetTrapItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ATrapItem(ptr_addr);
	}
	struct FTrapTriggerParams GetParams() {
		return memory.read<struct FTrapTriggerParams>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FTrapItem_Server_DisarmTrap
{
public:
	FTrapItem_Server_DisarmTrap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner Getdisarmer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct ATrapItem GetTrapItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct ATrapItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTrapItem_Server_TriggerTrap
{
public:
	FTrapItem_Server_TriggerTrap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ATrapItem GetTrapItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ATrapItem(ptr_addr);
	}
	struct FTrapTriggerParams GetParams() {
		return memory.read<struct FTrapTriggerParams>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicle_Server_ApplyImpactDamage
{
public:
	FVehicle_Server_ApplyImpactDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetVehicle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}
	float GetDamage() {
		return memory.read<float>(m_addr + 8);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 12);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicle_Server_DriverShouldBecomeOwner
{
public:
	FVehicle_Server_DriverShouldBecomeOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetVehicle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}
	struct ACharacter GetDriver() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct ACharacter(ptr_addr);
	}
	bool GetIsWorldStreamed() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicle_Server_MarkForDestruction
{
public:
	FVehicle_Server_MarkForDestruction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AVehicleBase GetVehicle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AVehicleBase(ptr_addr);
	}
	float GettimeToDestruct() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicle_Server_SetLightsCategoryStates
{
public:
	FVehicle_Server_SetLightsCategoryStates(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AVehicleBase GetVehicle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AVehicleBase(ptr_addr);
	}
	uint8_t  GetlightsCategoryStates() {
		return memory.read<uint8_t >(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicle_Server_TakeCollisionDamage
{
public:
	FVehicle_Server_TakeCollisionDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AVehicleBase GetVehicle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AVehicleBase(ptr_addr);
	}
	struct TArray<struct UVehicleAttachment> GetAttachments() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UVehicleAttachment>(ptr_addr);
	}
	struct TArray<float> GetcollisionDamages() {
		return memory.read<struct TArray<float>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBaseElementStaticMesh
{
public:
	FGetBaseElementStaticMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNotify_RemoveItemFromHands
{
public:
	FAnimNotify_RemoveItemFromHands(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimNotify GetNotify() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimNotify(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNotify_TakeItemInHands
{
public:
	FAnimNotify_TakeItemInHands(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimNotify GetNotify() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimNotify(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsRadioTurnedOn
{
public:
	FIsRadioTurnedOn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindTimeAfterJumpApex
{
public:
	FFindTimeAfterJumpApex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetAnimSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetdistanceToApex() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindTimeAtStoppingDistance
{
public:
	FFindTimeAtStoppingDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetAnimSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetstoppingDistance() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBowArmsShakeAnimationOnGameThread
{
public:
	FGetBowArmsShakeAnimationOnGameThread(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct UAnimSequenceBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoxingInPlaceTurningBlendAlpha
{
public:
	FGetBoxingInPlaceTurningBlendAlpha(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoxingInPlaceTurningDirectionBlendAlpha
{
public:
	FGetBoxingInPlaceTurningDirectionBlendAlpha(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoxingInPlaceTurningElapsedTimeRight
{
public:
	FGetBoxingInPlaceTurningElapsedTimeRight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMinValue
{
public:
	FGetMinValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoxingTurnAngle
{
public:
	FGetBoxingTurnAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCurrentVehicleGear
{
public:
	FSetCurrentVehicleGear(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFacialExpressionBlendWeightOnGameThread
{
public:
	FGetFacialExpressionBlendWeightOnGameThread(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetfacialExpression() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPenisSize
{
public:
	FGetPenisSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFacialExpressionBlendWeightOnWorkerThread
{
public:
	FGetFacialExpressionBlendWeightOnWorkerThread(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetfacialExpression() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInPlaceTurningBlendAlpha
{
public:
	FGetInPlaceTurningBlendAlpha(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddRecentServer
{
public:
	FAddRecentServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FUserServerHistoryItem GetItem() {
		return memory.read<struct FUserServerHistoryItem>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInPlaceTurningDirectionBlendAlpha
{
public:
	FGetInPlaceTurningDirectionBlendAlpha(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInPlaceTurningElapsedTimeLeft
{
public:
	FGetInPlaceTurningElapsedTimeLeft(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInPlaceTurningElapsedTimeRight
{
public:
	FGetInPlaceTurningElapsedTimeRight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsVehicleDriver
{
public:
	FGetIsVehicleDriver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLeanBlendWeights
{
public:
	FGetLeanBlendWeights(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetLeft() {
		return memory.read<float>(m_addr + 0);
	}
	float GetRight() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMultiplier() {
		return memory.read<float>(m_addr + 8);
	}
	struct UCurveFloat GetstrengthBySpeedCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocomotionStateWeight
{
public:
	FGetLocomotionStateWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetState() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLowerEyelidRotationDelta
{
public:
	FGetLowerEyelidRotationDelta(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayRateFromSpeed
{
public:
	FGetPlayRateFromSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetspeedInAnimation() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMinPlayRate() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMaxPlayRate() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStandLookBlendAlpha
{
public:
	FGetStandLookBlendAlpha(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUpperEyelidRotationDelta
{
public:
	FGetUpperEyelidRotationDelta(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleBumpiness
{
public:
	FGetVehicleBumpiness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleDriverForwardIdleAnimation
{
public:
	FGetVehicleDriverForwardIdleAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBlendSpace GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBlendSpace(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleHandbrakeAmount
{
public:
	FGetVehicleHandbrakeAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehiclePassengerIdleAnimation
{
public:
	FGetVehiclePassengerIdleAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBlendSpace GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBlendSpace(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleSpeed
{
public:
	FGetVehicleSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleSpeedKph
{
public:
	FGetVehicleSpeedKph(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleThrottleAmount
{
public:
	FGetVehicleThrottleAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWeaponAimingNoiseBlendValueOnGameThread
{
public:
	FGetWeaponAimingNoiseBlendValueOnGameThread(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWeaponAimingNoisePlayRateOnGameThread
{
public:
	FGetWeaponAimingNoisePlayRateOnGameThread(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWeaponRelatedIdleStateAnimationPlayRateOnGameThread
{
public:
	FGetWeaponRelatedIdleStateAnimationPlayRateOnGameThread(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAnyStanceTransitionActive
{
public:
	FIsAnyStanceTransitionActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsCourseAngleSupportedByStartAndStopAnimations
{
public:
	FIsCourseAngleSupportedByStartAndStopAnimations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetcourseAngle() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnIdleStateEntry
{
public:
	FOnIdleStateEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FAnimNode_StateMachine GetMachine() {
		return memory.read<struct FAnimNode_StateMachine>(m_addr + 0);
	}
	int32_t GetprevStateIndex() {
		return memory.read<int32_t>(m_addr + 176);
	}
	int32_t GetnextStateIndex() {
		return memory.read<int32_t>(m_addr + 180);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindJumpTime
{
public:
	FFindJumpTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetAnimSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetdistanceToApex() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetafterApex() {
		return memory.read<bool>(m_addr + 12);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateChipLightColorIndex
{
public:
	FNetMulticast_UpdateChipLightColorIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int8_t GetchipLightColor() {
		return memory.read<int8_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UpdateFemaleRepData
{
public:
	FNetMulticast_UpdateFemaleRepData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint64_t GetRepData() {
		return memory.read<uint64_t>(m_addr + 0);
	}
	struct FColor GetEyeshadowColor() {
		return memory.read<struct FColor>(m_addr + 8);
	}
	struct FColor GetEyelinerColor() {
		return memory.read<struct FColor>(m_addr + 12);
	}
	struct FColor GetLipstickColor() {
		return memory.read<struct FColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHairLength
{
public:
	FGetHairLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateWetnessFromPrisoner
{
public:
	FUpdateWetnessFromPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrisonersComboBox_SelectionChanged
{
public:
	FPrisonersComboBox_SelectionChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSelectedItem() {
		return memory.read<struct FString>(m_addr + 0);
	}
	char ESelectInfo GetSelectionType() {
		return memory.read<char ESelectInfo>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FEquipPrisoner
{
public:
	FEquipPrisoner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct TArray<struct AItem> GetgivenItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct AItem>(ptr_addr);
	}
	bool GetClearEquipment() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetapplyOutfit() {
		return memory.read<bool>(m_addr + 25);
	}
	bool GetapplyItems() {
		return memory.read<bool>(m_addr + 26);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanClimb
{
public:
	FCanClimb(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanClimbOntoLadder
{
public:
	FCanClimbOntoLadder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClimb
{
public:
	FClimb(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClimbOntoLadder
{
public:
	FClimbOntoLadder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLadderInfo GetLadderInfo() {
		return memory.read<struct FLadderInfo>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};class FDetectClimbableObstacle
{
public:
	FDetectClimbableObstacle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FClimbableObstacleInfo GetResult() {
		return memory.read<struct FClimbableObstacleInfo>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FDetectLadder
{
public:
	FDetectLadder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLadderInfo GetResult() {
		return memory.read<struct FLadderInfo>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAnticipatedLandingSpot
{
public:
	FGetAnticipatedLandingSpot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetReturnValue() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetClimbableObstacleInfo
{
public:
	FGetClimbableObstacleInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FClimbableObstacleInfo GetReturnValue() {
		return memory.read<struct FClimbableObstacleInfo>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCustomMovementMode
{
public:
	FGetCustomMovementMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGroundSlopeAngle
{
public:
	FGetGroundSlopeAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGroundSlopeAngleForSpeedScaling
{
public:
	FGetGroundSlopeAngleForSpeedScaling(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGroundSlopeAngleSmoothed
{
public:
	FGetGroundSlopeAngleSmoothed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLadderInfo
{
public:
	FGetLadderInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLadderInfo GetReturnValue() {
		return memory.read<struct FLadderInfo>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTimeSpentInAir
{
public:
	FGetTimeSpentInAir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWindowInfo
{
public:
	FGetWindowInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWindowInfo GetReturnValue() {
		return memory.read<struct FWindowInfo>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsClimbing
{
public:
	FIsClimbing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsDiving
{
public:
	FIsDiving(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsFlyingOrFalling
{
public:
	FIsFlyingOrFalling(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FJumpOffLadder
{
public:
	FJumpOffLadder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetjumpVelocity() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_FinishAnchoring
{
public:
	FNetMulticast_FinishAnchoring(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetanchoringSucceded() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_PlayAnimMontageIfSimulatedProxy
{
public:
	FNetMulticast_PlayAnimMontageIfSimulatedProxy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	float GetPlayRate() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetDesiredFallingPose
{
public:
	FServer_SetDesiredFallingPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetPose() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool Getforce() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetDivingState
{
public:
	FServer_SetDivingState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetFallingControlRepData
{
public:
	FServer_SetFallingControlRepData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetRepData() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnResult
{
public:
	FOnResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URuntimeAudioImporterLibrary GetRuntimeAudioImporterObjectRef() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct URuntimeAudioImporterLibrary(ptr_addr);
	}
	struct UImportedSoundWave GetSoundWaveRef() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UImportedSoundWave(ptr_addr);
	}
	uint8_t  GetStatus() {
		return memory.read<uint8_t >(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_UpdateDetectablePrisoners
{
public:
	FServer_UpdateDetectablePrisoners(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct APrisoner> GetdeltaToAdd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct APrisoner>(ptr_addr);
	}
	struct TArray<struct APrisoner> GetdeltaToRemove() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct APrisoner>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_UpdateNearbyFoliageCoverage
{
public:
	FServer_UpdateNearbyFoliageCoverage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetnearbyFoliageCoveragePackedData() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWaitTimeText
{
public:
	FGetWaitTimeText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnOutOfBoundsSoundPercentChanged
{
public:
	FOnOutOfBoundsSoundPercentChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundWave GetPlayingSoundWave() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundWave(ptr_addr);
	}
	float GetPlaybackPercent() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInProgress
{
public:
	FIsInProgress(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayFootstepSounds
{
public:
	FPlayFootstepSounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char EPhysicalSurface GetinPhysicalSurface() {
		return memory.read<char EPhysicalSurface>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayMovingThroughFoliageSounds
{
public:
	FPlayMovingThroughFoliageSounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetStartAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}
	struct UAkAudioEvent GetStopAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAkAudioEvent(ptr_addr);
	}
	uint8_t  GetmotionIntensity() {
		return memory.read<uint8_t >(m_addr + 16);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopMovingThroughFoliageSounds
{
public:
	FStopMovingThroughFoliageSounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPlayingID() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateMovingThroughFoliageSounds
{
public:
	FUpdateMovingThroughFoliageSounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPlayingID() {
		return memory.read<int32_t>(m_addr + 0);
	}
	uint8_t  GetmotionIntensity() {
		return memory.read<uint8_t >(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 5);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAdditionalPenisInchesBasedOnTotalPlayTime
{
public:
	FGetAdditionalPenisInchesBasedOnTotalPlayTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrisonerCommonData GetcommonData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrisonerCommonData(ptr_addr);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrisonerEnergy
{
public:
	FGetPrisonerEnergy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrisonerHydration
{
public:
	FGetPrisonerHydration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrisonerStaminaRatio
{
public:
	FGetPrisonerStaminaRatio(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnStop
{
public:
	FOnStop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetProgressIndex
{
public:
	FSetProgressIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetprogressIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetItemOpacity
{
public:
	FSetItemOpacity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetInvalidate() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FThrowingModePressed
{
public:
	FThrowingModePressed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIsChecked() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FProvideNextRadioCategory
{
public:
	FProvideNextRadioCategory(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URadioCategory GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct URadioCategory(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_SendNextTrack
{
public:
	FMulticast_SendNextTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URadioTrack GetTrack() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct URadioTrack(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnResourceAmountChanged
{
public:
	FOnResourceAmountChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBasicGameResourceContainerComponent GetcontainerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBasicGameResourceContainerComponent(ptr_addr);
	}
	float GetnewAmount() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_CreateReplenishableResource
{
public:
	FNetMulticast_CreateReplenishableResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FReplenishableResourceDescription GetDescription() {
		return memory.read<struct FReplenishableResourceDescription>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_DestroyReplenishableResource
{
public:
	FNetMulticast_DestroyReplenishableResource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FPackedLocation GetID() {
		return memory.read<struct FPackedLocation>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ReserveReplenishableResourceSlot
{
public:
	FNetMulticast_ReserveReplenishableResourceSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FPackedLocation GetID() {
		return memory.read<struct FPackedLocation>(m_addr + 8);
	}
	int32_t GetSlotIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetResourceAmountRatio
{
public:
	FGetResourceAmountRatio(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_UnlockIntersectingAreas
{
public:
	FNetMulticast_UnlockIntersectingAreas(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FBox GetArea() {
		return memory.read<struct FBox>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_RemoveMeshInstance
{
public:
	FNetMulticast_RemoveMeshInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct UInstancedStaticMeshComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UInstancedStaticMeshComponent(ptr_addr);
	}
	struct FRestorableMeshInstanceId GetInstanceId() {
		return memory.read<struct FRestorableMeshInstanceId>(m_addr + 16);
	}
	struct FTransform GetInstanceTransform() {
		return memory.read<struct FTransform>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_RestoreRemovedMeshInstance
{
public:
	FNetMulticast_RestoreRemovedMeshInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FRestorableMeshInstanceId GetInstanceId() {
		return memory.read<struct FRestorableMeshInstanceId>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextChanged
{
public:
	FTextChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_HandleHit
{
public:
	FNetMulticast_HandleHit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GethitDirectionType() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_PlayMeleeAttackMontage
{
public:
	FNetMulticast_PlayMeleeAttackMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetkickIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FObstacleCapsuleBeginOverlap
{
public:
	FObstacleCapsuleBeginOverlap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetOverlappedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	int32_t GetOtherBodyIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}
	bool GetbFromSweep() {
		return memory.read<bool>(m_addr + 28);
	}
	struct FHitResult GetSweepResult() {
		return memory.read<struct FHitResult>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSensingComponent_OnSensePawn
{
public:
	FSensingComponent_OnSensePawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AActor> GetactorsPercepted() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadLayout
{
public:
	FLoadLayout(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TScriptInterface<IAttributeMapInterface> GetAttributes() {
		return memory.read<struct TScriptInterface<IAttributeMapInterface>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDirectConnectTextBoxTextChanged
{
public:
	FOnDirectConnectTextBoxTextChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDirectConnectTextBoxTextCommitted
{
public:
	FOnDirectConnectTextBoxTextCommitted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	char ETextCommit GetCommitMethod() {
		return memory.read<char ETextCommit>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnPasswordPopupTextBoxTextCommitted
{
public:
	FOnPasswordPopupTextBoxTextCommitted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	char ETextCommit GetCommitMethod() {
		return memory.read<char ETextCommit>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnSearchBoxTextChanged
{
public:
	FOnSearchBoxTextChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDataSingleton
{
public:
	FGetDataSingleton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDataSingleton GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDataSingleton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetType
{
public:
	FSetType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char ESortByType GetsortType() {
		return memory.read<char ESortByType>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentCurrencyText
{
public:
	FGetCurrentCurrencyText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRemainingCurrencyText
{
public:
	FGetRemainingCurrencyText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRemainingCurrencyTextColorAndOpacity
{
public:
	FGetRemainingCurrencyTextColorAndOpacity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateColor GetReturnValue() {
		return memory.read<struct FSlateColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRespawnDisabledLabelText
{
public:
	FGetRespawnDisabledLabelText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSectorId
{
public:
	FGetSectorId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetX() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetY() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FSectorId GetReturnValue() {
		return memory.read<struct FSectorId>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSectorSelectorVisibility
{
public:
	FGetSectorSelectorVisibility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTotalPriceText
{
public:
	FGetTotalPriceText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSelectLocation
{
public:
	FSelectLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USpawnChoiceWidget GetButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USpawnChoiceWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRespawnButtonVisibility
{
public:
	FGetRespawnButtonVisibility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSelectSector
{
public:
	FSelectSector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton GetButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSphereComponent_OnComponentBeginOverlap
{
public:
	FSphereComponent_OnComponentBeginOverlap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetOverlappedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	int32_t GetOtherBodyIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}
	bool GetbFromSweep() {
		return memory.read<bool>(m_addr + 28);
	}
	struct FHitResult GetSweepResult() {
		return memory.read<struct FHitResult>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSphereComponent_OnComponentEndOverlap
{
public:
	FSphereComponent_OnComponentEndOverlap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetactivatedComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	int32_t GetOtherBodyIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnColorClicked
{
public:
	FOnColorClicked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDropdownMenuSelectionWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDropdownMenuSelectionWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerProcessVoiceChatData
{
public:
	FServerProcessVoiceChatData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetcompressedVoiceDataBuffer() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnSymbolClicked
{
public:
	FOnSymbolClicked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDropdownMenuSelectionWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDropdownMenuSelectionWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTextChangedInformationTextBox
{
public:
	FOnTextChangedInformationTextBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTextChangedMessageTextBox
{
public:
	FOnTextChangedMessageTextBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTextCommittedNameTextBox
{
public:
	FOnTextCommittedNameTextBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	char ETextCommit GetCommitMethod() {
		return memory.read<char ETextCommit>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEmblemData
{
public:
	FSetEmblemData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FConZSquadEmblem GetValue() {
		return memory.read<struct FConZSquadEmblem>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_OnDoorRepDataChanged
{
public:
	FNetMulticast_OnDoorRepDataChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdataVersion() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetdoorLocationZeroOrigin() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FDoorRepData GetRepData() {
		return memory.read<struct FDoorRepData>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdate
{
public:
	FUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetUp() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FVector2D GetOffset() {
		return memory.read<struct FVector2D>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTeamDeathmatchParameters
{
public:
	FGetTeamDeathmatchParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTeamDeathmatchParameters GetReturnValue() {
		return memory.read<struct FTeamDeathmatchParameters>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartTimer
{
public:
	FStartTimer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimeout() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetValue
{
public:
	FGetValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetValueInt
{
public:
	FGetValueInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnProjectileBounced
{
public:
	FOnProjectileBounced(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetImpactResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	struct FVector GetImpactVelocity() {
		return memory.read<struct FVector>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FInitFromCaptionAndDescription
{
public:
	FInitFromCaptionAndDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetCaption() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetDescription() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInitFromItem
{
public:
	FInitFromItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasEnded
{
public:
	FHasEnded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_PlayAnnouncement
{
public:
	FMulticast_PlayAnnouncement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAkAudioEvent GetAudioEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAkAudioEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnComboBoXSelectionChanged
{
public:
	FOnComboBoXSelectionChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSelectedIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanDropIfDraggingItem
{
public:
	FCanDropIfDraggingItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetdraggedObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct APawn GetdraggingPlayerPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APawn(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FColorToHex
{
public:
	FColorToHex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateColor GetColor() {
		return memory.read<struct FSlateColor>(m_addr + 0);
	}
	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAgeModifiersFromAge
{
public:
	FGetAgeModifiersFromAge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetAge() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAttributesFromMuscularAndFatFactors
{
public:
	FGetAttributesFromMuscularAndFatFactors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getmuscular() {
		return memory.read<float>(m_addr + 0);
	}
	float GetFat() {
		return memory.read<float>(m_addr + 4);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDataForFieldName
{
public:
	FGetDataForFieldName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UStruct Getstr() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UStruct(ptr_addr);
	}
	struct UStruct GetType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UStruct(ptr_addr);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMuscleLeanFatFactorsFromCoordinates
{
public:
	FGetMuscleLeanFatFactorsFromCoordinates(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetCoordinates() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWidgetParentOfType
{
public:
	FGetWidgetParentOfType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UWidget(ptr_addr);
	}
	UWidget GetType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UWidget(ptr_addr);
	}
	bool GetincludeUserWidgets() {
		return memory.read<bool>(m_addr + 16);
	}
	struct UWidget GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnContainerScrollBoxScrolled
{
public:
	FOnContainerScrollBoxScrolled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCurrentOffset() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddFavoriteServer
{
public:
	FAddFavoriteServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FUserServerHistoryItem GetItem() {
		return memory.read<struct FUserServerHistoryItem>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateDefaultProfile
{
public:
	FCreateDefaultProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct UUserProfile GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UUserProfile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateProfileFromTemplate
{
public:
	FCreateProfileFromTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FCharacterTemplate GetValue() {
		return memory.read<struct FCharacterTemplate>(m_addr + 8);
	}
	struct UUserProfile GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UUserProfile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDeleteProfile
{
public:
	FDeleteProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetID() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindProfiles
{
public:
	FFindProfiles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct TArray<struct UUserProfile> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UUserProfile>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFavoriteServers
{
public:
	FGetFavoriteServers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FUserServerHistoryItem> GetReturnValue() {
		return memory.read<struct TArray<struct FUserServerHistoryItem>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetId
{
public:
	FGetId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetReturnValue() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsBanned
{
public:
	FGetIsBanned(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLastLoginTime
{
public:
	FGetLastLoginTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasProfileWithName
{
public:
	FHasProfileWithName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetType() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleVelocity
{
public:
	FGetVehicleVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveFavoriteServer
{
public:
	FRemoveFavoriteServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FUserServerHistoryItem GetItem() {
		return memory.read<struct FUserServerHistoryItem>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveFavoriteServerAt
{
public:
	FRemoveFavoriteServerAt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIsBanned
{
public:
	FSetIsBanned(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetProvider
{
public:
	FSetProvider(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRecentServers
{
public:
	FSetRecentServers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FUserServerHistoryItem> GetValue() {
		return memory.read<struct TArray<struct FUserServerHistoryItem>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCreationTemplateXml
{
public:
	FGetCreationTemplateXml(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLastLogoutTime
{
public:
	FGetLastLogoutTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUser
{
public:
	FGetUser(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UUser GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UUser(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsProfileMarkedForDeletion
{
public:
	FIsProfileMarkedForDeletion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadCharacterTemplate
{
public:
	FLoadCharacterTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterTemplate GetReturnValue() {
		return memory.read<struct FCharacterTemplate>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCreationTemplateXml
{
public:
	FSetCreationTemplateXml(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLastLogoutTime
{
public:
	FSetLastLogoutTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetValue() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FApplyImpactDamage
{
public:
	FApplyImpactDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamage() {
		return memory.read<float>(m_addr + 0);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 4);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAreVehicleLightsActive
{
public:
	FAreVehicleLightsActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMass
{
public:
	FGetMass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxVehicleFuelAmount
{
public:
	FGetMaxVehicleFuelAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumVehicleForwardGears
{
public:
	FGetNumVehicleForwardGears(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleBatteryAmount
{
public:
	FGetVehicleBatteryAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleBatteryAmountRatio
{
public:
	FGetVehicleBatteryAmountRatio(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleBatteryResourceType
{
public:
	FGetVehicleBatteryResourceType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UGameResourceType(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsWorldStreamed
{
public:
	FIsWorldStreamed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleEngineBlockHealth
{
public:
	FGetVehicleEngineBlockHealth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleFuelAmount
{
public:
	FGetVehicleFuelAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleFuelAmountRatio
{
public:
	FGetVehicleFuelAmountRatio(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleFuelResourceType
{
public:
	FGetVehicleFuelResourceType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UGameResourceType GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UGameResourceType(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleHealthRatio
{
public:
	FGetVehicleHealthRatio(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleWheelsSteerAmount
{
public:
	FGetVehicleWheelsSteerAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsVehicleDoorCollisionAttached
{
public:
	FIsVehicleDoorCollisionAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdoorIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsVehicleDoorWindowCollisionAttached
{
public:
	FIsVehicleDoorWindowCollisionAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdoorIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsVehicleHornActive
{
public:
	FIsVehicleHornActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsVehicleInAir
{
public:
	FIsVehicleInAir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsVehicleUpright
{
public:
	FIsVehicleUpright(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsVehicleWheelTireDeflated
{
public:
	FIsVehicleWheelTireDeflated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetWheelIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadState
{
public:
	FLoadState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetID() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSaveState
{
public:
	FSaveState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDbIntegerId GetID() {
		return memory.read<struct FDbIntegerId>(m_addr + 0);
	}
	struct FDbIntegerId GetReturnValue() {
		return memory.read<struct FDbIntegerId>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleBatteryAmount
{
public:
	FSetVehicleBatteryAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleBrakeAmount
{
public:
	FSetVehicleBrakeAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleDoorCollisionAttached
{
public:
	FSetVehicleDoorCollisionAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetdoorIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleEngineBlockHealth
{
public:
	FSetVehicleEngineBlockHealth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleFreeLookEnabled
{
public:
	FSetVehicleFreeLookEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleFuelAmount
{
public:
	FSetVehicleFuelAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleGearUp
{
public:
	FSetVehicleGearUp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleHandbrakeAmount
{
public:
	FSetVehicleHandbrakeAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleHealth
{
public:
	FSetVehicleHealth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVehicleHasBattery
{
public:
	FVehicleHasBattery(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleHornActive
{
public:
	FSetVehicleHornActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleSteerAmount
{
public:
	FSetVehicleSteerAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVehicleThrottleAmount
{
public:
	FSetVehicleThrottleAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldShowVehicleHud
{
public:
	FShouldShowVehicleHud(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMesh
{
public:
	FGetMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnVehicle
{
public:
	FSpawnVehicle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor GetvehicleClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AActor(ptr_addr);
	}
	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAirplaneWings
{
public:
	FGetAirplaneWings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAirplaneWingHitZoneData> GetReturnValue() {
		return memory.read<struct TArray<struct FAirplaneWingHitZoneData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDoors
{
public:
	FGetDoors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVehicleHitZoneData> GetReturnValue() {
		return memory.read<struct TArray<struct FVehicleHitZoneData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDoorWindows
{
public:
	FGetDoorWindows(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVehicleHitZoneData> GetReturnValue() {
		return memory.read<struct TArray<struct FVehicleHitZoneData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVehicleHitMeshName
{
public:
	FGetVehicleHitMeshName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAttachedVehicleDestroyed
{
public:
	FOnAttachedVehicleDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetDestroyedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanExecutePrisonerAction
{
public:
	FCanExecutePrisonerAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct UPrisonerActionDescription Getdesc() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UPrisonerActionDescription(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanPrisonerEnterCombatModeUsingItem
{
public:
	FCanPrisonerEnterCombatModeUsingItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APrisoner GetPrisoner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APrisoner(ptr_addr);
	}
	struct AItem GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AItem(ptr_addr);
	}
	uint8_t  Getstance() {
		return memory.read<uint8_t >(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnCheckBoxCheckedChanged
{
public:
	FOnCheckBoxCheckedChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getchecked() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnVicinityContainerClosed
{
public:
	FOnVicinityContainerClosed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemWidget2 GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UItemWidget2(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientReceiveVoiceData
{
public:
	FClientReceiveVoiceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVoiceChatComponent Getfrom() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UVoiceChatComponent(ptr_addr);
	}
	struct TArray<char> GetcompressedVoiceDataBuffer() {
		return memory.read<struct TArray<char>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCompressedVoiceData
{
public:
	FGetCompressedVoiceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetOutBuffer() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateVoiceDecoder
{
public:
	FCreateVoiceDecoder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UVoiceDecoder GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UVoiceDecoder(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDecompressVoiceData
{
public:
	FDecompressVoiceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetInCompressedVoiceData() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}
	int32_t GetInCompressedVoiceBytes() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct TArray<char> GetOutDecompressedVoiceData() {
		return memory.read<struct TArray<char>>(m_addr + 24);
	}
	int32_t GetOutDecompressedVoiceBytes() {
		return memory.read<int32_t>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FInitFromWarningType
{
public:
	FInitFromWarningType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetwarningType() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanExecuteForWeapon
{
public:
	FCanExecuteForWeapon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWeapon GetWeapon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWeapon(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCapacity
{
public:
	FGetCapacity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTopmostAmmunitionData
{
public:
	FGetTopmostAmmunitionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FAmmunitionData GetData() {
		return memory.read<struct FAmmunitionData>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTopmostProjectileClass
{
public:
	FGetTopmostProjectileClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AProjectile GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AProjectile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAmmoSupported
{
public:
	FIsAmmoSupported(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionItem Getammo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionItem(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticast_SetLoadedVariables
{
public:
	FMulticast_SetLoadedVariables(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAmmunitionData> Getammo() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_InsertAmmoSingle
{
public:
	FServer_InsertAmmoSingle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionItem GetammoItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAmmo
{
public:
	FSetAmmo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAmmunitionData> Getammo() {
		return memory.read<struct TArray<struct FAmmunitionData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFollowerBoneLocationOffset
{
public:
	FGetFollowerBoneLocationOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanInsertArrow
{
public:
	FCanInsertArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionArrow GetarrowItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionArrow(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDrawPercentageDefaultsForParameters
{
public:
	FGetDrawPercentageDefaultsForParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetcharacterDrawWeight() {
		return memory.read<float>(m_addr + 0);
	}
	float GetbowDrawWeight() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDrawWeight
{
public:
	FGetDrawWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOwnersDrawWeightByStrength
{
public:
	FGetOwnersDrawWeightByStrength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOwnersTotalDrawWeight
{
public:
	FGetOwnersTotalDrawWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPendingArrow
{
public:
	FGetPendingArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionArrow GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionArrow(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_InsertArrow
{
public:
	FServer_InsertArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionArrow Getarrow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionArrow(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetDrawAmount
{
public:
	FServer_SetDrawAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetdrawAmount() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_SetPendingArrow
{
public:
	FServer_SetPendingArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AAmmunitionArrow Getarrow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AAmmunitionArrow(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDrawWeight
{
public:
	FSetDrawWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetdrawWeight() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDrawCategory
{
public:
	FGetDrawCategory(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetReturnValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_SetLoadedVariablesForRevolver
{
public:
	FNetMulticast_SetLoadedVariablesForRevolver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetammoIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_PlayFiringAnimation
{
public:
	FServer_PlayFiringAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetammoIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetdryFire() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_RollDrum
{
public:
	FServer_RollDrum(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServer_UseAmmoAtIndex
{
public:
	FServer_UseAmmoAtIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClient_SetLoadedVariables
{
public:
	FClient_SetLoadedVariables(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetWindage() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetdisplayBrightnessMultiplier() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetMulticast_ResetStateSnapshots
{
public:
	FNetMulticast_ResetStateSnapshots(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWeatherReplicatedStateSnapshot GetSnapshot() {
		return memory.read<struct FWeatherReplicatedStateSnapshot>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxWaterWeight
{
public:
	FGetMaxWaterWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDriverPhysicsCapsuleComponent
{
public:
	FGetDriverPhysicsCapsuleComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWheelBarrowDriverCapsuleComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UWheelBarrowDriverCapsuleComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDistanceToClosestPlayerPawnOrSpectator
{
public:
	FGetDistanceToClosestPlayerPawnOrSpectator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWorld GetWorld() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UWorld(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEnvironmentDescriptionAtLocation
{
public:
	FGetEnvironmentDescriptionAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FEnvironmentDescription GetReturnValue() {
		return memory.read<struct FEnvironmentDescription>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetExtraAirTemperatureFromHeatSourcesAtLocation
{
public:
	FGetExtraAirTemperatureFromHeatSourcesAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRadiationAmountIncreaseRateAtLocation
{
public:
	FGetRadiationAmountIncreaseRateAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsEnvironmentClassOutdoor
{
public:
	FIsEnvironmentClassOutdoor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint8_t  GetValue() {
		return memory.read<uint8_t >(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsEveryStreamedLevelLoadedAtLocation
{
public:
	FIsEveryStreamedLevelLoadedAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsLocationInCustomZone
{
public:
	FIsLocationInCustomZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsLocationOverWaterSurface
{
public:
	FIsLocationOverWaterSurface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDisplayBrightness
{
public:
	FSetDisplayBrightness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDialogMessage
{
public:
	FSetDialogMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};